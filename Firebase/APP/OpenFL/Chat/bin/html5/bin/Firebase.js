(function ($hx_exports) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.app = null;
ApplicationMain.create = function() {
	ApplicationMain.app = new openfl.display.Application();
	ApplicationMain.app.create(ApplicationMain.config);
	var display = new NMEPreloader();
	ApplicationMain.preloader = new openfl.display.Preloader(display);
	ApplicationMain.preloader.onComplete = ApplicationMain.init;
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("Oxygen Bold");
	types.push("FONT");
	urls.push("Oxygen Regular");
	types.push("FONT");
	urls.push("assets/styles/default/circle.png");
	types.push("IMAGE");
	urls.push("assets/styles/default/collapse.png");
	types.push("IMAGE");
	urls.push("assets/styles/default/cross.png");
	types.push("IMAGE");
	urls.push("assets/styles/default/expand.png");
	types.push("IMAGE");
	urls.push("assets/styles/default/up_down.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_down.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_down_dark.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_down_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_left.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_left_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_right.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_right2.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_right_dark.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_right_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_up.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/arrow_up_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/circle_dark.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/cross_dark.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/cross_dark_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/cross_light_small.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/gradient.css");
	types.push("TEXT");
	urls.push("assets/styles/gradient/gradient.min.css");
	types.push("TEXT");
	urls.push("assets/styles/gradient/gradient_mobile.css");
	types.push("TEXT");
	urls.push("assets/styles/gradient/gradient_mobile.min.css");
	types.push("TEXT");
	urls.push("assets/styles/gradient/gripper_horizontal.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/gripper_horizontal_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/gripper_vertical.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/gripper_vertical_disabled.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/hsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("assets/styles/gradient/vsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/accordion.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/accordion.min.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/button.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/buttons.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/buttons.min.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/calendar.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/checkbox.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/container.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/down_arrow.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/hscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/hscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/hscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/left_arrow.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/right_arrow.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/up_arrow.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/vscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/vscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/glyphs/vscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/hprogress.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/hscroll.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/listview.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/listview.min.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/listview.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/menus.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/optionbox.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/popup.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/popups.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/rtf.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/scrolls.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/scrolls.min.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/sliders.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/tab.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/tabs.css");
	types.push("TEXT");
	urls.push("assets/styles/windows/textinput.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/vprogress.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/vscroll.png");
	types.push("IMAGE");
	urls.push("assets/styles/windows/windows.css");
	types.push("TEXT");
	urls.push("styles/default/circle.png");
	types.push("IMAGE");
	urls.push("styles/default/collapse.png");
	types.push("IMAGE");
	urls.push("styles/default/cross.png");
	types.push("IMAGE");
	urls.push("styles/default/expand.png");
	types.push("IMAGE");
	urls.push("styles/default/up_down.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_down.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_down_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_down_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_left.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_left_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right2.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_right_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_up.png");
	types.push("IMAGE");
	urls.push("styles/gradient/arrow_up_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/circle_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/cross_dark.png");
	types.push("IMAGE");
	urls.push("styles/gradient/cross_dark_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/cross_light_small.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gradient.css");
	types.push("TEXT");
	urls.push("styles/gradient/gradient.min.css");
	types.push("TEXT");
	urls.push("styles/gradient/gradient_mobile.css");
	types.push("TEXT");
	urls.push("styles/gradient/gradient_mobile.min.css");
	types.push("TEXT");
	urls.push("styles/gradient/gripper_horizontal.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gripper_horizontal_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gripper_vertical.png");
	types.push("IMAGE");
	urls.push("styles/gradient/gripper_vertical_disabled.png");
	types.push("IMAGE");
	urls.push("styles/gradient/hsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("styles/gradient/vsplitter_gripper.png");
	types.push("IMAGE");
	urls.push("styles/windows/accordion.css");
	types.push("TEXT");
	urls.push("styles/windows/accordion.min.css");
	types.push("TEXT");
	urls.push("styles/windows/button.png");
	types.push("IMAGE");
	urls.push("styles/windows/buttons.css");
	types.push("TEXT");
	urls.push("styles/windows/buttons.min.css");
	types.push("TEXT");
	urls.push("styles/windows/calendar.css");
	types.push("TEXT");
	urls.push("styles/windows/checkbox.png");
	types.push("IMAGE");
	urls.push("styles/windows/container.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/down_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/hscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/hscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/hscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/left_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/right_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/up_arrow.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/vscroll_thumb_gripper_down.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/vscroll_thumb_gripper_over.png");
	types.push("IMAGE");
	urls.push("styles/windows/glyphs/vscroll_thumb_gripper_up.png");
	types.push("IMAGE");
	urls.push("styles/windows/hprogress.png");
	types.push("IMAGE");
	urls.push("styles/windows/hscroll.png");
	types.push("IMAGE");
	urls.push("styles/windows/listview.css");
	types.push("TEXT");
	urls.push("styles/windows/listview.min.css");
	types.push("TEXT");
	urls.push("styles/windows/listview.png");
	types.push("IMAGE");
	urls.push("styles/windows/menus.css");
	types.push("TEXT");
	urls.push("styles/windows/optionbox.png");
	types.push("IMAGE");
	urls.push("styles/windows/popup.png");
	types.push("IMAGE");
	urls.push("styles/windows/popups.css");
	types.push("TEXT");
	urls.push("styles/windows/rtf.css");
	types.push("TEXT");
	urls.push("styles/windows/scrolls.css");
	types.push("TEXT");
	urls.push("styles/windows/scrolls.min.css");
	types.push("TEXT");
	urls.push("styles/windows/sliders.css");
	types.push("TEXT");
	urls.push("styles/windows/tab.png");
	types.push("IMAGE");
	urls.push("styles/windows/tabs.css");
	types.push("TEXT");
	urls.push("styles/windows/textinput.png");
	types.push("IMAGE");
	urls.push("styles/windows/vprogress.png");
	types.push("IMAGE");
	urls.push("styles/windows/vscroll.png");
	types.push("IMAGE");
	urls.push("styles/windows/windows.css");
	types.push("TEXT");
	urls.push("Oxygen Bold");
	types.push("FONT");
	urls.push("Oxygen Regular");
	types.push("FONT");
	urls.push("img/b0.png");
	types.push("IMAGE");
	urls.push("img/b1.png");
	types.push("IMAGE");
	urls.push("img/b2.png");
	types.push("IMAGE");
	urls.push("ui/form.xml");
	types.push("TEXT");
	ApplicationMain.preloader.load(urls,types);
	var result = ApplicationMain.app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(loaded == total) ApplicationMain.start();
};
ApplicationMain.main = function() {
	ApplicationMain.config = { antialiasing : 0, background : 0, borderless : false, depthBuffer : false, fps : 60, fullscreen : false, height : 480, orientation : "", resizable : true, stencilBuffer : false, title : "Firebase", vsync : false, width : 800};
};
ApplicationMain.start = function() {
	openfl.Lib.current.stage.align = openfl.display.StageAlign.TOP_LEFT;
	openfl.Lib.current.stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	var hasMain = false;
	var _g = 0;
	var _g1 = Type.getClassFields(Main);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	if(hasMain) Reflect.callMethod(Main,Reflect.field(Main,"main"),[]); else {
		var instance = Type.createInstance(DocumentClass,[]);
	}
	openfl.Lib.current.stage.dispatchEvent(new openfl.events.Event(openfl.events.Event.RESIZE,false,false));
};
var openfl = {};
openfl.events = {};
openfl.events.IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl.events.IEventDispatcher;
openfl.events.IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl.events.IEventDispatcher.prototype = {
	__class__: openfl.events.IEventDispatcher
};
openfl.events.EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl.events.EventDispatcher;
openfl.events.EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl.events.EventDispatcher.__interfaces__ = [openfl.events.IEventDispatcher];
openfl.events.EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl.events.EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null) this.__eventMap = new haxe.ds.StringMap();
		if(!this.__eventMap.exists(type)) {
			var list = new Array();
			list.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) return;
			}
			list1.push(new openfl.events._EventDispatcher.Listener(listener,useCapture,priority));
			list1.sort(openfl.events.EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return false;
		var list = this.__eventMap.get(event.type);
		if(list == null) return false;
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == openfl.events.EventPhase.CAPTURING_PHASE;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCancelledNow) return true;
			}
			if(listener == list[index]) index++;
		}
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,capture) {
		if(capture == null) capture = false;
		if(this.__eventMap == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,capture)) {
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) this.__eventMap.remove(type);
		if(!this.__eventMap.iterator().hasNext()) this.__eventMap = null;
	}
	,toString: function() {
		var full = Type.getClassName(Type.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__class__: openfl.events.EventDispatcher
};
openfl.display = {};
openfl.display.IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl.display.IBitmapDrawable;
openfl.display.IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl.display.IBitmapDrawable.prototype = {
	__class__: openfl.display.IBitmapDrawable
};
openfl.display.DisplayObject = function() {
	openfl.events.EventDispatcher.call(this);
	this.set_alpha(1);
	this.set_rotation(0);
	this.set_scaleX(1);
	this.set_scaleY(1);
	this.set_visible(true);
	this.set_x(0);
	this.set_y(0);
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl.geom.Matrix();
	this.__rotationCache = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.set_name("instance" + ++openfl.display.DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl.display.DisplayObject;
openfl.display.DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl.display.DisplayObject.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.DisplayObject.__super__ = openfl.events.EventDispatcher;
openfl.display.DisplayObject.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	dispatchEvent: function(event) {
		var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
		if(event.__isCancelled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
			this.parent.dispatchEvent(event);
		}
		return result;
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = this.__getTransform();
		if(targetCoordinateSpace != null) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			matrix.concat(targetCoordinateSpace.__worldTransform.clone().invert());
		}
		var bounds = new openfl.geom.Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__getTransform().clone().invert().transformPoint(pos);
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.parent != null) {
			var currentBounds = this.getBounds(this);
			return currentBounds.containsPoint(new openfl.geom.Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl.events.EventDispatcher.prototype.dispatchEvent.call(this,event);
			if(event.__isCancelled) return true;
			return result;
		}
		return false;
	}
	,__getBounds: function(rect,matrix) {
	}
	,__getInteractive: function(stack) {
	}
	,__getLocalBounds: function(rect) {
		this.__getTransform();
		this.__getBounds(rect,new openfl.geom.Matrix());
	}
	,__getTransform: function() {
		if(openfl.display.DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			while(current.parent != null) {
				list.push(current);
				current = current.parent;
				if(current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		return false;
	}
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
	}
	,__renderMask: function(renderSession) {
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl.display.DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(this.get_rotation() != this.__rotationCache) {
			this.__rotationCache = this.get_rotation();
			var radians = this.get_rotation() * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
		}
		if(this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var a00 = this.__rotationCosine * this.get_scaleX();
			var a01 = this.__rotationSine * this.get_scaleX();
			var a10 = -this.__rotationSine * this.get_scaleY();
			var a11 = this.__rotationCosine * this.get_scaleY();
			var b00 = parentTransform.a;
			var b01 = parentTransform.b;
			var b10 = parentTransform.c;
			var b11 = parentTransform.d;
			this.__worldTransform.a = a00 * b00 + a01 * b10;
			this.__worldTransform.b = a00 * b01 + a01 * b11;
			this.__worldTransform.c = a10 * b00 + a11 * b10;
			this.__worldTransform.d = a10 * b01 + a11 * b11;
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x() * b00 + this.get_y() * b10 + parentTransform.tx;
				this.__worldTransform.ty = this.get_x() * b01 + this.get_y() * b11 + parentTransform.ty;
			} else {
				this.__worldTransform.tx = (this.get_x() - this.get_scrollRect().x) * b00 + (this.get_y() - this.get_scrollRect().y) * b10 + parentTransform.tx;
				this.__worldTransform.ty = (this.get_x() - this.get_scrollRect().x) * b01 + (this.get_y() - this.get_scrollRect().y) * b11 + parentTransform.ty;
			}
		} else {
			this.__worldTransform.a = this.__rotationCosine * this.get_scaleX();
			this.__worldTransform.c = -this.__rotationSine * this.get_scaleY();
			this.__worldTransform.b = this.__rotationSine * this.get_scaleX();
			this.__worldTransform.d = this.__rotationCosine * this.get_scaleY();
			if(this.get_scrollRect() == null) {
				this.__worldTransform.tx = this.get_x();
				this.__worldTransform.ty = this.get_y();
			} else {
				this.__worldTransform.tx = this.get_y() - this.get_scrollRect().x;
				this.__worldTransform.ty = this.get_y() - this.get_scrollRect().y;
			}
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly) {
			if(this.parent != null) this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha; else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) return;
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl.display.DisplayObject.__worldTransformDirty--;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_filters: function() {
		if(this.__filters == null) return new Array(); else return this.__filters.slice();
	}
	,set_filters: function(value) {
		return value;
	}
	,get_height: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.height * this.get_scaleY();
	}
	,set_height: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) this.__mask.__isMask = false;
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(this.stage.__mouseX,0)).x;
		return 0;
	}
	,get_mouseY: function() {
		if(this.stage != null) return this.globalToLocal(new openfl.geom.Point(0,this.stage.__mouseY)).y;
		return 0;
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl.Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__rotation = value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleX = value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(this.__scaleY != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scaleY = value;
	}
	,get_scrollRect: function() {
		return this.__scrollRect;
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		return this.__transform;
	}
	,set_transform: function(value) {
		if(value == null) throw new openfl.errors.TypeError("Parameter transform must be non-null.");
		if(this.__transform == null) this.__transform = new openfl.geom.Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl.display.DisplayObject.__worldTransformDirty++;
		}
		this.__transform.set_matrix(value.get_matrix().clone());
		this.__transform.colorTransform = new openfl.geom.ColorTransform(value.colorTransform.redMultiplier,value.colorTransform.greenMultiplier,value.colorTransform.blueMultiplier,value.colorTransform.alphaMultiplier,value.colorTransform.redOffset,value.colorTransform.greenOffset,value.colorTransform.blueOffset,value.colorTransform.alphaOffset);
		return this.__transform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		return bounds.width * this.get_scaleX();
	}
	,set_width: function(value) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		if(value != this.__x) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__x = value;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		if(value != this.__y) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__y = value;
	}
	,__class__: openfl.display.DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
openfl.display.InteractiveObject = function() {
	openfl.display.DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.tabEnabled = true;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl.display.InteractiveObject;
openfl.display.InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl.display.InteractiveObject.__super__ = openfl.display.DisplayObject;
openfl.display.InteractiveObject.prototype = $extend(openfl.display.DisplayObject.prototype,{
	requestSoftKeyboard: function() {
		openfl.Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		stack.push(this);
		if(this.parent != null) this.parent.__getInteractive(stack);
	}
	,__class__: openfl.display.InteractiveObject
});
openfl.display.DisplayObjectContainer = function() {
	openfl.display.InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = new Array();
	this.__removedChildren = new Array();
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl.display.DisplayObjectContainer;
openfl.display.DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl.display.DisplayObjectContainer.__super__ = openfl.display.InteractiveObject;
openfl.display.DisplayObjectContainer.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	addChild: function(child) {
		if(child != null) {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw "Invalid index position " + index;
		if(child.parent == this) HxOverrides.remove(this.__children,child); else {
			if(child.parent != null) child.parent.removeChild(child);
			child.parent = this;
			if(this.stage != null) child.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl.events.Event(openfl.events.Event.ADDED,true);
			event.target = child;
			child.dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return HxOverrides.indexOf(this.__children,child,0) > -1;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		point = this.localToGlobal(point);
		var stack = new Array();
		this.__hitTest(point.x,point.y,false,stack,false);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(this.stage != null) child.__setStageReference(null);
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl.display.DisplayObject.__worldRenderDirty++;
			}
			child.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED,true));
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new openfl.errors.RangeError("The supplied index is out of bounds.");
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(child1,child2) {
		var swap = this.__children[child1];
		this.__children[child1] = this.__children[child2];
		this.__children[child2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) event.target = this;
		if(notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCancelled) return true;
			}
		}
		return openfl.display.InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
	}
	,__getBounds: function(rect,matrix) {
		if(this.__children.length == 0) return;
		var matrixCache = null;
		if(matrix != null) {
			matrixCache = this.__worldTransform;
			this.__worldTransform = matrix;
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.__renderable) continue;
			child.__getBounds(rect,null);
		}
		if(matrix != null) {
			this.__worldTransform = matrixCache;
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true)) {
					if(stack != null) stack.push(this);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,interactiveOnly)) {
					stack.splice(length,0,this);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false);
		return false;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.get_scrollRect() != null) {
		}
		if(this.__mask != null) {
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		this.__removedChildren = [];
		if(this.__mask != null) {
		}
		if(this.get_scrollRect() != null) {
		}
	}
	,__renderDOM: function(renderSession) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren = [];
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		this.__removedChildren = [];
	}
	,__renderMask: function(renderSession) {
		var bounds = new openfl.geom.Rectangle();
		this.__getTransform();
		this.__getBounds(bounds,new openfl.geom.Matrix());
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.REMOVED_FROM_STAGE,false,false));
			this.stage = stage;
			if(stage != null) this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl.display.InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(!this.__renderable) return;
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl.display.InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl.display.DisplayObjectContainer
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
openfl.display.Sprite = function() {
	openfl.display.DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl.display.Sprite;
openfl.display.Sprite.__name__ = ["openfl","display","Sprite"];
openfl.display.Sprite.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Sprite.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getBounds: function(rect,matrix) {
		openfl.display.DisplayObjectContainer.prototype.__getBounds.call(this,rect,matrix);
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix != null?matrix:this.__worldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var length = 0;
		if(stack != null) length = stack.length;
		if(openfl.display.DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly)) return interactiveOnly; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasShape.render(this,renderSession);
		openfl.display.DisplayObjectContainer.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl._internal.renderer.dom.DOMShape.render(this,renderSession);
		openfl.display.DisplayObjectContainer.prototype.__renderDOM.call(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(this,renderSession);
		openfl.display.DisplayObjectContainer.prototype.__renderGL.call(this,renderSession);
	}
	,__renderMask: function(renderSession) {
		if(this.__graphics != null) openfl._internal.renderer.canvas.CanvasGraphics.renderMask(this.__graphics,renderSession); else openfl.display.DisplayObjectContainer.prototype.__renderMask.call(this,renderSession);
	}
	,get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl.display.Graphics();
		return this.__graphics;
	}
	,__class__: openfl.display.Sprite
	,__properties__: $extend(openfl.display.DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	var _g = this;
	openfl.display.Sprite.call(this);
	haxe.ui.toolkit.core.Toolkit.theme = new haxe.ui.toolkit.themes.GradientTheme();
	haxe.ui.toolkit.core.Toolkit.init();
	haxe.ui.toolkit.core.Toolkit.openFullscreen(function(root) {
		var uiController = new src.app.chat.controller.UIController();
		var view = uiController.get_view();
		root.addChild(view);
		view.set_x(root.get_width() * 0.5);
		view.set_y(root.get_height() * 0.5);
		var _g1 = view;
		_g1.set_x(_g1.get_x() - view.get_width() * 0.5);
		var _g2 = view;
		_g2.set_y(_g2.get_y() - view.get_height() * 0.5);
		var onRemove = function(e) {
			root.removeChild(view);
			root.dispose();
		};
		view.addEventListener(openfl.events.Event.CHANGE,$bind(_g,_g.onChange));
		view.addEventListener(openfl.events.Event.CHANGE,onRemove);
	});
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.__super__ = openfl.display.Sprite;
Main.prototype = $extend(openfl.display.Sprite.prototype,{
	onChange: function(e) {
		haxe.Log.trace("onChange",{ fileName : "Main.hx", lineNumber : 62, className : "Main", methodName : "onChange", customParams : [e]});
		new app.chat.presenter.GrdPresenter();
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl.Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl.events.Event(openfl.events.Event.ADDED_TO_STAGE,false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var CONSTANTS = function() { };
$hxClasses["CONSTANTS"] = CONSTANTS;
CONSTANTS.__name__ = ["CONSTANTS"];
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = ["DateTools"];
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "C":
		return StringTools.lpad(Std.string(Std["int"](d.getFullYear() / 100)),"0",2);
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H"?"0":" ",2);
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0?12:hour),e == "I"?"0":" ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) return "PM"; else return "AM";
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "s":
		return Std.string(Std["int"](d.getTime() / 1000));
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "t":
		return "\t";
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "u":
		var t = d.getDay();
		if(t == 0) return "7"; else if(t == null) return "null"; else return "" + t;
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	case "Y":
		return Std.string(d.getFullYear());
	default:
		throw "Date.format %" + e + "- not implemented yet.";
	}
};
DateTools.__format = function(d,f) {
	var r = new StringBuf();
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) break;
		r.addSub(f,p,np - p);
		r.add(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	r.addSub(f,p,f.length - p);
	return r.b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var lime = {};
lime.AssetLibrary = function() {
};
$hxClasses["lime.AssetLibrary"] = lime.AssetLibrary;
lime.AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime.AssetLibrary.prototype = {
	exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) return null; else return bytes.readUTFBytes(bytes.length);
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function(handler) {
		handler(this);
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadFont: function(id,handler) {
		handler(this.getFont(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: lime.AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe.ds.StringMap();
	this.path = new haxe.ds.StringMap();
	this.className = new haxe.ds.StringMap();
	lime.AssetLibrary.call(this);
	var id;
	id = "assets/fonts/Oxygen-Bold.ttf";
	this.className.set(id,__ASSET__assets_fonts_oxygen_bold_ttf);
	this.type.set(id,"FONT");
	id = "assets/fonts/Oxygen.ttf";
	this.className.set(id,__ASSET__assets_fonts_oxygen_ttf);
	this.type.set(id,"FONT");
	id = "assets/styles/default/circle.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/default/collapse.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/default/cross.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/default/expand.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/default/up_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_down_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_down_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_left_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_right2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_right_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_right_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/arrow_up_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/circle_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/cross_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/cross_dark_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/cross_light_small.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/gradient.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/gradient/gradient.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/gradient/gradient_mobile.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/gradient/gradient_mobile.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/gradient/gripper_horizontal.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/gripper_horizontal_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/gripper_vertical.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/gripper_vertical_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/hsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/gradient/vsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/accordion.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/accordion.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/button.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/buttons.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/buttons.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/calendar.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/checkbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/container.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/down_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/hscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/hscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/hscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/left_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/right_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/up_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/vscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/vscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/glyphs/vscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/hprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/hscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/listview.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/listview.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/listview.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/menus.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/optionbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/popup.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/popups.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/rtf.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/scrolls.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/scrolls.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/sliders.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/tab.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/tabs.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "assets/styles/windows/textinput.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/vprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/vscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "assets/styles/windows/windows.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/default/circle.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/collapse.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/cross.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/expand.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/default/up_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_down_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_down_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_left.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_left_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_right_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/arrow_up_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/circle_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/cross_dark.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/cross_dark_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/cross_light_small.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gradient.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/gradient.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/gradient_mobile.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/gradient_mobile.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/gradient/gripper_horizontal.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gripper_horizontal_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gripper_vertical.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/gripper_vertical_disabled.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/hsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/gradient/vsplitter_gripper.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/accordion.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/accordion.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/button.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/buttons.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/buttons.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/calendar.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/checkbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/container.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/down_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/hscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/hscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/hscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/left_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/right_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/up_arrow.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/vscroll_thumb_gripper_down.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/vscroll_thumb_gripper_over.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/glyphs/vscroll_thumb_gripper_up.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/hprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/hscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/listview.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/listview.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/listview.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/menus.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/optionbox.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/popup.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/popups.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/rtf.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/scrolls.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/scrolls.min.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/sliders.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/tab.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/tabs.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "styles/windows/textinput.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/vprogress.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/vscroll.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "styles/windows/windows.css";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
	id = "fonts/Oxygen-Bold.ttf";
	this.className.set(id,__ASSET__fonts_oxygen_bold_ttf);
	this.type.set(id,"FONT");
	id = "fonts/Oxygen.ttf";
	this.className.set(id,__ASSET__fonts_oxygen_ttf);
	this.type.set(id,"FONT");
	id = "img/b0.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/b1.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "img/b2.png";
	this.path.set(id,id);
	this.type.set(id,"IMAGE");
	id = "ui/form.xml";
	this.path.set(id,id);
	this.type.set(id,"TEXT");
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime.AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var assetType = this.type.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") {
			bytes = new lime.utils.ByteArray();
			bytes.writeUTFBytes(data);
		} else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes;
		} else return null;
	}
	,getFont: function(id) {
		return js.Boot.__cast(Type.createInstance(this.className.get(id),[]) , openfl.text.Font);
		return null;
	}
	,getImage: function(id) {
		return lime.graphics.Image.fromImageElement((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.images.get(key);
			return $r;
		}(this)));
	}
	,getPath: function(id) {
		return this.path.get(id);
	}
	,getText: function(id) {
		var bytes = null;
		var data = ((function($this) {
			var $r;
			var key = $this.path.get(id);
			$r = lime.app.Preloader.loaders.get(key);
			return $r;
		}(this))).data;
		if(typeof(data) == "string") return data; else if(js.Boot.__instanceof(data,lime.utils.ByteArray)) bytes = data; else bytes = null;
		if(bytes != null) {
			bytes.position = 0;
			return bytes.readUTFBytes(bytes.length);
		} else return null;
	}
	,isLocal: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		return true;
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js.Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.type.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAudioBuffer: function(id,handler) {
		handler(this.getAudioBuffer(id));
	}
	,loadBytes: function(id,handler) {
		handler(this.getBytes(id));
	}
	,loadImage: function(id,handler) {
		handler(this.getImage(id));
	}
	,loadText: function(id,handler) {
		var callback = function(bytes) {
			if(bytes == null) handler(null); else handler(bytes.readUTFBytes(bytes.length));
		};
		this.loadBytes(id,callback);
	}
	,__class__: DefaultAssetLibrary
});
lime.graphics = {};
lime.graphics.Font = function(fontName) {
	this.fontName = fontName;
	this.glyphs = new haxe.ds.IntMap();
};
$hxClasses["lime.graphics.Font"] = lime.graphics.Font;
lime.graphics.Font.__name__ = ["lime","graphics","Font"];
lime.graphics.Font.fromBytes = function(bytes) {
	var font = new lime.graphics.Font();
	return font;
};
lime.graphics.Font.fromFile = function(path) {
	var font = new lime.graphics.Font();
	font.__fromFile(path);
	return font;
};
lime.graphics.Font.prototype = {
	createImage: function() {
		this.glyphs = new haxe.ds.IntMap();
		return null;
	}
	,decompose: function() {
		return null;
	}
	,loadRange: function(size,start,end) {
	}
	,loadGlyphs: function(size,glyphs) {
		if(glyphs == null) glyphs = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__class__: lime.graphics.Font
};
openfl.text = {};
openfl.text.Font = function(name) {
	lime.graphics.Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl.text.Font;
openfl.text.Font.__name__ = ["openfl","text","Font"];
openfl.text.Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return [];
};
openfl.text.Font.fromBytes = function(bytes) {
	var font = new openfl.text.Font();
	return font;
};
openfl.text.Font.fromFile = function(path) {
	var font = new openfl.text.Font();
	font.__fromFile(path);
	return font;
};
openfl.text.Font.registerFont = function(font) {
	var instance;
	instance = js.Boot.__cast(Type.createInstance(font,[]) , openfl.text.Font);
	if(instance != null) openfl.text.Font.__registeredFonts.push(instance);
};
openfl.text.Font.__super__ = lime.graphics.Font;
openfl.text.Font.prototype = $extend(lime.graphics.Font.prototype,{
	__class__: openfl.text.Font
});
var __ASSET__assets_fonts_oxygen_bold_ttf = function() {
	openfl.text.Font.call(this);
	this.fontName = "Oxygen Bold";
};
$hxClasses["__ASSET__assets_fonts_oxygen_bold_ttf"] = __ASSET__assets_fonts_oxygen_bold_ttf;
__ASSET__assets_fonts_oxygen_bold_ttf.__name__ = ["__ASSET__assets_fonts_oxygen_bold_ttf"];
__ASSET__assets_fonts_oxygen_bold_ttf.__super__ = openfl.text.Font;
__ASSET__assets_fonts_oxygen_bold_ttf.prototype = $extend(openfl.text.Font.prototype,{
	__class__: __ASSET__assets_fonts_oxygen_bold_ttf
});
var __ASSET__assets_fonts_oxygen_ttf = function() {
	openfl.text.Font.call(this);
	this.fontName = "Oxygen Regular";
};
$hxClasses["__ASSET__assets_fonts_oxygen_ttf"] = __ASSET__assets_fonts_oxygen_ttf;
__ASSET__assets_fonts_oxygen_ttf.__name__ = ["__ASSET__assets_fonts_oxygen_ttf"];
__ASSET__assets_fonts_oxygen_ttf.__super__ = openfl.text.Font;
__ASSET__assets_fonts_oxygen_ttf.prototype = $extend(openfl.text.Font.prototype,{
	__class__: __ASSET__assets_fonts_oxygen_ttf
});
var __ASSET__fonts_oxygen_bold_ttf = function() {
	openfl.text.Font.call(this);
	this.fontName = "Oxygen Bold";
};
$hxClasses["__ASSET__fonts_oxygen_bold_ttf"] = __ASSET__fonts_oxygen_bold_ttf;
__ASSET__fonts_oxygen_bold_ttf.__name__ = ["__ASSET__fonts_oxygen_bold_ttf"];
__ASSET__fonts_oxygen_bold_ttf.__super__ = openfl.text.Font;
__ASSET__fonts_oxygen_bold_ttf.prototype = $extend(openfl.text.Font.prototype,{
	__class__: __ASSET__fonts_oxygen_bold_ttf
});
var __ASSET__fonts_oxygen_ttf = function() {
	openfl.text.Font.call(this);
	this.fontName = "Oxygen Regular";
};
$hxClasses["__ASSET__fonts_oxygen_ttf"] = __ASSET__fonts_oxygen_ttf;
__ASSET__fonts_oxygen_ttf.__name__ = ["__ASSET__fonts_oxygen_ttf"];
__ASSET__fonts_oxygen_ttf.__super__ = openfl.text.Font;
__ASSET__fonts_oxygen_ttf.prototype = $extend(openfl.text.Font.prototype,{
	__class__: __ASSET__fonts_oxygen_ttf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw "EReg::matched";
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.indexOf = function(it,v) {
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v2 = $it0.next();
		if(v == v2) return i;
		i++;
	}
	return -1;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,__class__: List
};
var IMap = function() { };
$hxClasses["IMap"] = IMap;
IMap.__name__ = ["IMap"];
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl.display.Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 9;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 3;
	this.outline = new openfl.display.Sprite();
	this.outline.get_graphics().lineStyle(1,color,0.15,true);
	this.outline.get_graphics().drawRoundRect(0,0,width,height,padding * 2,padding * 2);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl.display.Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl.display.Sprite;
NMEPreloader.prototype = $extend(openfl.display.Sprite.prototype,{
	getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		var height = 480;
		if(height > 0) return height; else return openfl.Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = 800;
		if(width > 0) return width; else return openfl.Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) percentLoaded = 1;
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js.Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) return 0; else return Math.floor(Math.random() * x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,addSub: function(s,pos,len) {
		if(len == null) this.b += HxOverrides.substr(s,pos,null); else this.b += HxOverrides.substr(s,pos,len);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) return s.split("\"").join("&quot;").split("'").join("&#039;"); else return s;
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) return s;
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	return js.Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw "Too many arguments";
	}
	return null;
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw "No such constructor " + constr;
	if(Reflect.isFunction(f)) {
		if(params == null) throw "Constructor " + constr + " need parameters";
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) throw "Constructor " + constr + " does not need parameters";
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) throw index + " is not a valid enum constructor index";
	return Type.createEnum(e,c,params);
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.enumEq = function(a,b) {
	if(a == b) return true;
	try {
		if(a[0] != b[0]) return false;
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) return false;
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) return false;
	} catch( e1 ) {
		return false;
	}
	return true;
};
var XmlType = $hxClasses["XmlType"] = { __ename__ : true, __constructs__ : [] };
var Xml = function() {
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.Element = null;
Xml.PCData = null;
Xml.CData = null;
Xml.Comment = null;
Xml.DocType = null;
Xml.ProcessingInstruction = null;
Xml.Document = null;
Xml.parse = function(str) {
	return haxe.xml.Parser.parse(str);
};
Xml.createElement = function(name) {
	var r = new Xml();
	r.nodeType = Xml.Element;
	r._children = new Array();
	r._attributes = new haxe.ds.StringMap();
	r.set_nodeName(name);
	return r;
};
Xml.createPCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.PCData;
	r.set_nodeValue(data);
	return r;
};
Xml.createCData = function(data) {
	var r = new Xml();
	r.nodeType = Xml.CData;
	r.set_nodeValue(data);
	return r;
};
Xml.createComment = function(data) {
	var r = new Xml();
	r.nodeType = Xml.Comment;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocType = function(data) {
	var r = new Xml();
	r.nodeType = Xml.DocType;
	r.set_nodeValue(data);
	return r;
};
Xml.createProcessingInstruction = function(data) {
	var r = new Xml();
	r.nodeType = Xml.ProcessingInstruction;
	r.set_nodeValue(data);
	return r;
};
Xml.createDocument = function() {
	var r = new Xml();
	r.nodeType = Xml.Document;
	r._children = new Array();
	return r;
};
Xml.prototype = {
	get_nodeName: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName;
	}
	,set_nodeName: function(n) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._nodeName = n;
	}
	,get_nodeValue: function() {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Element || this.nodeType == Xml.Document) throw "bad nodeType";
		return this._nodeValue = v;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.get(att);
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		this._attributes.set(att,value);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.exists(att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) throw "bad nodeType";
		return this._attributes.keys();
	}
	,iterator: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			return this.cur < this.x.length;
		}, next : function() {
			return this.x[this.cur++];
		}};
	}
	,elements: function() {
		if(this._children == null) throw "bad nodetype";
		return { cur : 0, x : this._children, hasNext : function() {
			var k = this.cur;
			var l = this.x.length;
			while(k < l) {
				if(this.x[k].nodeType == Xml.Element) break;
				k += 1;
			}
			this.cur = k;
			return k < l;
		}, next : function() {
			var k1 = this.cur;
			var l1 = this.x.length;
			while(k1 < l1) {
				var n = this.x[k1];
				k1 += 1;
				if(n.nodeType == Xml.Element) {
					this.cur = k1;
					return n;
				}
			}
			return null;
		}};
	}
	,firstChild: function() {
		if(this._children == null) throw "bad nodetype";
		return this._children[0];
	}
	,firstElement: function() {
		if(this._children == null) throw "bad nodetype";
		var cur = 0;
		var l = this._children.length;
		while(cur < l) {
			var n = this._children[cur];
			if(n.nodeType == Xml.Element) return n;
			cur++;
		}
		return null;
	}
	,addChild: function(x) {
		if(this._children == null) throw "bad nodetype";
		if(x._parent != null) HxOverrides.remove(x._parent._children,x);
		x._parent = this;
		this._children.push(x);
	}
	,toString: function() {
		if(this.nodeType == Xml.PCData) return StringTools.htmlEscape(this._nodeValue);
		if(this.nodeType == Xml.CData) return "<![CDATA[" + this._nodeValue + "]]>";
		if(this.nodeType == Xml.Comment) return "<!--" + this._nodeValue + "-->";
		if(this.nodeType == Xml.DocType) return "<!DOCTYPE " + this._nodeValue + ">";
		if(this.nodeType == Xml.ProcessingInstruction) return "<?" + this._nodeValue + "?>";
		var s = new StringBuf();
		if(this.nodeType == Xml.Element) {
			s.b += "<";
			s.b += Std.string(this._nodeName);
			var $it0 = this._attributes.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				s.b += " ";
				if(k == null) s.b += "null"; else s.b += "" + k;
				s.b += "=\"";
				s.add(this._attributes.get(k));
				s.b += "\"";
			}
			if(this._children.length == 0) {
				s.b += "/>";
				return s.b;
			}
			s.b += ">";
		}
		var $it1 = this.iterator();
		while( $it1.hasNext() ) {
			var x = $it1.next();
			s.add(x.toString());
		}
		if(this.nodeType == Xml.Element) {
			s.b += "</";
			s.b += Std.string(this._nodeName);
			s.b += ">";
		}
		return s.b;
	}
	,__class__: Xml
	,__properties__: {set_nodeValue:"set_nodeValue",get_nodeValue:"get_nodeValue",set_nodeName:"set_nodeName",get_nodeName:"get_nodeName"}
};
var action = {};
action.IFormAction = function() { };
$hxClasses["action.IFormAction"] = action.IFormAction;
action.IFormAction.__name__ = ["action","IFormAction"];
action.IFormAction.prototype = {
	__class__: action.IFormAction
};
action.IRoomAction = function() { };
$hxClasses["action.IRoomAction"] = action.IRoomAction;
action.IRoomAction.__name__ = ["action","IRoomAction"];
action.IRoomAction.prototype = {
	__class__: action.IRoomAction
};
var app = {};
app.chat = {};
app.chat.presenter = {};
app.chat.presenter.GrdPresenter = function() {
	this.roomPresenter = new app.chat.presenter.RoomPresenter();
	this.setupGrid();
	this.connect();
};
$hxClasses["app.chat.presenter.GrdPresenter"] = app.chat.presenter.GrdPresenter;
app.chat.presenter.GrdPresenter.__name__ = ["app","chat","presenter","GrdPresenter"];
app.chat.presenter.GrdPresenter.prototype = {
	connect: function() {
		this.roomPresenter.connect($bind(this,this.onLoopHandler));
	}
	,setupGrid: function() {
		this.gridView = new app.chat.views.GrdView();
		this.gridView.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.onClickGridHandler));
		openfl.Lib.current.stage.addChild(this.gridView);
		this.gridView.set_x(openfl.Lib.current.stage.get_width() * 0.5);
		this.gridView.set_y(openfl.Lib.current.stage.get_height() * 0.5);
		var _g = this.gridView;
		_g.set_x(_g.get_x() - this.gridView.get_width() * 0.5);
		var _g1 = this.gridView;
		_g1.set_y(_g1.get_y() - this.gridView.get_height() * 0.5);
		this.gridView.set_alpha(0);
		motion.Actuate.tween(this.gridView,0.5,{ alpha : 1});
	}
	,onClickGridHandler: function(e) {
		this.roomPresenter.update();
	}
	,onLoopHandler: function() {
		this.roomPresenter.refresh($bind(this,this.onRefreshHandler));
	}
	,onRefreshHandler: function() {
		this.gridView.updateMap(this.roomPresenter.roomModel.data);
	}
	,__class__: app.chat.presenter.GrdPresenter
};
app.chat.presenter.RoomPresenter = function() {
};
$hxClasses["app.chat.presenter.RoomPresenter"] = app.chat.presenter.RoomPresenter;
app.chat.presenter.RoomPresenter.__name__ = ["app","chat","presenter","RoomPresenter"];
app.chat.presenter.RoomPresenter.prototype = {
	create: function(onLoopHandler) {
		var _g = this;
		var onRoomConnected = function(e) {
			_g.updateModel(e);
			onLoopHandler();
		};
		var roomModel = { id : ""};
		roomModel.id = haxe.crypto.Sha256.encode(app.utils.Session.player.login);
		var sr = src.app.chat.service.core.Service.getInstance().room.create(roomModel);
		sr.addEventListener("complete",onRoomConnected);
		sr.addEventListener("error",$bind(this,this.onRoomCreateError));
	}
	,connect: function(onLoopHandler) {
		var _g = this;
		var onRoomConnected = function(e) {
			_g.updateModel(e);
			onLoopHandler();
		};
		var onRoomConnecError = function(e1) {
			_g.create(onLoopHandler);
		};
		var sr = src.app.chat.service.core.Service.getInstance().room.connect({ });
		sr.addEventListener("complete",onRoomConnected);
		sr.addEventListener("error",onRoomConnecError);
	}
	,updateModel: function(e) {
		this.roomModel = JSON.parse(e.serviceRequest.result);
	}
	,onRoomCreateError: function(e) {
		haxe.Log.trace(":onRoomCreateError",{ fileName : "RoomPresenter.hx", lineNumber : 78, className : "app.chat.presenter.RoomPresenter", methodName : "onRoomCreateError"});
	}
	,refresh: function(callback,interval) {
		if(interval == null) interval = 500;
		var _g = this;
		var url = "https://intense-torch-9712.firebaseio.com" + "/" + "rooms" + "/" + this.roomModel.id + ".json";
		this.timer = new haxe.Timer(interval);
		this.timer.run = function() {
			try {
				_g.doRefresh(callback,url);
			} catch( err ) {
				haxe.Log.trace("Error->" + Std.string(err),{ fileName : "RoomPresenter.hx", lineNumber : 113, className : "app.chat.presenter.RoomPresenter", methodName : "refresh"});
			}
		};
	}
	,doRefresh: function(callback,url) {
		var _g = this;
		var request = new openfl.net.URLRequest(url);
		var loader = new openfl.net.URLLoader();
		var onRequestCompleted;
		var onRequestCompleted1 = null;
		onRequestCompleted1 = function(e) {
			loader.removeEventListener(openfl.events.Event.COMPLETE,onRequestCompleted1);
			_g.roomModel = JSON.parse(loader.data);
			callback();
		};
		onRequestCompleted = onRequestCompleted1;
		loader.addEventListener(openfl.events.Event.COMPLETE,onRequestCompleted);
		loader.load(request);
	}
	,update: function() {
	}
	,__class__: app.chat.presenter.RoomPresenter
};
var src = {};
src.app = {};
src.app.chat = {};
src.app.chat.service = {};
src.app.chat.service.core = {};
src.app.chat.service.core.ServiceRequest = function(url,data) {
	if(url == null) url = "";
	openfl.events.EventDispatcher.call(this,null);
	if(url == "") url = "http://localhost/php/firebase/index.php";
	this.url = url;
	this.data = data;
};
$hxClasses["src.app.chat.service.core.ServiceRequest"] = src.app.chat.service.core.ServiceRequest;
src.app.chat.service.core.ServiceRequest.__name__ = ["src","app","chat","service","core","ServiceRequest"];
src.app.chat.service.core.ServiceRequest.__super__ = openfl.events.EventDispatcher;
src.app.chat.service.core.ServiceRequest.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	createRequest: function(url) {
		this.request = new openfl.net.URLRequest(url);
		this.request.method = openfl.net.URLRequestMethod.GET;
		this.request.contentType = "text/plain";
		if(this.data != null) this.request.data = this.data;
	}
	,setData: function(data) {
		haxe.Log.trace(":setData",{ fileName : "ServiceRequest.hx", lineNumber : 53, className : "src.app.chat.service.core.ServiceRequest", methodName : "setData", customParams : [data.getString()]});
		this.data = data.getString();
	}
	,load: function() {
		this.createRequest(this.url);
		this.loader = new openfl.net.URLLoader();
		this.loader.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.onComplete));
		this.loader.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.onIOError));
		this.loader.load(this.request);
	}
	,onComplete: function(e) {
		haxe.Log.trace("________________________",{ fileName : "ServiceRequest.hx", lineNumber : 69, className : "src.app.chat.service.core.ServiceRequest", methodName : "onComplete"});
		haxe.Log.trace(this.loader.data,{ fileName : "ServiceRequest.hx", lineNumber : 70, className : "src.app.chat.service.core.ServiceRequest", methodName : "onComplete"});
		haxe.Log.trace("________________________",{ fileName : "ServiceRequest.hx", lineNumber : 71, className : "src.app.chat.service.core.ServiceRequest", methodName : "onComplete"});
		try {
			this.dto = JSON.parse(this.loader.data);
		} catch( err ) {
			haxe.Log.trace(err,{ fileName : "ServiceRequest.hx", lineNumber : 78, className : "src.app.chat.service.core.ServiceRequest", methodName : "onComplete"});
			haxe.ui.toolkit.core.PopupManager.get_instance().showSimple(this.loader.data,"Paese Error");
			return;
		}
		if(this.dto.error != "") {
			if(this.enbalePopup) haxe.ui.toolkit.core.PopupManager.get_instance().showSimple(this.dto.error,"Firebase:" + Std.string(this.dto.tag));
			this.dispatchEvent(new app.events.ServiceRequestEvent("error",this));
			return;
		}
		if(this.dto.result != null) this.result = JSON.parse(this.dto.result);
		this.enbalePopup = true;
		this.dispatchEvent(new app.events.ServiceRequestEvent("complete",this));
	}
	,onIOError: function(e) {
		haxe.Log.trace(e,{ fileName : "ServiceRequest.hx", lineNumber : 103, className : "src.app.chat.service.core.ServiceRequest", methodName : "onIOError"});
		this.dispatchEvent(new app.events.ServiceRequestEvent("ioError",this));
	}
	,__class__: src.app.chat.service.core.ServiceRequest
});
app.chat.service = {};
app.chat.service.request = {};
app.chat.service.request.RoomRequest = function() {
	src.app.chat.service.core.ServiceRequest.call(this);
};
$hxClasses["app.chat.service.request.RoomRequest"] = app.chat.service.request.RoomRequest;
app.chat.service.request.RoomRequest.__name__ = ["app","chat","service","request","RoomRequest"];
app.chat.service.request.RoomRequest.__super__ = src.app.chat.service.core.ServiceRequest;
app.chat.service.request.RoomRequest.prototype = $extend(src.app.chat.service.core.ServiceRequest.prototype,{
	create: function(roomModel,action,method) {
		if(method == null) method = "";
		if(action == null) action = "";
		roomModel.open = true;
		roomModel.key = haxe.crypto.Sha256.encode(new Date().getTime() + "");
		roomModel.maxConnections = 2;
		roomModel.data = app.chat.utils.Vector2D.map;
		roomModel.connections = 1;
		var data = new service.ServiceData(roomModel,action,method);
		data.page = roomModel.id;
		data.path = "rooms";
		this.setData(data);
		this.load();
	}
	,connect: function(roomModel,action,method) {
		if(method == null) method = "";
		if(action == null) action = "";
		var data = new service.ServiceData(roomModel,action,method);
		this.enbalePopup = false;
		data.path = "rooms";
		this.setData(data);
		this.load();
	}
	,update: function(roomModel,gridModel,action,method) {
		if(method == null) method = "";
		if(action == null) action = "";
	}
	,refresh: function(roomModel,action,method) {
		if(method == null) method = "";
		if(action == null) action = "";
		var data = new service.ServiceData(roomModel,action,method);
		data.page = roomModel.id;
		data.path = "rooms";
		this.setData(data);
		this.load();
	}
	,__class__: app.chat.service.request.RoomRequest
});
app.chat.utils = {};
app.chat.utils.Posiiton = function(c,l,iv) {
	this.value = 0;
	this.iv = iv;
	this.c = c;
	this.l = l;
	iv.posiiton = this;
};
$hxClasses["app.chat.utils.Posiiton"] = app.chat.utils.Posiiton;
app.chat.utils.Posiiton.__name__ = ["app","chat","utils","Posiiton"];
app.chat.utils.Posiiton.prototype = {
	get_value: function() {
		return this.value;
	}
	,set_value: function(__value) {
		this.value = __value;
		this.iv.update();
		return this.get_value();
	}
	,__class__: app.chat.utils.Posiiton
	,__properties__: {set_value:"set_value",get_value:"get_value"}
};
app.chat.utils.Vector2D = function() { };
$hxClasses["app.chat.utils.Vector2D"] = app.chat.utils.Vector2D;
app.chat.utils.Vector2D.__name__ = ["app","chat","utils","Vector2D"];
app.chat.utils.Vector2D.create = function(w,h) {
};
app.chat.views = {};
app.chat.views.GrdView = function() {
	openfl.display.Sprite.call(this);
	this.map = app.chat.utils.Vector2D.map;
	this.mapPosiiton = new Array();
	var _g1 = 0;
	var _g = this.map.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.mapPosiiton[i] = [];
		var _g3 = 0;
		var _g2 = this.map[i].length;
		while(_g3 < _g2) {
			var k = _g3++;
			var iv = new app.chat.views.InteractiveView();
			iv.buttonMode = true;
			iv.mouseChildren = false;
			iv.addEventListener("update",$bind(this,this.onUpdateView));
			iv.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.onClick));
			iv.set_x(i * 5 * 11);
			iv.set_y(k * 5 * 11);
			this.mapPosiiton[i][k] = new app.chat.utils.Posiiton(i,k,iv);
			this.addChild(iv);
		}
	}
};
$hxClasses["app.chat.views.GrdView"] = app.chat.views.GrdView;
app.chat.views.GrdView.__name__ = ["app","chat","views","GrdView"];
app.chat.views.GrdView.__super__ = openfl.display.Sprite;
app.chat.views.GrdView.prototype = $extend(openfl.display.Sprite.prototype,{
	onUpdateView: function(e) {
		var viewPosition = e.interactiveView.posiiton;
		this.map[viewPosition.l][viewPosition.c] = viewPosition.get_value();
	}
	,onClick: function(e) {
		var iv = e.currentTarget;
		iv.removeEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this.onClick));
		iv.posiiton.set_value(1);
		this.dispatchEvent(e);
	}
	,updateMap: function(newMap) {
		var _g1 = 0;
		var _g = newMap.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0;
			var _g2 = newMap[i].length;
			while(_g3 < _g2) {
				var k = _g3++;
				var value = newMap[i][k];
				var position = this.mapPosiiton[i][k];
				if(position.get_value() != value) position.set_value(value);
			}
		}
	}
	,__class__: app.chat.views.GrdView
});
app.chat.views.InteractiveView = function() {
	openfl.display.Sprite.call(this);
	this.state0 = new app.chat.views.View(0);
	this.state1 = new app.chat.views.View(1);
	this.state2 = new app.chat.views.View(2);
	this.initialState();
};
$hxClasses["app.chat.views.InteractiveView"] = app.chat.views.InteractiveView;
app.chat.views.InteractiveView.__name__ = ["app","chat","views","InteractiveView"];
app.chat.views.InteractiveView.__super__ = openfl.display.Sprite;
app.chat.views.InteractiveView.prototype = $extend(openfl.display.Sprite.prototype,{
	activate: function(player) {
		this.buttonMode = false;
		this.mouseEnabled = false;
		if(player == 1) {
			this.addChild(this.state1);
			this.state1.startAnimation();
		} else {
			this.addChild(this.state2);
			this.state2.startAnimation();
		}
	}
	,update: function() {
		this.activate(this.posiiton.get_value());
		this.dispatchEvent(new app.events.InteractiveViewEvent("update",this));
	}
	,initialState: function() {
		this.addChild(this.state0);
		this.state0.active();
	}
	,__class__: app.chat.views.InteractiveView
});
app.chat.views.VewAnimation = function(view) {
	this.view = view;
	this.holder = new openfl.display.Sprite();
	view.addChild(this.holder);
};
$hxClasses["app.chat.views.VewAnimation"] = app.chat.views.VewAnimation;
app.chat.views.VewAnimation.__name__ = ["app","chat","views","VewAnimation"];
app.chat.views.VewAnimation.prototype = {
	start: function() {
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			this.animation(i);
		}
	}
	,animation: function(i) {
		var aniamtion = new openfl.display.Sprite();
		var bitmap = new openfl.display.Bitmap(this.view.bitmapData);
		aniamtion.addChild(bitmap);
		var _g = bitmap;
		_g.set_x(_g.get_x() - bitmap.get_width() * 0.5);
		var _g1 = bitmap;
		_g1.set_y(_g1.get_y() - bitmap.get_height() * 0.5);
		aniamtion.set_scaleX(0);
		aniamtion.set_scaleY(0);
		var time = i * 0.5 + Math.PI;
		var genericActuator = motion.Actuate.tween(aniamtion,i,{ scaleX : 1, scaleY : 1});
		genericActuator.onComplete($bind(this,this.onComplete),[i]);
		this.holder.addChild(aniamtion);
	}
	,onComplete: function(args) {
		if(args == 3) this.finish();
	}
	,finish: function() {
		this.view.bitmap.set_visible(true);
		this.holder.set_visible(false);
		this.holder.removeChildren();
	}
	,__class__: app.chat.views.VewAnimation
};
app.chat.views.View = function(assetNumber) {
	openfl.display.Sprite.call(this);
	this.bitmapData = openfl.Assets.getBitmapData("img/b" + assetNumber + ".png",false);
	this.bitmap = new openfl.display.Bitmap(this.bitmapData);
	var _g = this.bitmap;
	_g.set_x(_g.get_x() - this.bitmap.get_width() * 0.5);
	var _g1 = this.bitmap;
	_g1.set_y(_g1.get_y() - this.bitmap.get_height() * 0.5);
	this.bitmap.set_visible(false);
	this.addChild(this.bitmap);
	this.animation = new app.chat.views.VewAnimation(this);
};
$hxClasses["app.chat.views.View"] = app.chat.views.View;
app.chat.views.View.__name__ = ["app","chat","views","View"];
app.chat.views.View.__super__ = openfl.display.Sprite;
app.chat.views.View.prototype = $extend(openfl.display.Sprite.prototype,{
	startAnimation: function() {
		this.animation.start();
		return this;
	}
	,setPostion: function() {
		this.set_x(50);
		this.set_y(50);
		return this;
	}
	,active: function() {
		this.bitmap.set_visible(true);
	}
	,__class__: app.chat.views.View
});
openfl.events.Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = openfl.events.EventPhase.AT_TARGET;
};
$hxClasses["openfl.events.Event"] = openfl.events.Event;
openfl.events.Event.__name__ = ["openfl","events","Event"];
openfl.events.Event.prototype = {
	clone: function() {
		var event = new openfl.events.Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,isDefaultPrevented: function() {
		return this.__isCancelled || this.__isCancelledNow;
	}
	,stopImmediatePropagation: function() {
		this.__isCancelled = true;
		this.__isCancelledNow = true;
	}
	,stopPropagation: function() {
		this.__isCancelled = true;
	}
	,toString: function() {
		return "[Event type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,__class__: openfl.events.Event
};
app.events = {};
app.events.InteractiveViewEvent = function(type,interactiveView,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.interactiveView = interactiveView;
};
$hxClasses["app.events.InteractiveViewEvent"] = app.events.InteractiveViewEvent;
app.events.InteractiveViewEvent.__name__ = ["app","events","InteractiveViewEvent"];
app.events.InteractiveViewEvent.__super__ = openfl.events.Event;
app.events.InteractiveViewEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: app.events.InteractiveViewEvent
});
app.events.ServiceRequestEvent = function(type,serviceRequest,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.serviceRequest = serviceRequest;
};
$hxClasses["app.events.ServiceRequestEvent"] = app.events.ServiceRequestEvent;
app.events.ServiceRequestEvent.__name__ = ["app","events","ServiceRequestEvent"];
app.events.ServiceRequestEvent.__super__ = openfl.events.Event;
app.events.ServiceRequestEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: app.events.ServiceRequestEvent
});
app.utils = {};
app.utils.PersistTypes = function() { };
$hxClasses["app.utils.PersistTypes"] = app.utils.PersistTypes;
app.utils.PersistTypes.__name__ = ["app","utils","PersistTypes"];
app.utils.Session = function() { };
$hxClasses["app.utils.Session"] = app.utils.Session;
app.utils.Session.__name__ = ["app","utils","Session"];
var com = {};
com.yagp = {};
com.yagp.Gif = function() {
	this.backgroundColor = 0;
	this.frames = new Array();
};
$hxClasses["com.yagp.Gif"] = com.yagp.Gif;
com.yagp.Gif.__name__ = ["com","yagp","Gif"];
com.yagp.Gif.prototype = {
	get_width: function() {
		return this.lsd.width;
	}
	,get_height: function() {
		return this.lsd.height;
	}
	,get_backgroundIndex: function() {
		return this.lsd.backgroundColorIndex;
	}
	,get_loops: function() {
		if(this.netscape != null) return this.netscape.iterations; else return 1;
	}
	,dispose: function() {
		this.lsd = null;
		this.netscape = null;
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			frame.dispose();
		}
		this.frames = null;
	}
	,__class__: com.yagp.Gif
	,__properties__: {get_loops:"get_loops",get_backgroundIndex:"get_backgroundIndex",get_height:"get_height",get_width:"get_width"}
};
com.yagp.GifDecoder = function(input) {
	this._input = input;
};
$hxClasses["com.yagp.GifDecoder"] = com.yagp.GifDecoder;
com.yagp.GifDecoder.__name__ = ["com","yagp","GifDecoder"];
com.yagp.GifDecoder.parseBytes = function(bytes) {
	var gifBytes = new com.yagp.structs.GifBytes(bytes);
	var decoder = new com.yagp.GifDecoder(gifBytes);
	decoder.decodeGif();
	return decoder.gif;
};
com.yagp.GifDecoder.parseByteArray = function(byteArray) {
	var bytes = haxe.io.Bytes.alloc(byteArray.length);
	byteArray.position = 0;
	var _g1 = 0;
	var _g = byteArray.length;
	while(_g1 < _g) {
		var i = _g1++;
		bytes.set(i,byteArray.readByte());
	}
	return com.yagp.GifDecoder.parseBytes(bytes);
};
com.yagp.GifDecoder.parseText = function(text) {
	return com.yagp.GifDecoder.parseBytes(haxe.io.Bytes.ofString(text));
};
com.yagp.GifDecoder.parseBytesAsync = function(bytes,completeHandler,errorHandler) {
	haxe.Log.trace("Asynchronous parsing currently only supported on neko and cpp platforms.",{ fileName : "GifDecoder.hx", lineNumber : 121, className : "com.yagp.GifDecoder", methodName : "parseBytesAsync"});
	return false;
};
com.yagp.GifDecoder.parseByteArrayAsync = function(byteArray,completeHandler,errorHandler) {
	haxe.Log.trace("Asynchronous parsing currently only supported on neko and cpp platforms.",{ fileName : "GifDecoder.hx", lineNumber : 140, className : "com.yagp.GifDecoder", methodName : "parseByteArrayAsync"});
	return false;
};
com.yagp.GifDecoder.parseTextAsync = function(text,completeHandler,errorHandler) {
	haxe.Log.trace("Asynchronous parsing currently only supported on neko and cpp platforms.",{ fileName : "GifDecoder.hx", lineNumber : 159, className : "com.yagp.GifDecoder", methodName : "parseTextAsync"});
	return false;
};
com.yagp.GifDecoder.prototype = {
	get_input: function() {
		return this._input;
	}
	,set_input: function(v) {
		return this._input = v;
	}
	,decodeAsync: function(completeHandler,errorHandler) {
		haxe.Log.trace("Asynchronous parsing currently only supported on neko and cpp platforms.",{ fileName : "GifDecoder.hx", lineNumber : 254, className : "com.yagp.GifDecoder", methodName : "decodeAsync"});
		return false;
	}
	,_decodeAsync: function() {
	}
	,decodeGif: function() {
		if(this._input == null) return null;
		this._input.position = 0;
		this.gif = new com.yagp.Gif();
		if(this.readHeader()) {
			var lsd = new com.yagp.structs.LSD(this._input);
			this.gif.lsd = lsd;
			if(lsd.globalColorTable) {
				this._globalColorTable = this.readColorTable(lsd.globalColorTableSize);
				if(lsd.backgroundColorIndex < this._globalColorTable.length) this.gif.backgroundColor = this._globalColorTable[lsd.backgroundColorIndex];
			}
			this.readBlock();
			this._graphicControlExtension = null;
			this._globalColorTable = null;
			this._input = null;
		} else throw "This is not a GIF file, or header invalid.";
		return this.gif;
	}
	,readBlock: function() {
		var id;
		while(true) {
			id = this._input.readByte();
			switch(id) {
			case 44:
				this.readImage();
				break;
			case 33:
				this.readExtension();
				break;
			case 59:
				return;
			}
		}
	}
	,readExtension: function() {
		var subId = this._input.readByte();
		switch(subId) {
		case 249:
			this._graphicControlExtension = new com.yagp.structs.GraphicsControl(this._input);
			break;
		case 255:
			this.readApplicationExtension();
			break;
		default:
			this.skipBlock();
		}
	}
	,readApplicationExtension: function() {
		this._input.position++;
		var name = this._input.readUTFBytes(8);
		var version = this._input.readUTFBytes(3);
		switch(name) {
		case "NETSCAPE":
			this.gif.netscape = new com.yagp.structs.NetscapeExtension(this._input);
			break;
		default:
			this.skipBlock();
		}
	}
	,readImage: function() {
		var imageDescriptor = new com.yagp.structs.ImageDescriptor(this._input);
		var table = this._globalColorTable;
		if(imageDescriptor.localColorTable) table = this.readColorTable(imageDescriptor.localColorTableSize);
		if(table == null) {
			throw "Image didn't have color table!";
			return;
		}
		var decoder = new com.yagp.structs.GraphicsDecoder(this._input,imageDescriptor);
		var gifFrame = new com.yagp.structs.GifFrame(table,imageDescriptor,decoder,this._graphicControlExtension);
		this.gif.frames.push(gifFrame);
		table = null;
		decoder = null;
		this._graphicControlExtension = null;
	}
	,readHeader: function() {
		var valid = this._input.readUTFBytes(3) == "GIF";
		if(valid) {
			var version = this._input.readUTFBytes(3);
			if(version == "87a") this.gif.version = com.yagp.structs.GifVersion.GIF87a; else if(version == "89a") this.gif.version = com.yagp.structs.GifVersion.GIF89a;
			if(this.gif.version == null) this.gif.version = com.yagp.structs.GifVersion.GIF89a;
		}
		return valid;
	}
	,readColorTable: function(colorsCount) {
		var result = new Array();
		var _g = 0;
		while(_g < colorsCount) {
			var i = _g++;
			result[i] = -16777216 | this._input.readByte() << 16 | this._input.readByte() << 8 | this._input.readByte();
		}
		return result;
	}
	,skipBlock: function() {
		var blockSize = 0;
		do {
			blockSize = this._input.readByte();
			this._input.position += blockSize;
		} while(blockSize != 0);
	}
	,__class__: com.yagp.GifDecoder
	,__properties__: {set_input:"set_input",get_input:"get_input"}
};
openfl.geom = {};
openfl.geom.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl.geom.Rectangle;
openfl.geom.Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl.geom.Rectangle.prototype = {
	clone: function() {
		return new openfl.geom.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl.geom.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl.geom.Rectangle();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new openfl.geom.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl.geom.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl.geom.Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl.geom.Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl.geom.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
openfl.geom.Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl.geom.Point;
openfl.geom.Point.__name__ = ["openfl","geom","Point"];
openfl.geom.Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl.geom.Point.interpolate = function(pt1,pt2,f) {
	return new openfl.geom.Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl.geom.Point.polar = function(len,angle) {
	return new openfl.geom.Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl.geom.Point.prototype = {
	add: function(v) {
		return new openfl.geom.Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl.geom.Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl.geom.Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl.geom.Point
	,__properties__: {get_length:"get_length"}
};
com.yagp.GifPlayer = function(gif) {
	this._gif = gif;
	if(gif != null) {
		this._frames = gif.frames;
		this.data = new openfl.display.BitmapData(gif.lsd.width,gif.lsd.height,true,0);
		this._currFrame = 0;
		this._t = 0;
		this._loops = 0;
		this._maxLoops = this._gif.get_loops();
		this.playing = true;
		this.renderFrame(this._currGifFrame = gif.frames[0]);
	}
};
$hxClasses["com.yagp.GifPlayer"] = com.yagp.GifPlayer;
com.yagp.GifPlayer.__name__ = ["com","yagp","GifPlayer"];
com.yagp.GifPlayer.rect = null;
com.yagp.GifPlayer.point = null;
com.yagp.GifPlayer.prototype = {
	get_gif: function() {
		return this._gif;
	}
	,set_gif: function(v) {
		if(v != null) {
			if(this._prevData != null) {
				this._prevData.dispose();
				this._prevData = null;
			}
			if(this.data == null || this.data.width != v.lsd.width || this.data.height != v.lsd.height) {
				if(this.data != null) this.data.dispose();
				this.data = new openfl.display.BitmapData(v.lsd.width,v.lsd.height,true,0);
			}
			this._gif = v;
			this._frames = v.frames;
			this._currFrame = 0;
			this._t = 0;
			this._loops = 0;
			this._maxLoops = this._gif.get_loops();
			this.data.fillRect(this.data.rect,0);
			this.renderFrame(this._currGifFrame = this._gif.frames[0]);
		} else this._gif = null;
		return v;
	}
	,get_frame: function() {
		return this._currFrame;
	}
	,set_frame: function(v) {
		if(this._gif == null) return v;
		v = this.cropIndex(v);
		this._t = 0;
		if(this._currFrame == v) return v; else if(this.cropIndex(this._currFrame + 1) == v) {
			this.renderNext();
			return this._currFrame;
		} else {
			this.data.fillRect(this.data.rect,0);
			if(this._prevData != null) {
				this._prevData.dispose();
				this._prevData = null;
			}
			this._currFrame = 0;
			this._currGifFrame = this._frames[0];
			this.renderFrame(this._currGifFrame);
			while(this._currFrame != v) this.renderNext();
			return v;
		}
	}
	,get_framesCount: function() {
		if(this._gif != null) return this._frames.length; else return 0;
	}
	,cropIndex: function(v) {
		if(v < 0) {
			while(v < 0) v = this._frames.length - v;
			return v;
		} else if(v >= this._frames.length) return v % this._frames.length; else return v;
	}
	,update: function(elapsed) {
		if(!this.playing || this._gif == null) return;
		this._t += elapsed * 1000;
		var startFrame = this._currFrame;
		var targetFrame = this._currFrame;
		var localLoops = this._loops;
		while(this._frames[targetFrame].delay <= this._t) {
			this._t -= this._frames[targetFrame].delay;
			targetFrame++;
			if(targetFrame == this._frames.length) {
				if(this.loopEndHandler != null) {
					this._currFrame = targetFrame - 1;
					this.loopEndHandler();
					if(this._currFrame != targetFrame - 1) return;
					this._currFrame = startFrame;
				}
				if(this._maxLoops != 0 && ++localLoops >= this._maxLoops) {
					targetFrame--;
					while(this._currFrame != targetFrame) this.renderNext();
					this.playing = false;
					this._loops = this._maxLoops;
					this._t = this._currGifFrame.delay;
					if(this.animationEndHandler != null) this.animationEndHandler();
					return;
				}
				targetFrame = 0;
			}
		}
		if(targetFrame == startFrame) return;
		if(targetFrame < this._currFrame) {
			if(this._prevData != null) {
				this._prevData.dispose();
				this._prevData = null;
			}
			this.data.fillRect(this.data.rect,0);
			this._currFrame = 0;
			this.renderFrame(this._currGifFrame = this._frames[0]);
		}
		while(this._currFrame != targetFrame) this.renderNext();
	}
	,dispose: function(disposeGif) {
		if(disposeGif == null) disposeGif = false;
		if(disposeGif && this._gif != null) this._gif.dispose();
		this._gif = null;
		this._currGifFrame = null;
		this._frames = null;
		if(this._prevData != null) {
			this._prevData.dispose();
			this._prevData = null;
		}
		if(this.data != null) {
			this.data.dispose();
			this.data = null;
		}
	}
	,reset: function(play) {
		if(play == null) play = false;
		if(this._gif == null) return;
		this._loops = 0;
		this._t = 0;
		if(play) this.playing = true;
		if(this._prevData != null) {
			this._prevData.dispose();
			this._prevData = null;
		}
		this.data.fillRect(this.data.rect,0);
		this._currFrame = 0;
		this.renderFrame(this._currGifFrame = this._frames[0]);
	}
	,disposeFrame: function(frame) {
		var _g = frame.disposalMethod;
		switch(_g[1]) {
		case 2:
			com.yagp.GifPlayer.rect.setTo(frame.x,frame.y,frame.width,frame.height);
			this.data.fillRect(com.yagp.GifPlayer.rect,0);
			break;
		case 3:
			if(this._prevData != null) {
				com.yagp.GifPlayer.point.setTo(frame.x,frame.y);
				com.yagp.GifPlayer.rect.setTo(0,0,frame.width,frame.height);
				this.data.copyPixels(this._prevData,com.yagp.GifPlayer.rect,com.yagp.GifPlayer.point);
				this._prevData.dispose();
				this._prevData = null;
			} else throw "Not implemented";
			break;
		default:
		}
	}
	,renderFrame: function(frame) {
		if((function($this) {
			var $r;
			var _g = frame.disposalMethod;
			$r = (function($this) {
				var $r;
				switch(_g[1]) {
				case 3:
					$r = true;
					break;
				default:
					$r = false;
				}
				return $r;
			}($this));
			return $r;
		}(this))) {
			if(this._prevData != null) this._prevData.dispose();
			com.yagp.GifPlayer.rect.setTo(frame.x,frame.y,frame.width,frame.height);
			com.yagp.GifPlayer.point.setTo(0,0);
			this._prevData = new openfl.display.BitmapData(frame.width,frame.height,true,0);
			this._prevData.copyPixels(this.data,com.yagp.GifPlayer.rect,com.yagp.GifPlayer.point);
		}
		com.yagp.GifPlayer.rect.setTo(0,0,frame.width,frame.height);
		com.yagp.GifPlayer.point.setTo(frame.x,frame.y);
		this.data.copyPixels(frame.data,com.yagp.GifPlayer.rect,com.yagp.GifPlayer.point,null,null,true);
	}
	,renderNext: function() {
		this._currFrame++;
		if(this._currFrame == this._frames.length) {
			if(this._maxLoops != 0 && ++this._loops >= this._maxLoops) {
				this.playing = false;
				this._currFrame--;
				this._t = this._currGifFrame.delay;
				if(this.animationEndHandler != null) this.animationEndHandler();
				return;
			}
			this._currFrame = 0;
			if(this._prevData != null) {
				this._prevData.dispose();
				this._prevData = null;
			}
			this.data.fillRect(this.data.rect,0);
		} else this.disposeFrame(this._currGifFrame);
		this._currGifFrame = this._frames[this._currFrame];
		this.renderFrame(this._currGifFrame);
	}
	,fillBackground: function(frame,rect) {
		this.data.fillRect(rect,0);
	}
	,__class__: com.yagp.GifPlayer
	,__properties__: {get_framesCount:"get_framesCount",set_frame:"set_frame",get_frame:"get_frame",set_gif:"set_gif",get_gif:"get_gif"}
};
openfl.display.Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl.display.DisplayObjectContainer.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = openfl.display.PixelSnapping.AUTO;
};
$hxClasses["openfl.display.Bitmap"] = openfl.display.Bitmap;
openfl.display.Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl.display.Bitmap.__super__ = openfl.display.DisplayObjectContainer;
openfl.display.Bitmap.prototype = $extend(openfl.display.DisplayObjectContainer.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = new openfl.geom.Rectangle(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds = bounds.transform(this.__worldTransform);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || this.bitmapData == null) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.bitmapData.width && point.y <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasBitmap.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(this,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(this,renderSession);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		openfl._internal.renderer.opengl.GLBitmap.render(this,renderSession);
	}
	,__renderMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl.display.DisplayObject.__worldTransformDirty++;
				}
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl.display.Bitmap
});
com.yagp.GifPlayerWrapper = function(player) {
	this.timescale = 1;
	this._player = player;
	if(player != null) {
		openfl.display.Bitmap.call(this,player.data);
		this._t = haxe.Timer.stamp();
	} else openfl.display.Bitmap.call(this);
	this.addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.resetTimer));
};
$hxClasses["com.yagp.GifPlayerWrapper"] = com.yagp.GifPlayerWrapper;
com.yagp.GifPlayerWrapper.__name__ = ["com","yagp","GifPlayerWrapper"];
com.yagp.GifPlayerWrapper.__super__ = openfl.display.Bitmap;
com.yagp.GifPlayerWrapper.prototype = $extend(openfl.display.Bitmap.prototype,{
	get_player: function() {
		return this._player;
	}
	,set_player: function(v) {
		if(v != null) {
			this._player = v;
			this.bitmapData = v.data;
			this._t = haxe.Timer.stamp();
		} else {
			this._player = null;
			this.bitmapData = null;
		}
		return this._player;
	}
	,get_playing: function() {
		if(this._player == null) return false; else return this._player.playing;
	}
	,set_playing: function(v) {
		if(this._player == null) return v; else return this._player.playing = v;
	}
	,get_animationEndHandler: function() {
		if(this._player == null) return null; else return this._player.animationEndHandler;
	}
	,set_animationEndHandler: function(v) {
		if(this._player == null) return v; else return this._player.animationEndHandler = v;
	}
	,get_loopEndHandler: function() {
		if(this._player == null) return null; else return this._player.loopEndHandler;
	}
	,set_loopEndHandler: function(v) {
		if(this._player == null) return v; else return this._player.loopEndHandler = v;
	}
	,get_gif: function() {
		if(this._player == null) return null; else return this._player._gif;
	}
	,set_gif: function(v) {
		if(this._player == null) return v; else return this._player.set_gif(v);
	}
	,get_frame: function() {
		if(this._player == null) return -1; else return this._player._currFrame;
	}
	,set_frame: function(v) {
		if(this._player == null) return v; else return this._player.set_frame(v);
	}
	,get_framesCount: function() {
		if(this._player != null) return this._player.get_framesCount(); else return 0;
	}
	,dispose: function(disposePlayer,disposeGif) {
		if(disposeGif == null) disposeGif = false;
		if(disposePlayer == null) disposePlayer = true;
		if(this._player != null) {
			if(disposePlayer) this._player.dispose(disposeGif);
			this._player = null;
			this.bitmapData = null;
		}
		this.removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this.onEnterFrame));
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.resetTimer));
	}
	,reset: function(play) {
		if(play == null) play = false;
		if(this._player != null) this._player.reset(play);
	}
	,resetTimer: function(e) {
		this._t = haxe.Timer.stamp();
	}
	,onEnterFrame: function(e) {
		if(this._player == null || this.stage == null) return;
		var stamp = haxe.Timer.stamp();
		this._player.update((stamp - this._t) * this.timescale * com.yagp.GifPlayerWrapper.globalTimescale);
		this._t = stamp;
	}
	,__class__: com.yagp.GifPlayerWrapper
	,__properties__: $extend(openfl.display.Bitmap.prototype.__properties__,{get_framesCount:"get_framesCount",set_frame:"set_frame",get_frame:"get_frame",set_gif:"set_gif",get_gif:"get_gif",set_loopEndHandler:"set_loopEndHandler",get_loopEndHandler:"get_loopEndHandler",set_animationEndHandler:"set_animationEndHandler",get_animationEndHandler:"get_animationEndHandler",set_playing:"set_playing",get_playing:"get_playing",set_player:"set_player",get_player:"get_player"})
});
com.yagp.GifRenderer = function(gif) {
	this._prevFrame = -1;
	this._gif = gif;
	this._drawTarget = new openfl.display.BitmapData(this._gif.lsd.width,this._gif.lsd.height,true,0);
};
$hxClasses["com.yagp.GifRenderer"] = com.yagp.GifRenderer;
com.yagp.GifRenderer.__name__ = ["com","yagp","GifRenderer"];
com.yagp.GifRenderer.createMap = function(gif,vertical) {
	if(vertical == null) vertical = false;
	var renderer = new com.yagp.GifRenderer(gif);
	var data = new openfl.display.BitmapData(gif.lsd.width * (vertical?1:gif.frames.length),gif.lsd.height * (vertical?gif.frames.length:1),true,0);
	renderer.setTarget(data);
	var xOffset;
	if(vertical) xOffset = 0; else xOffset = gif.lsd.width;
	var yOffset;
	if(vertical) yOffset = gif.lsd.height; else yOffset = 0;
	var _g1 = 0;
	var _g = gif.frames.length;
	while(_g1 < _g) {
		var i = _g1++;
		renderer.render(i,xOffset * i,yOffset * i);
	}
	var result = { data : data, width : gif.lsd.width, height : gif.lsd.height, frames : new Array()};
	var _g2 = 0;
	var _g11 = gif.frames;
	while(_g2 < _g11.length) {
		var frame = _g11[_g2];
		++_g2;
		result.frames.push(frame.delay);
	}
	renderer.dispose();
	return result;
};
com.yagp.GifRenderer.prototype = {
	setTarget: function(target) {
		this._target = target;
	}
	,dispose: function() {
		if(this._restorer != null) {
			this._restorer.dispose();
			this._restorer = null;
		}
		if(this._drawTarget != null) {
			this._drawTarget.dispose();
			this._drawTarget = null;
		}
		this._gif = null;
		this._target = null;
	}
	,render: function(frame,offsetX,offsetY) {
		if(this._gif == null || frame >= this._gif.frames.length || frame < 0 || this._target == null) return;
		if(this._prevFrame != frame) this.renderFrame(frame,true);
		this._target.copyPixels(this._drawTarget,this._drawTarget.rect,new openfl.geom.Point(offsetX,offsetY));
	}
	,renderFrame: function(frame,doRestore) {
		if(doRestore && frame > 0) {
			if(this._prevFrame + 1 != frame) {
				this._prevFrame = -1;
				while(this._prevFrame != frame - 1) this.renderFrame(this._prevFrame,true);
			}
			var pframe = this._gif.frames[this._prevFrame];
			var _g = pframe.disposalMethod;
			switch(_g[1]) {
			case 3:
				if(this._restorer != null) {
					this._drawTarget.copyPixels(this._restorer,pframe.data.rect,new openfl.geom.Point(pframe.x,pframe.y));
					this._restorer.dispose();
					this._restorer = null;
				}
				break;
			case 2:
				this._drawTarget.fillRect(new openfl.geom.Rectangle(pframe.x,pframe.y,pframe.width,pframe.height),0);
				break;
			default:
			}
		}
		if(frame == 0) this._drawTarget.fillRect(this._drawTarget.rect,0);
		var gframe = this._gif.frames[frame];
		if(gframe.disposalMethod == com.yagp.structs.DisposalMethod.RENDER_PREVIOUS) {
			if(this._restorer != null) this._restorer.dispose();
			this._restorer = new openfl.display.BitmapData(gframe.width,gframe.height,true,0);
			this._restorer.copyPixels(this._drawTarget,new openfl.geom.Rectangle(gframe.x,gframe.y,gframe.width,gframe.height),new openfl.geom.Point());
		}
		this._prevFrame = frame;
		this._drawTarget.copyPixels(gframe.data,gframe.data.rect,new openfl.geom.Point(gframe.x,gframe.y),null,null,true);
	}
	,__class__: com.yagp.GifRenderer
};
com.yagp.structs = {};
com.yagp.structs.DisposalMethod = $hxClasses["com.yagp.structs.DisposalMethod"] = { __ename__ : true, __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"] };
com.yagp.structs.DisposalMethod.UNSPECIFIED = ["UNSPECIFIED",0];
com.yagp.structs.DisposalMethod.UNSPECIFIED.toString = $estr;
com.yagp.structs.DisposalMethod.UNSPECIFIED.__enum__ = com.yagp.structs.DisposalMethod;
com.yagp.structs.DisposalMethod.NO_ACTION = ["NO_ACTION",1];
com.yagp.structs.DisposalMethod.NO_ACTION.toString = $estr;
com.yagp.structs.DisposalMethod.NO_ACTION.__enum__ = com.yagp.structs.DisposalMethod;
com.yagp.structs.DisposalMethod.FILL_BACKGROUND = ["FILL_BACKGROUND",2];
com.yagp.structs.DisposalMethod.FILL_BACKGROUND.toString = $estr;
com.yagp.structs.DisposalMethod.FILL_BACKGROUND.__enum__ = com.yagp.structs.DisposalMethod;
com.yagp.structs.DisposalMethod.RENDER_PREVIOUS = ["RENDER_PREVIOUS",3];
com.yagp.structs.DisposalMethod.RENDER_PREVIOUS.toString = $estr;
com.yagp.structs.DisposalMethod.RENDER_PREVIOUS.__enum__ = com.yagp.structs.DisposalMethod;
com.yagp.structs.DisposalMethod.UNDEFINED = function(index) { var $x = ["UNDEFINED",4,index]; $x.__enum__ = com.yagp.structs.DisposalMethod; $x.toString = $estr; return $x; };
com.yagp.structs.ExtensionFactory = function(code) {
	this.code = code;
};
$hxClasses["com.yagp.structs.ExtensionFactory"] = com.yagp.structs.ExtensionFactory;
com.yagp.structs.ExtensionFactory.__name__ = ["com","yagp","structs","ExtensionFactory"];
com.yagp.structs.ExtensionFactory.prototype = {
	create: function(input) {
		throw "Not implemented";
		return null;
	}
	,__class__: com.yagp.structs.ExtensionFactory
};
com.yagp.structs.GifBytes = function(bytes) {
	this.bytes = bytes;
	this.position = 0;
};
$hxClasses["com.yagp.structs.GifBytes"] = com.yagp.structs.GifBytes;
com.yagp.structs.GifBytes.__name__ = ["com","yagp","structs","GifBytes"];
com.yagp.structs.GifBytes.prototype = {
	readByte: function() {
		return this.bytes.get(this.position++);
	}
	,readShort: function() {
		return this.bytes.get(this.position++) | this.bytes.get(this.position++) << 8;
	}
	,readInt: function() {
		return this.bytes.get(this.position++) | this.bytes.get(this.position++) << 8 | this.bytes.get(this.position++) << 16 | this.bytes.get(this.position++) << 24;
	}
	,readUInt: function() {
		return this.bytes.get(this.position++) | this.bytes.get(this.position++) << 8 | this.bytes.get(this.position++) << 16 | this.bytes.get(this.position++) << 24;
	}
	,readUTFBytes: function(len) {
		var str = this.bytes.getString(this.position,len);
		this.position += len;
		return str;
	}
	,get_bytesAvailable: function() {
		return this.bytes.length - this.position;
	}
	,get_length: function() {
		return this.bytes.length;
	}
	,__class__: com.yagp.structs.GifBytes
	,__properties__: {get_length:"get_length",get_bytesAvailable:"get_bytesAvailable"}
};
com.yagp.structs.GifFrame = function(colorTable,imageDescriptor,graphicsDecoder,graphicsControl) {
	this.x = imageDescriptor.x;
	this.y = imageDescriptor.y;
	this.width = imageDescriptor.width;
	this.height = imageDescriptor.height;
	this.data = new openfl.display.BitmapData(this.width,this.height,true,0);
	var pixels = graphicsDecoder.pixels;
	if(graphicsControl != null) {
		this.delay = graphicsControl.delay * 10;
		if(this.delay <= 10) this.delay = 100;
		this.userInput = graphicsControl.userInput;
		this.disposalMethod = graphicsControl.disposalMethod;
		if(graphicsControl.transparentColor) {
			this.transparentIndex = graphicsControl.transparentIndex;
			var _g1 = 0;
			var _g = pixels.length;
			while(_g1 < _g) {
				var i = _g1++;
				if((function($this) {
					var $r;
					var $int = pixels.data[i];
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == (function($this) {
					var $r;
					var int1 = graphicsControl.transparentIndex;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this))) {
					if(!pixels.fixed) {
						if(i >= pixels.length) pixels.length = i + 1;
						if(pixels.data.length < pixels.length) {
							var data;
							var this1;
							this1 = new Array(pixels.data.length + 10);
							data = this1;
							haxe.ds._Vector.Vector_Impl_.blit(pixels.data,0,data,0,pixels.data.length);
							pixels.data = data;
						}
					}
					pixels.data[i] = 0;
				} else {
					if(!pixels.fixed) {
						if(i >= pixels.length) pixels.length = i + 1;
						if(pixels.data.length < pixels.length) {
							var data1;
							var this2;
							this2 = new Array(pixels.data.length + 10);
							data1 = this2;
							haxe.ds._Vector.Vector_Impl_.blit(pixels.data,0,data1,0,pixels.data.length);
							pixels.data = data1;
						}
					}
					pixels.data[i] = colorTable[pixels.data[i]];
				}
			}
		} else {
			this.transparentIndex = -1;
			var _g11 = 0;
			var _g2 = pixels.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(!pixels.fixed) {
					if(i1 >= pixels.length) pixels.length = i1 + 1;
					if(pixels.data.length < pixels.length) {
						var data2;
						var this3;
						this3 = new Array(pixels.data.length + 10);
						data2 = this3;
						haxe.ds._Vector.Vector_Impl_.blit(pixels.data,0,data2,0,pixels.data.length);
						pixels.data = data2;
					}
				}
				pixels.data[i1] = colorTable[pixels.data[i1]];
			}
		}
	} else {
		this.transparentIndex = -1;
		this.delay = 100;
		this.userInput = false;
		this.disposalMethod = com.yagp.structs.DisposalMethod.UNSPECIFIED;
		var _g12 = 0;
		var _g3 = pixels.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			if(!pixels.fixed) {
				if(i2 >= pixels.length) pixels.length = i2 + 1;
				if(pixels.data.length < pixels.length) {
					var data3;
					var this4;
					this4 = new Array(pixels.data.length + 10);
					data3 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(pixels.data,0,data3,0,pixels.data.length);
					pixels.data = data3;
				}
			}
			pixels.data[i2] = colorTable[pixels.data[i2]];
		}
	}
	if(imageDescriptor.interlaced) {
		this.data.lock();
		var offset = this.interlacedFor(pixels,8,0,0);
		offset = this.interlacedFor(pixels,8,4,offset);
		offset = this.interlacedFor(pixels,4,2,offset);
		this.interlacedFor(pixels,2,1,offset);
		this.data.unlock();
	} else this.data.setVector(this.data.rect,pixels);
	graphicsDecoder.pixels = null;
};
$hxClasses["com.yagp.structs.GifFrame"] = com.yagp.structs.GifFrame;
com.yagp.structs.GifFrame.__name__ = ["com","yagp","structs","GifFrame"];
com.yagp.structs.GifFrame.prototype = {
	interlacedFor: function(pixels,step,startY,offset) {
		var y = startY;
		while(startY < this.height) {
			var _g1 = 0;
			var _g = this.width;
			while(_g1 < _g) {
				var x = _g1++;
				this.data.setPixel32(x,y,(function($this) {
					var $r;
					var index = offset++;
					$r = pixels.data[index];
					return $r;
				}(this)));
			}
			y += step;
		}
		return offset;
	}
	,dispose: function() {
		this.data.dispose();
		this.data = null;
		this.disposalMethod = null;
	}
	,__class__: com.yagp.structs.GifFrame
};
com.yagp.structs.GifVersion = $hxClasses["com.yagp.structs.GifVersion"] = { __ename__ : true, __constructs__ : ["GIF87a","GIF89a","Unknown"] };
com.yagp.structs.GifVersion.GIF87a = ["GIF87a",0];
com.yagp.structs.GifVersion.GIF87a.toString = $estr;
com.yagp.structs.GifVersion.GIF87a.__enum__ = com.yagp.structs.GifVersion;
com.yagp.structs.GifVersion.GIF89a = ["GIF89a",1];
com.yagp.structs.GifVersion.GIF89a.toString = $estr;
com.yagp.structs.GifVersion.GIF89a.__enum__ = com.yagp.structs.GifVersion;
com.yagp.structs.GifVersion.Unknown = function(version) { var $x = ["Unknown",2,version]; $x.__enum__ = com.yagp.structs.GifVersion; $x.toString = $estr; return $x; };
com.yagp.structs.GraphicsControl = function(input) {
	input.position++;
	var packed = input.bytes.get(input.position++);
	var method = (packed & 28) >> 2;
	this.userInput = (packed & 2) == 2;
	this.transparentColor = (packed & 1) == 1;
	switch(method) {
	case 0:
		this.disposalMethod = com.yagp.structs.DisposalMethod.UNSPECIFIED;
		break;
	case 1:
		this.disposalMethod = com.yagp.structs.DisposalMethod.NO_ACTION;
		break;
	case 2:
		this.disposalMethod = com.yagp.structs.DisposalMethod.FILL_BACKGROUND;
		break;
	case 3:
		this.disposalMethod = com.yagp.structs.DisposalMethod.RENDER_PREVIOUS;
		break;
	default:
		this.disposalMethod = com.yagp.structs.DisposalMethod.UNDEFINED(method);
	}
	this.delay = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.transparentIndex = input.bytes.get(input.position++);
	input.position++;
};
$hxClasses["com.yagp.structs.GraphicsControl"] = com.yagp.structs.GraphicsControl;
com.yagp.structs.GraphicsControl.__name__ = ["com","yagp","structs","GraphicsControl"];
com.yagp.structs.GraphicsControl.prototype = {
	__class__: com.yagp.structs.GraphicsControl
};
com.yagp.structs.GraphicsDecoder = function(input,descriptor) {
	var minCodeSize = input.bytes.get(input.position++);
	this.blockSize = input.bytes.get(input.position++) - 1;
	this["byte"] = input.bytes.get(input.position++);
	this.bitsCount = 8;
	this._input = input;
	var length = descriptor.width * descriptor.height;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = true;
	this.pixels = this1;
	var clearCode = 1 << minCodeSize;
	var eoiCode = clearCode + 1;
	var codeSize = minCodeSize + 1;
	var codeMask = (1 << codeSize) - 1;
	var i = 0;
	var baseDict = new Array();
	var _g = 0;
	while(_g < clearCode) {
		var i1 = _g++;
		baseDict[i1] = [i1];
	}
	baseDict[clearCode] = [];
	baseDict[eoiCode] = [];
	var dict = new Array();
	var code = 0;
	var last = 0;
	while(i < this.pixels.length) {
		last = code;
		code = this.readCode(codeSize,codeMask);
		if(code == clearCode) {
			dict = baseDict.slice();
			codeSize = minCodeSize + 1;
			codeMask = (1 << codeSize) - 1;
			continue;
		}
		if(code == eoiCode) break;
		if(code < dict.length) {
			if(last != clearCode) {
				var newArr = dict[last].slice();
				newArr.push(dict[code][0]);
				dict.push(newArr);
			}
		} else {
			if(code != dict.length) throw "Invalid LZW code.";
			var newArr1 = dict[last].slice();
			newArr1.push(dict[last][0]);
			dict.push(newArr1);
		}
		var _g1 = 0;
		var _g11 = dict[code];
		while(_g1 < _g11.length) {
			var item = _g11[_g1];
			++_g1;
			var this3 = this.pixels;
			var key = i++;
			if(!this3.fixed) {
				if(key >= this3.length) this3.length = key + 1;
				if(this3.data.length < this3.length) {
					var data;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
					this3.data = data;
				}
			}
			this3.data[key] = item;
		}
		if(dict.length == 1 << codeSize && codeSize < 12) {
			codeSize++;
			codeMask = (1 << codeSize) - 1;
		}
	}
	while(this.blockSize > 0) {
		input.position += this.blockSize;
		this.blockSize = input.bytes.get(input.position++);
	}
};
$hxClasses["com.yagp.structs.GraphicsDecoder"] = com.yagp.structs.GraphicsDecoder;
com.yagp.structs.GraphicsDecoder.__name__ = ["com","yagp","structs","GraphicsDecoder"];
com.yagp.structs.GraphicsDecoder.prototype = {
	readCode: function(size,mask) {
		while(this.bitsCount < size) {
			if(this.blockSize == 0) break;
			this["byte"] |= this._input.readByte() << this.bitsCount;
			this.bitsCount += 8;
			this.blockSize--;
			if(this.blockSize == 0) this.blockSize = this._input.readByte();
		}
		var code = this["byte"] & mask;
		this["byte"] >>= size;
		this.bitsCount -= size;
		return code;
	}
	,__class__: com.yagp.structs.GraphicsDecoder
};
com.yagp.structs.IExtension = function() { };
$hxClasses["com.yagp.structs.IExtension"] = com.yagp.structs.IExtension;
com.yagp.structs.IExtension.__name__ = ["com","yagp","structs","IExtension"];
com.yagp.structs.ImageDescriptor = function(input) {
	this.x = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.y = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.width = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.height = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	var packed = input.bytes.get(input.position++);
	this.localColorTable = (packed & 128) == 128;
	this.interlaced = (packed & 64) == 64;
	this.sorted = (packed & 32) == 32;
	this.localColorTableSize = 2 << (packed & 7);
};
$hxClasses["com.yagp.structs.ImageDescriptor"] = com.yagp.structs.ImageDescriptor;
com.yagp.structs.ImageDescriptor.__name__ = ["com","yagp","structs","ImageDescriptor"];
com.yagp.structs.ImageDescriptor.prototype = {
	__class__: com.yagp.structs.ImageDescriptor
};
com.yagp.structs.LSD = function(input) {
	this.width = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	this.height = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	var packedField = input.bytes.get(input.position++);
	this.globalColorTable = (packedField & 128) == 128;
	this.colorResolution = (packedField & 112) >>> 4;
	this.sorted = (packedField & 8) == 8;
	this.globalColorTableSize = 2 << (packedField & 7);
	this.backgroundColorIndex = input.bytes.get(input.position++);
	this.pixelAspectRatio = input.bytes.get(input.position++);
	if(this.pixelAspectRatio != 0) this.pixelAspectRatio = (this.pixelAspectRatio + 15) / 64; else this.pixelAspectRatio = 1;
};
$hxClasses["com.yagp.structs.LSD"] = com.yagp.structs.LSD;
com.yagp.structs.LSD.__name__ = ["com","yagp","structs","LSD"];
com.yagp.structs.LSD.prototype = {
	__class__: com.yagp.structs.LSD
};
com.yagp.structs.NetscapeExtension = function(input) {
	input.position += 2;
	this.iterations = input.bytes.get(input.position++) | input.bytes.get(input.position++) << 8;
	input.position++;
};
$hxClasses["com.yagp.structs.NetscapeExtension"] = com.yagp.structs.NetscapeExtension;
com.yagp.structs.NetscapeExtension.__name__ = ["com","yagp","structs","NetscapeExtension"];
com.yagp.structs.NetscapeExtension.prototype = {
	__class__: com.yagp.structs.NetscapeExtension
};
var format = {};
format.SVG = function(content) {
	this.data = new format.svg.SVGData(Xml.parse(content));
};
$hxClasses["format.SVG"] = format.SVG;
format.SVG.__name__ = ["format","SVG"];
format.SVG.prototype = {
	render: function(graphics,x,y,width,height) {
		if(height == null) height = -1;
		if(width == null) width = -1;
		if(y == null) y = 0;
		if(x == null) x = 0;
		var matrix = new openfl.geom.Matrix();
		matrix.identity();
		matrix.translate(x,y);
		if(width > -1 && height > -1) matrix.scale(width / this.data.width,height / this.data.height);
		var renderer = new format.svg.SVGRenderer(this.data);
		renderer.render(graphics,matrix);
	}
	,__class__: format.SVG
};
format.gfx = {};
format.gfx.Gfx = function() {
};
$hxClasses["format.gfx.Gfx"] = format.gfx.Gfx;
format.gfx.Gfx.__name__ = ["format","gfx","Gfx"];
format.gfx.Gfx.prototype = {
	geometryOnly: function() {
		return false;
	}
	,size: function(inWidth,inHeight) {
	}
	,beginGradientFill: function(grad) {
	}
	,beginFill: function(color,alpha) {
	}
	,endFill: function() {
	}
	,lineStyle: function(style) {
	}
	,endLineStyle: function() {
	}
	,moveTo: function(inX,inY) {
	}
	,lineTo: function(inX,inY) {
	}
	,curveTo: function(inCX,inCY,inX,inY) {
	}
	,renderText: function(text) {
	}
	,eof: function() {
	}
	,__class__: format.gfx.Gfx
};
format.gfx.Gfx2Haxe = function() {
	format.gfx.Gfx.call(this);
	this.commands = [];
};
$hxClasses["format.gfx.Gfx2Haxe"] = format.gfx.Gfx2Haxe;
format.gfx.Gfx2Haxe.__name__ = ["format","gfx","Gfx2Haxe"];
format.gfx.Gfx2Haxe.__super__ = format.gfx.Gfx;
format.gfx.Gfx2Haxe.prototype = $extend(format.gfx.Gfx.prototype,{
	f2a: function(f) {
		if(Math.abs(f) < 0.000001) return "0";
		if(Math.abs(1 - f) < 0.000001) return "1";
		return f + "";
	}
	,newMatrix: function(m) {
		return "new Matrix(" + this.f2a(m.a) + "," + this.f2a(m.b) + "," + this.f2a(m.c) + "," + this.f2a(m.d) + "," + this.f2a(m.tx) + "," + this.f2a(m.ty) + ")";
	}
	,beginGradientFill: function(grad) {
		this.commands.push("g.beginGradientFill(" + Std.string(grad.type) + "," + Std.string(grad.colors) + "," + Std.string(grad.alphas) + "," + Std.string(grad.ratios) + "," + this.newMatrix(grad.matrix) + "," + Std.string(grad.spread) + "," + Std.string(grad.interp) + "," + grad.focus + ");");
	}
	,beginFill: function(color,alpha) {
		this.commands.push("g.beginFill(" + color + "," + this.f2a(alpha) + ");");
	}
	,endFill: function() {
		this.commands.push("g.endFill();");
	}
	,lineStyle: function(style) {
		this.commands.push("g.lineStyle(" + this.f2a(style.thickness) + "," + style.color + "," + this.f2a(style.alpha) + "," + (style.pixelHinting == null?"null":"" + style.pixelHinting) + "," + Std.string(style.scaleMode) + "," + Std.string(style.capsStyle) + "," + Std.string(style.jointStyle) + "," + this.f2a(style.miterLimit));
	}
	,endLineStyle: function() {
		this.commands.push("g.lineStyle();");
	}
	,moveTo: function(inX,inY) {
		this.commands.push("g.moveTo(" + inX + "," + inY + ");");
	}
	,lineTo: function(inX,inY) {
		this.commands.push("g.lineTo(" + inX + "," + inY + ");");
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		this.commands.push("g.curveTo(" + inCX + "," + inCY + "," + inX + "," + inY + ");");
	}
	,__class__: format.gfx.Gfx2Haxe
});
openfl.display.CapsStyle = $hxClasses["openfl.display.CapsStyle"] = { __ename__ : true, __constructs__ : ["NONE","ROUND","SQUARE"] };
openfl.display.CapsStyle.NONE = ["NONE",0];
openfl.display.CapsStyle.NONE.toString = $estr;
openfl.display.CapsStyle.NONE.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.ROUND = ["ROUND",1];
openfl.display.CapsStyle.ROUND.toString = $estr;
openfl.display.CapsStyle.ROUND.__enum__ = openfl.display.CapsStyle;
openfl.display.CapsStyle.SQUARE = ["SQUARE",2];
openfl.display.CapsStyle.SQUARE.toString = $estr;
openfl.display.CapsStyle.SQUARE.__enum__ = openfl.display.CapsStyle;
openfl.display.InterpolationMethod = $hxClasses["openfl.display.InterpolationMethod"] = { __ename__ : true, __constructs__ : ["RGB","LINEAR_RGB"] };
openfl.display.InterpolationMethod.RGB = ["RGB",0];
openfl.display.InterpolationMethod.RGB.toString = $estr;
openfl.display.InterpolationMethod.RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.InterpolationMethod.LINEAR_RGB = ["LINEAR_RGB",1];
openfl.display.InterpolationMethod.LINEAR_RGB.toString = $estr;
openfl.display.InterpolationMethod.LINEAR_RGB.__enum__ = openfl.display.InterpolationMethod;
openfl.display.JointStyle = $hxClasses["openfl.display.JointStyle"] = { __ename__ : true, __constructs__ : ["MITER","ROUND","BEVEL"] };
openfl.display.JointStyle.MITER = ["MITER",0];
openfl.display.JointStyle.MITER.toString = $estr;
openfl.display.JointStyle.MITER.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.ROUND = ["ROUND",1];
openfl.display.JointStyle.ROUND.toString = $estr;
openfl.display.JointStyle.ROUND.__enum__ = openfl.display.JointStyle;
openfl.display.JointStyle.BEVEL = ["BEVEL",2];
openfl.display.JointStyle.BEVEL.toString = $estr;
openfl.display.JointStyle.BEVEL.__enum__ = openfl.display.JointStyle;
openfl.display.LineScaleMode = $hxClasses["openfl.display.LineScaleMode"] = { __ename__ : true, __constructs__ : ["HORIZONTAL","NONE","NORMAL","VERTICAL"] };
openfl.display.LineScaleMode.HORIZONTAL = ["HORIZONTAL",0];
openfl.display.LineScaleMode.HORIZONTAL.toString = $estr;
openfl.display.LineScaleMode.HORIZONTAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NONE = ["NONE",1];
openfl.display.LineScaleMode.NONE.toString = $estr;
openfl.display.LineScaleMode.NONE.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.NORMAL = ["NORMAL",2];
openfl.display.LineScaleMode.NORMAL.toString = $estr;
openfl.display.LineScaleMode.NORMAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.LineScaleMode.VERTICAL = ["VERTICAL",3];
openfl.display.LineScaleMode.VERTICAL.toString = $estr;
openfl.display.LineScaleMode.VERTICAL.__enum__ = openfl.display.LineScaleMode;
openfl.display.SpreadMethod = $hxClasses["openfl.display.SpreadMethod"] = { __ename__ : true, __constructs__ : ["REPEAT","REFLECT","PAD"] };
openfl.display.SpreadMethod.REPEAT = ["REPEAT",0];
openfl.display.SpreadMethod.REPEAT.toString = $estr;
openfl.display.SpreadMethod.REPEAT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.REFLECT = ["REFLECT",1];
openfl.display.SpreadMethod.REFLECT.toString = $estr;
openfl.display.SpreadMethod.REFLECT.__enum__ = openfl.display.SpreadMethod;
openfl.display.SpreadMethod.PAD = ["PAD",2];
openfl.display.SpreadMethod.PAD.toString = $estr;
openfl.display.SpreadMethod.PAD.__enum__ = openfl.display.SpreadMethod;
format.gfx.GfxBytes = function(inBuffer,inFlags) {
	if(inFlags == null) inFlags = 0;
	format.gfx.Gfx.call(this);
	if(inBuffer == null) this.buffer = new lime.utils.ByteArray(); else this.buffer = inBuffer;
};
$hxClasses["format.gfx.GfxBytes"] = format.gfx.GfxBytes;
format.gfx.GfxBytes.__name__ = ["format","gfx","GfxBytes"];
format.gfx.GfxBytes.baseCoder = null;
format.gfx.GfxBytes.fromString = function(inString) {
	if(format.gfx.GfxBytes.baseCoder == null) format.gfx.GfxBytes.baseCoder = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(format.gfx.GfxBytes.base64));
	var bytes = new lime.utils.ByteArray();
	bytes.writeUTF(inString);
	return new format.gfx.GfxBytes(bytes);
};
format.gfx.GfxBytes.__super__ = format.gfx.Gfx;
format.gfx.GfxBytes.prototype = $extend(format.gfx.Gfx.prototype,{
	toString: function() {
		return "";
	}
	,eof: function() {
		this.buffer.writeByte(0);
	}
	,iterate: function(inGfx) {
		this.buffer.position = 0;
		while(true) {
			var _g = this.buffer.readByte();
			switch(_g) {
			case 0:
				return;
			case 1:
				var w = this.buffer.readFloat();
				var h = this.buffer.readFloat();
				inGfx.size(w,h);
				break;
			case 10:
				var col = this.readRGB();
				var alpha = this.buffer.readFloat();
				inGfx.beginFill(col,alpha);
				break;
			case 11:
				var grad = new format.gfx.Gradient();
				grad.type = Type.createEnumIndex(openfl.display.GradientType,this.buffer.readByte());
				var len = this.buffer.readByte();
				var _g1 = 0;
				while(_g1 < len) {
					var i = _g1++;
					grad.colors.push(this.readRGB());
					grad.alphas.push(this.buffer.readByte() / 255.0);
					grad.ratios.push(this.buffer.readByte());
				}
				grad.matrix.a = this.buffer.readFloat();
				grad.matrix.b = this.buffer.readFloat();
				grad.matrix.c = this.buffer.readFloat();
				grad.matrix.d = this.buffer.readFloat();
				grad.matrix.tx = this.buffer.readFloat();
				grad.matrix.ty = this.buffer.readFloat();
				grad.spread = format.gfx.GfxBytes.spreadMethods[this.buffer.readByte()];
				grad.interp = format.gfx.GfxBytes.interpolationMethods[this.buffer.readByte()];
				grad.focus = this.buffer.readFloat();
				inGfx.beginGradientFill(grad);
				break;
			case 12:
				inGfx.endFill();
				break;
			case 20:
				var style = new format.gfx.LineStyle();
				style.thickness = this.buffer.readFloat();
				style.color = this.readRGB();
				style.alpha = this.buffer.readFloat();
				style.pixelHinting = this.buffer.readByte() > 0;
				style.scaleMode = format.gfx.GfxBytes.scaleModes[this.buffer.readByte()];
				style.capsStyle = format.gfx.GfxBytes.capsStyles[this.buffer.readByte()];
				style.jointStyle = format.gfx.GfxBytes.jointStyles[this.buffer.readByte()];
				style.miterLimit = this.buffer.readFloat();
				inGfx.lineStyle(style);
				break;
			case 21:
				inGfx.endLineStyle();
				break;
			case 30:
				var x = this.buffer.readFloat();
				var y = this.buffer.readFloat();
				inGfx.moveTo(x,y);
				break;
			case 31:
				var x1 = this.buffer.readFloat();
				var y1 = this.buffer.readFloat();
				inGfx.lineTo(x1,y1);
				break;
			case 32:
				var cx = this.buffer.readFloat();
				var cy = this.buffer.readFloat();
				var x2 = this.buffer.readFloat();
				var y2 = this.buffer.readFloat();
				inGfx.curveTo(cx,cy,x2,y2);
				break;
			default:
				throw "Unknown gfx buffer format.";
			}
		}
	}
	,size: function(inWidth,inHeight) {
		this.buffer.writeByte(1);
		this.buffer.writeFloat(inWidth);
		this.buffer.writeFloat(inHeight);
	}
	,pushClipped: function(inVal) {
		this.buffer.writeByte(inVal < 0?0:inVal > 255.0?255:inVal | 0);
	}
	,writeRGB: function(inVal) {
		this.buffer.writeByte(inVal >> 16 & 255);
		this.buffer.writeByte(inVal >> 8 & 255);
		this.buffer.writeByte(inVal & 255);
	}
	,readRGB: function() {
		var r = this.buffer.readByte();
		var g = this.buffer.readByte();
		var b = this.buffer.readByte();
		return r << 16 | g << 8 | b;
	}
	,beginGradientFill: function(grad) {
		this.buffer.writeByte(11);
		this.buffer.writeByte(grad.type[1]);
		this.buffer.writeByte(grad.colors.length);
		var _g1 = 0;
		var _g = grad.colors.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.writeRGB((function($this) {
				var $r;
				var $int = grad.colors[i];
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) | 0);
			this.pushClipped(grad.alphas[i] * 255.0);
			this.pushClipped(grad.ratios[i]);
		}
		this.buffer.writeFloat(grad.matrix.a);
		this.buffer.writeFloat(grad.matrix.b);
		this.buffer.writeFloat(grad.matrix.c);
		this.buffer.writeFloat(grad.matrix.d);
		this.buffer.writeFloat(grad.matrix.tx);
		this.buffer.writeFloat(grad.matrix.ty);
		this.buffer.writeByte(grad.spread[1]);
		this.buffer.writeByte(grad.interp[1]);
		this.buffer.writeFloat(grad.focus);
	}
	,beginFill: function(color,alpha) {
		this.buffer.writeByte(10);
		this.writeRGB(color);
		this.buffer.writeFloat(alpha);
	}
	,endFill: function() {
		this.buffer.writeByte(12);
	}
	,lineStyle: function(style) {
		this.buffer.writeByte(20);
		this.buffer.writeFloat(style.thickness);
		this.writeRGB(style.color);
		this.buffer.writeFloat(style.alpha);
		this.buffer.writeByte(style.pixelHinting?1:0);
		this.buffer.writeByte(style.scaleMode[1]);
		this.buffer.writeByte(style.capsStyle[1]);
		this.buffer.writeByte(style.jointStyle[1]);
		this.buffer.writeFloat(style.miterLimit);
	}
	,endLineStyle: function() {
		this.buffer.writeByte(21);
	}
	,moveTo: function(inX,inY) {
		this.buffer.writeByte(30);
		this.buffer.writeFloat(inX);
		this.buffer.writeFloat(inY);
	}
	,lineTo: function(inX,inY) {
		this.buffer.writeByte(31);
		this.buffer.writeFloat(inX);
		this.buffer.writeFloat(inY);
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		this.buffer.writeByte(32);
		this.buffer.writeFloat(inCX);
		this.buffer.writeFloat(inCY);
		this.buffer.writeFloat(inX);
		this.buffer.writeFloat(inY);
	}
	,__class__: format.gfx.GfxBytes
});
format.gfx.GfxExtent = function() {
	format.gfx.Gfx.call(this);
	this.extent = null;
};
$hxClasses["format.gfx.GfxExtent"] = format.gfx.GfxExtent;
format.gfx.GfxExtent.__name__ = ["format","gfx","GfxExtent"];
format.gfx.GfxExtent.__super__ = format.gfx.Gfx;
format.gfx.GfxExtent.prototype = $extend(format.gfx.Gfx.prototype,{
	addExtent: function(inX,inY) {
		if(this.extent == null) {
			this.extent = new openfl.geom.Rectangle(inX,inY,0,0);
			return;
		}
		if(inX < this.extent.get_left()) this.extent.set_left(inX);
		if(inX > this.extent.get_right()) this.extent.set_right(inX);
		if(inY < this.extent.get_top()) this.extent.set_top(inY);
		if(inY > this.extent.get_bottom()) this.extent.set_bottom(inY);
	}
	,geometryOnly: function() {
		return true;
	}
	,moveTo: function(inX,inY) {
		this.addExtent(inX,inY);
	}
	,lineTo: function(inX,inY) {
		this.addExtent(inX,inY);
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		this.addExtent(inCX,inCY);
		this.addExtent(inX,inY);
	}
	,__class__: format.gfx.GfxExtent
});
format.gfx.GfxGraphics = function(inGraphics) {
	format.gfx.Gfx.call(this);
	this.graphics = inGraphics;
};
$hxClasses["format.gfx.GfxGraphics"] = format.gfx.GfxGraphics;
format.gfx.GfxGraphics.__name__ = ["format","gfx","GfxGraphics"];
format.gfx.GfxGraphics.__super__ = format.gfx.Gfx;
format.gfx.GfxGraphics.prototype = $extend(format.gfx.Gfx.prototype,{
	beginGradientFill: function(grad) {
		this.graphics.beginGradientFill(grad.type,grad.colors,grad.alphas,grad.ratios,grad.matrix,grad.spread,grad.interp,grad.focus);
	}
	,beginFill: function(color,alpha) {
		this.graphics.beginFill(color,alpha);
	}
	,endFill: function() {
		this.graphics.endFill();
	}
	,lineStyle: function(style) {
		this.graphics.lineStyle(style.thickness,style.color,style.alpha,style.pixelHinting,style.scaleMode,style.capsStyle,style.jointStyle,style.miterLimit);
	}
	,endLineStyle: function() {
		this.graphics.lineStyle();
	}
	,moveTo: function(inX,inY) {
		this.graphics.moveTo(inX,inY);
	}
	,lineTo: function(inX,inY) {
		this.graphics.lineTo(inX,inY);
	}
	,curveTo: function(inCX,inCY,inX,inY) {
		this.graphics.curveTo(inCX,inCY,inX,inY);
	}
	,__class__: format.gfx.GfxGraphics
});
format.gfx.GfxTextFinder = function() {
	format.gfx.Gfx.call(this);
};
$hxClasses["format.gfx.GfxTextFinder"] = format.gfx.GfxTextFinder;
format.gfx.GfxTextFinder.__name__ = ["format","gfx","GfxTextFinder"];
format.gfx.GfxTextFinder.__super__ = format.gfx.Gfx;
format.gfx.GfxTextFinder.prototype = $extend(format.gfx.Gfx.prototype,{
	geometryOnly: function() {
		return true;
	}
	,renderText: function(inText) {
		if(this.text == null) this.text = inText;
	}
	,__class__: format.gfx.GfxTextFinder
});
format.gfx.Gradient = function() {
	this.type = openfl.display.GradientType.LINEAR;
	this.colors = [];
	this.alphas = [];
	this.ratios = [];
	this.matrix = new openfl.geom.Matrix();
	this.spread = openfl.display.SpreadMethod.PAD;
	this.interp = openfl.display.InterpolationMethod.RGB;
	this.focus = 0.0;
};
$hxClasses["format.gfx.Gradient"] = format.gfx.Gradient;
format.gfx.Gradient.__name__ = ["format","gfx","Gradient"];
format.gfx.Gradient.prototype = {
	__class__: format.gfx.Gradient
};
format.gfx.LineStyle = function() {
	this.thickness = 1.0;
	this.color = 0;
	this.alpha = 1.0;
	this.pixelHinting = false;
	this.scaleMode = openfl.display.LineScaleMode.NORMAL;
	this.capsStyle = openfl.display.CapsStyle.ROUND;
	this.jointStyle = openfl.display.JointStyle.ROUND;
	this.miterLimit = 3.0;
};
$hxClasses["format.gfx.LineStyle"] = format.gfx.LineStyle;
format.gfx.LineStyle.__name__ = ["format","gfx","LineStyle"];
format.gfx.LineStyle.prototype = {
	__class__: format.gfx.LineStyle
};
format.svg = {};
format.svg.FillType = $hxClasses["format.svg.FillType"] = { __ename__ : true, __constructs__ : ["FillGrad","FillSolid","FillNone"] };
format.svg.FillType.FillGrad = function(grad) { var $x = ["FillGrad",0,grad]; $x.__enum__ = format.svg.FillType; $x.toString = $estr; return $x; };
format.svg.FillType.FillSolid = function(colour) { var $x = ["FillSolid",1,colour]; $x.__enum__ = format.svg.FillType; $x.toString = $estr; return $x; };
format.svg.FillType.FillNone = ["FillNone",2];
format.svg.FillType.FillNone.toString = $estr;
format.svg.FillType.FillNone.__enum__ = format.svg.FillType;
format.svg.Grad = function(inType) {
	format.gfx.Gradient.call(this);
	this.type = inType;
	this.radius = 0.0;
	this.gradMatrix = new openfl.geom.Matrix();
	this.x1 = 0.0;
	this.y1 = 0.0;
	this.x2 = 0.0;
	this.y2 = 0.0;
};
$hxClasses["format.svg.Grad"] = format.svg.Grad;
format.svg.Grad.__name__ = ["format","svg","Grad"];
format.svg.Grad.__super__ = format.gfx.Gradient;
format.svg.Grad.prototype = $extend(format.gfx.Gradient.prototype,{
	updateMatrix: function(inMatrix) {
		var dx = this.x2 - this.x1;
		var dy = this.y2 - this.y1;
		var theta = Math.atan2(dy,dx);
		var len = Math.sqrt(dx * dx + dy * dy);
		var mtx = new openfl.geom.Matrix();
		if(this.type == openfl.display.GradientType.LINEAR) {
			mtx.createGradientBox(1.0,1.0);
			mtx.scale(len,len);
		} else {
			if(this.radius != 0.0) this.focus = len / this.radius;
			mtx.createGradientBox(1.0,1.0);
			mtx.translate(-0.5,-0.5);
			mtx.scale(this.radius * 2,this.radius * 2);
		}
		mtx.rotate(theta);
		mtx.translate(this.x1,this.y1);
		mtx.concat(this.gradMatrix);
		mtx.concat(inMatrix);
		this.matrix = mtx;
	}
	,__class__: format.svg.Grad
});
format.svg.Group = function() {
	this.name = "";
	this.children = [];
};
$hxClasses["format.svg.Group"] = format.svg.Group;
format.svg.Group.__name__ = ["format","svg","Group"];
format.svg.Group.prototype = {
	hasGroup: function(inName) {
		return this.findGroup(inName) != null;
	}
	,findGroup: function(inName) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			switch(child[1]) {
			case 1:
				var group = child[2];
				if(group.name == inName) return group;
				break;
			default:
			}
		}
		return null;
	}
	,__class__: format.svg.Group
};
format.svg.DisplayElement = $hxClasses["format.svg.DisplayElement"] = { __ename__ : true, __constructs__ : ["DisplayPath","DisplayGroup","DisplayText"] };
format.svg.DisplayElement.DisplayPath = function(path) { var $x = ["DisplayPath",0,path]; $x.__enum__ = format.svg.DisplayElement; $x.toString = $estr; return $x; };
format.svg.DisplayElement.DisplayGroup = function(group) { var $x = ["DisplayGroup",1,group]; $x.__enum__ = format.svg.DisplayElement; $x.toString = $estr; return $x; };
format.svg.DisplayElement.DisplayText = function(text) { var $x = ["DisplayText",2,text]; $x.__enum__ = format.svg.DisplayElement; $x.toString = $estr; return $x; };
format.svg.Path = function() {
};
$hxClasses["format.svg.Path"] = format.svg.Path;
format.svg.Path.__name__ = ["format","svg","Path"];
format.svg.Path.prototype = {
	__class__: format.svg.Path
};
format.svg.PathParser = function() {
	if(format.svg.PathParser.sCommandArgs == null) {
		format.svg.PathParser.sCommandArgs = [];
		var _g = 0;
		while(_g < 128) {
			var i = _g++;
			format.svg.PathParser.sCommandArgs[i] = this.commandArgs(i);
		}
	}
};
$hxClasses["format.svg.PathParser"] = format.svg.PathParser;
format.svg.PathParser.__name__ = ["format","svg","PathParser"];
format.svg.PathParser.sCommandArgs = null;
format.svg.PathParser.prototype = {
	parse: function(pathToParse,inConvertCubics) {
		this.lastMoveX = this.lastMoveY = 0;
		var pos = 0;
		var args = new Array();
		var segments = new Array();
		var current_command_pos = 0;
		var current_command = -1;
		var current_args = -1;
		this.prev = null;
		var len = pathToParse.length;
		var finished = false;
		while(pos <= len) {
			var code;
			if(pos == len) code = 32; else code = HxOverrides.cca(pathToParse,pos);
			var command;
			if(code > 0 && code < 128) command = format.svg.PathParser.sCommandArgs[code]; else command = format.svg.PathParser.UNKNOWN;
			if(command == format.svg.PathParser.UNKNOWN) throw "failed parsing path near '" + HxOverrides.substr(pathToParse,pos,null) + "'";
			if(command == format.svg.PathParser.SEPARATOR) pos++; else if(command <= format.svg.PathParser.FLOAT) {
				var end = pos + 1;
				var e_pos = -1;
				var seen_dot = command == format.svg.PathParser.FLOAT_DOT;
				if(command == format.svg.PathParser.FLOAT_EXP) {
					e_pos = 0;
					seen_dot = true;
				}
				while(end < pathToParse.length) {
					var ch = HxOverrides.cca(pathToParse,end);
					var code1;
					if(ch < 0 || ch > 127) code1 = format.svg.PathParser.UNKNOWN; else code1 = format.svg.PathParser.sCommandArgs[ch];
					if(code1 > format.svg.PathParser.FLOAT) break;
					if(code1 == format.svg.PathParser.FLOAT_DOT && seen_dot) break;
					if(e_pos >= 0) {
						if(code1 == format.svg.PathParser.FLOAT_SIGN) {
							if(e_pos != 0) break;
						} else if(code1 != format.svg.PathParser.FLOAT) break;
						e_pos++;
					} else if(code1 == format.svg.PathParser.FLOAT_EXP) {
						if(e_pos >= 0) break;
						e_pos = 0;
						seen_dot = true;
					} else if(code1 == format.svg.PathParser.FLOAT_SIGN) break;
					end++;
				}
				if(current_command < 0) {
				} else {
					var f = Std.parseFloat(HxOverrides.substr(pathToParse,pos,end - pos));
					args.push(f);
				}
				pos = end;
			} else {
				current_command = code;
				current_args = command;
				finished = false;
				current_command_pos = pos;
				args = [];
				pos++;
			}
			var px = 0.0;
			var py = 0.0;
			if(current_command >= 0) {
				if(current_args == args.length) {
					if(inConvertCubics && this.prev != null) {
						px = this.prev.prevX();
						py = this.prev.prevY();
					}
					this.prev = this.createCommand(current_command,args);
					if(this.prev == null) throw "Unknown command " + String.fromCharCode(current_command) + " near '" + HxOverrides.substr(pathToParse,current_command_pos,null) + "'";
					if(inConvertCubics && this.prev.getType() == 4) {
						var cubic = this.prev;
						var quads = cubic.toQuadratics(px,py);
						var _g = 0;
						while(_g < quads.length) {
							var q = quads[_g];
							++_g;
							segments.push(q);
						}
					} else segments.push(this.prev);
					finished = true;
					if(current_args == 0) {
						current_args = -1;
						current_command = -1;
					} else if(current_command == 77) current_command = 76; else if(current_command == 109) current_command = 108;
					current_command_pos = pos;
					args = [];
				}
			}
		}
		if(current_command >= 0 && !finished) throw "Unfinished command (" + args.length + "/" + current_args + ") near '" + HxOverrides.substr(pathToParse,current_command_pos,null) + "'";
		return segments;
	}
	,commandArgs: function(inCode) {
		if(inCode == 10) return format.svg.PathParser.SEPARATOR;
		var str = String.fromCharCode(inCode).toUpperCase();
		if(str >= "0" && str <= "9") return format.svg.PathParser.FLOAT;
		switch(str) {
		case "Z":
			return 0;
		case "H":case "V":
			return 1;
		case "M":case "L":case "T":
			return 2;
		case "S":case "Q":
			return 4;
		case "C":
			return 6;
		case "A":
			return 7;
		case "\t":case "\n":case " ":case "\r":case ",":
			return format.svg.PathParser.SEPARATOR;
		case "-":
			return format.svg.PathParser.FLOAT_SIGN;
		case "+":
			return format.svg.PathParser.FLOAT_SIGN;
		case "E":case "e":
			return format.svg.PathParser.FLOAT_EXP;
		case ".":
			return format.svg.PathParser.FLOAT_DOT;
		}
		return format.svg.PathParser.UNKNOWN;
	}
	,prevX: function() {
		if(this.prev != null) return this.prev.prevX(); else return 0;
	}
	,prevY: function() {
		if(this.prev != null) return this.prev.prevY(); else return 0;
	}
	,prevCX: function() {
		if(this.prev != null) return this.prev.prevCX(); else return 0;
	}
	,prevCY: function() {
		if(this.prev != null) return this.prev.prevCY(); else return 0;
	}
	,createCommand: function(code,a) {
		switch(code) {
		case 77:
			this.lastMoveX = a[0];
			this.lastMoveY = a[1];
			return new format.svg.MoveSegment(this.lastMoveX,this.lastMoveY);
		case 109:
			this.lastMoveX = a[0] + this.prevX();
			this.lastMoveY = a[1] + this.prevY();
			return new format.svg.MoveSegment(this.lastMoveX,this.lastMoveY);
		case 76:
			return new format.svg.DrawSegment(a[0],a[1]);
		case 108:
			return new format.svg.DrawSegment(a[0] + this.prevX(),a[1] + this.prevY());
		case 72:
			return new format.svg.DrawSegment(a[0],this.prevY());
		case 104:
			return new format.svg.DrawSegment(a[0] + this.prevX(),this.prevY());
		case 86:
			return new format.svg.DrawSegment(this.prevX(),a[0]);
		case 118:
			return new format.svg.DrawSegment(this.prevX(),a[0] + this.prevY());
		case 67:
			return new format.svg.CubicSegment(a[0],a[1],a[2],a[3],a[4],a[5]);
		case 99:
			var rx = this.prevX();
			var ry = this.prevY();
			return new format.svg.CubicSegment(a[0] + rx,a[1] + ry,a[2] + rx,a[3] + ry,a[4] + rx,a[5] + ry);
		case 83:
			var rx1 = this.prevX();
			var ry1 = this.prevY();
			return new format.svg.CubicSegment(rx1 * 2 - this.prevCX(),ry1 * 2 - this.prevCY(),a[0],a[1],a[2],a[3]);
		case 115:
			var rx2 = this.prevX();
			var ry2 = this.prevY();
			return new format.svg.CubicSegment(rx2 * 2 - this.prevCX(),ry2 * 2 - this.prevCY(),a[0] + rx2,a[1] + ry2,a[2] + rx2,a[3] + ry2);
		case 81:
			return new format.svg.QuadraticSegment(a[0],a[1],a[2],a[3]);
		case 113:
			var rx3 = this.prevX();
			var ry3 = this.prevY();
			return new format.svg.QuadraticSegment(a[0] + rx3,a[1] + ry3,a[2] + rx3,a[3] + ry3);
		case 84:
			var rx4 = this.prevX();
			var ry4 = this.prevY();
			return new format.svg.QuadraticSegment(rx4 * 2 - this.prevCX(),rx4 * 2 - this.prevCY(),a[2],a[3]);
		case 116:
			var rx5 = this.prevX();
			var ry5 = this.prevY();
			return new format.svg.QuadraticSegment(rx5 * 2 - this.prevCX(),ry5 * 2 - this.prevCY(),a[0] + rx5,a[1] + ry5);
		case 65:
			return new format.svg.ArcSegment(this.prevX(),this.prevY(),a[0],a[1],a[2],a[3] != 0.,a[4] != 0.,a[5],a[6]);
		case 97:
			var rx6 = this.prevX();
			var ry6 = this.prevY();
			return new format.svg.ArcSegment(rx6,ry6,a[0],a[1],a[2],a[3] != 0.,a[4] != 0.,a[5] + rx6,a[6] + ry6);
		case 90:
			return new format.svg.DrawSegment(this.lastMoveX,this.lastMoveY);
		case 122:
			return new format.svg.DrawSegment(this.lastMoveX,this.lastMoveY);
		}
		return null;
	}
	,__class__: format.svg.PathParser
};
format.svg.PathSegment = function(inX,inY) {
	this.x = inX;
	this.y = inY;
};
$hxClasses["format.svg.PathSegment"] = format.svg.PathSegment;
format.svg.PathSegment.__name__ = ["format","svg","PathSegment"];
format.svg.PathSegment.prototype = {
	getType: function() {
		return 0;
	}
	,prevX: function() {
		return this.x;
	}
	,prevY: function() {
		return this.y;
	}
	,prevCX: function() {
		return this.x;
	}
	,prevCY: function() {
		return this.y;
	}
	,toGfx: function(inGfx,ioContext) {
		ioContext.setLast(this.x,this.y);
		ioContext.firstX = ioContext.lastX;
		ioContext.firstY = ioContext.lastY;
		inGfx.moveTo(ioContext.lastX,ioContext.lastY);
	}
	,__class__: format.svg.PathSegment
};
format.svg.MoveSegment = function(inX,inY) {
	format.svg.PathSegment.call(this,inX,inY);
};
$hxClasses["format.svg.MoveSegment"] = format.svg.MoveSegment;
format.svg.MoveSegment.__name__ = ["format","svg","MoveSegment"];
format.svg.MoveSegment.__super__ = format.svg.PathSegment;
format.svg.MoveSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	getType: function() {
		return 1;
	}
	,__class__: format.svg.MoveSegment
});
format.svg.DrawSegment = function(inX,inY) {
	format.svg.PathSegment.call(this,inX,inY);
};
$hxClasses["format.svg.DrawSegment"] = format.svg.DrawSegment;
format.svg.DrawSegment.__name__ = ["format","svg","DrawSegment"];
format.svg.DrawSegment.__super__ = format.svg.PathSegment;
format.svg.DrawSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	toGfx: function(inGfx,ioContext) {
		ioContext.setLast(this.x,this.y);
		inGfx.lineTo(ioContext.lastX,ioContext.lastY);
	}
	,getType: function() {
		return 2;
	}
	,__class__: format.svg.DrawSegment
});
format.svg.QuadraticSegment = function(inCX,inCY,inX,inY) {
	format.svg.PathSegment.call(this,inX,inY);
	this.cx = inCX;
	this.cy = inCY;
};
$hxClasses["format.svg.QuadraticSegment"] = format.svg.QuadraticSegment;
format.svg.QuadraticSegment.__name__ = ["format","svg","QuadraticSegment"];
format.svg.QuadraticSegment.__super__ = format.svg.PathSegment;
format.svg.QuadraticSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	prevCX: function() {
		return this.cx;
	}
	,prevCY: function() {
		return this.cy;
	}
	,toGfx: function(inGfx,ioContext) {
		ioContext.setLast(this.x,this.y);
		inGfx.curveTo(ioContext.transX(this.cx,this.cy),ioContext.transY(this.cx,this.cy),ioContext.lastX,ioContext.lastY);
	}
	,getType: function() {
		return 3;
	}
	,__class__: format.svg.QuadraticSegment
});
format.svg.CubicSegment = function(inCX1,inCY1,inCX2,inCY2,inX,inY) {
	format.svg.PathSegment.call(this,inX,inY);
	this.cx1 = inCX1;
	this.cy1 = inCY1;
	this.cx2 = inCX2;
	this.cy2 = inCY2;
};
$hxClasses["format.svg.CubicSegment"] = format.svg.CubicSegment;
format.svg.CubicSegment.__name__ = ["format","svg","CubicSegment"];
format.svg.CubicSegment.__super__ = format.svg.PathSegment;
format.svg.CubicSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	prevCX: function() {
		return this.cx2;
	}
	,prevCY: function() {
		return this.cy2;
	}
	,Interp: function(a,b,frac) {
		return a + (b - a) * frac;
	}
	,toGfx: function(inGfx,ioContext) {
		var tx0 = ioContext.lastX;
		var ty0 = ioContext.lastY;
		var tx1 = ioContext.transX(this.cx1,this.cy1);
		var ty1 = ioContext.transY(this.cx1,this.cy1);
		var tx2 = ioContext.transX(this.cx2,this.cy2);
		var ty2 = ioContext.transY(this.cx2,this.cy2);
		ioContext.setLast(this.x,this.y);
		var tx3 = ioContext.lastX;
		var ty3 = ioContext.lastY;
		var pa_x = this.Interp(tx0,tx1,0.75);
		var pa_y = this.Interp(ty0,ty1,0.75);
		var pb_x = this.Interp(tx3,tx2,0.75);
		var pb_y = this.Interp(ty3,ty2,0.75);
		var dx = (tx3 - tx0) / 16;
		var dy = (ty3 - ty0) / 16;
		var pcx_1 = this.Interp(tx0,tx1,0.375);
		var pcy_1 = this.Interp(ty0,ty1,0.375);
		var pcx_2 = this.Interp(pa_x,pb_x,0.375) - dx;
		var pcy_2 = this.Interp(pa_y,pb_y,0.375) - dy;
		var pcx_3 = this.Interp(pb_x,pa_x,0.375) + dx;
		var pcy_3 = this.Interp(pb_y,pa_y,0.375) + dy;
		var pcx_4 = this.Interp(tx3,tx2,0.375);
		var pcy_4 = this.Interp(ty3,ty2,0.375);
		var pax_1 = (pcx_1 + pcx_2) * 0.5;
		var pay_1 = (pcy_1 + pcy_2) * 0.5;
		var pax_2 = (pa_x + pb_x) * 0.5;
		var pay_2 = (pa_y + pb_y) * 0.5;
		var pax_3 = (pcx_3 + pcx_4) * 0.5;
		var pay_3 = (pcy_3 + pcy_4) * 0.5;
		inGfx.curveTo(pcx_1,pcy_1,pax_1,pay_1);
		inGfx.curveTo(pcx_2,pcy_2,pax_2,pay_2);
		inGfx.curveTo(pcx_3,pcy_3,pax_3,pay_3);
		inGfx.curveTo(pcx_4,pcy_4,tx3,ty3);
	}
	,toQuadratics: function(tx0,ty0) {
		var result = new Array();
		var pa_x = this.Interp(tx0,this.cx1,0.75);
		var pa_y = this.Interp(ty0,this.cy1,0.75);
		var pb_x = this.Interp(this.x,this.cx2,0.75);
		var pb_y = this.Interp(this.y,this.cy2,0.75);
		var dx = (this.x - tx0) / 16;
		var dy = (this.y - ty0) / 16;
		var pcx_1 = this.Interp(tx0,this.cx1,0.375);
		var pcy_1 = this.Interp(ty0,this.cy1,0.375);
		var pcx_2 = this.Interp(pa_x,pb_x,0.375) - dx;
		var pcy_2 = this.Interp(pa_y,pb_y,0.375) - dy;
		var pcx_3 = this.Interp(pb_x,pa_x,0.375) + dx;
		var pcy_3 = this.Interp(pb_y,pa_y,0.375) + dy;
		var pcx_4 = this.Interp(this.x,this.cx2,0.375);
		var pcy_4 = this.Interp(this.y,this.cy2,0.375);
		var pax_1 = (pcx_1 + pcx_2) * 0.5;
		var pay_1 = (pcy_1 + pcy_2) * 0.5;
		var pax_2 = (pa_x + pb_x) * 0.5;
		var pay_2 = (pa_y + pb_y) * 0.5;
		var pax_3 = (pcx_3 + pcx_4) * 0.5;
		var pay_3 = (pcy_3 + pcy_4) * 0.5;
		result.push(new format.svg.QuadraticSegment(pcx_1,pcy_1,pax_1,pay_1));
		result.push(new format.svg.QuadraticSegment(pcx_2,pcy_2,pax_2,pay_2));
		result.push(new format.svg.QuadraticSegment(pcx_3,pcy_3,pax_3,pay_3));
		result.push(new format.svg.QuadraticSegment(pcx_4,pcy_4,this.x,this.y));
		return result;
	}
	,getType: function() {
		return 4;
	}
	,__class__: format.svg.CubicSegment
});
format.svg.ArcSegment = function(inX1,inY1,inRX,inRY,inRotation,inLargeArc,inSweep,x,y) {
	this.x1 = inX1;
	this.y1 = inY1;
	format.svg.PathSegment.call(this,x,y);
	this.rx = inRX;
	this.ry = inRY;
	this.phi = inRotation;
	this.fA = inLargeArc;
	this.fS = inSweep;
};
$hxClasses["format.svg.ArcSegment"] = format.svg.ArcSegment;
format.svg.ArcSegment.__name__ = ["format","svg","ArcSegment"];
format.svg.ArcSegment.__super__ = format.svg.PathSegment;
format.svg.ArcSegment.prototype = $extend(format.svg.PathSegment.prototype,{
	toGfx: function(inGfx,ioContext) {
		if(this.x1 == this.x && this.y1 == this.y) return;
		ioContext.setLast(this.x,this.y);
		if(this.rx == 0 || this.ry == 0) {
			inGfx.lineTo(ioContext.lastX,ioContext.lastY);
			return;
		}
		if(this.rx < 0) this.rx = -this.rx;
		if(this.ry < 0) this.ry = -this.ry;
		var p = this.phi * Math.PI / 180.0;
		var cos = Math.cos(p);
		var sin = Math.sin(p);
		var dx = (this.x1 - this.x) * 0.5;
		var dy = (this.y1 - this.y) * 0.5;
		var x1_ = cos * dx + sin * dy;
		var y1_ = -sin * dx + cos * dy;
		var rx2 = this.rx * this.rx;
		var ry2 = this.ry * this.ry;
		var x1_2 = x1_ * x1_;
		var y1_2 = y1_ * y1_;
		var s = (rx2 * ry2 - rx2 * y1_2 - ry2 * x1_2) / (rx2 * y1_2 + ry2 * x1_2);
		if(s < 0) s = 0; else if(this.fA == this.fS) s = -Math.sqrt(s); else s = Math.sqrt(s);
		var cx_ = s * this.rx * y1_ / this.ry;
		var cy_ = -s * this.ry * x1_ / this.rx;
		var xm = (this.x1 + this.x) * 0.5;
		var ym = (this.y1 + this.y) * 0.5;
		var cx = cos * cx_ - sin * cy_ + xm;
		var cy = sin * cx_ + cos * cy_ + ym;
		var theta = Math.atan2((y1_ - cy_) / this.ry,(x1_ - cx_) / this.rx);
		var dtheta = Math.atan2((-y1_ - cy_) / this.ry,(-x1_ - cx_) / this.rx) - theta;
		if(this.fS && dtheta < 0) dtheta += 2.0 * Math.PI; else if(!this.fS && dtheta > 0) dtheta -= 2.0 * Math.PI;
		var m = ioContext.matrix;
		var Txc;
		var Txs;
		var Tx0;
		var Tyc;
		var Tys;
		var Ty0;
		if(m != null) {
			Txc = m.a * this.rx;
			Txs = m.c * this.ry;
			Tx0 = m.a * cx + m.c * cy + m.tx;
			Tyc = m.b * this.rx;
			Tys = m.d * this.ry;
			Ty0 = m.b * cx + m.d * cy + m.ty;
		} else {
			Txc = this.rx;
			Txs = 0;
			Tx0 = cx + m.tx;
			Tyc = 0;
			Tys = this.ry;
			Ty0 = cy + m.ty;
		}
		var len = Math.abs(dtheta) * Math.sqrt(Txc * Txc + Txs * Txs + Tyc * Tyc + Tys * Tys);
		len *= 5;
		var steps = Math.round(len);
		if(steps > 1) {
			dtheta /= steps;
			var _g1 = 1;
			var _g = steps - 1;
			while(_g1 < _g) {
				var i = _g1++;
				var c = Math.cos(theta);
				var s1 = Math.sin(theta);
				theta += dtheta;
				inGfx.lineTo(Txc * c + Txs * s1 + Tx0,Tyc * c + Tys * s1 + Ty0);
			}
		}
		inGfx.lineTo(ioContext.lastX,ioContext.lastY);
	}
	,getType: function() {
		return 5;
	}
	,__class__: format.svg.ArcSegment
});
format.svg.RenderContext = function(inMatrix,inRect,inW,inH) {
	this.matrix = inMatrix;
	this.rect = inRect;
	if(inW != null) this.rectW = inW; else if(inRect != null) this.rectW = inRect.width; else this.rectW = 1;
	if(inH != null) this.rectH = inH; else if(inRect != null) this.rectH = inRect.height; else this.rectH = 1;
	this.firstX = 0;
	this.firstY = 0;
	this.lastX = 0;
	this.lastY = 0;
};
$hxClasses["format.svg.RenderContext"] = format.svg.RenderContext;
format.svg.RenderContext.__name__ = ["format","svg","RenderContext"];
format.svg.RenderContext.prototype = {
	transX: function(inX,inY) {
		if(this.rect != null && inX > this.rect.x) {
			if(inX > this.rect.get_right()) inX += this.rectW - this.rect.width; else inX = this.rect.x + this.rectW * (inX - this.rect.x) / this.rect.width;
		}
		return inX * this.matrix.a + inY * this.matrix.c + this.matrix.tx;
	}
	,transY: function(inX,inY) {
		if(this.rect != null && inY > this.rect.y) {
			if(inY > this.rect.get_right()) inY += this.rectH - this.rect.height; else inY = this.rect.y + this.rectH * (inY - this.rect.y) / this.rect.height;
		}
		return inX * this.matrix.b + inY * this.matrix.d + this.matrix.ty;
	}
	,setLast: function(inX,inY) {
		this.lastX = this.transX(inX,inY);
		this.lastY = this.transY(inX,inY);
	}
	,__class__: format.svg.RenderContext
};
format.svg.SVGData = function(inXML,inConvertCubics) {
	if(inConvertCubics == null) inConvertCubics = false;
	format.svg.Group.call(this);
	var svg = inXML.firstElement();
	if(svg == null || svg.get_nodeName() != "svg" && svg.get_nodeName() != "svg:svg") throw "Not an SVG file (" + (svg == null?"null":svg.get_nodeName()) + ")";
	this.mGrads = new haxe.ds.StringMap();
	this.mPathParser = new format.svg.PathParser();
	this.mConvertCubics = inConvertCubics;
	this.width = this.getFloatStyle("width",svg,null,0.0);
	this.height = this.getFloatStyle("height",svg,null,0.0);
	if(this.width == 0 && this.height == 0) this.width = this.height = 400; else if(this.width == 0) this.width = this.height; else if(this.height == 0) this.height = this.width;
	this.loadGroup(this,svg,new openfl.geom.Matrix(),null);
};
$hxClasses["format.svg.SVGData"] = format.svg.SVGData;
format.svg.SVGData.__name__ = ["format","svg","SVGData"];
format.svg.SVGData.__super__ = format.svg.Group;
format.svg.SVGData.prototype = $extend(format.svg.Group.prototype,{
	applyTransform: function(ioMatrix,inTrans) {
		var scale = 1.0;
		if(format.svg.SVGData.mTranslateMatch.match(inTrans)) ioMatrix.translate(Std.parseFloat(format.svg.SVGData.mTranslateMatch.matched(1)),Std.parseFloat(format.svg.SVGData.mTranslateMatch.matched(2))); else if(format.svg.SVGData.mScaleMatch.match(inTrans)) {
			var s = Std.parseFloat(format.svg.SVGData.mScaleMatch.matched(1));
			ioMatrix.scale(s,s);
			scale = s;
		} else if(format.svg.SVGData.mMatrixMatch.match(inTrans)) {
			var m = new openfl.geom.Matrix(Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(1)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(2)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(3)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(4)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(5)),Std.parseFloat(format.svg.SVGData.mMatrixMatch.matched(6)));
			m.concat(ioMatrix);
			ioMatrix.a = m.a;
			ioMatrix.b = m.b;
			ioMatrix.c = m.c;
			ioMatrix.d = m.d;
			ioMatrix.tx = m.tx;
			ioMatrix.ty = m.ty;
			scale = Math.sqrt(ioMatrix.a * ioMatrix.a + ioMatrix.c * ioMatrix.c);
		} else haxe.Log.trace("Warning, unknown transform:" + inTrans,{ fileName : "SVGData.hx", lineNumber : 117, className : "format.svg.SVGData", methodName : "applyTransform"});
		return scale;
	}
	,dumpGroup: function(g,indent) {
		haxe.Log.trace(indent + "Group:" + g.name,{ fileName : "SVGData.hx", lineNumber : 128, className : "format.svg.SVGData", methodName : "dumpGroup"});
		indent += "  ";
		var _g = 0;
		var _g1 = g.children;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			switch(e[1]) {
			case 0:
				var path = e[2];
				haxe.Log.trace(indent + "Path" + "  " + Std.string(path.matrix),{ fileName : "SVGData.hx", lineNumber : 135, className : "format.svg.SVGData", methodName : "dumpGroup"});
				break;
			case 1:
				var group = e[2];
				this.dumpGroup(group,indent + "   ");
				break;
			case 2:
				var text = e[2];
				haxe.Log.trace(indent + "Text " + text.text,{ fileName : "SVGData.hx", lineNumber : 137, className : "format.svg.SVGData", methodName : "dumpGroup"});
				break;
			}
		}
	}
	,getColorStyle: function(inKey,inNode,inStyles,inDefault) {
		var s = this.getStyle(inKey,inNode,inStyles,"");
		if(s == "") return inDefault;
		if(s.charAt(0) == "#") return Std.parseInt("0x" + HxOverrides.substr(s,1,null));
		return Std.parseInt(s);
	}
	,getFillStyle: function(inKey,inNode,inStyles) {
		var s = this.getStyle(inKey,inNode,inStyles,"");
		if(s == "") return format.svg.SVGData.defaultFill;
		if(s.charAt(0) == "#") return format.svg.FillType.FillSolid(Std.parseInt("0x" + HxOverrides.substr(s,1,null)));
		if(s == "none") return format.svg.FillType.FillNone;
		if(format.svg.SVGData.mURLMatch.match(s)) {
			var url = format.svg.SVGData.mURLMatch.matched(1);
			if(this.mGrads.exists(url)) return format.svg.FillType.FillGrad(this.mGrads.get(url));
			throw "Unknown url:" + url;
		}
		throw "Unknown fill string:" + s;
		return format.svg.FillType.FillNone;
	}
	,getFloat: function(inXML,inName,inDef) {
		if(inDef == null) inDef = 0.0;
		if(inXML.exists(inName)) return Std.parseFloat(inXML.get(inName));
		return inDef;
	}
	,getFloatStyle: function(inKey,inNode,inStyles,inDefault) {
		var s = this.getStyle(inKey,inNode,inStyles,"");
		if(s == "") return inDefault;
		return Std.parseFloat(s);
	}
	,getStrokeStyle: function(inKey,inNode,inStyles,inDefault) {
		var s = this.getStyle(inKey,inNode,inStyles,"");
		if(s == "") return inDefault;
		if(s == "none") return null;
		if(s.charAt(0) == "#") return Std.parseInt("0x" + HxOverrides.substr(s,1,null));
		return Std.parseInt(s);
	}
	,getStyle: function(inKey,inNode,inStyles,inDefault) {
		if(inNode != null && inNode.exists(inKey)) return inNode.get(inKey);
		if(inStyles != null && inStyles.exists(inKey)) return inStyles.get(inKey);
		return inDefault;
	}
	,getStyles: function(inNode,inPrevStyles) {
		if(!inNode.exists("style")) return inPrevStyles;
		var styles = new haxe.ds.StringMap();
		if(inPrevStyles != null) {
			var $it0 = inPrevStyles.keys();
			while( $it0.hasNext() ) {
				var s = $it0.next();
				styles.set(s,inPrevStyles.get(s));
			}
		}
		var style = inNode.get("style");
		var strings = format.svg.SVGData.mStyleSplit.split(style);
		var _g = 0;
		while(_g < strings.length) {
			var s1 = strings[_g];
			++_g;
			if(format.svg.SVGData.mStyleValue.match(s1)) styles.set(format.svg.SVGData.mStyleValue.matched(1),format.svg.SVGData.mStyleValue.matched(2));
		}
		return styles;
	}
	,loadDefs: function(inXML) {
		var _g = 0;
		while(_g < 2) {
			var pass = _g++;
			var $it0 = inXML.elements();
			while( $it0.hasNext() ) {
				var def = $it0.next();
				var name = def.get_nodeName();
				if(HxOverrides.substr(name,0,4) == "svg:") name = HxOverrides.substr(name,4,null);
				if(name == "linearGradient") this.loadGradient(def,openfl.display.GradientType.LINEAR,pass == 1); else if(name == "radialGradient") this.loadGradient(def,openfl.display.GradientType.RADIAL,pass == 1);
			}
		}
	}
	,loadGradient: function(inGrad,inType,inCrossLink) {
		var name = inGrad.get("id");
		var grad = new format.svg.Grad(inType);
		if(inCrossLink && inGrad.exists("xlink:href")) {
			var xlink = inGrad.get("xlink:href");
			if(xlink.charAt(0) != "#") throw "xlink - unkown syntax : " + xlink;
			var base = this.mGrads.get(HxOverrides.substr(xlink,1,null));
			if(base != null) {
				grad.colors = base.colors;
				grad.alphas = base.alphas;
				grad.ratios = base.ratios;
				grad.gradMatrix = base.gradMatrix.clone();
				grad.spread = base.spread;
				grad.interp = base.interp;
				grad.radius = base.radius;
			} else throw "Unknown xlink : " + xlink;
		}
		if(inGrad.exists("x1")) {
			grad.x1 = this.getFloat(inGrad,"x1");
			grad.y1 = this.getFloat(inGrad,"y1");
			grad.x2 = this.getFloat(inGrad,"x2");
			grad.y2 = this.getFloat(inGrad,"y2");
		} else {
			grad.x1 = this.getFloat(inGrad,"cx");
			grad.y1 = this.getFloat(inGrad,"cy");
			grad.x2 = this.getFloat(inGrad,"fx",grad.x1);
			grad.y2 = this.getFloat(inGrad,"fy",grad.y1);
		}
		grad.radius = this.getFloat(inGrad,"r");
		if(inGrad.exists("gradientTransform")) this.applyTransform(grad.gradMatrix,inGrad.get("gradientTransform"));
		var $it0 = inGrad.elements();
		while( $it0.hasNext() ) {
			var stop = $it0.next();
			var styles = this.getStyles(stop,null);
			grad.colors.push(this.getColorStyle("stop-color",stop,styles,0));
			grad.alphas.push(this.getFloatStyle("stop-opacity",stop,styles,1.0));
			grad.ratios.push(Std["int"](Std.parseFloat(stop.get("offset")) * 255.0));
		}
		this.mGrads.set(name,grad);
	}
	,loadGroup: function(g,inG,matrix,inStyles) {
		if(inG.exists("transform")) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			this.applyTransform(matrix,inG.get("transform"));
		}
		if(inG.exists("inkscape:label")) g.name = inG.get("inkscape:label"); else if(inG.exists("id")) g.name = inG.get("id");
		var styles = this.getStyles(inG,inStyles);
		var $it0 = inG.elements();
		while( $it0.hasNext() ) {
			var el = $it0.next();
			var name = el.get_nodeName();
			if(HxOverrides.substr(name,0,4) == "svg:") name = HxOverrides.substr(name,4,null);
			if(name == "defs") this.loadDefs(el); else if(name == "g") {
				if(!(el.exists("display") && el.get("display") == "none")) g.children.push(format.svg.DisplayElement.DisplayGroup(this.loadGroup(new format.svg.Group(),el,matrix,styles)));
			} else if(name == "path" || name == "line" || name == "polyline") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,false,false))); else if(name == "rect") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,true,false))); else if(name == "polygon") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,false,false))); else if(name == "ellipse") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,false,true))); else if(name == "circle") g.children.push(format.svg.DisplayElement.DisplayPath(this.loadPath(el,matrix,styles,false,true,true))); else if(name == "text") g.children.push(format.svg.DisplayElement.DisplayText(this.loadText(el,matrix,styles))); else if(name == "linearGradient") this.loadGradient(el,openfl.display.GradientType.LINEAR,true); else if(name == "radialGradient") this.loadGradient(el,openfl.display.GradientType.RADIAL,true); else {
			}
		}
		return g;
	}
	,loadPath: function(inPath,matrix,inStyles,inIsRect,inIsEllipse,inIsCircle) {
		if(inIsCircle == null) inIsCircle = false;
		if(inPath.exists("transform")) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			this.applyTransform(matrix,inPath.get("transform"));
		}
		var styles = this.getStyles(inPath,inStyles);
		var name;
		if(inPath.exists("id")) name = inPath.get("id"); else name = "";
		var path = new format.svg.Path();
		path.fill = this.getFillStyle("fill",inPath,styles);
		path.alpha = this.getFloatStyle("opacity",inPath,styles,1.0);
		path.fill_alpha = this.getFloatStyle("fill-opacity",inPath,styles,1.0);
		path.stroke_alpha = this.getFloatStyle("stroke-opacity",inPath,styles,1.0);
		path.stroke_colour = this.getStrokeStyle("stroke",inPath,styles,null);
		path.stroke_width = this.getFloatStyle("stroke-width",inPath,styles,1.0);
		path.stroke_caps = openfl.display.CapsStyle.ROUND;
		path.joint_style = openfl.display.JointStyle.ROUND;
		path.miter_limit = this.getFloatStyle("stroke-miterlimit",inPath,styles,3.0);
		path.segments = [];
		path.matrix = matrix;
		path.name = name;
		if(inIsRect) {
			var x;
			if(inPath.exists("x")) x = Std.parseFloat(inPath.get("x")); else x = 0;
			var y;
			if(inPath.exists("y")) y = Std.parseFloat(inPath.get("y")); else y = 0;
			var w = Std.parseFloat(inPath.get("width"));
			var h = Std.parseFloat(inPath.get("height"));
			var rx;
			if(inPath.exists("rx")) rx = Std.parseFloat(inPath.get("rx")); else rx = 0.0;
			var ry;
			if(inPath.exists("ry")) ry = Std.parseFloat(inPath.get("ry")); else ry = 0.0;
			if(rx == 0 || ry == 0) {
				path.segments.push(new format.svg.MoveSegment(x,y));
				path.segments.push(new format.svg.DrawSegment(x + w,y));
				path.segments.push(new format.svg.DrawSegment(x + w,y + h));
				path.segments.push(new format.svg.DrawSegment(x,y + h));
				path.segments.push(new format.svg.DrawSegment(x,y));
			} else {
				path.segments.push(new format.svg.MoveSegment(x,y + ry));
				path.segments.push(new format.svg.QuadraticSegment(x,y,x + rx,y));
				path.segments.push(new format.svg.DrawSegment(x + w - rx,y));
				path.segments.push(new format.svg.QuadraticSegment(x + w,y,x + w,y + rx));
				path.segments.push(new format.svg.DrawSegment(x + w,y + h - ry));
				path.segments.push(new format.svg.QuadraticSegment(x + w,y + h,x + w - rx,y + h));
				path.segments.push(new format.svg.DrawSegment(x + rx,y + h));
				path.segments.push(new format.svg.QuadraticSegment(x,y + h,x,y + h - ry));
				path.segments.push(new format.svg.DrawSegment(x,y + ry));
			}
		} else if(inIsEllipse) {
			var x1;
			if(inPath.exists("cx")) x1 = Std.parseFloat(inPath.get("cx")); else x1 = 0;
			var y1;
			if(inPath.exists("cy")) y1 = Std.parseFloat(inPath.get("cy")); else y1 = 0;
			var r;
			if(inIsCircle && inPath.exists("r")) r = Std.parseFloat(inPath.get("r")); else r = 0.0;
			var w1;
			if(inIsCircle) w1 = r; else if(inPath.exists("rx")) w1 = Std.parseFloat(inPath.get("rx")); else w1 = 0.0;
			var w_ = w1 * format.svg.SVGData.SIN45;
			var cw_ = w1 * format.svg.SVGData.TAN22;
			var h1;
			if(inIsCircle) h1 = r; else if(inPath.exists("ry")) h1 = Std.parseFloat(inPath.get("ry")); else h1 = 0.0;
			var h_ = h1 * format.svg.SVGData.SIN45;
			var ch_ = h1 * format.svg.SVGData.TAN22;
			path.segments.push(new format.svg.MoveSegment(x1 + w1,y1));
			path.segments.push(new format.svg.QuadraticSegment(x1 + w1,y1 + ch_,x1 + w_,y1 + h_));
			path.segments.push(new format.svg.QuadraticSegment(x1 + cw_,y1 + h1,x1,y1 + h1));
			path.segments.push(new format.svg.QuadraticSegment(x1 - cw_,y1 + h1,x1 - w_,y1 + h_));
			path.segments.push(new format.svg.QuadraticSegment(x1 - w1,y1 + ch_,x1 - w1,y1));
			path.segments.push(new format.svg.QuadraticSegment(x1 - w1,y1 - ch_,x1 - w_,y1 - h_));
			path.segments.push(new format.svg.QuadraticSegment(x1 - cw_,y1 - h1,x1,y1 - h1));
			path.segments.push(new format.svg.QuadraticSegment(x1 + cw_,y1 - h1,x1 + w_,y1 - h_));
			path.segments.push(new format.svg.QuadraticSegment(x1 + w1,y1 - ch_,x1 + w1,y1));
		} else {
			var d;
			if(inPath.exists("points")) d = "M" + inPath.get("points") + "z"; else if(inPath.exists("x1")) d = "M" + inPath.get("x1") + "," + inPath.get("y1") + " " + inPath.get("x2") + "," + inPath.get("y2") + "z"; else d = inPath.get("d");
			var _g = 0;
			var _g1 = this.mPathParser.parse(d,this.mConvertCubics);
			while(_g < _g1.length) {
				var segment = _g1[_g];
				++_g;
				path.segments.push(segment);
			}
		}
		return path;
	}
	,loadText: function(inText,matrix,inStyles) {
		if(inText.exists("transform")) {
			matrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
			this.applyTransform(matrix,inText.get("transform"));
		}
		var styles = this.getStyles(inText,inStyles);
		var text = new format.svg.Text();
		text.matrix = matrix;
		if(inText.exists("id")) text.name = inText.get("id"); else text.name = "";
		text.x = this.getFloat(inText,"x",0.0);
		text.y = this.getFloat(inText,"y",0.0);
		text.fill = this.getFillStyle("fill",inText,styles);
		text.fill_alpha = this.getFloatStyle("fill-opacity",inText,styles,1.0);
		text.stroke_alpha = this.getFloatStyle("stroke-opacity",inText,styles,1.0);
		text.stroke_colour = this.getStrokeStyle("stroke",inText,styles,null);
		text.stroke_width = this.getFloatStyle("stroke-width",inText,styles,1.0);
		text.font_family = this.getStyle("font-family",inText,styles,"");
		text.font_size = this.getFloatStyle("font-size",inText,styles,12);
		text.letter_spacing = this.getFloatStyle("letter-spacing",inText,styles,0);
		text.kerning = this.getFloatStyle("kerning",inText,styles,0);
		var string = "";
		var $it0 = inText.elements();
		while( $it0.hasNext() ) {
			var el = $it0.next();
			string += el.toString();
		}
		text.text = string;
		return text;
	}
	,__class__: format.svg.SVGData
});
format.svg.SVGRenderer = function(inSvg,inLayer) {
	this.mSvg = inSvg;
	this.width = this.mSvg.width;
	this.height = this.mSvg.height;
	this.mRoot = this.mSvg;
	if(inLayer != null) {
		this.mRoot = this.mSvg.findGroup(inLayer);
		if(this.mRoot == null) throw "Could not find SVG group: " + inLayer;
	}
};
$hxClasses["format.svg.SVGRenderer"] = format.svg.SVGRenderer;
format.svg.SVGRenderer.__name__ = ["format","svg","SVGRenderer"];
format.svg.SVGRenderer.toHaxe = function(inXML,inFilter) {
	return new format.svg.SVGRenderer(new format.svg.SVGData(inXML,true)).iterate(new format.gfx.Gfx2Haxe(),inFilter).commands;
};
format.svg.SVGRenderer.toBytes = function(inXML,inFilter) {
	return new format.svg.SVGRenderer(new format.svg.SVGData(inXML,true)).iterate(new format.gfx.GfxBytes(),inFilter);
};
format.svg.SVGRenderer.prototype = {
	iterate: function(inGfx,inFilter) {
		this.mGfx = inGfx;
		this.mMatrix = new openfl.geom.Matrix();
		this.mFilter = inFilter;
		this.mGroupPath = [];
		this.mGfx.size(this.width,this.height);
		this.iterateGroup(this.mRoot,true);
		this.mGfx.eof();
		return inGfx;
	}
	,hasGroup: function(inName) {
		return this.mRoot.hasGroup(inName);
	}
	,iterateText: function(inText) {
		if(this.mFilter != null && !this.mFilter(inText.name,this.mGroupPath)) return;
		this.mGfx.renderText(inText);
	}
	,iteratePath: function(inPath) {
		if(this.mFilter != null && !this.mFilter(inPath.name,this.mGroupPath)) return;
		if(inPath.segments.length == 0 || this.mGfx == null) return;
		var px = 0.0;
		var py = 0.0;
		var m = inPath.matrix.clone();
		m.concat(this.mMatrix);
		var context = new format.svg.RenderContext(m,this.mScaleRect,this.mScaleW,this.mScaleH);
		var geomOnly = this.mGfx.geometryOnly();
		if(!geomOnly) {
			inPath.segments[0].toGfx(this.mGfx,context);
			{
				var _g = inPath.fill;
				switch(_g[1]) {
				case 0:
					var grad = _g[2];
					grad.updateMatrix(m);
					this.mGfx.beginGradientFill(grad);
					break;
				case 1:
					var colour = _g[2];
					this.mGfx.beginFill(colour,inPath.fill_alpha * inPath.alpha);
					break;
				case 2:
					break;
				}
			}
			if(inPath.stroke_colour == null) {
			} else {
				var style = new format.gfx.LineStyle();
				var scale = Math.sqrt(m.a * m.a + m.c * m.c);
				style.thickness = inPath.stroke_width * scale;
				style.alpha = inPath.stroke_alpha * inPath.alpha;
				style.color = inPath.stroke_colour;
				style.capsStyle = inPath.stroke_caps;
				style.jointStyle = inPath.joint_style;
				style.miterLimit = inPath.miter_limit;
				this.mGfx.lineStyle(style);
			}
		}
		var _g1 = 0;
		var _g11 = inPath.segments;
		while(_g1 < _g11.length) {
			var segment = _g11[_g1];
			++_g1;
			segment.toGfx(this.mGfx,context);
		}
		this.mGfx.endFill();
		this.mGfx.endLineStyle();
	}
	,iterateGroup: function(inGroup,inIgnoreDot) {
		if(inIgnoreDot && inGroup.name != null && HxOverrides.substr(inGroup.name,0,1) == ".") return;
		this.mGroupPath.push(inGroup.name);
		var _g = 0;
		var _g1 = inGroup.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			switch(child[1]) {
			case 1:
				var group = child[2];
				this.iterateGroup(group,inIgnoreDot);
				break;
			case 0:
				var path = child[2];
				this.iteratePath(path);
				break;
			case 2:
				var text = child[2];
				this.iterateText(text);
				break;
			}
		}
		this.mGroupPath.pop();
	}
	,render: function(inGfx,inMatrix,inFilter,inScaleRect,inScaleW,inScaleH) {
		this.mGfx = new format.gfx.GfxGraphics(inGfx);
		if(inMatrix == null) this.mMatrix = new openfl.geom.Matrix(); else this.mMatrix = new openfl.geom.Matrix(inMatrix.a,inMatrix.b,inMatrix.c,inMatrix.d,inMatrix.tx,inMatrix.ty);
		this.mScaleRect = inScaleRect;
		this.mScaleW = inScaleW;
		this.mScaleH = inScaleH;
		this.mFilter = inFilter;
		this.mGroupPath = [];
		this.iterateGroup(this.mRoot,inFilter == null);
	}
	,renderRect: function(inGfx,inFilter,scaleRect,inBounds,inRect) {
		var matrix = new openfl.geom.Matrix();
		matrix.tx = inRect.x - inBounds.x;
		matrix.ty = inRect.y - inBounds.y;
		if(scaleRect != null) {
			var extraX = inRect.width - (inBounds.width - scaleRect.width);
			var extraY = inRect.height - (inBounds.height - scaleRect.height);
			this.render(inGfx,matrix,inFilter,scaleRect,extraX,extraY);
		} else this.render(inGfx,matrix,inFilter);
	}
	,renderRect0: function(inGfx,inFilter,scaleRect,inBounds,inRect) {
		var matrix = new openfl.geom.Matrix();
		matrix.tx = -inBounds.x;
		matrix.ty = -inBounds.y;
		if(scaleRect != null) {
			var extraX = inRect.width - (inBounds.width - scaleRect.width);
			var extraY = inRect.height - (inBounds.height - scaleRect.height);
			this.render(inGfx,matrix,inFilter,scaleRect,extraX,extraY);
		} else this.render(inGfx,matrix,inFilter);
	}
	,getExtent: function(inMatrix,inFilter,inIgnoreDot) {
		if(inIgnoreDot == null) inIgnoreDot = inFilter == null;
		var gfx = new format.gfx.GfxExtent();
		this.mGfx = gfx;
		if(inMatrix == null) this.mMatrix = new openfl.geom.Matrix(); else this.mMatrix = new openfl.geom.Matrix(inMatrix.a,inMatrix.b,inMatrix.c,inMatrix.d,inMatrix.tx,inMatrix.ty);
		this.mFilter = inFilter;
		this.mGroupPath = [];
		this.iterateGroup(this.mRoot,inIgnoreDot);
		return gfx.extent;
	}
	,findText: function(inFilter) {
		this.mFilter = inFilter;
		this.mGroupPath = [];
		var finder = new format.gfx.GfxTextFinder();
		this.mGfx = finder;
		this.iterateGroup(this.mRoot,false);
		return finder.text;
	}
	,getMatchingRect: function(inMatch) {
		return this.getExtent(null,function(_,groups) {
			return groups[1] != null && inMatch.match(groups[1]);
		},false);
	}
	,renderObject: function(inObj,inGfx,inMatrix,inFilter,inScale9) {
		this.render(inGfx,inMatrix,inFilter,inScale9);
		var rect = this.getExtent(inMatrix,function(_,groups) {
			return groups[1] == ".scale9";
		});
	}
	,renderSprite: function(inObj,inMatrix,inFilter,inScale9) {
		this.renderObject(inObj,inObj.get_graphics(),inMatrix,inFilter,inScale9);
	}
	,createShape: function(inMatrix,inFilter,inScale9) {
		var shape = new openfl.display.Shape();
		this.renderObject(shape,shape.get_graphics(),inMatrix,inFilter,inScale9);
		return shape;
	}
	,namedShape: function(inName) {
		return this.createShape(null,function(name,_) {
			return name == inName;
		});
	}
	,renderBitmap: function(inRect,inScale) {
		if(inScale == null) inScale = 1.0;
		this.mMatrix = new openfl.geom.Matrix(inScale,0,0,inScale,-inRect.x * inScale,-inRect.y * inScale);
		var w = Std["int"](Math.ceil(inRect == null?this.width:inRect.width * inScale));
		var h = Std["int"](Math.ceil(inRect == null?this.width:inRect.height * inScale));
		var bmp = new openfl.display.BitmapData(w,h,true,0);
		var shape = new openfl.display.Shape();
		this.mGfx = new format.gfx.GfxGraphics(shape.get_graphics());
		this.mGroupPath = [];
		this.iterateGroup(this.mRoot,true);
		bmp.draw(shape);
		this.mGfx = null;
		return bmp;
	}
	,__class__: format.svg.SVGRenderer
};
format.svg.Text = function() {
};
$hxClasses["format.svg.Text"] = format.svg.Text;
format.svg.Text.__name__ = ["format","svg","Text"];
format.svg.Text.prototype = {
	__class__: format.svg.Text
};
var haxe = {};
haxe.StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe.CallStack;
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.callStack = function() {
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe.CallStack.makeStack(new Error().stack);
	a.shift();
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe.CallStack.exceptionStack = function() {
	return [];
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe.CallStack.makeStack = function(s) {
	if(typeof(s) == "string") {
		var stack = s.split("\n");
		var m = [];
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			m.push(haxe.StackItem.Module(line));
		}
		return m;
	} else return s;
};
haxe.Log = function() { };
$hxClasses["haxe.Log"] = haxe.Log;
haxe.Log.__name__ = ["haxe","Log"];
haxe.Log.trace = function(v,infos) {
	js.Boot.__trace(v,infos);
};
haxe.Resource = function() { };
$hxClasses["haxe.Resource"] = haxe.Resource;
haxe.Resource.__name__ = ["haxe","Resource"];
haxe.Resource.content = null;
haxe.Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return x.str;
			var b = haxe.crypto.Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe.Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe.Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) return haxe.io.Bytes.ofString(x.str);
			return haxe.crypto.Base64.decode(x.data);
		}
	}
	return null;
};
haxe.Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe.Timer;
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.delay = function(f,time_ms) {
	var t = new haxe.Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe.Timer.measure = function(f,pos) {
	var t0 = haxe.Timer.stamp();
	var r = f();
	haxe.Log.trace(haxe.Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe.Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe.Timer.prototype = {
	stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe.Timer
};
haxe.io = {};
haxe.io.Bytes = function(length,b) {
	this.length = length;
	this.b = b;
};
$hxClasses["haxe.io.Bytes"] = haxe.io.Bytes;
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	var a = new Array();
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		a.push(0);
	}
	return new haxe.io.Bytes(length,a);
};
haxe.io.Bytes.ofString = function(s) {
	var a = new Array();
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(a.length,a);
};
haxe.io.Bytes.ofData = function(b) {
	return new haxe.io.Bytes(b.length,b);
};
haxe.io.Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw haxe.io.Error.OutsideBounds;
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe.io.Bytes
};
haxe.crypto = {};
haxe.crypto.Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe.crypto.Base64;
haxe.crypto.Base64.__name__ = ["haxe","crypto","Base64"];
haxe.crypto.Base64.decode = function(str,complement) {
	if(complement == null) complement = true;
	if(complement) while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	return new haxe.crypto.BaseCode(haxe.crypto.Base64.BYTES).decodeBytes(haxe.io.Bytes.ofString(str));
};
haxe.crypto.BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw "BaseCode : base length must be a power of two.";
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe.crypto.BaseCode;
haxe.crypto.BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe.crypto.BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = haxe.io.Bytes.alloc(size + (b.length * 8 % nbits == 0?0:1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,initTable: function() {
		var tbl = new Array();
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) this.initTable();
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe.io.Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) throw "BaseCode : invalid encoded char";
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe.crypto.BaseCode
};
haxe.crypto.Sha256 = function() {
};
$hxClasses["haxe.crypto.Sha256"] = haxe.crypto.Sha256;
haxe.crypto.Sha256.__name__ = ["haxe","crypto","Sha256"];
haxe.crypto.Sha256.encode = function(s) {
	var sh = new haxe.crypto.Sha256();
	var h = sh.doEncode(haxe.crypto.Sha256.str2blks(s),s.length * 8);
	return sh.hex(h);
};
haxe.crypto.Sha256.make = function(b) {
	var h = new haxe.crypto.Sha256().doEncode(haxe.crypto.Sha256.bytes2blks(b),b.length * 8);
	var out = haxe.io.Bytes.alloc(32);
	var p = 0;
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		out.set(p++,h[i] >>> 24);
		out.set(p++,h[i] >> 16 & 255);
		out.set(p++,h[i] >> 8 & 255);
		out.set(p++,h[i] & 255);
	}
	return out;
};
haxe.crypto.Sha256.str2blks = function(s) {
	var nblk = (s.length + 8 >> 6) + 1;
	var blks = new Array();
	var _g1 = 0;
	var _g = nblk * 16;
	while(_g1 < _g) {
		var i = _g1++;
		blks[i] = 0;
	}
	var _g11 = 0;
	var _g2 = s.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var p = i1 >> 2;
		blks[p] |= HxOverrides.cca(s,i1) << 24 - ((i1 & 3) << 3);
	}
	var i2 = s.length;
	var p1 = i2 >> 2;
	blks[p1] |= 128 << 24 - ((i2 & 3) << 3);
	blks[nblk * 16 - 1] = s.length * 8;
	return blks;
};
haxe.crypto.Sha256.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = new Array();
	var _g1 = 0;
	var _g = nblk * 16;
	while(_g1 < _g) {
		var i = _g1++;
		blks[i] = 0;
	}
	var _g11 = 0;
	var _g2 = b.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var p = i1 >> 2;
		blks[p] |= b.b[i1] << 24 - ((i1 & 3) << 3);
	}
	var i2 = b.length;
	var p1 = i2 >> 2;
	blks[p1] |= 128 << 24 - ((i2 & 3) << 3);
	blks[nblk * 16 - 1] = b.length * 8;
	return blks;
};
haxe.crypto.Sha256.prototype = {
	doEncode: function(m,l) {
		var K = [1116352408,1899447441,-1245643825,-373957723,961987163,1508970993,-1841331548,-1424204075,-670586216,310598401,607225278,1426881987,1925078388,-2132889090,-1680079193,-1046744716,-459576895,-272742522,264347078,604807628,770255983,1249150122,1555081692,1996064986,-1740746414,-1473132947,-1341970488,-1084653625,-958395405,-710438585,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,-2117940946,-1838011259,-1564481375,-1474664885,-1035236496,-949202525,-778901479,-694614492,-200395387,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,-2067236844,-1933114872,-1866530822,-1538233109,-1090935817,-965641998];
		var HASH = [1779033703,-1150833019,1013904242,-1521486534,1359893119,-1694144372,528734635,1541459225];
		var W = new Array();
		W[64] = 0;
		var a;
		var b;
		var c;
		var d;
		var e;
		var f;
		var g;
		var h;
		var T1;
		var T2;
		m[l >> 5] |= 128 << 24 - l % 32;
		m[(l + 64 >> 9 << 4) + 15] = l;
		var i = 0;
		while(i < m.length) {
			a = HASH[0];
			b = HASH[1];
			c = HASH[2];
			d = HASH[3];
			e = HASH[4];
			f = HASH[5];
			g = HASH[6];
			h = HASH[7];
			var _g = 0;
			while(_g < 64) {
				var j = _g++;
				if(j < 16) W[j] = m[j + i]; else W[j] = this.safeAdd(this.safeAdd(this.safeAdd(this.Gamma1256(W[j - 2]),W[j - 7]),this.Gamma0256(W[j - 15])),W[j - 16]);
				T1 = this.safeAdd(this.safeAdd(this.safeAdd(this.safeAdd(h,this.Sigma1256(e)),this.Ch(e,f,g)),K[j]),W[j]);
				T2 = this.safeAdd(this.Sigma0256(a),this.Maj(a,b,c));
				h = g;
				g = f;
				f = e;
				e = this.safeAdd(d,T1);
				d = c;
				c = b;
				b = a;
				a = this.safeAdd(T1,T2);
			}
			HASH[0] = this.safeAdd(a,HASH[0]);
			HASH[1] = this.safeAdd(b,HASH[1]);
			HASH[2] = this.safeAdd(c,HASH[2]);
			HASH[3] = this.safeAdd(d,HASH[3]);
			HASH[4] = this.safeAdd(e,HASH[4]);
			HASH[5] = this.safeAdd(f,HASH[5]);
			HASH[6] = this.safeAdd(g,HASH[6]);
			HASH[7] = this.safeAdd(h,HASH[7]);
			i += 16;
		}
		return HASH;
	}
	,S: function(X,n) {
		return X >>> n | X << 32 - n;
	}
	,R: function(X,n) {
		return X >>> n;
	}
	,Ch: function(x,y,z) {
		return x & y ^ ~x & z;
	}
	,Maj: function(x,y,z) {
		return x & y ^ x & z ^ y & z;
	}
	,Sigma0256: function(x) {
		return this.S(x,2) ^ this.S(x,13) ^ this.S(x,22);
	}
	,Sigma1256: function(x) {
		return this.S(x,6) ^ this.S(x,11) ^ this.S(x,25);
	}
	,Gamma0256: function(x) {
		return this.S(x,7) ^ this.S(x,18) ^ this.R(x,3);
	}
	,Gamma1256: function(x) {
		return this.S(x,17) ^ this.S(x,19) ^ this.R(x,10);
	}
	,safeAdd: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var j = 7;
			while(j >= 0) {
				str += hex_chr.charAt(num >>> (j << 2) & 15);
				j--;
			}
		}
		return str;
	}
	,__class__: haxe.crypto.Sha256
};
haxe.ds = {};
haxe.ds.BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe.ds.BalancedTree;
haxe.ds.BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe.ds.BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe.ds.TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe.ds.TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(l.left,l.key,l.value,new haxe.ds.TreeNode(l.right,k,v,r)); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe.ds.TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe.ds.TreeNode(new haxe.ds.TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe.ds.TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe.ds.TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe.ds.BalancedTree
};
haxe.ds.TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe.ds.TreeNode;
haxe.ds.TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe.ds.TreeNode.prototype = {
	__class__: haxe.ds.TreeNode
};
haxe.ds.EnumValueMap = function() {
	haxe.ds.BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe.ds.EnumValueMap;
haxe.ds.EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe.ds.EnumValueMap.__interfaces__ = [IMap];
haxe.ds.EnumValueMap.__super__ = haxe.ds.BalancedTree;
haxe.ds.EnumValueMap.prototype = $extend(haxe.ds.BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe.ds.EnumValueMap
});
haxe.ds.GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe.ds.GenericCell;
haxe.ds.GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe.ds.GenericCell.prototype = {
	__class__: haxe.ds.GenericCell
};
haxe.ds.GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe.ds.GenericStack;
haxe.ds.GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe.ds.GenericStack.prototype = {
	add: function(item) {
		this.head = new haxe.ds.GenericCell(item,this.head);
	}
	,pop: function() {
		var k = this.head;
		if(k == null) return null; else {
			this.head = k.next;
			return k.elt;
		}
	}
	,__class__: haxe.ds.GenericStack
};
haxe.ds.IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe.ds.IntMap;
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	__class__: haxe.ds.IntMap
};
haxe.ds.ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe.ds.ObjectMap;
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [IMap];
haxe.ds.ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe.ds.ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe.ds.ObjectMap
};
haxe.ds.StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe.ds.StringMap;
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	set: function(key,value) {
		this.h["$" + key] = value;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key.substr(1));
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref["$" + i];
		}};
	}
	,__class__: haxe.ds.StringMap
};
haxe.ds._Vector = {};
haxe.ds._Vector.Vector_Impl_ = function() { };
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe.ds._Vector.Vector_Impl_;
haxe.ds._Vector.Vector_Impl_.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe.ds._Vector.Vector_Impl_.blit = function(src,srcPos,dest,destPos,len) {
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe.ds._Vector.Vector_Impl_.toArray = function(this1) {
	var a = new Array();
	var len = this1.length;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		a[i] = this1[i];
	}
	return a;
};
haxe.io.BytesBuffer = function() {
	this.b = new Array();
};
$hxClasses["haxe.io.BytesBuffer"] = haxe.io.BytesBuffer;
haxe.io.BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe.io.BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe.io.Bytes(this.b.length,this.b);
		this.b = null;
		return bytes;
	}
	,__class__: haxe.io.BytesBuffer
};
haxe.io.Input = function() { };
$hxClasses["haxe.io.Input"] = haxe.io.Input;
haxe.io.Input.__name__ = ["haxe","io","Input"];
haxe.io.Input.prototype = {
	readByte: function() {
		throw "Not implemented";
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) throw haxe.io.Error.OutsideBounds;
		while(k > 0) {
			b[pos] = this.readByte();
			pos++;
			k--;
		}
		return len;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,readString: function(len) {
		var b = haxe.io.Bytes.alloc(len);
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe.io.Input
};
haxe.io.BytesInput = function(b,pos,len) {
	if(pos == null) pos = 0;
	if(len == null) len = b.length - pos;
	if(pos < 0 || len < 0 || pos + len > b.length) throw haxe.io.Error.OutsideBounds;
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe.io.BytesInput;
haxe.io.BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe.io.BytesInput.__super__ = haxe.io.Input;
haxe.io.BytesInput.prototype = $extend(haxe.io.Input.prototype,{
	readByte: function() {
		if(this.len == 0) throw new haxe.io.Eof();
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) throw haxe.io.Error.OutsideBounds;
		if(this.len == 0 && len > 0) throw new haxe.io.Eof();
		if(this.len < len) len = this.len;
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe.io.BytesInput
});
haxe.io.Output = function() { };
$hxClasses["haxe.io.Output"] = haxe.io.Output;
haxe.io.Output.__name__ = ["haxe","io","Output"];
haxe.io.BytesOutput = function() {
	this.b = new haxe.io.BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe.io.BytesOutput;
haxe.io.BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe.io.BytesOutput.__super__ = haxe.io.Output;
haxe.io.BytesOutput.prototype = $extend(haxe.io.Output.prototype,{
	writeByte: function(c) {
		this.b.b.push(c);
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe.io.BytesOutput
});
haxe.io.Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe.io.Eof;
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = $hxClasses["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
haxe.io.Path = function(path) {
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else this.dir = null;
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe.io.Path;
haxe.io.Path.__name__ = ["haxe","io","Path"];
haxe.io.Path.withoutExtension = function(path) {
	var s = new haxe.io.Path(path);
	s.ext = null;
	return s.toString();
};
haxe.io.Path.prototype = {
	toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe.io.Path
};
haxe.io.StringInput = function(s) {
	haxe.io.BytesInput.call(this,haxe.io.Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe.io.StringInput;
haxe.io.StringInput.__name__ = ["haxe","io","StringInput"];
haxe.io.StringInput.__super__ = haxe.io.BytesInput;
haxe.io.StringInput.prototype = $extend(haxe.io.BytesInput.prototype,{
	__class__: haxe.io.StringInput
});
haxe.macro = {};
haxe.macro.Constant = $hxClasses["haxe.macro.Constant"] = { __ename__ : true, __constructs__ : ["CInt","CFloat","CString","CIdent","CRegexp"] };
haxe.macro.Constant.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CIdent = function(s) { var $x = ["CIdent",3,s]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Constant.CRegexp = function(r,opt) { var $x = ["CRegexp",4,r,opt]; $x.__enum__ = haxe.macro.Constant; $x.toString = $estr; return $x; };
haxe.macro.Binop = $hxClasses["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow"] };
haxe.macro.Binop.OpAdd = ["OpAdd",0];
haxe.macro.Binop.OpAdd.toString = $estr;
haxe.macro.Binop.OpAdd.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpMult = ["OpMult",1];
haxe.macro.Binop.OpMult.toString = $estr;
haxe.macro.Binop.OpMult.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpDiv = ["OpDiv",2];
haxe.macro.Binop.OpDiv.toString = $estr;
haxe.macro.Binop.OpDiv.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpSub = ["OpSub",3];
haxe.macro.Binop.OpSub.toString = $estr;
haxe.macro.Binop.OpSub.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpAssign = ["OpAssign",4];
haxe.macro.Binop.OpAssign.toString = $estr;
haxe.macro.Binop.OpAssign.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpEq = ["OpEq",5];
haxe.macro.Binop.OpEq.toString = $estr;
haxe.macro.Binop.OpEq.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpNotEq = ["OpNotEq",6];
haxe.macro.Binop.OpNotEq.toString = $estr;
haxe.macro.Binop.OpNotEq.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpGt = ["OpGt",7];
haxe.macro.Binop.OpGt.toString = $estr;
haxe.macro.Binop.OpGt.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpGte = ["OpGte",8];
haxe.macro.Binop.OpGte.toString = $estr;
haxe.macro.Binop.OpGte.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpLt = ["OpLt",9];
haxe.macro.Binop.OpLt.toString = $estr;
haxe.macro.Binop.OpLt.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpLte = ["OpLte",10];
haxe.macro.Binop.OpLte.toString = $estr;
haxe.macro.Binop.OpLte.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpAnd = ["OpAnd",11];
haxe.macro.Binop.OpAnd.toString = $estr;
haxe.macro.Binop.OpAnd.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpOr = ["OpOr",12];
haxe.macro.Binop.OpOr.toString = $estr;
haxe.macro.Binop.OpOr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpXor = ["OpXor",13];
haxe.macro.Binop.OpXor.toString = $estr;
haxe.macro.Binop.OpXor.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpBoolAnd = ["OpBoolAnd",14];
haxe.macro.Binop.OpBoolAnd.toString = $estr;
haxe.macro.Binop.OpBoolAnd.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpBoolOr = ["OpBoolOr",15];
haxe.macro.Binop.OpBoolOr.toString = $estr;
haxe.macro.Binop.OpBoolOr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpShl = ["OpShl",16];
haxe.macro.Binop.OpShl.toString = $estr;
haxe.macro.Binop.OpShl.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpShr = ["OpShr",17];
haxe.macro.Binop.OpShr.toString = $estr;
haxe.macro.Binop.OpShr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpUShr = ["OpUShr",18];
haxe.macro.Binop.OpUShr.toString = $estr;
haxe.macro.Binop.OpUShr.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpMod = ["OpMod",19];
haxe.macro.Binop.OpMod.toString = $estr;
haxe.macro.Binop.OpMod.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpAssignOp = function(op) { var $x = ["OpAssignOp",20,op]; $x.__enum__ = haxe.macro.Binop; $x.toString = $estr; return $x; };
haxe.macro.Binop.OpInterval = ["OpInterval",21];
haxe.macro.Binop.OpInterval.toString = $estr;
haxe.macro.Binop.OpInterval.__enum__ = haxe.macro.Binop;
haxe.macro.Binop.OpArrow = ["OpArrow",22];
haxe.macro.Binop.OpArrow.toString = $estr;
haxe.macro.Binop.OpArrow.__enum__ = haxe.macro.Binop;
haxe.macro.Unop = $hxClasses["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"] };
haxe.macro.Unop.OpIncrement = ["OpIncrement",0];
haxe.macro.Unop.OpIncrement.toString = $estr;
haxe.macro.Unop.OpIncrement.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpDecrement = ["OpDecrement",1];
haxe.macro.Unop.OpDecrement.toString = $estr;
haxe.macro.Unop.OpDecrement.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpNot = ["OpNot",2];
haxe.macro.Unop.OpNot.toString = $estr;
haxe.macro.Unop.OpNot.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpNeg = ["OpNeg",3];
haxe.macro.Unop.OpNeg.toString = $estr;
haxe.macro.Unop.OpNeg.__enum__ = haxe.macro.Unop;
haxe.macro.Unop.OpNegBits = ["OpNegBits",4];
haxe.macro.Unop.OpNegBits.toString = $estr;
haxe.macro.Unop.OpNegBits.__enum__ = haxe.macro.Unop;
haxe.macro.ExprDef = $hxClasses["haxe.macro.ExprDef"] = { __ename__ : true, __constructs__ : ["EConst","EArray","EBinop","EField","EParenthesis","EObjectDecl","EArrayDecl","ECall","ENew","EUnop","EVars","EFunction","EBlock","EFor","EIn","EIf","EWhile","ESwitch","ETry","EReturn","EBreak","EContinue","EUntyped","EThrow","ECast","EDisplay","EDisplayNew","ETernary","ECheckType","EMeta"] };
haxe.macro.ExprDef.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EArray = function(e1,e2) { var $x = ["EArray",1,e1,e2]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EBinop = function(op,e1,e2) { var $x = ["EBinop",2,op,e1,e2]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EField = function(e,field) { var $x = ["EField",3,e,field]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EParenthesis = function(e) { var $x = ["EParenthesis",4,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EObjectDecl = function(fields) { var $x = ["EObjectDecl",5,fields]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EArrayDecl = function(values) { var $x = ["EArrayDecl",6,values]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ECall = function(e,params) { var $x = ["ECall",7,e,params]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ENew = function(t,params) { var $x = ["ENew",8,t,params]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EUnop = function(op,postFix,e) { var $x = ["EUnop",9,op,postFix,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EVars = function(vars) { var $x = ["EVars",10,vars]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EFunction = function(name,f) { var $x = ["EFunction",11,name,f]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EBlock = function(exprs) { var $x = ["EBlock",12,exprs]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EFor = function(it,expr) { var $x = ["EFor",13,it,expr]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EIn = function(e1,e2) { var $x = ["EIn",14,e1,e2]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EIf = function(econd,eif,eelse) { var $x = ["EIf",15,econd,eif,eelse]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EWhile = function(econd,e,normalWhile) { var $x = ["EWhile",16,econd,e,normalWhile]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ESwitch = function(e,cases,edef) { var $x = ["ESwitch",17,e,cases,edef]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ETry = function(e,catches) { var $x = ["ETry",18,e,catches]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EReturn = function(e) { var $x = ["EReturn",19,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EBreak = ["EBreak",20];
haxe.macro.ExprDef.EBreak.toString = $estr;
haxe.macro.ExprDef.EBreak.__enum__ = haxe.macro.ExprDef;
haxe.macro.ExprDef.EContinue = ["EContinue",21];
haxe.macro.ExprDef.EContinue.toString = $estr;
haxe.macro.ExprDef.EContinue.__enum__ = haxe.macro.ExprDef;
haxe.macro.ExprDef.EUntyped = function(e) { var $x = ["EUntyped",22,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EThrow = function(e) { var $x = ["EThrow",23,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ECast = function(e,t) { var $x = ["ECast",24,e,t]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EDisplay = function(e,isCall) { var $x = ["EDisplay",25,e,isCall]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EDisplayNew = function(t) { var $x = ["EDisplayNew",26,t]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ETernary = function(econd,eif,eelse) { var $x = ["ETernary",27,econd,eif,eelse]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.ECheckType = function(e,t) { var $x = ["ECheckType",28,e,t]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ExprDef.EMeta = function(s,e) { var $x = ["EMeta",29,s,e]; $x.__enum__ = haxe.macro.ExprDef; $x.toString = $estr; return $x; };
haxe.macro.ComplexType = $hxClasses["haxe.macro.ComplexType"] = { __ename__ : true, __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional"] };
haxe.macro.ComplexType.TPath = function(p) { var $x = ["TPath",0,p]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TFunction = function(args,ret) { var $x = ["TFunction",1,args,ret]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TAnonymous = function(fields) { var $x = ["TAnonymous",2,fields]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TParent = function(t) { var $x = ["TParent",3,t]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TExtend = function(p,fields) { var $x = ["TExtend",4,p,fields]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.ComplexType.TOptional = function(t) { var $x = ["TOptional",5,t]; $x.__enum__ = haxe.macro.ComplexType; $x.toString = $estr; return $x; };
haxe.macro.Access = $hxClasses["haxe.macro.Access"] = { __ename__ : true, __constructs__ : ["APublic","APrivate","AStatic","AOverride","ADynamic","AInline","AMacro"] };
haxe.macro.Access.APublic = ["APublic",0];
haxe.macro.Access.APublic.toString = $estr;
haxe.macro.Access.APublic.__enum__ = haxe.macro.Access;
haxe.macro.Access.APrivate = ["APrivate",1];
haxe.macro.Access.APrivate.toString = $estr;
haxe.macro.Access.APrivate.__enum__ = haxe.macro.Access;
haxe.macro.Access.AStatic = ["AStatic",2];
haxe.macro.Access.AStatic.toString = $estr;
haxe.macro.Access.AStatic.__enum__ = haxe.macro.Access;
haxe.macro.Access.AOverride = ["AOverride",3];
haxe.macro.Access.AOverride.toString = $estr;
haxe.macro.Access.AOverride.__enum__ = haxe.macro.Access;
haxe.macro.Access.ADynamic = ["ADynamic",4];
haxe.macro.Access.ADynamic.toString = $estr;
haxe.macro.Access.ADynamic.__enum__ = haxe.macro.Access;
haxe.macro.Access.AInline = ["AInline",5];
haxe.macro.Access.AInline.toString = $estr;
haxe.macro.Access.AInline.__enum__ = haxe.macro.Access;
haxe.macro.Access.AMacro = ["AMacro",6];
haxe.macro.Access.AMacro.toString = $estr;
haxe.macro.Access.AMacro.__enum__ = haxe.macro.Access;
haxe.macro.FieldType = $hxClasses["haxe.macro.FieldType"] = { __ename__ : true, __constructs__ : ["FVar","FFun","FProp"] };
haxe.macro.FieldType.FVar = function(t,e) { var $x = ["FVar",0,t,e]; $x.__enum__ = haxe.macro.FieldType; $x.toString = $estr; return $x; };
haxe.macro.FieldType.FFun = function(f) { var $x = ["FFun",1,f]; $x.__enum__ = haxe.macro.FieldType; $x.toString = $estr; return $x; };
haxe.macro.FieldType.FProp = function(get,set,t,e) { var $x = ["FProp",2,get,set,t,e]; $x.__enum__ = haxe.macro.FieldType; $x.toString = $estr; return $x; };
haxe.macro.Type = $hxClasses["haxe.macro.Type"] = { __ename__ : true, __constructs__ : ["TMono","TEnum","TInst","TType","TFun","TAnonymous","TDynamic","TLazy","TAbstract"] };
haxe.macro.Type.TMono = function(t) { var $x = ["TMono",0,t]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TEnum = function(t,params) { var $x = ["TEnum",1,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TInst = function(t,params) { var $x = ["TInst",2,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TType = function(t,params) { var $x = ["TType",3,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TFun = function(args,ret) { var $x = ["TFun",4,args,ret]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TAnonymous = function(a) { var $x = ["TAnonymous",5,a]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TDynamic = function(t) { var $x = ["TDynamic",6,t]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TLazy = function(f) { var $x = ["TLazy",7,f]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.macro.Type.TAbstract = function(t,params) { var $x = ["TAbstract",8,t,params]; $x.__enum__ = haxe.macro.Type; $x.toString = $estr; return $x; };
haxe.ui = {};
haxe.ui.toolkit = {};
haxe.ui.toolkit.core = {};
haxe.ui.toolkit.core.interfaces = {};
haxe.ui.toolkit.core.interfaces.IClonable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IClonable"] = haxe.ui.toolkit.core.interfaces.IClonable;
haxe.ui.toolkit.core.interfaces.IClonable.__name__ = ["haxe","ui","toolkit","core","interfaces","IClonable"];
haxe.ui.toolkit.core.interfaces.IClonable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IClonable
};
haxe.ui.toolkit.core.interfaces.IDrawable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDrawable"] = haxe.ui.toolkit.core.interfaces.IDrawable;
haxe.ui.toolkit.core.interfaces.IDrawable.__name__ = ["haxe","ui","toolkit","core","interfaces","IDrawable"];
haxe.ui.toolkit.core.interfaces.IDrawable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDrawable
};
haxe.ui.toolkit.core.interfaces.IEventDispatcher = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IEventDispatcher"] = haxe.ui.toolkit.core.interfaces.IEventDispatcher;
haxe.ui.toolkit.core.interfaces.IEventDispatcher.__name__ = ["haxe","ui","toolkit","core","interfaces","IEventDispatcher"];
haxe.ui.toolkit.core.interfaces.IEventDispatcher.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IEventDispatcher
};
haxe.ui.toolkit.core.interfaces.IDisplayObject = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDisplayObject"] = haxe.ui.toolkit.core.interfaces.IDisplayObject;
haxe.ui.toolkit.core.interfaces.IDisplayObject.__name__ = ["haxe","ui","toolkit","core","interfaces","IDisplayObject"];
haxe.ui.toolkit.core.interfaces.IDisplayObject.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IEventDispatcher];
haxe.ui.toolkit.core.interfaces.IDisplayObject.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDisplayObject
};
haxe.ui.toolkit.core.DisplayObject = function() {
	this._alpha = 1;
	this._includeInLayout = true;
	this._valign = "top";
	this._halign = "left";
	this._invalidating = false;
	this._ready = false;
	this._minHeight = 0;
	this._minWidth = 0;
	this._percentHeight = -1;
	this._percentWidth = -1;
	this._height = 0;
	this._width = 0;
	this._z = 0;
	this._y = 0;
	this._x = 0;
	this._sprite = new openfl.display.Sprite();
	this._sprite.tabChildren = false;
	this.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this._onAddedToStage),false,100);
};
$hxClasses["haxe.ui.toolkit.core.DisplayObject"] = haxe.ui.toolkit.core.DisplayObject;
haxe.ui.toolkit.core.DisplayObject.__name__ = ["haxe","ui","toolkit","core","DisplayObject"];
haxe.ui.toolkit.core.DisplayObject.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IDrawable,haxe.ui.toolkit.core.interfaces.IDisplayObject,haxe.ui.toolkit.core.interfaces.IEventDispatcher];
haxe.ui.toolkit.core.DisplayObject.prototype = {
	preInitialize: function() {
	}
	,initialize: function() {
	}
	,postInitialize: function() {
	}
	,_onAddedToStage: function(event) {
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this._onAddedToStage));
		this.preInitialize();
		this._ready = true;
		this.initialize();
		this.postInitialize();
		this.invalidate(273);
		var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "init");
		this.dispatchEvent(event1);
		var event2 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "ready");
		this.dispatchEvent(event2);
	}
	,get_parent: function() {
		return this._parent;
	}
	,set_parent: function(value) {
		this._parent = value;
		return value;
	}
	,get_root: function() {
		return this._root;
	}
	,set_root: function(value) {
		this._root = value;
		return value;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(value) {
		this._id = value;
		return value;
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(value) {
		this._x = value | 0;
		this._sprite.set_x(this._x);
		return value;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(value) {
		this._y = value | 0;
		this._sprite.set_y(this._y);
		return value;
	}
	,get_z: function() {
		return this._z;
	}
	,set_z: function(value) {
		this._z = value | 0;
		return value;
	}
	,get_rotationX: function() {
		return 0;
	}
	,set_rotationX: function(value) {
		return value;
	}
	,get_rotationY: function() {
		return 0;
	}
	,set_rotationY: function(value) {
		return value;
	}
	,get_rotationZ: function() {
		return 0;
	}
	,set_rotationZ: function(value) {
		return value;
	}
	,get_width: function() {
		return this._width / this.get_sprite().get_scaleX();
	}
	,set_width: function(value) {
		value = Math.round(value);
		if(this._width == value) return value;
		this._width = value;
		this._invalidating = false;
		this.invalidate(272);
		if(this._parent != null) this._parent.invalidate(1);
		var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "resize");
		this.dispatchEvent(event);
		return value;
	}
	,get_height: function() {
		return this._height / this.get_sprite().get_scaleY();
	}
	,set_height: function(value) {
		value = Math.round(value);
		if(this._height == value) return value;
		this._height = value;
		this._invalidating = false;
		this.invalidate(272);
		if(this._parent != null) this._parent.invalidate(1);
		var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "resize");
		this.dispatchEvent(event);
		return value;
	}
	,get_percentWidth: function() {
		return this._percentWidth;
	}
	,set_percentWidth: function(value) {
		if(this._percentWidth == value) return value;
		this._percentWidth = value;
		this.invalidate();
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_percentHeight: function() {
		return this._percentHeight;
	}
	,set_percentHeight: function(value) {
		if(this._percentHeight == value) return value;
		this._percentHeight = value;
		this.invalidate();
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_minWidth: function() {
		return this._minWidth;
	}
	,set_minWidth: function(value) {
		this._minWidth = value;
		return value;
	}
	,get_minHeight: function() {
		return this._minHeight;
	}
	,set_minHeight: function(value) {
		this._minHeight = value;
		return value;
	}
	,get_ready: function() {
		return this._ready;
	}
	,get_sprite: function() {
		return this._sprite;
	}
	,get_stageX: function() {
		var c;
		c = js.Boot.__cast(this , haxe.ui.toolkit.core.interfaces.IDisplayObject);
		var xpos = 0;
		while(c != null) {
			xpos += c.get_x();
			if(c.get_sprite().get_scrollRect() != null) xpos -= c.get_sprite().get_scrollRect().get_left();
			c = c.get_parent();
		}
		return xpos;
	}
	,get_stageY: function() {
		var c;
		c = js.Boot.__cast(this , haxe.ui.toolkit.core.interfaces.IDisplayObject);
		var ypos = 0;
		while(c != null) {
			ypos += c.get_y();
			if(c.get_sprite().get_scrollRect() != null) ypos -= c.get_sprite().get_scrollRect().get_top();
			c = c.get_parent();
		}
		return ypos;
	}
	,get_visible: function() {
		return this._sprite.get_visible();
	}
	,set_visible: function(value) {
		this._sprite.set_visible(value);
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value != this._alpha) {
			this._alpha = value;
			this.invalidate();
		}
		return value;
	}
	,get_includeInLayout: function() {
		return this._includeInLayout;
	}
	,set_includeInLayout: function(value) {
		this._includeInLayout = value;
		if(this._parent != null) this._parent.invalidate(1);
		return value;
	}
	,get_horizontalAlign: function() {
		return this._halign;
	}
	,set_horizontalAlign: function(value) {
		this._halign = value;
		if(this._ready) this.get_parent().invalidate(1);
		return value;
	}
	,get_verticalAlign: function() {
		return this._valign;
	}
	,set_verticalAlign: function(value) {
		this._valign = value;
		if(this._ready) this.get_parent().invalidate(1);
		return value;
	}
	,get_useHandCursor: function() {
		return this.get_sprite().useHandCursor;
	}
	,set_useHandCursor: function(value) {
		this.get_sprite().useHandCursor = value;
		this.get_sprite().buttonMode = true;
		return value;
	}
	,hitTest: function(xpos,ypos) {
		var b = false;
		var sx = this.get_stageX();
		var sy = this.get_stageY();
		if(xpos > sx && xpos < sx + this.get_width() && ypos > sy && ypos < sy + this.get_height()) b = true;
		return b;
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		this._invalidating = true;
		if((type & 16) == 16 || (type & 4096) == 4096) this.paint();
		this._invalidating = false;
	}
	,dispose: function() {
		this.removeAllEventListeners();
	}
	,interceptEvent: function(event) {
		var uiEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + event.type);
		if(js.Boot.__instanceof(event,openfl.events.MouseEvent)) {
			var mouseEvent = event;
			uiEvent.stageX = mouseEvent.stageX;
			uiEvent.stageY = mouseEvent.stageY;
		}
		this.dispatchEvent(uiEvent);
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(StringTools.startsWith(type,"haxeui_")) {
			var interceptEventType = HxOverrides.substr(type,"haxeui_".length,type.length);
			if(this._interceptMap == null) this._interceptMap = new haxe.ds.StringMap();
			if(this._interceptMap.exists(interceptEventType) == false) this._interceptMap.set(interceptEventType,0); else {
				var value = this._interceptMap.get(interceptEventType) + 1;
				this._interceptMap.set(interceptEventType,value);
			}
			if(this._interceptMap.get(interceptEventType) == 0) this.addEventListener(interceptEventType,$bind(this,this.interceptEvent),useCapture,priority,useWeakReference);
		}
		if(this._eventListeners == null) this._eventListeners = new haxe.ds.StringMap();
		var list = this._eventListeners.get(type);
		if(list == null) {
			list = new Array();
			this._eventListeners.set(type,list);
		}
		list.push(listener);
		this._sprite.addEventListener(type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js.Boot.__instanceof(event,haxe.ui.toolkit.events.UIEvent)) (js.Boot.__cast(event , haxe.ui.toolkit.events.UIEvent)).displayObject = this;
		return this._sprite.dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		return this._sprite.hasEventListener(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(StringTools.startsWith(type,"haxeui_")) {
			var interceptEventType = HxOverrides.substr(type,"haxeui_".length,type.length);
			if(this._interceptMap != null && this._interceptMap.exists(interceptEventType)) {
				var value = this._interceptMap.get(interceptEventType) - 1;
				this._interceptMap.set(interceptEventType,value);
				if(this._interceptMap.get(interceptEventType) <= 0) {
					this._interceptMap.remove(interceptEventType);
					this.removeEventListener(interceptEventType,$bind(this,this.interceptEvent),useCapture);
				}
			}
		}
		if(this._eventListeners != null && this._eventListeners.exists(type)) {
			var list = this._eventListeners.get(type);
			if(list != null) HxOverrides.remove(list,listener);
		}
		this._sprite.removeEventListener(type,listener,useCapture);
	}
	,willTrigger: function(type) {
		return this._sprite.willTrigger(type);
	}
	,get_graphics: function() {
		return this._sprite.get_graphics();
	}
	,paint: function() {
		this._sprite.get_graphics().clear();
		this._sprite.get_graphics().beginFill(13421772);
		this._sprite.get_graphics().lineStyle(1,8947848);
		this._sprite.get_graphics().drawRect(0,0,this._width,this._height);
		this._sprite.get_graphics().endFill();
	}
	,removeEventListenerType: function(eventType) {
		if(this._eventListeners != null) {
			var list = this._eventListeners.get(eventType);
			if(list != null) while(list.length != 0) this.removeEventListener(eventType,list.pop());
		}
	}
	,removeAllEventListeners: function() {
		if(this._eventListeners != null) {
			var $it0 = this._eventListeners.keys();
			while( $it0.hasNext() ) {
				var eventType = $it0.next();
				var list = this._eventListeners.get(eventType);
				while(list.length != 0) {
					this.removeEventListener(eventType,list.pop());
					list = this._eventListeners.get(eventType);
				}
			}
		}
	}
	,getListenerCount: function(type,listener) {
		var count = 0;
		if(this._eventListeners.exists(type)) {
			var list = this._eventListeners.get(type);
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				if(l == listener) count++;
			}
		}
		return count;
	}
	,removeEventFunction: function(arr,fn) {
		return HxOverrides.remove(arr,fn);
	}
	,_handleEvent: function(event) {
		var fnName = "on" + haxe.ui.toolkit.util.StringUtil.capitalizeFirstLetter(StringTools.replace(event.type,"haxeui_",""));
		var fn = Reflect.field(this,fnName);
		if(fn != null) {
			var fnEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + event.type,event.get_component());
			fnEvent.data = event.data;
			fnEvent.displayObject = this;
			fn(fnEvent);
		}
	}
	,set_onInit: function(value) {
		this.onInit = value;
		this.addEventListener("haxeui_" + "init",$bind(this,this._handleEvent));
		return value;
	}
	,set_onResize: function(value) {
		this.onResize = value;
		this.addEventListener("haxeui_" + "resize",$bind(this,this._handleEvent));
		return value;
	}
	,set_onReady: function(value) {
		this.onReady = value;
		this.addEventListener("haxeui_" + "ready",$bind(this,this._handleEvent));
		return value;
	}
	,set_onClick: function(value) {
		this.onClick = value;
		this.addEventListener("haxeui_" + "click",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseDown: function(value) {
		this.onMouseDown = value;
		this.addEventListener("haxeui_" + "mouseDown",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseUp: function(value) {
		this.onMouseUp = value;
		this.addEventListener("haxeui_" + "mouseUp",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseOver: function(value) {
		this.onMouseOver = value;
		this.addEventListener("haxeui_" + "mouseOver",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseOut: function(value) {
		this.onMouseOut = value;
		this.addEventListener("haxeui_" + "mouseOut",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMouseMove: function(value) {
		this.onMouseMove = value;
		this.addEventListener("haxeui_" + "mouseMove",$bind(this,this._handleEvent));
		return value;
	}
	,set_onDoubleClick: function(value) {
		this.onDoubleClick = value;
		this.addEventListener("haxeui_" + "doubleClick",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRollOver: function(value) {
		this.onRollOver = value;
		this.addEventListener("haxeui_" + "rollOver",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRollOut: function(value) {
		this.onRollOut = value;
		this.addEventListener("haxeui_" + "rollOut",$bind(this,this._handleEvent));
		return value;
	}
	,set_onChange: function(value) {
		this.onChange = value;
		this.addEventListener("haxeui_" + "change",$bind(this,this._handleEvent));
		return value;
	}
	,set_onScroll: function(value) {
		this.onScroll = value;
		this.addEventListener("haxeui_" + "scroll",$bind(this,this._handleEvent));
		return value;
	}
	,set_onAdded: function(value) {
		this.onAdded = value;
		this.addEventListener("haxeui_" + "added",$bind(this,this._handleEvent));
		return value;
	}
	,set_onAddedToStage: function(value) {
		this.onAddedToStage = value;
		this.addEventListener("haxeui_" + "addedToStage",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRemoved: function(value) {
		this.onRemoved = value;
		this.addEventListener("haxeui_" + "removed",$bind(this,this._handleEvent));
		return value;
	}
	,set_onRemovedFromStage: function(value) {
		this.onRemovedFromStage = value;
		this.addEventListener("haxeui_" + "removedFromStage",$bind(this,this._handleEvent));
		return value;
	}
	,set_onActivate: function(value) {
		this.onActivate = value;
		this.addEventListener("haxeui_" + "activate",$bind(this,this._handleEvent));
		return value;
	}
	,set_onDeactivate: function(value) {
		this.onDeactivate = value;
		this.addEventListener("haxeui_" + "deactivate",$bind(this,this._handleEvent));
		return value;
	}
	,set_onGlyphClick: function(value) {
		this.onGlyphClick = value;
		this.addEventListener("haxeui_" + "glyphClick",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMenuSelect: function(value) {
		this.onMenuSelect = value;
		this.addEventListener("haxeui_" + "menuSelect",$bind(this,this._handleEvent));
		return value;
	}
	,set_onMenuOpen: function(value) {
		this.onMenuOpen = value;
		this.addEventListener("haxeui_" + "menuOpen",$bind(this,this._handleEvent));
		return value;
	}
	,clone: function() {
		var c = this.self();
		c.set_id(this.get_id());
		c.set_x(this.get_x());
		c.set_y(this.get_y());
		c.set_z(this.get_z());
		c.set_rotationX(this.get_rotationX());
		c.set_rotationY(this.get_rotationY());
		c.set_rotationZ(this.get_rotationZ());
		c.set_width(this.get_width());
		c.set_height(this.get_height());
		c.set_percentWidth(this.get_percentWidth());
		c.set_percentHeight(this.get_percentHeight());
		c.set_minWidth(this.get_minWidth());
		c.set_minHeight(this.get_minHeight());
		c.set_alpha(this.get_alpha());
		c.set_includeInLayout(this.get_includeInLayout());
		c.set_horizontalAlign(this.get_horizontalAlign());
		c.set_verticalAlign(this.get_verticalAlign());
		c.set_useHandCursor(this.get_useHandCursor());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.DisplayObject();
	}
	,__class__: haxe.ui.toolkit.core.DisplayObject
	,__properties__: {set_onMenuOpen:"set_onMenuOpen",set_onMenuSelect:"set_onMenuSelect",set_onGlyphClick:"set_onGlyphClick",set_onDeactivate:"set_onDeactivate",set_onActivate:"set_onActivate",set_onRemovedFromStage:"set_onRemovedFromStage",set_onRemoved:"set_onRemoved",set_onAddedToStage:"set_onAddedToStage",set_onAdded:"set_onAdded",set_onScroll:"set_onScroll",set_onChange:"set_onChange",set_onRollOut:"set_onRollOut",set_onRollOver:"set_onRollOver",set_onDoubleClick:"set_onDoubleClick",set_onMouseMove:"set_onMouseMove",set_onMouseOut:"set_onMouseOut",set_onMouseOver:"set_onMouseOver",set_onMouseUp:"set_onMouseUp",set_onMouseDown:"set_onMouseDown",set_onClick:"set_onClick",set_onReady:"set_onReady",set_onResize:"set_onResize",set_onInit:"set_onInit",get_graphics:"get_graphics",set_useHandCursor:"set_useHandCursor",get_useHandCursor:"get_useHandCursor",set_verticalAlign:"set_verticalAlign",get_verticalAlign:"get_verticalAlign",set_horizontalAlign:"set_horizontalAlign",get_horizontalAlign:"get_horizontalAlign",set_includeInLayout:"set_includeInLayout",get_includeInLayout:"get_includeInLayout",set_alpha:"set_alpha",get_alpha:"get_alpha",set_visible:"set_visible",get_visible:"get_visible",get_stageY:"get_stageY",get_stageX:"get_stageX",get_sprite:"get_sprite",get_ready:"get_ready",set_minHeight:"set_minHeight",get_minHeight:"get_minHeight",set_minWidth:"set_minWidth",get_minWidth:"get_minWidth",set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_rotationZ:"set_rotationZ",get_rotationZ:"get_rotationZ",set_rotationY:"set_rotationY",get_rotationY:"get_rotationY",set_rotationX:"set_rotationX",get_rotationX:"get_rotationX",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_id:"set_id",get_id:"get_id",set_root:"set_root",get_root:"get_root",set_parent:"set_parent",get_parent:"get_parent"}
};
haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"] = haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer;
haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer.__name__ = ["haxe","ui","toolkit","core","interfaces","IDisplayObjectContainer"];
haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDisplayObject];
haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer
};
haxe.ui.toolkit.core.DisplayObjectContainer = function() {
	this._autoSize = false;
	haxe.ui.toolkit.core.DisplayObject.call(this);
	this._layout = new haxe.ui.toolkit.layout.DefaultLayout();
	this._children = new Array();
};
$hxClasses["haxe.ui.toolkit.core.DisplayObjectContainer"] = haxe.ui.toolkit.core.DisplayObjectContainer;
haxe.ui.toolkit.core.DisplayObjectContainer.__name__ = ["haxe","ui","toolkit","core","DisplayObjectContainer"];
haxe.ui.toolkit.core.DisplayObjectContainer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer];
haxe.ui.toolkit.core.DisplayObjectContainer.__super__ = haxe.ui.toolkit.core.DisplayObject;
haxe.ui.toolkit.core.DisplayObjectContainer.prototype = $extend(haxe.ui.toolkit.core.DisplayObject.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.DisplayObject.prototype.initialize.call(this);
		this._layout.set_container(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.DisplayObject.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256 || (type & 1) == 1) this._layout.refresh();
		this._invalidating = false;
		if(recursive == true) {
			var _g = 0;
			var _g1 = this._children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.invalidate(type,recursive);
			}
		}
	}
	,get_numChildren: function() {
		var arr = this._children;
		return arr.length;
	}
	,get_children: function() {
		var arr = this._children;
		return arr;
	}
	,indexOfChild: function(child) {
		var index = Lambda.indexOf(this.get_children(),child);
		return index;
	}
	,getChildAt: function(index) {
		return this.get_children()[index];
	}
	,addChildAt: function(child,index) {
		if(child == null) return null;
		var childSprite = child.get_sprite();
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) (js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)).set_parent(this);
		child.set_root(this.get_root());
		this._children.splice(index,0,child);
		this._sprite.addChildAt(childSprite,index);
		this.invalidate(1);
		return child;
	}
	,addChild: function(child) {
		if(child == null) return null;
		var childSprite = child.get_sprite();
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) (js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)).set_parent(this);
		child.set_root(this.get_root());
		this._children.push(child);
		this._sprite.addChild(childSprite);
		this.invalidate(1);
		return child;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		if(child == null) return null;
		var childSprite = child.get_sprite();
		this._sprite.removeChild(childSprite);
		HxOverrides.remove(this._children,child);
		if(dispose == true) child.dispose();
		this.invalidate(1);
		return child;
	}
	,removeChildAt: function(index,dispose) {
		if(dispose == null) dispose = true;
		return this.removeChild(this.getChildAt(index),dispose);
	}
	,removeAllChildren: function(dispose) {
		if(dispose == null) dispose = true;
		var arr = this.get_children();
		while(arr.length > 0) {
			var child = arr[0];
			this.removeChild(child,dispose);
		}
		while(this.get_sprite().get_numChildren() > 0) this.get_sprite().removeChildAt(0);
	}
	,contains: function(child) {
		if(child == null) return false;
		return this.get_sprite().contains(child.get_sprite());
	}
	,setChildIndex: function(child,index) {
		if(child != null) this.get_sprite().setChildIndex(child.get_sprite(),index);
	}
	,findChildAs: function(type) {
		var match = null;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(child,type)) {
				match = child;
				break;
			}
		}
		return match;
	}
	,findChild: function(id,type,recursive) {
		if(recursive == null) recursive = false;
		var match = null;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_id() == id) {
				match = child;
				break;
			}
		}
		if(match == null && recursive == true) {
			var _g2 = 0;
			var _g11 = this.get_children();
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				if(js.Boot.__instanceof(child1,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) {
					var c;
					c = js.Boot.__cast(child1 , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer);
					var temp = c.findChild(id,type,recursive);
					if(temp != null) {
						match = temp;
						break;
					}
				}
			}
		}
		return match;
	}
	,findComponentUnderPoint: function(stageX,stageY) {
		var c = null;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.hitTest(stageX,stageY) == true) {
				c = child;
				break;
			}
		}
		return c;
	}
	,get_layout: function() {
		return this._layout;
	}
	,set_layout: function(value) {
		this._layout = value;
		this._layout.set_container(this);
		if(this._ready) this.invalidate(1);
		return value;
	}
	,get_autoSize: function() {
		return this._autoSize;
	}
	,set_autoSize: function(value) {
		this._autoSize = value;
		if(this._ready) this.invalidate(1);
		return this._autoSize;
	}
	,dispose: function() {
		while(this.get_children().length > 0) {
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				try {
					this.removeChild(child);
				} catch( e ) {
					var stack = haxe.CallStack.exceptionStack();
					haxe.Log.trace("Problem removing component: " + Std.string(this) + ", " + Std.string(child) + "(" + Std.string(e) + "), callstack:",{ fileName : "DisplayObjectContainer.hx", lineNumber : 246, className : "haxe.ui.toolkit.core.DisplayObjectContainer", methodName : "dispose"});
					haxe.Log.trace(haxe.CallStack.toString(stack),{ fileName : "DisplayObjectContainer.hx", lineNumber : 247, className : "haxe.ui.toolkit.core.DisplayObjectContainer", methodName : "dispose"});
				}
			}
		}
		haxe.ui.toolkit.core.DisplayObject.prototype.dispose.call(this);
	}
	,set_root: function(value) {
		haxe.ui.toolkit.core.DisplayObject.prototype.set_root.call(this,value);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.set_root(value);
		}
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.DisplayObject.prototype.clone.call(this);
		c.set_autoSize(this.get_autoSize());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.DisplayObjectContainer();
	}
	,__class__: haxe.ui.toolkit.core.DisplayObjectContainer
	,__properties__: $extend(haxe.ui.toolkit.core.DisplayObject.prototype.__properties__,{set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",get_children:"get_children",set_layout:"set_layout",get_layout:"get_layout",get_numChildren:"get_numChildren"})
});
haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject"] = haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject;
haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject.__name__ = ["haxe","ui","toolkit","core","interfaces","IStyleableDisplayObject"];
haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer];
haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject
};
haxe.ui.toolkit.core.StyleableDisplayObject = function() {
	this._lazyLoadStyles = true;
	haxe.ui.toolkit.core.DisplayObjectContainer.call(this);
};
$hxClasses["haxe.ui.toolkit.core.StyleableDisplayObject"] = haxe.ui.toolkit.core.StyleableDisplayObject;
haxe.ui.toolkit.core.StyleableDisplayObject.__name__ = ["haxe","ui","toolkit","core","StyleableDisplayObject"];
haxe.ui.toolkit.core.StyleableDisplayObject.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject];
haxe.ui.toolkit.core.StyleableDisplayObject.__super__ = haxe.ui.toolkit.core.DisplayObjectContainer;
haxe.ui.toolkit.core.StyleableDisplayObject.prototype = $extend(haxe.ui.toolkit.core.DisplayObjectContainer.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.core.DisplayObjectContainer.prototype.preInitialize.call(this);
		this.refreshStyle();
	}
	,paint: function() {
		if(this._width == 0 || this._height == 0 || this._ready == false) return;
		var rc = new openfl.geom.Rectangle(0,0,this._width,this._height);
		haxe.ui.toolkit.style.StyleHelper.paintStyle(this.get_graphics(),this._baseStyle,rc);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.DisplayObjectContainer.prototype.invalidate.call(this,type,recursive);
		if((type & 1048576) == 1048576) this.refreshStyle();
	}
	,set_id: function(value) {
		if(value == this.get_id()) return value;
		var v = haxe.ui.toolkit.core.DisplayObjectContainer.prototype.set_id.call(this,value);
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this);
			this.invalidate(16);
		}
		return v;
	}
	,set_layout: function(value) {
		value = haxe.ui.toolkit.core.DisplayObjectContainer.prototype.set_layout.call(this,value);
		if(this._baseStyle != null) {
			if(this.get_layout() != null) {
				if(this._baseStyle.get_paddingLeft() != -1) this.get_layout().get_padding().set_left(this._baseStyle.get_paddingLeft());
				if(this._baseStyle.get_paddingTop() != -1) this.get_layout().get_padding().set_top(this._baseStyle.get_paddingTop());
				if(this._baseStyle.get_paddingRight() != -1) this.get_layout().get_padding().set_right(this._baseStyle.get_paddingRight());
				if(this._baseStyle.get_paddingBottom() != -1) this.get_layout().get_padding().set_bottom(this._baseStyle.get_paddingBottom());
				if(this._baseStyle.get_spacingX() != -1) this._layout.set_spacingX(this._baseStyle.get_spacingX());
				if(this._baseStyle.get_spacingY() != -1) this._layout.set_spacingY(this._baseStyle.get_spacingY());
			}
		}
		return value;
	}
	,get_baseStyle: function() {
		if(this._baseStyle == null) {
			this._baseStyle = new haxe.ui.toolkit.style.Style();
			this._baseStyle.set_target(this);
		}
		return this._baseStyle;
	}
	,set_baseStyle: function(value) {
		this._baseStyle = value;
		this._baseStyle.set_target(this);
		return value;
	}
	,get_styleName: function() {
		return this._styleName;
	}
	,set_styleName: function(value) {
		this._styleName = value;
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this);
			this.invalidate(1048592);
		}
		return value;
	}
	,get_styleString: function() {
		return this._styleString;
	}
	,set_styleString: function(value) {
		this._styleString = value;
		return value;
	}
	,get_style: function() {
		if(this._inlineStyle == null) {
			this._inlineStyle = new haxe.ui.toolkit.style.Style();
			this._inlineStyle.set_target(this);
		}
		return this._inlineStyle;
	}
	,set_style: function(value) {
		this._inlineStyle = value;
		if(this._inlineStyle != null) this._inlineStyle.set_target(this);
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this);
			this.invalidate(16);
		}
		return value;
	}
	,storeStyle: function(id,value) {
		if(this._storedStyles == null) this._storedStyles = new haxe.ds.StringMap();
		this._storedStyles.set(id,value);
	}
	,retrieveStyle: function(id) {
		var storedStyle = null;
		if(this._lazyLoadStyles == false) {
			if(this._storedStyles == null) return null;
			storedStyle = this._storedStyles.get(id);
		} else if(this._ready) {
			if(this._storedStyles != null) storedStyle = this._storedStyles.get(id);
			if(storedStyle == null) {
				storedStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this,id);
				this.storeStyle(id,storedStyle);
			}
		}
		return storedStyle;
	}
	,applyStyle: function() {
		if(this._baseStyle == null) return;
		if(this._inlineStyle != null) this._baseStyle.merge(this._inlineStyle);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_alpha() != -1) this._sprite.set_alpha(this._baseStyle.get_alpha()); else this._sprite.set_alpha(this.get_alpha());
			if(this._baseStyle.get_horizontalAlignment() != null) this.set_horizontalAlign(this._baseStyle.get_horizontalAlignment());
			if(this._baseStyle.get_verticalAlignment() != null) this.set_verticalAlign(this._baseStyle.get_verticalAlignment());
			if(this._baseStyle.get_filter() != null) this._sprite.set_filters([this._baseStyle.get_filter()]); else this._sprite.set_filters([]);
		}
		this.invalidate(16);
	}
	,buildStyles: function() {
	}
	,clearStyles: function() {
		this._storedStyles = new haxe.ds.StringMap();
	}
	,refreshStyle: function() {
		if(this._lazyLoadStyles == false) this.buildStyles();
		if(js.Boot.__instanceof(this,haxe.ui.toolkit.core.StateComponent)) {
			var state = (js.Boot.__cast(this , haxe.ui.toolkit.core.StateComponent)).get_state();
			if(state == null) state = "normal";
			this._baseStyle = this.retrieveStyle(state);
			if(this._baseStyle == null) this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this,(js.Boot.__cast(this , haxe.ui.toolkit.core.StateComponent)).get_state());
		} else this._baseStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this);
		this._baseStyle.merge(this._inlineStyle);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_width() != -1 && this.get_width() == 0) this.set_width(this._baseStyle.get_width());
			if(this._baseStyle.get_height() != -1 && this.get_height() == 0) this.set_height(this._baseStyle.get_height());
			if(this._baseStyle.get_percentWidth() != -1 && this.get_percentWidth() == -1) this.set_percentWidth(this._baseStyle.get_percentWidth());
			if(this._baseStyle.get_percentHeight() != -1 && this.get_percentHeight() == -1) this.set_percentHeight(this._baseStyle.get_percentHeight());
			if(this._baseStyle.get_autoSizeSet()) this.set_autoSize(this._baseStyle.get_autoSize());
			if(this.get_layout() != null) {
				if(this._baseStyle.get_paddingLeft() != -1) this.get_layout().get_padding().set_left(this._baseStyle.get_paddingLeft());
				if(this._baseStyle.get_paddingTop() != -1) this.get_layout().get_padding().set_top(this._baseStyle.get_paddingTop());
				if(this._baseStyle.get_paddingRight() != -1) this.get_layout().get_padding().set_right(this._baseStyle.get_paddingRight());
				if(this._baseStyle.get_paddingBottom() != -1) this.get_layout().get_padding().set_bottom(this._baseStyle.get_paddingBottom());
				if(this._baseStyle.get_spacingX() != -1) this._layout.set_spacingX(this._baseStyle.get_spacingX());
				if(this._baseStyle.get_spacingY() != -1) this._layout.set_spacingY(this._baseStyle.get_spacingY());
			}
		}
		this.applyStyle();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.DisplayObjectContainer.prototype.clone.call(this);
		c.set_baseStyle(this.get_baseStyle());
		c.set_styleName(this.get_styleName());
		c.set_style(this.get_style());
		c.set_styleString(this.get_styleString());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.StyleableDisplayObject();
	}
	,__class__: haxe.ui.toolkit.core.StyleableDisplayObject
	,__properties__: $extend(haxe.ui.toolkit.core.DisplayObjectContainer.prototype.__properties__,{set_styleString:"set_styleString",get_styleString:"get_styleString",set_style:"set_style",get_style:"get_style",set_styleName:"set_styleName",get_styleName:"get_styleName",set_baseStyle:"set_baseStyle",get_baseStyle:"get_baseStyle"})
});
haxe.ui.toolkit.core.interfaces.IComponent = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IComponent"] = haxe.ui.toolkit.core.interfaces.IComponent;
haxe.ui.toolkit.core.interfaces.IComponent.__name__ = ["haxe","ui","toolkit","core","interfaces","IComponent"];
haxe.ui.toolkit.core.interfaces.IComponent.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject];
haxe.ui.toolkit.core.interfaces.IComponent.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IComponent
};
haxe.ui.toolkit.core.Component = function() {
	this._disabled = false;
	this._clipContent = false;
	haxe.ui.toolkit.core.StyleableDisplayObject.call(this);
};
$hxClasses["haxe.ui.toolkit.core.Component"] = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.core.Component.__name__ = ["haxe","ui","toolkit","core","Component"];
haxe.ui.toolkit.core.Component.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IComponent];
haxe.ui.toolkit.core.Component.addNamedComponentsFrom = function(parent,list) {
	if(parent == null) return;
	if(parent.get_id() != null) list.push(parent);
	var _g = 0;
	var _g1 = parent.get_children();
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		haxe.ui.toolkit.core.Component.addNamedComponentsFrom(js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IComponent),list);
	}
};
haxe.ui.toolkit.core.Component.__super__ = haxe.ui.toolkit.core.StyleableDisplayObject;
haxe.ui.toolkit.core.Component.prototype = $extend(haxe.ui.toolkit.core.StyleableDisplayObject.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StyleableDisplayObject.prototype.initialize.call(this);
		if(js.Boot.__instanceof(this,haxe.ui.toolkit.core.interfaces.IDraggable)) this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onComponentMouseDown));
		this.initScriplet();
	}
	,postInitialize: function() {
		if(this._disabled == true) this.set_disabled(true);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.StyleableDisplayObject.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256 && this._clipContent == true) this.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,this.get_width(),this.get_height()));
		this._invalidating = false;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(value != null) {
			if(StringTools.startsWith(value,"@#")) value = HxOverrides.substr(value,2,value.length) + "_" + haxe.ui.toolkit.core.Client.get_instance().get_language(); else if(StringTools.startsWith(value,"asset://")) {
				var assetId = HxOverrides.substr(value,8,value.length);
				value = haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(assetId);
				value = StringTools.replace(value,"\r","");
			}
			this._text = value;
		}
		return value;
	}
	,get_clipWidth: function() {
		if(this.get_sprite().get_scrollRect() == null) return this.get_width();
		return this.get_sprite().get_scrollRect().width;
	}
	,set_clipWidth: function(value) {
		this.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,value,this.get_clipHeight()));
		return value;
	}
	,get_clipHeight: function() {
		if(this.get_sprite().get_scrollRect() == null) return this.get_height();
		return this.get_sprite().get_scrollRect().height;
	}
	,set_clipHeight: function(value) {
		this.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,this.get_clipWidth(),value));
		return value;
	}
	,get_clipContent: function() {
		return this._clipContent;
	}
	,set_clipContent: function(value) {
		this._clipContent = value;
		if(this._clipContent == false) this.clearClip();
		this.invalidate(256);
		return value;
	}
	,clearClip: function() {
		this.get_sprite().set_scrollRect(null);
	}
	,get_disabled: function() {
		return this._disabled;
	}
	,set_disabled: function(value) {
		if(value == true) {
			if(this._cachedListeners == null) this._cachedListeners = new haxe.ds.StringMap();
			var $it0 = this._eventListeners.keys();
			while( $it0.hasNext() ) {
				var type = $it0.next();
				if(this.disablableEventType(type) == true) {
					var list = this._eventListeners.get(type);
					var cachedList = this._cachedListeners.get(type);
					if(cachedList == null) {
						cachedList = new Array();
						this._cachedListeners.set(type,cachedList);
					}
					var _g = 0;
					while(_g < list.length) {
						var listener = list[_g];
						++_g;
						cachedList.push(listener);
						this.removeEventListener(type,listener);
					}
				}
			}
		}
		this._disabled = value;
		var _g1 = 0;
		var _g11 = this.get_children();
		while(_g1 < _g11.length) {
			var child = _g11[_g1];
			++_g1;
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.Component)) (js.Boot.__cast(child , haxe.ui.toolkit.core.Component)).set_disabled(value);
		}
		if(value == false) {
			if(this._cachedListeners != null) {
				var $it1 = this._cachedListeners.keys();
				while( $it1.hasNext() ) {
					var type1 = $it1.next();
					var list1 = this._cachedListeners.get(type1);
					var _g2 = 0;
					while(_g2 < list1.length) {
						var listener1 = list1[_g2];
						++_g2;
						this.addEventListener(type1,listener1);
					}
					list1 = new Array();
				}
				this._cachedListeners = null;
			}
		}
		if(js.Boot.__instanceof(this,haxe.ui.toolkit.core.StateComponent)) {
			var stateComponent;
			stateComponent = js.Boot.__cast(this , haxe.ui.toolkit.core.StateComponent);
			if(value == true) {
				if(stateComponent.hasState("disabled")) stateComponent.set_state("disabled");
			} else if(stateComponent.hasState("normal")) stateComponent.set_state("normal");
		}
		return value;
	}
	,get_value: function() {
		return this.get_text();
	}
	,set_value: function(newValue) {
		this.set_text("" + Std.string(newValue));
		return newValue;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(this._disabled == true && this.disablableEventType(type) == true) {
			if(this._cachedListeners == null) this._cachedListeners = new haxe.ds.StringMap();
			var list = this._cachedListeners.get(type);
			if(list == null) {
				list = new Array();
				this._cachedListeners.set(type,list);
			}
			list.push(listener);
			return;
		}
		haxe.ui.toolkit.core.StyleableDisplayObject.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this._disabled == true && this.disablableEventType(type) == true) {
			if(this._cachedListeners != null && this._cachedListeners.exists(type)) {
				var list = this._cachedListeners.get(type);
				if(list != null) {
					HxOverrides.remove(list,listener);
					if(list.length == 0) this._cachedListeners.remove(type);
				}
			}
		}
		haxe.ui.toolkit.core.StyleableDisplayObject.prototype.removeEventListener.call(this,type,listener,useCapture);
	}
	,disablableEventType: function(type) {
		return type == openfl.events.MouseEvent.MOUSE_DOWN || type == openfl.events.MouseEvent.MOUSE_MOVE || type == openfl.events.MouseEvent.MOUSE_OVER || type == openfl.events.MouseEvent.MOUSE_OUT || type == openfl.events.MouseEvent.MOUSE_UP || type == openfl.events.MouseEvent.MOUSE_WHEEL || type == openfl.events.MouseEvent.CLICK;
	}
	,_onComponentMouseDown: function(event) {
		if(js.Boot.__instanceof(this,haxe.ui.toolkit.core.interfaces.IDraggable)) {
			if((js.Boot.__cast(this , haxe.ui.toolkit.core.interfaces.IDraggable)).allowDrag(event) == false) return;
		}
		this.mouseDownPos = new openfl.geom.Point(event.stageX - this.get_stageX(),event.stageY - this.get_stageY());
		this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onComponentMouseMove));
		this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onComponentMouseUp));
	}
	,_onComponentMouseUp: function(event) {
		this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onComponentMouseMove));
		this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onComponentMouseUp));
	}
	,_onComponentMouseMove: function(event) {
		this.set_x(event.stageX - this.mouseDownPos.x);
		this.set_y(event.stageY - this.mouseDownPos.y);
	}
	,addScriptlet: function(scriptlet) {
		var found = false;
		var item = this;
		while(item != null) {
			if(item.get_scriptletSource() != null) {
				found = true;
				break;
			}
			item = item.get_parent();
		}
		if(found == false) item = this;
		if(item != null) {
			if(item.get_scriptletSource() == null) item.set_scriptletSource("");
			var _g = item;
			_g.set_scriptletSource(_g.get_scriptletSource() + scriptlet);
		}
	}
	,findInterp: function() {
		var found = false;
		var item = this;
		while(item != null) {
			if(item._interp != null) {
				found = true;
				break;
			}
			item = item.get_parent();
		}
		if(found == false) return null;
		return item._interp;
	}
	,executeScriptletExpr: function(expr) {
		try {
			var parser = new hscript.Parser();
			var line = parser.parseString(expr);
			this.findInterp().expr(line);
		} catch( e ) {
			haxe.Log.trace("Problem executing scriptlet: " + Std.string(e),{ fileName : "Component.hx", lineNumber : 323, className : "haxe.ui.toolkit.core.Component", methodName : "executeScriptletExpr"});
		}
	}
	,addScriptletEventHandler: function(event,scriptlet) {
		var _g = this;
		event = "haxeui_" + event;
		this.addEventListener(event,function(e) {
			_g.executeScriptletExpr(scriptlet);
		});
	}
	,get_scriptletSource: function() {
		return this._scriptletSource;
	}
	,set_scriptletSource: function(value) {
		this._scriptletSource = value;
		return value;
	}
	,initScriplet: function() {
		if(this._scriptletSource != null) try {
			var parser = new hscript.Parser();
			var program = parser.parseString(this._scriptletSource);
			this._interp = new haxe.ui.toolkit.hscript.ScriptInterp();
			var comps = this.get_namedComponents();
			var _g = 0;
			while(_g < comps.length) {
				var comp = comps[_g];
				++_g;
				var safeId = haxe.ui.toolkit.util.StringUtil.capitalizeHyphens(comp.get_id());
				this._interp.variables.set(safeId,comp);
			}
			this._interp.execute(program);
		} catch( e ) {
			haxe.Log.trace("Problem running script: " + Std.string(e),{ fileName : "Component.hx", lineNumber : 360, className : "haxe.ui.toolkit.core.Component", methodName : "initScriplet"});
		}
	}
	,get_namedComponents: function() {
		var list = new Array();
		haxe.ui.toolkit.core.Component.addNamedComponentsFrom(this,list);
		return list;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StyleableDisplayObject.prototype.clone.call(this);
		c.set_text(this.get_text());
		c.set_disabled(this.get_disabled());
		c.userData = this.userData;
		c.set_value(this.get_value());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.Component();
	}
	,__class__: haxe.ui.toolkit.core.Component
	,__properties__: $extend(haxe.ui.toolkit.core.StyleableDisplayObject.prototype.__properties__,{get_namedComponents:"get_namedComponents",set_scriptletSource:"set_scriptletSource",get_scriptletSource:"get_scriptletSource",set_value:"set_value",get_value:"get_value",set_disabled:"set_disabled",get_disabled:"get_disabled",set_clipContent:"set_clipContent",get_clipContent:"get_clipContent",set_clipHeight:"set_clipHeight",get_clipHeight:"get_clipHeight",set_clipWidth:"set_clipWidth",get_clipWidth:"get_clipWidth",set_text:"set_text",get_text:"get_text"})
});
haxe.ui.toolkit.containers = {};
haxe.ui.toolkit.containers.Container = function() {
	haxe.ui.toolkit.core.Component.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.Container"] = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.Container.__name__ = ["haxe","ui","toolkit","containers","Container"];
haxe.ui.toolkit.containers.Container.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Container.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.Container.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			c.addChild(child.clone());
		}
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Container();
	}
	,__class__: haxe.ui.toolkit.containers.Container
});
haxe.ui.toolkit.containers.Absolute = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(false);
	this.set_layout(new haxe.ui.toolkit.layout.AbsoluteLayout());
};
$hxClasses["haxe.ui.toolkit.containers.Absolute"] = haxe.ui.toolkit.containers.Absolute;
haxe.ui.toolkit.containers.Absolute.__name__ = ["haxe","ui","toolkit","containers","Absolute"];
haxe.ui.toolkit.containers.Absolute.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Absolute.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.Absolute.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Absolute();
	}
	,__class__: haxe.ui.toolkit.containers.Absolute
});
haxe.ui.toolkit.containers.VBox = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
};
$hxClasses["haxe.ui.toolkit.containers.VBox"] = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.VBox.__name__ = ["haxe","ui","toolkit","containers","VBox"];
haxe.ui.toolkit.containers.VBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.VBox.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.VBox.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.VBox();
	}
	,__class__: haxe.ui.toolkit.containers.VBox
});
haxe.ui.toolkit.containers.Accordion = function() {
	this._selectedIndex = -1;
	haxe.ui.toolkit.containers.VBox.call(this);
	this._autoSize = false;
	this._panels = new Array();
	this._buttons = new Array();
};
$hxClasses["haxe.ui.toolkit.containers.Accordion"] = haxe.ui.toolkit.containers.Accordion;
haxe.ui.toolkit.containers.Accordion.__name__ = ["haxe","ui","toolkit","containers","Accordion"];
haxe.ui.toolkit.containers.Accordion.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Accordion.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.Accordion.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
		if(this._selectedIndex != -1) {
			var cachedIndex = this._selectedIndex;
			this._selectedIndex = -1;
			this.showPage(cachedIndex);
		}
	}
	,addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.AccordionButton)) r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child); else {
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) (js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)).set_autoSize(false);
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.StyleableDisplayObject)) (js.Boot.__cast(child , haxe.ui.toolkit.core.StyleableDisplayObject)).set_styleName("page");
			child.set_percentHeight(100);
			child.set_percentWidth(100);
			this._panels.push(child);
			var button = new haxe.ui.toolkit.containers.AccordionButton();
			button.set_styleName("expandable");
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.Component)) button.set_text((js.Boot.__cast(child , haxe.ui.toolkit.core.Component)).get_text());
			button.userData = this._panels.length - 1;
			button.set_id("accordionButton_" + (this._panels.length - 1));
			button.set_percentWidth(100);
			button.set_toggle(true);
			button.set_selected(false);
			button.set_allowSelection(false);
			button.addEventListener("haxeui_" + "click",$bind(this,this._onButtonClick));
			this._buttons.push(button);
			this.addChild(button);
			child.set_visible(false);
			r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.AccordionButton)) HxOverrides.remove(this._buttons,child); else HxOverrides.remove(this._panels,child);
		return haxe.ui.toolkit.containers.VBox.prototype.removeChild.call(this,child,dispose);
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(this._ready == true) this._buttons[value].set_selected(true); else this._selectedIndex = value;
		return value;
	}
	,get_selectedButton: function() {
		if(this._selectedIndex == -1) return null;
		return this.getButton(this._selectedIndex);
	}
	,getButton: function(index) {
		return this._buttons[index];
	}
	,showPage: function(index) {
		var button = this._buttons[index];
		button.set_selected(true);
	}
	,_onButtonClick: function(event) {
		var index = event.get_component().userData;
		this.showPanel(index);
		this.dispatchEvent(new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change"));
	}
	,showPanel: function(index) {
		var button = this._buttons[index];
		button.set_selected(true);
		var panel = this._panels[index];
		var buttonOld = null;
		var panelOld = null;
		var ucy = this.get_layout().get_usableHeight();
		if(this._selectedIndex > -1) {
			buttonOld = this._buttons[this._selectedIndex];
			panelOld = this._panels[this._selectedIndex];
			if(button != buttonOld) this.unselectButton(buttonOld);
		}
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.containers.Accordion);
		if(transition == "slide") {
			panel.set_percentHeight(-1);
			panel.set_height(0);
			panel.set_visible(true);
			motion.Actuate.tween(panel,.2,{ height : ucy, clipHeight : ucy},true).ease(motion.easing.Linear.get_easeNone()).onUpdate($bind(this,this._onTweenUpdate),[ucy,panel,panelOld]).onComplete($bind(this,this._onTweenComplete),[panel,panelOld,buttonOld]);
		} else if(transition == "fade") {
			panel.get_sprite().set_alpha(0);
			panel.set_visible(true);
			if(panelOld != null) {
				this.unselectButton(buttonOld);
				panelOld.set_visible(false);
			}
			motion.Actuate.tween(panel.get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone());
		} else {
			panel.set_visible(true);
			if(panelOld != null) {
				this.unselectButton(buttonOld);
				panelOld.set_visible(false);
			}
		}
		if(panelOld == panel) this._selectedIndex = -1; else this._selectedIndex = index;
	}
	,unselectButton: function(button) {
		button.set_selected(false);
	}
	,_onTweenUpdate: function(ucy,panel,panelOld) {
		if(panelOld != null) {
			panelOld.set_height(ucy - panel.get_height());
			panelOld.set_clipHeight(panelOld.get_height());
		}
	}
	,_onTweenComplete: function(panel,panelOld,buttonOld) {
		panel.clearClip();
		panel.set_percentHeight(100);
		if(panelOld != null) {
			panelOld.set_visible(false);
			this.unselectButton(buttonOld);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		c.removeAllChildren();
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.AccordionButton) == false) c.addChild(child.clone());
		}
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Accordion();
	}
	,__class__: haxe.ui.toolkit.containers.Accordion
	,__properties__: $extend(haxe.ui.toolkit.containers.VBox.prototype.__properties__,{get_selectedButton:"get_selectedButton",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.core.interfaces.IStateComponent = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IStateComponent"] = haxe.ui.toolkit.core.interfaces.IStateComponent;
haxe.ui.toolkit.core.interfaces.IStateComponent.__name__ = ["haxe","ui","toolkit","core","interfaces","IStateComponent"];
haxe.ui.toolkit.core.interfaces.IStateComponent.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IComponent];
haxe.ui.toolkit.core.interfaces.IStateComponent.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IStateComponent
};
haxe.ui.toolkit.core.StateComponent = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this._states = new Array();
};
$hxClasses["haxe.ui.toolkit.core.StateComponent"] = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.core.StateComponent.__name__ = ["haxe","ui","toolkit","core","StateComponent"];
haxe.ui.toolkit.core.StateComponent.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IStateComponent];
haxe.ui.toolkit.core.StateComponent.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.core.StateComponent.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	buildStyles: function() {
		var _g = 0;
		var _g1 = this.get_states();
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var stateStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this,s);
			if(stateStyle != null) this.storeStyle(s,stateStyle);
		}
	}
	,addStates: function(stateNames,rebuildStyles) {
		if(rebuildStyles == null) rebuildStyles = true;
		var _g = 0;
		while(_g < stateNames.length) {
			var stateName = stateNames[_g];
			++_g;
			this.addState(stateName,false);
		}
		if(rebuildStyles == true && this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
		}
	}
	,addState: function(stateName,rebuildStyles) {
		if(rebuildStyles == null) rebuildStyles = true;
		if(this.hasState(stateName) == false) {
			this._states.push(stateName);
			if(rebuildStyles == true && this._ready) {
				if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
			}
		}
	}
	,get_state: function() {
		return this._state;
	}
	,set_state: function(value) {
		if(this._state != value) {
			this._state = value;
			if(this.retrieveStyle(this._state) != null) this.set_baseStyle(this.retrieveStyle(this._state)); else this.invalidate(4096);
		}
		return value;
	}
	,get_states: function() {
		return this._states;
	}
	,hasState: function(state) {
		if(this.get_states() == null) return false;
		return Lambda.indexOf(this.get_states(),state) != -1;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_state(this.get_state());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.StateComponent();
	}
	,__class__: haxe.ui.toolkit.core.StateComponent
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{get_states:"get_states",set_state:"set_state",get_state:"get_state"})
});
haxe.ui.toolkit.core.interfaces.IFocusable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IFocusable"] = haxe.ui.toolkit.core.interfaces.IFocusable;
haxe.ui.toolkit.core.interfaces.IFocusable.__name__ = ["haxe","ui","toolkit","core","interfaces","IFocusable"];
haxe.ui.toolkit.core.interfaces.IFocusable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IFocusable
};
haxe.ui.toolkit.controls = {};
haxe.ui.toolkit.controls.Button = function() {
	this.dispatchChangeEvents = true;
	this._mouseIn = false;
	this._iconPosition = "left";
	this._allowSelection = true;
	this._selected = false;
	this._toggle = false;
	this._down = false;
	this._remainPressed = false;
	this._allowFocus = true;
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this.set_state("normal");
	this._layout = new haxe.ui.toolkit.layout.HorizontalLayout();
	this.set_autoSize(true);
	if(haxe.ui.toolkit.controls.Button._groups == null) haxe.ui.toolkit.controls.Button._groups = new haxe.ds.StringMap();
};
$hxClasses["haxe.ui.toolkit.controls.Button"] = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.Button.__name__ = ["haxe","ui","toolkit","controls","Button"];
haxe.ui.toolkit.controls.Button.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IFocusable];
haxe.ui.toolkit.controls.Button._groups = null;
haxe.ui.toolkit.controls.Button.optionInGroup = function(value,option) {
	var exists = false;
	var arr = haxe.ui.toolkit.controls.Button._groups.get(value);
	if(arr != null) {
		var _g = 0;
		while(_g < arr.length) {
			var test = arr[_g];
			++_g;
			if(test == option) {
				exists = true;
				break;
			}
		}
	}
	return exists;
};
haxe.ui.toolkit.controls.Button.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Button.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	dispose: function() {
		if(this.get_group() != null) {
			var arr = haxe.ui.toolkit.controls.Button._groups.get(this._group);
			HxOverrides.remove(arr,this);
		}
		haxe.ui.toolkit.core.StateComponent.prototype.dispose.call(this);
	}
	,get_remainPressed: function() {
		return this._remainPressed;
	}
	,set_remainPressed: function(value) {
		this._remainPressed = value;
		return value;
	}
	,get_icon: function() {
		if(this._icon == null) return null;
		return this._icon.get_resource();
	}
	,set_icon: function(value) {
		if(value != null) {
			if(this._icon == null) {
				this._icon = new haxe.ui.toolkit.controls.Image();
				this._icon.set_id("icon");
			}
			if(this._icon.get_resource() != value) {
				this._icon.set_resource(value);
				this.organiseChildren();
			}
		} else if(this._icon != null) this._icon.set_visible(false);
		return value;
	}
	,organiseChildren: function() {
		if(this._ready == false) return;
		this.removeAllChildren(false);
		if(this._icon != null) {
			this._icon.set_horizontalAlign("center");
			this._icon.set_verticalAlign("center");
		}
		if(this._label != null) {
			this._label.set_horizontalAlign("center");
			this._label.set_verticalAlign("center");
		}
		if(this.get_autoSize() == false || this.get_percentWidth() > 0) {
			if(this._label != null) {
				this._label.set_percentWidth(100);
				this._label.set_autoSize(false);
			}
		}
		if(this._iconPosition == "left") {
			this.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
			this.addChild(this._icon);
			this.addChild(this._label);
		} else if(this._iconPosition == "right") {
			this.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
			this.addChild(this._label);
			this.addChild(this._icon);
		} else if(this._iconPosition == "top") {
			this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
			this.addChild(this._icon);
			this.addChild(this._label);
		} else if(this._iconPosition == "bottom") {
			this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
			this.addChild(this._label);
			this.addChild(this._icon);
		} else if(this._iconPosition == "center") {
			this.set_layout(new haxe.ui.toolkit.layout.BoxLayout());
			this.addChild(this._label);
			this.addChild(this._icon);
		}
		if(this._iconPosition == "fill" && this._icon != null) {
			this._icon.set_stretch(true);
			this._icon.set_width(this.get_width());
			this._icon.set_height(this.get_height());
		}
		if(this.get_layout().get_usableHeight() <= 0) {
			var cy = 0;
			if(this._label != null) cy = this._label.get_height() + this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom();
			if(this._icon != null) {
				var temp = this._icon.get_height() + this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom();
				if(temp > cy) cy = temp;
			}
			this.set_height(cy);
		}
		this.invalidate(1048576);
	}
	,preInitialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.preInitialize.call(this);
	}
	,initialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this._onMouseOver));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this._onMouseOut));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		this.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onMouseClick));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,function(e) {
			if(_g._mouseIn == false) {
				_g._mouseIn = true;
				var mouseEvent = new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OVER,false,e.cancelable,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta,e.commandKey,e.clickCount);
				_g.dispatchEvent(mouseEvent);
				haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(_g,_g.__onScreenMouseMove));
			}
		});
		this.organiseChildren();
	}
	,__onScreenMouseMove: function(e) {
		if(this._mouseIn == true) {
			if(this.hitTest(e.stageX,e.stageY) == false) {
				haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this.__onScreenMouseMove));
				this._mouseIn = false;
				var mouseEvent = new openfl.events.MouseEvent(openfl.events.MouseEvent.MOUSE_OUT,false,e.cancelable,e.localX,e.localY,e.relatedObject,e.ctrlKey,e.altKey,e.shiftKey,e.buttonDown,e.delta,e.commandKey,e.clickCount);
				this.dispatchEvent(mouseEvent);
			}
		}
	}
	,set_disabled: function(value) {
		haxe.ui.toolkit.core.StateComponent.prototype.set_disabled.call(this,value);
		if(value == true) {
			this.get_sprite().buttonMode = false;
			this.get_sprite().useHandCursor = false;
		} else {
			this.get_sprite().buttonMode = true;
			this.get_sprite().useHandCursor = true;
		}
		return value;
	}
	,get_text: function() {
		if(this._label == null) return null;
		return this._label.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.StateComponent.prototype.set_text.call(this,value);
		if(value != null) {
			if(this._label == null) {
				this._label = new haxe.ui.toolkit.controls.Text();
				this._label.set_id("label");
				this._label.set_multiline(this._multiline);
				this._label.set_wrapLines(this._multiline);
			}
			this._label.set_value(value);
			this.organiseChildren();
		} else if(this._label != null) this._label.set_visible(false);
		return value;
	}
	,_onMouseOver: function(event) {
		if(this._selected == false) {
			if(event.buttonDown == false || this._down == false) this.set_state("over"); else this.set_state("down");
		}
	}
	,_onMouseOut: function(event) {
		if(this._selected == false) {
			if(this._remainPressed == false || event.buttonDown == false) this.set_state("normal"); else {
			}
		}
	}
	,_onMouseDown: function(event) {
		if(this._allowSelection == true) {
			this._down = true;
			this.set_state("down");
			haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		}
	}
	,_onMouseUp: function(event) {
		if(this._allowSelection == true && this.get_toggle() == false) {
			this._down = false;
			if(this.hitTest(event.stageX,event.stageY)) this.set_state("over"); else this.set_state("normal");
			haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		}
	}
	,_onMouseClick: function(event) {
		if(this._icon != null && this._icon.hitTest(event.stageX,event.stageY)) this.dispatchEvent(new haxe.ui.toolkit.events.UIEvent("haxeui_" + "glyphClick"));
		if(this._toggle == true && this._allowSelection == true) {
			this.set_selected(!this.get_selected());
			if(this.get_selected() == false && this.hitTest(event.stageX,event.stageY)) this.set_state("over");
		}
	}
	,get_states: function() {
		return ["normal","over","down","disabled"];
	}
	,set_state: function(value) {
		haxe.ui.toolkit.core.StateComponent.prototype.set_state.call(this,value);
		if(value == "down") this._down = true;
		return value;
	}
	,get_allowFocus: function() {
		return this._allowFocus;
	}
	,set_allowFocus: function(value) {
		return value;
	}
	,get_iconPosition: function() {
		return this._iconPosition;
	}
	,set_iconPosition: function(value) {
		if(this._iconPosition != value) {
			this._iconPosition = value;
			this.organiseChildren();
		}
		return value;
	}
	,get_toggle: function() {
		return this._toggle;
	}
	,set_toggle: function(value) {
		this._toggle = value;
		return value;
	}
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(value) {
		if(this._toggle == true && this._selected != value) {
			if(this._group != null && value == true) {
				var arr = haxe.ui.toolkit.controls.Button._groups.get(this._group);
				if(arr != null) {
					var _g = 0;
					while(_g < arr.length) {
						var button = arr[_g];
						++_g;
						if(button != this) button.set_selected(false);
					}
				}
			}
			this._selected = value;
			if(this.dispatchChangeEvents == true) {
				var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change");
				this.dispatchEvent(event);
			}
		}
		this._selected = value;
		if(this._selected == true) this.set_state("down"); else if(this.get_root() != null && this.hitTest(this.get_root().get_mousePosition().x,this.get_root().get_mousePosition().y) == true) this.set_state("over"); else this.set_state("normal");
		return value;
	}
	,get_group: function() {
		return this._group;
	}
	,set_group: function(value) {
		if(value != null) {
			var arr = haxe.ui.toolkit.controls.Button._groups.get(value);
			if(arr != null) HxOverrides.remove(arr,this);
		}
		this._group = value;
		if(value == null) return value;
		var arr1 = haxe.ui.toolkit.controls.Button._groups.get(value);
		if(arr1 == null) arr1 = new Array();
		if(haxe.ui.toolkit.controls.Button.optionInGroup(value,this) == false) arr1.push(this);
		haxe.ui.toolkit.controls.Button._groups.set(value,arr1);
		return value;
	}
	,get_allowSelection: function() {
		return this._allowSelection;
	}
	,set_allowSelection: function(value) {
		this._allowSelection = value;
		return value;
	}
	,get_multiline: function() {
		return this._multiline;
	}
	,set_multiline: function(value) {
		this._multiline = value;
		if(this._label != null) {
			this._label.set_multiline(this._multiline);
			this._label.set_wrapLines(this._multiline);
		}
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.applyStyle.call(this);
		if(this._label != null) {
			var labelStyle = new haxe.ui.toolkit.style.Style();
			if(this._baseStyle != null) {
				labelStyle.set_fontName(this._baseStyle.get_fontName());
				labelStyle.set_fontSize(this._baseStyle.get_fontSize());
				labelStyle.set_fontEmbedded(this._baseStyle.get_fontEmbedded());
				labelStyle.set_fontBold(this._baseStyle.get_fontBold());
				labelStyle.set_fontItalic(this._baseStyle.get_fontItalic());
				labelStyle.set_fontUnderline(this._baseStyle.get_fontUnderline());
				labelStyle.set_color(this._baseStyle.get_color());
				labelStyle.set_textAlign(this._baseStyle.get_textAlign());
			}
			this._label.set_baseStyle(labelStyle);
		}
		if(this._baseStyle != null) {
			if(this._baseStyle.get_icon() != null) this.set_icon(this._baseStyle.get_icon());
			if(this._baseStyle.get_iconPosition() != null) this.set_iconPosition(this._baseStyle.get_iconPosition());
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		c.set_remainPressed(this.get_remainPressed());
		c.set_icon(this.get_icon());
		c.set_allowFocus(this.get_allowFocus());
		c.set_iconPosition(this.get_iconPosition());
		c.set_toggle(this.get_toggle());
		c.set_selected(this.get_selected());
		c.set_group(this.get_group());
		c.set_allowSelection(this.get_allowSelection());
		c.set_multiline(this.get_multiline());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Button();
	}
	,__class__: haxe.ui.toolkit.controls.Button
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_multiline:"set_multiline",get_multiline:"get_multiline",set_allowSelection:"set_allowSelection",get_allowSelection:"get_allowSelection",set_group:"set_group",get_group:"get_group",set_selected:"set_selected",get_selected:"get_selected",set_toggle:"set_toggle",get_toggle:"get_toggle",set_iconPosition:"set_iconPosition",get_iconPosition:"get_iconPosition",set_allowFocus:"set_allowFocus",get_allowFocus:"get_allowFocus",set_icon:"set_icon",get_icon:"get_icon",set_remainPressed:"set_remainPressed",get_remainPressed:"get_remainPressed"})
});
haxe.ui.toolkit.containers.AccordionButton = function() {
	haxe.ui.toolkit.controls.Button.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.AccordionButton"] = haxe.ui.toolkit.containers.AccordionButton;
haxe.ui.toolkit.containers.AccordionButton.__name__ = ["haxe","ui","toolkit","containers","AccordionButton"];
haxe.ui.toolkit.containers.AccordionButton.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.AccordionButton.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.containers.AccordionButton.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.AccordionButton();
	}
	,__class__: haxe.ui.toolkit.containers.AccordionButton
});
haxe.ui.toolkit.containers.Box = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.BoxLayout());
};
$hxClasses["haxe.ui.toolkit.containers.Box"] = haxe.ui.toolkit.containers.Box;
haxe.ui.toolkit.containers.Box.__name__ = ["haxe","ui","toolkit","containers","Box"];
haxe.ui.toolkit.containers.Box.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Box.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.Box.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Box();
	}
	,__class__: haxe.ui.toolkit.containers.Box
});
haxe.ui.toolkit.containers.CalendarView = function() {
	haxe.ui.toolkit.containers.VBox.call(this);
	this._calendar = new haxe.ui.toolkit.controls.Calendar();
	this._autoSize = false;
	this._calendar.set_percentWidth(100);
	this._calendar.set_percentHeight(100);
};
$hxClasses["haxe.ui.toolkit.containers.CalendarView"] = haxe.ui.toolkit.containers.CalendarView;
haxe.ui.toolkit.containers.CalendarView.__name__ = ["haxe","ui","toolkit","containers","CalendarView"];
haxe.ui.toolkit.containers.CalendarView.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.CalendarView.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
		var hbox = new haxe.ui.toolkit.containers.HBox();
		hbox.set_percentWidth(100);
		this._prevMonthButton = new haxe.ui.toolkit.controls.Button();
		this._prevMonthButton.set_text("<");
		this._prevMonthButton.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onPrevClicked));
		hbox.addChild(this._prevMonthButton);
		var spacer = new haxe.ui.toolkit.controls.Spacer();
		spacer.set_percentWidth(50);
		this._currentMonthYear = new haxe.ui.toolkit.controls.Text();
		this._currentMonthYear.set_text("December 2013");
		this._currentMonthYear.set_id("currentMonthYear");
		this._currentMonthYear.set_percentWidth(100);
		this._currentMonthYear.set_autoSize(false);
		hbox.addChild(this._currentMonthYear);
		var spacer1 = new haxe.ui.toolkit.controls.Spacer();
		spacer1.set_percentWidth(50);
		this._nextMonthButton = new haxe.ui.toolkit.controls.Button();
		this._nextMonthButton.set_text(">");
		this._nextMonthButton.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onNextClicked));
		hbox.addChild(this._nextMonthButton);
		this.addChild(hbox);
		this._calendar.addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDateChanged));
		this.addChild(this._calendar);
		this.displayMonthYear();
	}
	,get_date: function() {
		return this._calendar.get_date();
	}
	,set_date: function(value) {
		this._calendar.set_date(value);
		return value;
	}
	,get_selectedDate: function() {
		return this._calendar.get_selectedDate();
	}
	,set_selectedDate: function(value) {
		this._calendar.set_selectedDate(value);
		return value;
	}
	,_onPrevClicked: function(event) {
		this._calendar.previousMonth();
		this.displayMonthYear();
	}
	,_onNextClicked: function(event) {
		this._calendar.nextMonth();
		this.displayMonthYear();
	}
	,_onDateChanged: function(event) {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
	,displayMonthYear: function() {
		var monthName = haxe.ui.toolkit.containers.CalendarView.MONTH_NAMES[this._calendar.get_date().getMonth()];
		this._currentMonthYear.set_text(monthName + " " + this._calendar.get_date().getFullYear());
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.CalendarView();
	}
	,__class__: haxe.ui.toolkit.containers.CalendarView
	,__properties__: $extend(haxe.ui.toolkit.containers.VBox.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate",set_date:"set_date",get_date:"get_date"})
});
haxe.ui.toolkit.containers.ContinuousHBox = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this._layout = new haxe.ui.toolkit.layout.HorizontalContinuousLayout();
};
$hxClasses["haxe.ui.toolkit.containers.ContinuousHBox"] = haxe.ui.toolkit.containers.ContinuousHBox;
haxe.ui.toolkit.containers.ContinuousHBox.__name__ = ["haxe","ui","toolkit","containers","ContinuousHBox"];
haxe.ui.toolkit.containers.ContinuousHBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.ContinuousHBox.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.ContinuousHBox.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ContinuousHBox();
	}
	,__class__: haxe.ui.toolkit.containers.ContinuousHBox
});
haxe.ui.toolkit.containers.ContinuousVBox = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this._layout = new haxe.ui.toolkit.layout.VerticalContinuousLayout();
};
$hxClasses["haxe.ui.toolkit.containers.ContinuousVBox"] = haxe.ui.toolkit.containers.ContinuousVBox;
haxe.ui.toolkit.containers.ContinuousVBox.__name__ = ["haxe","ui","toolkit","containers","ContinuousVBox"];
haxe.ui.toolkit.containers.ContinuousVBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.ContinuousVBox.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.ContinuousVBox.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ContinuousVBox();
	}
	,__class__: haxe.ui.toolkit.containers.ContinuousVBox
});
haxe.ui.toolkit.containers.ExpandablePanel = function() {
	this.startExpanded = true;
	haxe.ui.toolkit.containers.VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ExpandablePanel"] = haxe.ui.toolkit.containers.ExpandablePanel;
haxe.ui.toolkit.containers.ExpandablePanel.__name__ = ["haxe","ui","toolkit","containers","ExpandablePanel"];
haxe.ui.toolkit.containers.ExpandablePanel.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.ExpandablePanel.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
	}
	,addChild: function(child) {
		if(this._button == null) {
			this._button = new haxe.ui.toolkit.containers.ExpandableButton();
			this._button.set_percentWidth(100);
			this._button.set_text(this.get_text());
			this._button.set_toggle(true);
			this._button.set_selected(this.startExpanded?true:false);
			this._button.addEventListener("haxeui_" + "change",$bind(this,this.onClickButton));
			this._button.set_styleName("expandable");
			haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,this._button);
		}
		if(this._panel == null) {
			this._panel = new haxe.ui.toolkit.containers.VBox();
			this._panel.set_id("content");
			this._panel.set_percentWidth(100);
			haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,this._panel);
			this._panel.addEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.panelAdded));
		}
		return this._panel.addChild(child);
	}
	,onClickButton: function(e) {
		if(this._button.get_selected()) this.showPanel(); else this.hidePanel();
	}
	,panelAdded: function(e) {
		this.removeEventListener(openfl.events.Event.ADDED_TO_STAGE,$bind(this,this.panelAdded));
		if(!this.startExpanded) this._panel.set_visible(false);
	}
	,showPanel: function() {
		var _g = this;
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.containers.ExpandablePanel);
		if(transition == "slide") {
			var startH = this._panel.get_height();
			this._panel.invalidate(256);
			var finalH = this._panel.get_height();
			this._panel.set_visible(true);
			this._panel._height = startH;
			this._panel.set_clipHeight(startH);
			motion.Actuate.tween(this._panel,.2,{ _height : finalH, clipHeight : finalH},true).ease(motion.easing.Linear.get_easeNone()).onUpdate(function() {
				_g.invalidate(256);
			});
		} else this._panel.set_visible(true);
	}
	,hidePanel: function() {
		var _g = this;
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.containers.ExpandablePanel);
		if(transition == "slide") motion.Actuate.tween(this._panel,.2,{ _height : 0, clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onUpdate(function() {
			_g.invalidate(256);
		}).onComplete(function() {
			_g._panel.set_visible(false);
		}); else this._panel.set_visible(false);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ExpandablePanel();
	}
	,__class__: haxe.ui.toolkit.containers.ExpandablePanel
});
haxe.ui.toolkit.containers.ExpandableButton = function() {
	haxe.ui.toolkit.controls.Button.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ExpandableButton"] = haxe.ui.toolkit.containers.ExpandableButton;
haxe.ui.toolkit.containers.ExpandableButton.__name__ = ["haxe","ui","toolkit","containers","ExpandableButton"];
haxe.ui.toolkit.containers.ExpandableButton.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.containers.ExpandableButton.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ExpandableButton();
	}
	,__class__: haxe.ui.toolkit.containers.ExpandableButton
});
haxe.ui.toolkit.containers.Grid = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.GridLayout());
};
$hxClasses["haxe.ui.toolkit.containers.Grid"] = haxe.ui.toolkit.containers.Grid;
haxe.ui.toolkit.containers.Grid.__name__ = ["haxe","ui","toolkit","containers","Grid"];
haxe.ui.toolkit.containers.Grid.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.Grid.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.Grid.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	get_columns: function() {
		return (js.Boot.__cast(this._layout , haxe.ui.toolkit.layout.GridLayout)).get_columns();
	}
	,set_columns: function(value) {
		(js.Boot.__cast(this._layout , haxe.ui.toolkit.layout.GridLayout)).set_columns(value);
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		c.set_columns(this.get_columns());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Grid();
	}
	,__class__: haxe.ui.toolkit.containers.Grid
	,__properties__: $extend(haxe.ui.toolkit.containers.Container.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
haxe.ui.toolkit.containers.HBox = function() {
	haxe.ui.toolkit.containers.Container.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
};
$hxClasses["haxe.ui.toolkit.containers.HBox"] = haxe.ui.toolkit.containers.HBox;
haxe.ui.toolkit.containers.HBox.__name__ = ["haxe","ui","toolkit","containers","HBox"];
haxe.ui.toolkit.containers.HBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.HBox.__super__ = haxe.ui.toolkit.containers.Container;
haxe.ui.toolkit.containers.HBox.prototype = $extend(haxe.ui.toolkit.containers.Container.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.Container.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.HBox();
	}
	,__class__: haxe.ui.toolkit.containers.HBox
});
haxe.ui.toolkit.containers.HSplitter = function() {
	haxe.ui.toolkit.containers.HBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.HSplitter"] = haxe.ui.toolkit.containers.HSplitter;
haxe.ui.toolkit.containers.HSplitter.__name__ = ["haxe","ui","toolkit","containers","HSplitter"];
haxe.ui.toolkit.containers.HSplitter.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.HSplitter.__super__ = haxe.ui.toolkit.containers.HBox;
haxe.ui.toolkit.containers.HSplitter.prototype = $extend(haxe.ui.toolkit.containers.HBox.prototype,{
	addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.HSplitterGripper)) r = haxe.ui.toolkit.containers.HBox.prototype.addChild.call(this,child); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe.ui.toolkit.containers.HSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChild(gripper);
			}
			r = haxe.ui.toolkit.containers.HBox.prototype.addChild.call(this,child);
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.HSplitterGripper)) r = haxe.ui.toolkit.containers.HBox.prototype.addChildAt.call(this,child,index); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe.ui.toolkit.containers.HSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChildAt(gripper,index);
			}
			r = haxe.ui.toolkit.containers.HBox.prototype.addChildAt.call(this,child,index + 1);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.HSplitterGripper)) r = haxe.ui.toolkit.containers.HBox.prototype.removeChild.call(this,child,dispose); else {
			if(this.get_numChildren() > 1) this.removeChild(this.getChildAt(this.indexOfChild(child) - 1),dispose);
			r = haxe.ui.toolkit.containers.HBox.prototype.removeChild.call(this,child,dispose);
		}
		return r;
	}
	,_onMouseDown: function(event) {
		this._percents = new haxe.ds.ObjectMap();
		this._gripper = event.get_component();
		this._mouseDownOffset = event.stageX - this._gripper.get_x();
		this._invalidating = true;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.containers.HSplitterGripper) == false) {
				if(c.get_percentWidth() != -1) {
					var value = c.get_percentWidth();
					this._percents.set(c,value);
					c.set_percentWidth(-1);
				}
			}
		}
		this._invalidating = false;
		this.invalidate(1);
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseMove: function(event) {
		if(this._gripper != null) {
			var delta = event.stageX - this._gripper.get_x() - this._mouseDownOffset;
			var index = this.indexOfChild(this._gripper);
			var before = this.getChildAt(index - 1);
			var after = this.getChildAt(index + 1);
			var newBefore = before.get_width() + delta;
			var newAfter = after.get_width() - delta;
			if(newBefore > before.get_minWidth() && newAfter > after.get_minWidth() && newBefore - (before.get_layout().get_padding().get_left() + before.get_layout().get_padding().get_right()) > 0 && newAfter - (after.get_layout().get_padding().get_left() + after.get_layout().get_padding().get_right()) > 0) {
				before.set_width(newBefore);
				after.set_width(newAfter);
			}
		}
	}
	,_onMouseUp: function(event) {
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		this._gripper = null;
		var ucx = this.get_width();
		ucx -= (this.get_numChildren() - 1) / 2 * (2 * this.get_layout().get_spacingX());
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(this._percents.h.__keys__[c.__id__] != null == false) ucx -= c.get_width();
		}
		this._invalidating = true;
		var $it0 = this._percents.keys();
		while( $it0.hasNext() ) {
			var c1 = $it0.next();
			var newPercent = c1.get_width() / ucx * 100;
			c1.set_percentWidth(newPercent);
		}
		this._invalidating = false;
		this.invalidate(1);
		this._percents = null;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.HBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.HSplitter();
	}
	,__class__: haxe.ui.toolkit.containers.HSplitter
});
haxe.ui.toolkit.containers.HSplitterGripper = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_remainPressed(true);
	this.set_useHandCursor(true);
};
$hxClasses["haxe.ui.toolkit.containers.HSplitterGripper"] = haxe.ui.toolkit.containers.HSplitterGripper;
haxe.ui.toolkit.containers.HSplitterGripper.__name__ = ["haxe","ui","toolkit","containers","HSplitterGripper"];
haxe.ui.toolkit.containers.HSplitterGripper.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.containers.HSplitterGripper.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.HSplitterGripper();
	}
	,__class__: haxe.ui.toolkit.containers.HSplitterGripper
});
haxe.ui.toolkit.containers.ScrollView = function() {
	this._virtualScrolling = false;
	this._autoHideScrolls = false;
	this._scrollSensitivity = 1;
	this._inertialScrolling = false;
	this._inertiaSensitivity = 5;
	this._inertiaSpeed = new openfl.geom.Point(0,0);
	this._showVScroll = true;
	this._showHScroll = true;
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this._layout = new haxe.ui.toolkit.containers.ScrollViewLayout();
	this._eventTarget = new openfl.display.Sprite();
	this._eventTarget.set_visible(false);
	this._container = new haxe.ui.toolkit.containers.Box();
	this._container.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
	this._container.set_id("container");
	this._container.set_percentWidth(this._container.set_percentHeight(100));
	this.addChild(this._container);
};
$hxClasses["haxe.ui.toolkit.containers.ScrollView"] = haxe.ui.toolkit.containers.ScrollView;
haxe.ui.toolkit.containers.ScrollView.__name__ = ["haxe","ui","toolkit","containers","ScrollView"];
haxe.ui.toolkit.containers.ScrollView.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.containers.ScrollView.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.preInitialize.call(this);
		if(this._baseStyle != null) {
			this._autoHideScrolls = this._baseStyle.get_autoHideScrolls();
			if(Reflect.getProperty(this._layout,"inlineScrolls") != null) Reflect.setProperty(this._layout,"inlineScrolls",this._baseStyle.get_inlineScrolls());
		}
	}
	,initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onMouseWheel));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.get_sprite().addChild(this._eventTarget);
	}
	,postInitialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.StateComponent.prototype.postInitialize.call(this);
		var content = this._container.getChildAt(0);
		if(content != null) (js.Boot.__cast(content , haxe.ui.toolkit.core.interfaces.IEventDispatcher)).addEventListener("haxeui_" + "resize",function(e) {
			_g.invalidate(256);
		});
	}
	,addChild: function(child) {
		var r = null;
		if(child == this._container || child == this._hscroll || child == this._vscroll) r = haxe.ui.toolkit.core.StateComponent.prototype.addChild.call(this,child); else {
			if(this._container.get_numChildren() >= 1) haxe.Log.trace("WARNING: ScrollView will only use the first child as the scroll content",{ fileName : "ScrollView.hx", lineNumber : 102, className : "haxe.ui.toolkit.containers.ScrollView", methodName : "addChild"});
			r = this._container.addChild(child);
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(child == this._container || child == this._hscroll || child == this._vscroll) r = haxe.ui.toolkit.core.StateComponent.prototype.addChildAt.call(this,child,index); else {
			if(this._container.get_numChildren() >= 1) haxe.Log.trace("WARNING: ScrollView will only use the first child as the scroll content",{ fileName : "ScrollView.hx", lineNumber : 115, className : "haxe.ui.toolkit.containers.ScrollView", methodName : "addChildAt"});
			r = this._container.addChildAt(child,index);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(child == this._container || child == this._hscroll || child == this._vscroll) r = haxe.ui.toolkit.core.StateComponent.prototype.removeChild.call(this,child,dispose); else r = this._container.removeChild(child,dispose);
		return r;
	}
	,dispose: function() {
		this.get_sprite().removeChild(this._eventTarget);
		haxe.ui.toolkit.core.StateComponent.prototype.dispose.call(this);
	}
	,get_inertialScrolling: function() {
		return this._inertialScrolling;
	}
	,set_inertialScrolling: function(value) {
		this._inertialScrolling = value;
		return value;
	}
	,get_virtualScrolling: function() {
		return this._virtualScrolling;
	}
	,set_virtualScrolling: function(value) {
		this._virtualScrolling = value;
		return value;
	}
	,get_showHScroll: function() {
		return this._showHScroll;
	}
	,set_showHScroll: function(value) {
		this._showHScroll = value;
		return value;
	}
	,get_showVScroll: function() {
		return this._showVScroll;
	}
	,set_showVScroll: function(value) {
		this._showVScroll = value;
		return value;
	}
	,get_hscrollPos: function() {
		if(this._hscroll != null) return this._hscroll.get_pos();
		return 0;
	}
	,set_hscrollPos: function(value) {
		if(this._hscroll != null) this._hscroll.set_pos(value);
		return value;
	}
	,get_hscrollMin: function() {
		if(this._hscroll != null) return this._hscroll.get_min();
		return 0;
	}
	,set_hscrollMin: function(value) {
		if(this._virtualScrolling == true) {
		}
		return value;
	}
	,get_hscrollMax: function() {
		if(this._hscroll != null) return this._hscroll.get_max();
		return 0;
	}
	,set_hscrollMax: function(value) {
		if(this._virtualScrolling == true) {
			this.createHScroll(true);
			this._hscroll.set_max(value);
		}
		return value;
	}
	,get_hscrollPageSize: function() {
		if(this._hscroll != null) return this._hscroll.get_pageSize();
		return 0;
	}
	,set_hscrollPageSize: function(value) {
		if(this._virtualScrolling == true) {
		}
		return value;
	}
	,get_vscrollPos: function() {
		if(this._vscroll != null) return this._vscroll.get_pos();
		return 0;
	}
	,set_vscrollPos: function(value) {
		if(this._vscroll != null) this._vscroll.set_pos(value);
		return value;
	}
	,get_vscrollMin: function() {
		if(this._vscroll != null) return this._vscroll.get_min();
		return 0;
	}
	,set_vscrollMin: function(value) {
		if(this._virtualScrolling == true) {
		}
		return value;
	}
	,get_vscrollMax: function() {
		if(this._vscroll != null) return this._vscroll.get_max();
		return 0;
	}
	,set_vscrollMax: function(value) {
		if(this._virtualScrolling == true) {
			this.createVScroll(true);
			this._vscroll.set_max(value);
		}
		return value;
	}
	,get_vscrollPageSize: function() {
		if(this._vscroll != null) return this._vscroll.get_pageSize();
		return 0;
	}
	,set_vscrollPageSize: function(value) {
		if(this._virtualScrolling == true) {
			this.createVScroll(true);
			this._vscroll.set_pageSize(value);
		}
		return value;
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.StateComponent.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256) {
			this.checkScrolls();
			this.updateScrollRect();
			this.resizeEventTarget();
		}
		this._invalidating = false;
	}
	,_onInertiaEnterFrame: function(event) {
		this._eventTarget.set_visible(true);
		var content = this._container.getChildAt(0);
		if(content != null) {
			this._inertiaSpeed.x *= 0.8;
			this._inertiaSpeed.y *= 0.8;
			if(content.get_width() > this.get_layout().get_usableWidth() || this._virtualScrolling == true) {
				if(this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(true);
				if(this._hscroll != null) {
					var _g = this._hscroll;
					_g.set_pos(_g.get_pos() - this._inertiaSpeed.x);
				}
			}
			if(content.get_height() > this.get_layout().get_usableHeight() || this._virtualScrolling == true) {
				if(this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(true);
				if(this._vscroll != null) {
					var _g1 = this._vscroll;
					_g1.set_pos(_g1.get_pos() - this._inertiaSpeed.y);
				}
			}
			if(Math.abs(this._inertiaSpeed.x) < 0.1 && Math.abs(this._inertiaSpeed.y) < 0.1) haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this._onInertiaEnterFrame));
		}
	}
	,_onHScrollChange: function(event) {
		this.updateScrollRect();
		var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "scroll");
		this.dispatchEvent(event1);
	}
	,_onVScrollChange: function(event) {
		this.updateScrollRect();
		var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "scroll");
		this.dispatchEvent(event1);
	}
	,_onMouseWheel: function(event) {
		var content = this._container.getChildAt(0);
		if(event.shiftKey || content.get_height() < this.get_layout().get_usableHeight()) {
			if(this._hscroll != null && content.get_width() > this.get_layout().get_usableWidth()) {
				if(event.delta != 0) {
					if(event.delta < 0) this._hscroll.incrementValue(); else if(event.delta > 0) this._hscroll.deincrementValue();
				}
			}
		} else if(this._vscroll != null && content.get_height() > this.get_layout().get_usableHeight()) {
			if(event.delta != 0) {
				if(event.delta < 0) this._vscroll.incrementValue(); else if(event.delta > 0) this._vscroll.deincrementValue();
			}
		}
	}
	,_onMouseDown: function(event) {
		var inScroll = false;
		if(this._vscroll != null && this._vscroll.get_visible() == true) inScroll = this._vscroll.hitTest(event.stageX,event.stageY);
		if(this._hscroll != null && this._hscroll.get_visible() == true && inScroll == false) inScroll = this._hscroll.hitTest(event.stageX,event.stageY);
		if(this._inertialScrolling == true) {
			haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this._onInertiaEnterFrame));
			this._inertiaTime = openfl.Lib.getTimer();
		}
		var content = this._container.getChildAt(0);
		if(content != null && inScroll == false && this._virtualScrolling == false) {
			if(content.get_width() > this.get_layout().get_usableWidth() || content.get_height() > this.get_layout().get_usableHeight()) {
				this._downPos = new openfl.geom.Point(event.stageX,event.stageY);
				haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
				haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
			}
		}
		if(this._virtualScrolling == true && (this._vscroll != null || this._hscroll != null)) {
			this._downPos = new openfl.geom.Point(event.stageX,event.stageY);
			haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
			haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		}
	}
	,_onScreenMouseMove: function(event) {
		if(this._downPos != null) {
			var ypos = event.stageY - this._downPos.y;
			var xpos = event.stageX - this._downPos.x;
			var target = event.target;
			while(target != null && js.Boot.__instanceof(target,openfl.display.DisplayObject)) {
				xpos /= target.get_scaleX();
				ypos /= target.get_scaleY();
				target = target.parent;
			}
			if(this._inertialScrolling == true) {
				var time = (openfl.Lib.getTimer() - this._inertiaTime) / 100;
				this._inertiaSpeed = new openfl.geom.Point(xpos / time,ypos / time);
				this._inertiaTime = openfl.Lib.getTimer();
			}
			if(Math.abs(xpos) >= this._scrollSensitivity || Math.abs(ypos) >= this._scrollSensitivity) {
				this._eventTarget.set_visible(true);
				var content = this._container.getChildAt(0);
				if(content != null) {
					if(xpos != 0 && (content.get_width() > this.get_layout().get_usableWidth() || this._virtualScrolling == true)) {
						if(this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(true);
						if(this._hscroll != null) {
							var _g = this._hscroll;
							_g.set_pos(_g.get_pos() - xpos);
						}
					}
					if(ypos != 0 && (content.get_height() > this.get_layout().get_usableHeight() || this._virtualScrolling == true)) {
						if(this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(true);
						if(this._vscroll != null) {
							var _g1 = this._vscroll;
							_g1.set_pos(_g1.get_pos() - ypos);
						}
					}
					this._downPos = new openfl.geom.Point(event.stageX,event.stageY);
				}
			}
		}
	}
	,_onScreenMouseUp: function(event) {
		if(this._inertialScrolling == true && openfl.Lib.getTimer() - this._inertiaTime < 100) {
			if(Math.abs(this._inertiaSpeed.x) > this._inertiaSensitivity || Math.abs(this._inertiaSpeed.y) > this._inertiaSensitivity) haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.Event.ENTER_FRAME,$bind(this,this._onInertiaEnterFrame));
		}
		this._eventTarget.set_visible(false);
		this._downPos = null;
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		if(this._hscroll != null && this._showHScroll == true && this._autoHideScrolls == true) this._hscroll.set_visible(false);
		if(this._vscroll != null && this._showVScroll == true && this._autoHideScrolls == true) this._vscroll.set_visible(false);
	}
	,checkScrolls: function() {
		if(this._virtualScrolling == true) return;
		var content = this._container.getChildAt(0);
		if(content != null) {
			var invalidateLayout = false;
			var hpos = 0;
			if(this._hscroll != null) hpos = this._hscroll.get_pos();
			if(content.get_width() - hpos > this.get_layout().get_usableWidth()) {
				if(this.createHScroll() == true) {
					this._hscroll.set_visible(false);
					invalidateLayout = true;
				}
				this._hscroll.set_max(content.get_width() - this.get_layout().get_usableWidth());
				this._hscroll.set_pageSize(this.get_layout().get_usableWidth() / content.get_width() * this._hscroll.get_max());
				if(this._hscroll.get_visible() == false && this._showHScroll == true && this._autoHideScrolls == false) {
					this._hscroll.set_visible(true);
					invalidateLayout = true;
				}
			} else if(this._hscroll != null) {
				if(this._hscroll.get_pos() != 0) this._hscroll.set_pos(content.get_width() - this.get_layout().get_usableWidth());
				if(this._hscroll.get_pos() == 0) {
					if(this._hscroll.get_visible() == true) {
						this._hscroll.set_visible(false);
						invalidateLayout = true;
					}
				} else {
					this._hscroll.set_max(content.get_width() - this.get_layout().get_usableWidth());
					this._hscroll.set_pageSize(this.get_layout().get_usableWidth() / content.get_width() * this._hscroll.get_max());
				}
			}
			var vpos = 0;
			if(this._vscroll != null) vpos = this._vscroll.get_pos();
			if(content.get_height() - vpos > this.get_layout().get_usableHeight()) {
				if(this.createVScroll() == true) {
					this._vscroll.set_visible(false);
					invalidateLayout = true;
				}
				this._vscroll.set_max(content.get_height() - this.get_layout().get_usableHeight());
				this._vscroll.set_pageSize(this.get_layout().get_usableHeight() / content.get_height() * this._vscroll.get_max());
				if(this._vscroll.get_visible() == false && this._showVScroll == true && this._autoHideScrolls == false) {
					this._vscroll.set_visible(true);
					invalidateLayout = true;
				}
			} else if(this._vscroll != null) {
				if(this._vscroll.get_pos() != 0) this._vscroll.set_pos(content.get_height() - this.get_layout().get_usableHeight());
				if(this._vscroll.get_pos() == 0) {
					if(this._vscroll.get_visible() == true) {
						this._vscroll.set_visible(false);
						invalidateLayout = true;
					}
				} else {
					this._vscroll.set_max(content.get_height() - this.get_layout().get_usableHeight());
					this._vscroll.set_pageSize(this.get_layout().get_usableHeight() / content.get_height() * this._vscroll.get_max());
				}
			}
			if(invalidateLayout) {
				this._invalidating = false;
				this.invalidate(1);
			}
		}
	}
	,createHScroll: function(invalidateLayout) {
		if(invalidateLayout == null) invalidateLayout = false;
		var created = false;
		if(this._hscroll == null) {
			this._hscroll = new haxe.ui.toolkit.controls.HScroll();
			this._hscroll.set_id("hscroll");
			this._hscroll.set_percentWidth(100);
			this._hscroll.addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onHScrollChange));
			if(this._showHScroll == false) this._hscroll.set_visible(false); else if(this._autoHideScrolls == true) this._hscroll.set_visible(false); else this._hscroll.set_visible(true);
			invalidateLayout = true;
			this.addChild(this._hscroll);
			created = true;
		}
		if(invalidateLayout) {
			if(this.get_percentWidth() == -1) this._invalidating = false;
			this.invalidate(1);
		}
		return created;
	}
	,createVScroll: function(invalidateLayout) {
		if(invalidateLayout == null) invalidateLayout = false;
		var created = false;
		if(this._vscroll == null) {
			this._vscroll = new haxe.ui.toolkit.controls.VScroll();
			this._vscroll.set_id("vscroll");
			this._vscroll.set_percentHeight(100);
			this._vscroll.addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onVScrollChange));
			if(this._showVScroll == false) this._vscroll.set_visible(false); else if(this._autoHideScrolls == true) this._vscroll.set_visible(false); else this._vscroll.set_visible(true);
			invalidateLayout = true;
			this.addChild(this._vscroll);
			created = true;
		}
		if(invalidateLayout) {
			if(this.get_percentHeight() == -1) this._invalidating = false;
			this.invalidate(1);
		}
		return created;
	}
	,updateScrollRect: function() {
		if(!this._ready) return;
		if(this.get_numChildren() > 0 && this._virtualScrolling == false) {
			var content = this._container.getChildAt(0);
			if(content != null) {
				var xpos = 0;
				if(this._hscroll != null) xpos = this._hscroll.get_pos();
				var ypos = 0;
				if(this._vscroll != null) ypos = this._vscroll.get_pos();
				content.set_x(-xpos);
				content.set_y(-ypos);
				this._container.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,this.get_layout().get_usableWidth(),this.get_layout().get_usableHeight()));
			}
		} else this._container.get_sprite().set_scrollRect(new openfl.geom.Rectangle(0,0,this.get_layout().get_usableWidth(),this.get_layout().get_usableHeight()));
	}
	,resizeEventTarget: function() {
		var targetX = this.get_layout().get_padding().get_left();
		var targetY = this.get_layout().get_padding().get_top();
		var targetCX = this.get_width() - (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right());
		var targetCY = this.get_height() - (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom());
		if(this._vscroll != null && this._vscroll.get_visible() == true) targetCX -= this._vscroll.get_width();
		if(this._hscroll != null && this._hscroll.get_visible() == true) targetCY -= this._hscroll.get_height();
		this._eventTarget.set_alpha(0);
		this._eventTarget.get_graphics().clear();
		this._eventTarget.get_graphics().beginFill(16711935);
		this._eventTarget.get_graphics().lineStyle(0);
		this._eventTarget.get_graphics().drawRect(targetX,targetY,targetCX,targetCY);
		this._eventTarget.get_graphics().endFill();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ScrollView();
	}
	,__class__: haxe.ui.toolkit.containers.ScrollView
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_vscrollPageSize:"set_vscrollPageSize",get_vscrollPageSize:"get_vscrollPageSize",set_vscrollMax:"set_vscrollMax",get_vscrollMax:"get_vscrollMax",set_vscrollMin:"set_vscrollMin",get_vscrollMin:"get_vscrollMin",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_hscrollPageSize:"set_hscrollPageSize",get_hscrollPageSize:"get_hscrollPageSize",set_hscrollMax:"set_hscrollMax",get_hscrollMax:"get_hscrollMax",set_hscrollMin:"set_hscrollMin",get_hscrollMin:"get_hscrollMin",set_hscrollPos:"set_hscrollPos",get_hscrollPos:"get_hscrollPos",set_showVScroll:"set_showVScroll",get_showVScroll:"get_showVScroll",set_showHScroll:"set_showHScroll",get_showHScroll:"get_showHScroll",set_virtualScrolling:"set_virtualScrolling",get_virtualScrolling:"get_virtualScrolling",set_inertialScrolling:"set_inertialScrolling",get_inertialScrolling:"get_inertialScrolling"})
});
haxe.ui.toolkit.core.interfaces.IDataComponent = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDataComponent"] = haxe.ui.toolkit.core.interfaces.IDataComponent;
haxe.ui.toolkit.core.interfaces.IDataComponent.__name__ = ["haxe","ui","toolkit","core","interfaces","IDataComponent"];
haxe.ui.toolkit.core.interfaces.IDataComponent.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDataComponent
};
haxe.ui.toolkit.containers.ListView = function() {
	this._allowSelection = true;
	this._lastSelection = -1;
	haxe.ui.toolkit.containers.ScrollView.call(this);
	this.set_autoSize(false);
	this.set_dataSource(new haxe.ui.toolkit.data.ArrayDataSource());
	this._selectedItems = new Array();
	this._content = new haxe.ui.toolkit.containers.VBox();
	this._content.set_id("content");
	this._content.set_percentWidth(100);
	this.addChild(this._content);
	this._itemRenderer = haxe.ui.toolkit.core.renderers.BasicItemRenderer;
};
$hxClasses["haxe.ui.toolkit.containers.ListView"] = haxe.ui.toolkit.containers.ListView;
haxe.ui.toolkit.containers.ListView.__name__ = ["haxe","ui","toolkit","containers","ListView"];
haxe.ui.toolkit.containers.ListView.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDataComponent];
haxe.ui.toolkit.containers.ListView.__super__ = haxe.ui.toolkit.containers.ScrollView;
haxe.ui.toolkit.containers.ListView.prototype = $extend(haxe.ui.toolkit.containers.ScrollView.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.ScrollView.prototype.initialize.call(this);
		if(this._dataSource == null) this.set_dataSource(new haxe.ui.toolkit.data.ArrayDataSource());
		this._dataSource.open();
		this.syncUI();
		this.checkScrolls();
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.containers.ScrollView.prototype.invalidate.call(this,type,recursive);
		if((type & 65536) == 65536) this.syncUI();
	}
	,dispose: function() {
		if(this._dataSource != null) this._dataSource.close();
		haxe.ui.toolkit.containers.ScrollView.prototype.dispose.call(this);
	}
	,addChild: function(child) {
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IItemRenderer)) {
			this._itemRenderer = child;
			return child;
		}
		return haxe.ui.toolkit.containers.ScrollView.prototype.addChild.call(this,child);
	}
	,addChildAt: function(child,index) {
		return haxe.ui.toolkit.containers.ScrollView.prototype.addChildAt.call(this,child,index);
	}
	,get_listSize: function() {
		return this._content.get_children().length;
	}
	,get_itemHeight: function() {
		if(this._content.get_children().length == 0) return 0;
		var n = 0;
		var cy = this._content.get_layout().get_padding().get_top() + this._content.get_layout().get_padding().get_bottom();
		var scy = this._content.get_layout().get_spacingY();
		var _g = 0;
		var _g1 = this._content.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			cy += child.get_height() + scy;
			n++;
			if(n > 100) break;
		}
		if(n > 0) cy -= scy;
		return cy / n;
	}
	,getItem: function(index) {
		return js.Boot.__cast(this._content.get_children()[index] , haxe.ui.toolkit.core.interfaces.IItemRenderer);
	}
	,get_selectedItems: function() {
		return this._selectedItems;
	}
	,get_selectedIndex: function() {
		var index = -1;
		if(this._selectedItems != null && this._selectedItems.length > 0) index = Lambda.indexOf(this._content.get_children(),this._selectedItems[0]);
		return index;
	}
	,set_selectedIndex: function(value) {
		if(this._ready == false) return value;
		if(value < 0) {
			var _g = 0;
			var _g1 = this._selectedItems;
			while(_g < _g1.length) {
				var selectedItem = _g1[_g];
				++_g;
				selectedItem.set_state("normal");
			}
			this._selectedItems = new Array();
		} else if(this._content.getChildAt(value) != null) {
			var item;
			item = js.Boot.__cast(this._content.getChildAt(value) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
			if(item != null) this.handleListSelection(item,null);
		}
		return value;
	}
	,get_content: function() {
		var c = null;
		if(this.get_numChildren() > 0) c = js.Boot.__cast(this.getChildAt(0) , haxe.ui.toolkit.core.Component);
		return c;
	}
	,get_itemRenderer: function() {
		return this._itemRenderer;
	}
	,set_itemRenderer: function(value) {
		this._itemRenderer = value;
		return value;
	}
	,get_allowSelection: function() {
		return this._allowSelection;
	}
	,set_allowSelection: function(value) {
		this._allowSelection = value;
		return value;
	}
	,get_dataSource: function() {
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		if(this._dataSource != null) {
			if(js.Boot.__instanceof(this._dataSource,haxe.ui.toolkit.core.interfaces.IEventDispatcher)) (js.Boot.__cast(this._dataSource , haxe.ui.toolkit.core.interfaces.IEventDispatcher)).removeEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDataSourceChanged));
		}
		this._dataSource = value;
		if(js.Boot.__instanceof(this._dataSource,haxe.ui.toolkit.core.interfaces.IEventDispatcher)) (js.Boot.__cast(this._dataSource , haxe.ui.toolkit.core.interfaces.IEventDispatcher)).addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDataSourceChanged));
		if(this._ready == true) this.syncUI();
		this._lastSelection = -1;
		return value;
	}
	,_onDataSourceChanged: function(event) {
		this.syncUI();
	}
	,syncUI: function() {
		var pos = 0;
		if(this._dataSource != null) {
			if(this.get_dataSource().moveFirst()) do {
				var dataHash = this.get_dataSource().hash();
				var data = this.get_dataSource().get();
				var item = null;
				if(this._content.getChildAt(pos) != null) item = js.Boot.__cast(this._content.getChildAt(pos) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
				if(item == null) {
					this.addListViewItem(dataHash,data,pos);
					pos++;
				} else if(item.hash == dataHash) {
					item.set_data(data);
					pos++;
				} else {
					while(item != null && item.hash != dataHash) {
						this.removeListViewItem(pos);
						item = js.Boot.__cast(this._content.getChildAt(pos) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
					}
					pos++;
				}
			} while(this.get_dataSource().moveNext());
		}
		var _g1 = pos;
		var _g = this._content.get_children().length;
		while(_g1 < _g) {
			var n = _g1++;
			this.removeListViewItem(n);
		}
		var n1 = 0;
		var _g2 = 0;
		var _g11 = this._content.get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			var item1;
			item1 = js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IItemRenderer);
			if(js.Boot.__instanceof(item1,haxe.ui.toolkit.core.StyleableDisplayObject) == true && js.Boot.__instanceof(item1,haxe.ui.toolkit.controls.Divider) == false) {
				var styleName;
				if(n1 % 2 == 0) styleName = "even"; else styleName = "odd";
				if(!this.isSelected(item1) && (js.Boot.__cast(item1 , haxe.ui.toolkit.core.StyleableDisplayObject)).get_styleName() != styleName) (js.Boot.__cast(item1 , haxe.ui.toolkit.core.StyleableDisplayObject)).set_styleName(styleName);
			}
			n1++;
		}
	}
	,addListViewItem: function(dataHash,data,index) {
		if(index == null) index = -1;
		if(data == null) return;
		var item = null;
		if(data.divider == true) {
			item = new haxe.ui.toolkit.controls.Divider();
			item.hash = dataHash;
			item.set_data(data);
		} else {
			item = this.createRendererInstance();
			item.set_autoSize(true);
			item.hash = dataHash;
			item.set_percentWidth(100);
			item.set_data(data);
			if(js.Boot.__instanceof(item,haxe.ui.toolkit.core.StyleableDisplayObject)) {
				var styleName;
				if(this._content.get_numChildren() % 2 == 0) styleName = "even"; else styleName = "odd";
				(js.Boot.__cast(item , haxe.ui.toolkit.core.StyleableDisplayObject)).set_styleName(styleName);
			}
		}
		if(item != null) {
			if(index == -1) this._content.addChild(item); else this._content.addChildAt(item,index);
		}
		this.invalidate(256);
		if(data.divider == null || data.divider == false) {
			(js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IDisplayObject)).addEventListener("haxeui_" + "mouseOver",$bind(this,this._onListItemMouseOver));
			(js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IDisplayObject)).addEventListener("haxeui_" + "mouseOut",$bind(this,this._onListItemMouseOut));
			(js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IDisplayObject)).addEventListener("haxeui_" + "click",$bind(this,this._onListItemClick));
		}
	}
	,removeListViewItem: function(index) {
		var item;
		item = js.Boot.__cast(this._content.getChildAt(index) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
		var sIndex = Lambda.indexOf(this._selectedItems,item);
		if(sIndex != -1) HxOverrides.remove(this._selectedItems,item);
		if(item != null) {
			this._content.removeChild(item);
			this.invalidate(256);
		}
	}
	,_onListItemMouseOver: function(event) {
		if(this._allowSelection == false) return;
		if(Std["is"](event.get_component(),haxe.ui.toolkit.core.interfaces.IStateComponent)) (js.Boot.__cast(event.get_component() , haxe.ui.toolkit.core.interfaces.IStateComponent)).set_state("over");
	}
	,_onListItemMouseOut: function(event) {
		if(this._allowSelection == false) return;
		if(Std["is"](event.get_component(),haxe.ui.toolkit.core.interfaces.IStateComponent)) {
			var item = event.get_component();
			if(this.isSelected(item)) (js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IStateComponent)).set_state("selected"); else (js.Boot.__cast(item , haxe.ui.toolkit.core.interfaces.IStateComponent)).set_state("normal");
		}
	}
	,_onListItemClick: function(event) {
		if(this._allowSelection == false) return;
		if(Std["is"](event.get_component(),haxe.ui.toolkit.core.interfaces.IItemRenderer)) {
			var item = event.get_component();
			if(item.allowSelection(event.stageX,event.stageY)) {
				this.handleListSelection(item,event);
				this.handleClick(item);
			}
		}
	}
	,handleListSelection: function(item,event,raiseEvent) {
		if(raiseEvent == null) raiseEvent = true;
		var shiftPressed = false;
		var ctrlPressed = false;
		if(event != null && js.Boot.__instanceof(event,openfl.events.MouseEvent)) {
			var mouseEvent;
			mouseEvent = js.Boot.__cast(event , openfl.events.MouseEvent);
			shiftPressed = mouseEvent.shiftKey;
			ctrlPressed = mouseEvent.ctrlKey;
		}
		if(ctrlPressed == true) {
		} else if(shiftPressed == true) {
		} else {
			var _g = 0;
			var _g1 = this._selectedItems;
			while(_g < _g1.length) {
				var selectedItem = _g1[_g];
				++_g;
				if(selectedItem != item) selectedItem.set_state("normal");
			}
			this._selectedItems = new Array();
		}
		if(this.isSelected(item)) {
			HxOverrides.remove(this._selectedItems,item);
			item.set_state("over");
		} else {
			this._selectedItems.push(item);
			item.set_state("selected");
		}
		this.ensureVisible(item);
		if(raiseEvent == true) {
			if(this.get_selectedIndex() != -1) {
				var item1 = this._content.getChildAt(this.get_selectedIndex());
				if(item1 != null) item1.dispatchProxyEvent("haxeui_" + "change",event);
			}
		}
	}
	,handleClick: function(item) {
		var index = Lambda.indexOf(this._content.get_children(),item);
		if(this._lastSelection == index) {
			var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "doubleClick");
			this.dispatchEvent(event);
			this._lastSelection = -1;
		} else this._lastSelection = index;
	}
	,isSelected: function(item) {
		return Lambda.indexOf(this._selectedItems,item) != -1;
	}
	,getItemIndex: function(item) {
		var index = -1;
		if(item != null) index = Lambda.indexOf(this._content.get_children(),item);
		return index;
	}
	,setSelectedIndexNoEvent: function(value) {
		if(this._ready == false) return value;
		if(this._content.getChildAt(value) != null) {
			var item;
			item = js.Boot.__cast(this._content.getChildAt(value) , haxe.ui.toolkit.core.interfaces.IItemRenderer);
			if(item != null) this.handleListSelection(item,null,false);
		}
		return value;
	}
	,ensureVisible: function(item) {
		if(item == null) return;
		var vpos = 0;
		if(this._vscroll != null) vpos = this._vscroll.get_pos();
		if(item.get_y() + item.get_height() > vpos + this._container.get_clipHeight()) this._vscroll.set_pos(item.get_y() + item.get_height() - this._container.get_clipHeight()); else if(item.get_y() < vpos) this._vscroll.set_pos(item.get_y());
	}
	,createRendererInstance: function() {
		var r = null;
		if(this._itemRenderer == null) return null;
		if(js.Boot.__instanceof(this._itemRenderer,haxe.ui.toolkit.core.interfaces.IItemRenderer)) r = (js.Boot.__cast(this._itemRenderer , haxe.ui.toolkit.core.interfaces.IItemRenderer)).clone(); else if(js.Boot.__instanceof(this._itemRenderer,Class)) {
			var cls;
			cls = js.Boot.__cast(this._itemRenderer , Class);
			r = Type.createInstance(cls,[]);
		} else if(typeof(this._itemRenderer) == "string") {
			var classString;
			classString = js.Boot.__cast(this._itemRenderer , String);
			var cls1 = Type.resolveClass(classString);
			r = Type.createInstance(cls1,[]);
		}
		if(r != null) r.eventDispatcher = this;
		r.set_useHandCursor(this._allowSelection);
		return r;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.ScrollView.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ListView();
	}
	,set_onComponentEvent: function(value) {
		this.onComponentEvent = value;
		this.addEventListener("haxeui_" + "componentEvent",$bind(this,this._handleEvent));
		return value;
	}
	,__class__: haxe.ui.toolkit.containers.ListView
	,__properties__: $extend(haxe.ui.toolkit.containers.ScrollView.prototype.__properties__,{set_onComponentEvent:"set_onComponentEvent",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource",set_allowSelection:"set_allowSelection",get_allowSelection:"get_allowSelection",set_itemRenderer:"set_itemRenderer",get_itemRenderer:"get_itemRenderer",get_content:"get_content",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_selectedItems:"get_selectedItems",get_itemHeight:"get_itemHeight",get_listSize:"get_listSize"})
});
haxe.ui.toolkit.containers.MenuBar = function() {
	haxe.ui.toolkit.containers.HBox.call(this);
	this._autoSize = false;
};
$hxClasses["haxe.ui.toolkit.containers.MenuBar"] = haxe.ui.toolkit.containers.MenuBar;
haxe.ui.toolkit.containers.MenuBar.__name__ = ["haxe","ui","toolkit","containers","MenuBar"];
haxe.ui.toolkit.containers.MenuBar.__super__ = haxe.ui.toolkit.containers.HBox;
haxe.ui.toolkit.containers.MenuBar.prototype = $extend(haxe.ui.toolkit.containers.HBox.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.HBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.MenuBar();
	}
	,__class__: haxe.ui.toolkit.containers.MenuBar
});
haxe.ui.toolkit.core.interfaces.ILayout = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.ILayout"] = haxe.ui.toolkit.core.interfaces.ILayout;
haxe.ui.toolkit.core.interfaces.ILayout.__name__ = ["haxe","ui","toolkit","core","interfaces","ILayout"];
haxe.ui.toolkit.core.interfaces.ILayout.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.core.interfaces.ILayout.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.ILayout
};
haxe.ui.toolkit.layout = {};
haxe.ui.toolkit.layout.Layout = function() {
	this._spacingY = 0;
	this._spacingX = 0;
	this._padding = new openfl.geom.Rectangle();
};
$hxClasses["haxe.ui.toolkit.layout.Layout"] = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.Layout.__name__ = ["haxe","ui","toolkit","layout","Layout"];
haxe.ui.toolkit.layout.Layout.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.ILayout];
haxe.ui.toolkit.layout.Layout.prototype = {
	get_container: function() {
		return this._container;
	}
	,set_container: function(value) {
		this._container = value;
		this.refresh();
		return value;
	}
	,get_padding: function() {
		return this._padding;
	}
	,set_padding: function(value) {
		this._padding = value;
		this.refresh();
		return value;
	}
	,get_spacingX: function() {
		return this._spacingX;
	}
	,set_spacingX: function(value) {
		this._spacingX = value;
		this.refresh();
		return value;
	}
	,get_spacingY: function() {
		return this._spacingY;
	}
	,set_spacingY: function(value) {
		this._spacingY = value;
		this.refresh();
		return value;
	}
	,refresh: function() {
		if(this.get_container() != null && this.get_container().get_ready()) {
			this.resizeChildren();
			this.repositionChildren();
		}
	}
	,resizeChildren: function() {
	}
	,repositionChildren: function() {
	}
	,autoSize: function(totalWidth,totalHeight) {
		if(this.get_container().get_autoSize()) {
			if(totalWidth > 0 && totalWidth != this.get_innerWidth() && this.get_container().get_percentWidth() == -1) this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
			if(totalHeight > 0 && totalHeight != this.get_innerHeight() && this.get_container().get_percentHeight() == -1) this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom()));
		} else if(totalWidth > 0 && this.get_container().get_height() == 0 && this.get_container().get_percentWidth() > -1) {
			this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
			this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom()));
		} else if(totalHeight > 0 && this.get_container().get_width() == 0 && this.get_container().get_percentHeight() > -1) {
			this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
			this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom()));
		} else if(totalWidth > 0 && this.get_container().get_height() == 0) this.get_container().set_height(totalHeight + (this.get_padding().get_top() + this.get_padding().get_bottom())); else if(totalHeight > 0 && this.get_container().get_width() == 0) this.get_container().set_width(totalWidth + (this.get_padding().get_left() + this.get_padding().get_right()));
	}
	,get_innerWidth: function() {
		if(this.get_container() == null) return 0;
		var icx = this.get_container().get_width() - (this.get_padding().get_left() + this.get_padding().get_right());
		return icx;
	}
	,get_innerHeight: function() {
		if(this.get_container() == null) return 0;
		var icy = this.get_container().get_height() - (this.get_padding().get_top() + this.get_padding().get_bottom());
		return icy;
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		return ucy;
	}
	,clone: function() {
		var c = this.self();
		c.set_padding(this.get_padding());
		c.set_spacingX(this.get_spacingX());
		c.set_spacingY(this.get_spacingY());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.Layout();
	}
	,__class__: haxe.ui.toolkit.layout.Layout
	,__properties__: {get_usableHeight:"get_usableHeight",get_usableWidth:"get_usableWidth",get_innerHeight:"get_innerHeight",get_innerWidth:"get_innerWidth",set_spacingY:"set_spacingY",get_spacingY:"get_spacingY",set_spacingX:"set_spacingX",get_spacingX:"get_spacingX",set_padding:"set_padding",get_padding:"get_padding",set_container:"set_container",get_container:"get_container"}
};
haxe.ui.toolkit.layout.DefaultLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.DefaultLayout"] = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.layout.DefaultLayout.__name__ = ["haxe","ui","toolkit","layout","DefaultLayout"];
haxe.ui.toolkit.layout.DefaultLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.DefaultLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			if(child.get_width() > totalWidth) totalWidth = child.get_width();
			if(child.get_height() > totalHeight) totalHeight = child.get_height();
		}
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			child.set_x(xpos);
			child.set_y(ypos);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.DefaultLayout();
	}
	,__class__: haxe.ui.toolkit.layout.DefaultLayout
});
haxe.ui.toolkit.containers.ScrollViewLayout = function() {
	this._inlineScrolls = false;
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.ScrollViewLayout"] = haxe.ui.toolkit.containers.ScrollViewLayout;
haxe.ui.toolkit.containers.ScrollViewLayout.__name__ = ["haxe","ui","toolkit","containers","ScrollViewLayout"];
haxe.ui.toolkit.containers.ScrollViewLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.containers.ScrollViewLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var hscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.HScroll);
		var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
		if(hscroll != null) hscroll.set_y(this.get_container().get_height() - hscroll.get_height() - this.get_padding().get_bottom());
		if(vscroll != null) vscroll.set_x(this.get_container().get_width() - vscroll.get_width() - this.get_padding().get_right());
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
		if(vscroll != null && vscroll.get_visible() == true && this._inlineScrolls == false) ucx -= vscroll.get_width() + this.get_spacingX();
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var hscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.HScroll);
		if(hscroll != null && hscroll.get_visible() && this._inlineScrolls == false) ucy -= hscroll.get_height() + this.get_spacingY();
		return ucy;
	}
	,get_inlineScrolls: function() {
		return this._inlineScrolls;
	}
	,set_inlineScrolls: function(value) {
		this._inlineScrolls = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.ScrollViewLayout();
	}
	,__class__: haxe.ui.toolkit.containers.ScrollViewLayout
	,__properties__: $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype.__properties__,{set_inlineScrolls:"set_inlineScrolls",get_inlineScrolls:"get_inlineScrolls"})
});
haxe.ui.toolkit.containers.SpriteContainer = function(childSprite) {
	haxe.ui.toolkit.core.Component.call(this);
	this.set_childSprite(childSprite);
	this.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.containers.SpriteContainer"] = haxe.ui.toolkit.containers.SpriteContainer;
haxe.ui.toolkit.containers.SpriteContainer.__name__ = ["haxe","ui","toolkit","containers","SpriteContainer"];
haxe.ui.toolkit.containers.SpriteContainer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.SpriteContainer.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.SpriteContainer.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		if(this._childSprite != null) {
			if(this.get_autoSize() == true) {
				this._childSprite.set_x(this.get_layout().get_padding().get_left());
				this._childSprite.set_y(this.get_layout().get_padding().get_top());
				this.set_width(this._childSprite.get_width() + (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right()));
				this.set_height(this._childSprite.get_height() + (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom()));
			}
		}
	}
	,dispose: function() {
		if(this._childSprite != null) this.get_sprite().removeChild(this._childSprite);
		haxe.ui.toolkit.core.Component.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		haxe.ui.toolkit.core.Component.prototype.invalidate.call(this,type,recursive);
		if((type & 256) == 256) {
			if(this._stretch == true && this._childSprite != null) {
				this._childSprite.set_x(this.get_layout().get_padding().get_left());
				this._childSprite.set_y(this.get_layout().get_padding().get_top());
				this._childSprite.set_width(this.get_width() - (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right()));
				this._childSprite.set_height(this.get_height() - (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom()));
			}
		}
	}
	,get_childSprite: function() {
		return this._childSprite;
	}
	,set_childSprite: function(value) {
		if(value == null && this._childSprite != null) {
			this.get_sprite().removeChild(this._childSprite);
			this._childSprite = null;
		}
		if(value != this._childSprite) {
			if(this._childSprite != null) this.get_sprite().removeChild(this._childSprite);
			this._childSprite = value;
			this.get_sprite().addChild(this._childSprite);
			if(this.get_autoSize() == true && this.get_ready()) {
				this._childSprite.set_x(this.get_layout().get_padding().get_left());
				this._childSprite.set_y(this.get_layout().get_padding().get_top());
				this.set_width(this._childSprite.get_width() + (this.get_layout().get_padding().get_left() + this.get_layout().get_padding().get_right()));
				this.set_height(this._childSprite.get_height() + (this.get_layout().get_padding().get_top() + this.get_layout().get_padding().get_bottom()));
			}
		}
		return value;
	}
	,get_spriteClass: function() {
		return this._spriteClass;
	}
	,set_spriteClass: function(value) {
		if(value == null) {
			this.set_childSprite(null);
			this._spriteClass = null;
			return value;
		}
		if(value != this._spriteClass) {
			var cls = Type.resolveClass(value);
			if(cls != null) {
				var inst = Type.createInstance(cls,[]);
				if(inst != null && js.Boot.__instanceof(inst,openfl.display.Sprite)) {
					this.set_childSprite(inst);
					this._spriteClass = value;
				}
			}
		}
		return value;
	}
	,get_stretch: function() {
		return this._stretch;
	}
	,set_stretch: function(value) {
		if(this._stretch == value) return value;
		this._autoSize = !value;
		this._stretch = value;
		this.invalidate(256);
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_childSprite(this.get_childSprite());
		c.set_spriteClass(this.get_spriteClass());
		c.set_stretch(this.get_stretch());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.SpriteContainer();
	}
	,__class__: haxe.ui.toolkit.containers.SpriteContainer
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_stretch:"set_stretch",get_stretch:"get_stretch",set_spriteClass:"set_spriteClass",get_spriteClass:"get_spriteClass",set_childSprite:"set_childSprite",get_childSprite:"get_childSprite"})
});
haxe.ui.toolkit.containers.Stack = function() {
	this._history = new List();
	this._selectedIndex = -1;
	haxe.ui.toolkit.core.Component.call(this);
	this._clipContent = true;
};
$hxClasses["haxe.ui.toolkit.containers.Stack"] = haxe.ui.toolkit.containers.Stack;
haxe.ui.toolkit.containers.Stack.__name__ = ["haxe","ui","toolkit","containers","Stack"];
haxe.ui.toolkit.containers.Stack.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.Stack.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	addChild: function(child) {
		var r = haxe.ui.toolkit.core.Component.prototype.addChild.call(this,child);
		r.set_visible(this.get_children().length - 1 == this._selectedIndex);
		r.get_sprite().set_alpha(1);
		return r;
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(value != this._selectedIndex) {
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.containers.Stack);
			var _g1 = 0;
			var _g = this.get_children().length;
			while(_g1 < _g) {
				var n = _g1++;
				var item = [this.get_children()[n]];
				if(n == value) {
					if(transition == "slide") {
						if(value < this._selectedIndex) {
							item[0].get_sprite().set_alpha(1);
							item[0].set_visible(true);
							item[0].set_x(-item[0].get_width());
							motion.Actuate.tween(item[0],.2,{ x : this.get_layout().get_padding().get_left()},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function() {
								return function() {
								};
							})());
						} else {
							item[0].get_sprite().set_alpha(1);
							item[0].set_visible(true);
							item[0].set_x(this.get_width());
							motion.Actuate.tween(item[0],.2,{ x : this.get_layout().get_padding().get_left()},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function() {
								return function() {
								};
							})());
						}
					} else if(transition == "fade") {
						item[0].set_x(this.get_layout().get_padding().get_left());
						item[0].get_sprite().set_alpha(0);
						item[0].set_visible(true);
						motion.Actuate.tween(item[0].get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function() {
							return function() {
							};
						})());
					} else {
						item[0].set_x(this.get_layout().get_padding().get_left());
						item[0].get_sprite().set_alpha(1);
						item[0].set_visible(true);
					}
				} else if(n == this._selectedIndex) {
					if(transition == "slide") {
						item[0].get_sprite().set_alpha(1);
						if(value < this._selectedIndex) motion.Actuate.tween(item[0],.2,{ x : this.get_width()},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function(item) {
							return function() {
								item[0].set_visible(false);
							};
						})(item)); else motion.Actuate.tween(item[0],.2,{ x : -item[0].get_width()},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function(item) {
							return function() {
								item[0].set_visible(false);
							};
						})(item));
					} else if(transition == "fade") {
						item[0].set_x(this.get_layout().get_padding().get_left());
						motion.Actuate.tween(item[0].get_sprite(),.2,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete((function(item) {
							return function() {
								item[0].set_visible(false);
							};
						})(item));
					} else {
						item[0].set_x(this.get_layout().get_padding().get_left());
						item[0].get_sprite().set_alpha(1);
						item[0].set_visible(false);
					}
				}
			}
			this._history.push(this._selectedIndex);
			this._selectedIndex = value;
			var event = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(event);
		}
		return value;
	}
	,back: function() {
		var last = this._history.pop();
		if(last == null) return;
		this.set_selectedIndex(last);
		this._history.pop();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.Stack();
	}
	,__class__: haxe.ui.toolkit.containers.Stack
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.containers.TabView = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this._layout = new haxe.ui.toolkit.layout.VerticalLayout();
	this._tabs = new haxe.ui.toolkit.controls.TabBar();
	this._tabs.set_percentWidth(100);
	this._tabs.addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onTabsChange));
	this._tabs.addEventListener("haxeui_" + "glyphClick",$bind(this,this._onGlyphClick));
	this.addChild(this._tabs);
	this._stack = new haxe.ui.toolkit.containers.Stack();
	this._stack.set_percentWidth(this._stack.set_percentHeight(100));
	this._stack.set_styleName("page");
	this.addChild(this._stack);
};
$hxClasses["haxe.ui.toolkit.containers.TabView"] = haxe.ui.toolkit.containers.TabView;
haxe.ui.toolkit.containers.TabView.__name__ = ["haxe","ui","toolkit","containers","TabView"];
haxe.ui.toolkit.containers.TabView.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.TabView.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	_onTabsChange: function(event) {
		this._stack.set_selectedIndex(this._tabs.get_selectedIndex());
		var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change");
		this.dispatchEvent(event1);
	}
	,_onGlyphClick: function(event) {
		var newEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "glyphClick");
		newEvent.data = event.data;
		this.dispatchEvent(newEvent);
	}
	,initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this.set_selectedIndex(0);
	}
	,addChild: function(child) {
		var r = null;
		if(child == this._tabs || child == this._stack) r = haxe.ui.toolkit.core.Component.prototype.addChild.call(this,child); else {
			r = this._stack.addChild(child);
			var label = "";
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.Component)) label = (js.Boot.__cast(child , haxe.ui.toolkit.core.Component)).get_text();
			this._tabs.addTab(label).set_styleName(child.get_id());
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(child == this._tabs || child == this._stack) r = haxe.ui.toolkit.core.Component.prototype.addChildAt.call(this,child,index); else {
			r = this._stack.addChildAt(child,index);
			var label = "";
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.Component)) label = (js.Boot.__cast(child , haxe.ui.toolkit.core.Component)).get_text();
			this._tabs.addTab(label).set_styleName(child.get_id());
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(child == this._tabs || child == this._stack) r = haxe.ui.toolkit.core.Component.prototype.removeChild.call(this,child,dispose); else r = this._stack.removeChild(child,dispose);
		return r;
	}
	,get_selectedIndex: function() {
		return this._tabs.get_selectedIndex();
	}
	,set_selectedIndex: function(value) {
		this._tabs.set_selectedIndex(value);
		return value;
	}
	,get_pageCount: function() {
		return this._stack.get_numChildren();
	}
	,get_selectedPage: function() {
		return this.getTabPage(this.get_selectedIndex());
	}
	,setTabText: function(index,text) {
		this._tabs.setTabText(index,text);
	}
	,removeTab: function(index) {
		this._stack.removeChildAt(index);
		this._tabs.removeTab(index);
	}
	,getTabButton: function(index) {
		return this._tabs.getTabButton(index);
	}
	,getTabPage: function(index) {
		return this._stack.getChildAt(index);
	}
	,removeAllTabs: function() {
		this._stack.removeAllChildren();
		this._tabs.removeAllTabs();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.TabView();
	}
	,__class__: haxe.ui.toolkit.containers.TabView
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{get_selectedPage:"get_selectedPage",get_pageCount:"get_pageCount",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.containers.TableView = function() {
	this._lastSelection = -1;
	haxe.ui.toolkit.core.Component.call(this);
	this._columnDefs = new haxe.ui.toolkit.containers.TableViewColumnDefs();
	this.set_dataSource(new haxe.ui.toolkit.data.ArrayDataSource());
	this._scrollView = new haxe.ui.toolkit.containers.ScrollView();
	this._scrollView.get_style().set_borderSize(0);
	this._selectedItems = new Array();
	this._scrollView.set_percentWidth(100);
	this._scrollView.set_percentHeight(100);
	this._scrollContent = new haxe.ui.toolkit.containers.VBox();
	this._scrollContent.set_id("tableContent");
	this._scrollContent.set_autoSize(true);
	this._scrollView.addChild(this._scrollContent);
};
$hxClasses["haxe.ui.toolkit.containers.TableView"] = haxe.ui.toolkit.containers.TableView;
haxe.ui.toolkit.containers.TableView.__name__ = ["haxe","ui","toolkit","containers","TableView"];
haxe.ui.toolkit.containers.TableView.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDataComponent];
haxe.ui.toolkit.containers.TableView.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.containers.TableView.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this.addChild(this._scrollView);
		if(this._dataSource == null) this.set_dataSource(new haxe.ui.toolkit.data.ArrayDataSource());
		this._dataSource.open();
		this.syncUI();
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		haxe.ui.toolkit.core.Component.prototype.invalidate.call(this,type,recursive);
		if(this._ready && (type & 256) == 256) {
			if(this._scrollView.get_layout().get_usableWidth() > 0) this.resizeColumns();
		}
	}
	,get_dataSource: function() {
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		if(this._dataSource != null) {
			if(js.Boot.__instanceof(this._dataSource,openfl.events.IEventDispatcher)) (js.Boot.__cast(this._dataSource , openfl.events.IEventDispatcher)).removeEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDataSourceChanged));
		}
		this._dataSource = value;
		if(js.Boot.__instanceof(this._dataSource,openfl.events.IEventDispatcher)) (js.Boot.__cast(this._dataSource , openfl.events.IEventDispatcher)).addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onDataSourceChanged));
		if(this._ready == true) this.syncUI();
		return value;
	}
	,_onDataSourceChanged: function(event) {
		this.syncUI();
	}
	,get_columns: function() {
		return this._columnDefs;
	}
	,set_columns: function(value) {
		this._columnDefs = value;
		return value;
	}
	,syncUI: function() {
		var pos = 0;
		if(this._dataSource != null) {
			if(this.get_dataSource().moveFirst()) do {
				var dataHash = this.get_dataSource().hash();
				var data = this.get_dataSource().get();
				var item = null;
				if(this._scrollContent.getChildAt(pos) != null) item = js.Boot.__cast(this._scrollContent.getChildAt(pos) , haxe.ui.toolkit.containers.TableViewRow);
				if(item == null) {
					this.addTableRow(dataHash,data,pos);
					pos++;
				} else if(item.hash == dataHash) pos++; else {
					while(item != null && item.hash != dataHash) item = js.Boot.__cast(this._scrollContent.getChildAt(pos) , haxe.ui.toolkit.containers.TableViewRow);
					pos++;
				}
			} while(this.get_dataSource().moveNext());
		}
	}
	,addTableRow: function(dataHash,data,index) {
		if(index == null) index = -1;
		if(data == null) return;
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f != "__get_id__") {
				if(this._columnDefs.has(f) == false) {
					this._columnDefs.add(f);
					haxe.Log.trace(f,{ fileName : "TableView.hx", lineNumber : 162, className : "haxe.ui.toolkit.containers.TableView", methodName : "addTableRow"});
				}
			}
		}
		var item = new haxe.ui.toolkit.containers.TableViewRow(this);
		item.set_autoSize(true);
		item.set_data(data);
		item.hash = dataHash;
		var id;
		if(this._scrollContent.get_numChildren() % 2 == 0) id = "even"; else id = "odd";
		item.set_id(id);
		if(index == -1) this._scrollContent.addChild(item); else this._scrollContent.addChildAt(item,index);
		this._scrollView.invalidate(256);
	}
	,resizeColumns: function() {
		if(this._scrollContent.get_numChildren() == 0) return;
		var sx = (js.Boot.__cast(this._scrollContent.getChildAt(0) , haxe.ui.toolkit.containers.TableViewRow)).get_layout().get_spacingX();
		var cols = this._columnDefs.iterator();
		var totalWidth = 0;
		var _g = 0;
		while(_g < cols.length) {
			var c = cols[_g];
			++_g;
			totalWidth += c.calculatedWidth + sx;
		}
		if(totalWidth < this._scrollView.get_layout().get_usableWidth()) {
			var diff = this._scrollView.get_layout().get_usableWidth() - totalWidth;
			var newWidth = cols[cols.length - 1].calculatedWidth + diff;
			var _g1 = 0;
			var _g11 = this._scrollContent.get_children();
			while(_g1 < _g11.length) {
				var child = _g11[_g1];
				++_g1;
				var temp;
				temp = js.Boot.__cast(child , haxe.ui.toolkit.containers.TableViewRow);
				temp.getChildAt(temp.get_numChildren() - 1).set_width(newWidth);
			}
		}
	}
	,handleListSelection: function(item,event,raiseEvent) {
		if(raiseEvent == null) raiseEvent = true;
		var shiftPressed = false;
		var ctrlPressed = false;
		if(event != null && js.Boot.__instanceof(event,openfl.events.MouseEvent)) {
			var mouseEvent;
			mouseEvent = js.Boot.__cast(event , openfl.events.MouseEvent);
			shiftPressed = mouseEvent.shiftKey;
			ctrlPressed = mouseEvent.ctrlKey;
		}
		if(ctrlPressed == true) {
		} else if(shiftPressed == true) {
		} else {
			var _g = 0;
			var _g1 = this._selectedItems;
			while(_g < _g1.length) {
				var selectedItem = _g1[_g];
				++_g;
				if(selectedItem != item) selectedItem.set_state("normal");
			}
			this._selectedItems = new Array();
		}
		if(this.isSelected(item)) {
			HxOverrides.remove(this._selectedItems,item);
			item.set_state("over");
		} else {
			this._selectedItems.push(item);
			item.set_state("selected");
		}
		if(raiseEvent == true) {
			var event1 = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(event1);
		}
	}
	,handleClick: function(item,event) {
		var index = Lambda.indexOf(this._scrollContent.get_children(),item);
		if(this._lastSelection == index) {
			var event1 = new openfl.events.MouseEvent(openfl.events.MouseEvent.DOUBLE_CLICK);
			this.dispatchEvent(event1);
			this._lastSelection = -1;
		} else this._lastSelection = index;
	}
	,isSelected: function(item) {
		return Lambda.indexOf(this._selectedItems,item) != -1;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.TableView();
	}
	,__class__: haxe.ui.toolkit.containers.TableView
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"})
});
haxe.ui.toolkit.containers.TableViewColumnDefs = function() {
	this._columns = new Array();
};
$hxClasses["haxe.ui.toolkit.containers.TableViewColumnDefs"] = haxe.ui.toolkit.containers.TableViewColumnDefs;
haxe.ui.toolkit.containers.TableViewColumnDefs.__name__ = ["haxe","ui","toolkit","containers","TableViewColumnDefs"];
haxe.ui.toolkit.containers.TableViewColumnDefs.prototype = {
	add: function(id,width,title) {
		if(title == null) title = "";
		if(width == null) width = 0;
		if(this.has(id) == false) {
			var c = new haxe.ui.toolkit.containers.TableViewColumnDef();
			c.id = id;
			c.width = width;
			this._columns.push(c);
		}
	}
	,has: function(id) {
		var b = false;
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.id == id) b = true;
		}
		return b;
	}
	,iterator: function() {
		return this._columns;
	}
	,findColumn: function(id) {
		var c = null;
		var _g = 0;
		var _g1 = this._columns;
		while(_g < _g1.length) {
			var test = _g1[_g];
			++_g;
			if(test.id == id) {
				c = test;
				break;
			}
		}
		return c;
	}
	,__class__: haxe.ui.toolkit.containers.TableViewColumnDefs
};
haxe.ui.toolkit.containers.TableViewColumnDef = function() {
	this.calculatedWidth = 0;
	this.width = 0;
	this.type = "text";
};
$hxClasses["haxe.ui.toolkit.containers.TableViewColumnDef"] = haxe.ui.toolkit.containers.TableViewColumnDef;
haxe.ui.toolkit.containers.TableViewColumnDef.__name__ = ["haxe","ui","toolkit","containers","TableViewColumnDef"];
haxe.ui.toolkit.containers.TableViewColumnDef.prototype = {
	__class__: haxe.ui.toolkit.containers.TableViewColumnDef
};
haxe.ui.toolkit.containers.TableViewRow = function(parentTable) {
	haxe.ui.toolkit.containers.HBox.call(this);
	this._states = new Array();
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this.set_state("normal");
	this._parentTable = parentTable;
};
$hxClasses["haxe.ui.toolkit.containers.TableViewRow"] = haxe.ui.toolkit.containers.TableViewRow;
haxe.ui.toolkit.containers.TableViewRow.__name__ = ["haxe","ui","toolkit","containers","TableViewRow"];
haxe.ui.toolkit.containers.TableViewRow.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IStateComponent];
haxe.ui.toolkit.containers.TableViewRow.__super__ = haxe.ui.toolkit.containers.HBox;
haxe.ui.toolkit.containers.TableViewRow.prototype = $extend(haxe.ui.toolkit.containers.HBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.HBox.prototype.initialize.call(this);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_OVER,$bind(this,this._onMouseOver));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_OUT,$bind(this,this._onMouseOut));
		this.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onMouseClick));
	}
	,_onMouseOver: function(event) {
		this.set_state("over");
	}
	,_onMouseOut: function(event) {
		if(this._parentTable.isSelected(this)) this.set_state("selected"); else this.set_state("normal");
	}
	,_onMouseClick: function(event) {
		this._parentTable.handleListSelection(this,event);
		this._parentTable.handleClick(this,event);
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		var _g = 0;
		var _g1 = this._parentTable.get_columns().iterator();
		while(_g < _g1.length) {
			var colDef = [_g1[_g]];
			++_g;
			if(Object.prototype.hasOwnProperty.call(value,colDef[0].id)) {
				var c = [null];
				var colValue = Reflect.field(value,colDef[0].id);
				var type = "text";
				if(typeof(colValue) == "string") c[0] = this.createColumnComponent(colValue,"text"); else {
					if(Object.prototype.hasOwnProperty.call(colValue,"type")) type = js.Boot.__cast(Reflect.field(colValue,"type") , String);
					var componentValue = null;
					if(Object.prototype.hasOwnProperty.call(colValue,"value")) componentValue = Reflect.field(colValue,"value");
					c[0] = this.createColumnComponent(componentValue,type);
				}
				if(c[0] != null) {
					if(type == "list") {
						if(Object.prototype.hasOwnProperty.call(colValue,"dataSource")) {
							var controlDataSource = Reflect.field(colValue,"dataSource");
							var ds = null;
							if((controlDataSource instanceof Array) && controlDataSource.__enum__ == null) {
								ds = new haxe.ui.toolkit.data.ArrayDataSource();
								var _g2 = 0;
								var _g3;
								_g3 = js.Boot.__cast(controlDataSource , Array);
								while(_g2 < _g3.length) {
									var o = _g3[_g2];
									++_g2;
									ds.add(o);
								}
							}
							(js.Boot.__cast(c[0] , haxe.ui.toolkit.controls.selection.ListSelector)).set_dataSource(ds);
						}
					}
					c[0].set_autoSize(true);
					this.addChild(c[0]);
					c[0].addEventListener(openfl.events.Event.ADDED_TO_STAGE,(function(c,colDef) {
						return function(e) {
							if(colDef[0].width <= 0) {
								if(c[0].get_width() > colDef[0].calculatedWidth) colDef[0].calculatedWidth = c[0].get_width(); else c[0].set_width(colDef[0].calculatedWidth);
							} else {
								c[0].set_width(colDef[0].width);
								colDef[0].calculatedWidth = colDef[0].width;
							}
						};
					})(c,colDef));
				}
			}
		}
		return value;
	}
	,createColumnComponent: function(value,type) {
		var c = null;
		if(value == null) {
			c = new haxe.ui.toolkit.controls.Spacer();
			return c;
		}
		switch(type) {
		case "text":
			c = new haxe.ui.toolkit.controls.Text();
			c.set_autoSize(false);
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).set_text(js.Boot.__cast(value , String));
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).addStates(this.get_states());
			break;
		case "button":
			c = new haxe.ui.toolkit.controls.Button();
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.Button)).set_text(js.Boot.__cast(value , String));
			break;
		case "slider":
			c = new haxe.ui.toolkit.controls.HSlider();
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.HSlider)).set_pos(Std.parseInt(value));
			break;
		case "progress":
			c = new haxe.ui.toolkit.controls.HProgress();
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.HProgress)).set_pos(Std.parseInt(value));
			break;
		case "list":
			c = new haxe.ui.toolkit.controls.selection.ListSelector();
			(js.Boot.__cast(c , haxe.ui.toolkit.controls.selection.ListSelector)).set_text(js.Boot.__cast(value , String));
			break;
		default:
			c = new haxe.ui.toolkit.controls.Spacer();
		}
		return c;
	}
	,buildStyles: function() {
		var _g = 0;
		var _g1 = this.get_states();
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var stateStyle = haxe.ui.toolkit.style.StyleManager.get_instance().buildStyleFor(this,s);
			if(stateStyle != null) this.storeStyle(s,stateStyle);
		}
	}
	,addStates: function(stateNames) {
		var _g = 0;
		while(_g < stateNames.length) {
			var stateName = stateNames[_g];
			++_g;
			this._states.push(stateName);
		}
		if(this._ready) {
			if(this._lazyLoadStyles == false) this.buildStyles(); else this.clearStyles();
		}
	}
	,get_state: function() {
		return this._state;
	}
	,set_state: function(value) {
		if(this._state != value) {
			this._state = value;
			if(this.retrieveStyle(this._state) != null) this.set_baseStyle(this.retrieveStyle(this._state)); else this.invalidate(4096);
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Text)) {
					var cx = (js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).get_width();
					(js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).set_state(value);
					(js.Boot.__cast(c , haxe.ui.toolkit.controls.Text)).set_width(cx);
				}
			}
		}
		return value;
	}
	,get_states: function() {
		return ["normal","over","selected"];
	}
	,hasState: function(state) {
		if(this.get_states() == null) return false;
		return Lambda.indexOf(this.get_states(),state) != -1;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.HBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.TableViewRow();
	}
	,__class__: haxe.ui.toolkit.containers.TableViewRow
	,__properties__: $extend(haxe.ui.toolkit.containers.HBox.prototype.__properties__,{get_states:"get_states",set_state:"set_state",get_state:"get_state",set_data:"set_data",get_data:"get_data"})
});
haxe.ui.toolkit.containers.VSplitter = function() {
	haxe.ui.toolkit.containers.VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.containers.VSplitter"] = haxe.ui.toolkit.containers.VSplitter;
haxe.ui.toolkit.containers.VSplitter.__name__ = ["haxe","ui","toolkit","containers","VSplitter"];
haxe.ui.toolkit.containers.VSplitter.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.containers.VSplitter.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.containers.VSplitter.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.VSplitterGripper)) r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe.ui.toolkit.containers.VSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChild(gripper);
			}
			r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child);
		}
		return r;
	}
	,addChildAt: function(child,index) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.VSplitterGripper)) r = haxe.ui.toolkit.containers.VBox.prototype.addChildAt.call(this,child,index); else {
			if(this.get_numChildren() > 0) {
				var gripper = new haxe.ui.toolkit.containers.VSplitterGripper();
				gripper.addEventListener("haxeui_" + "mouseDown",$bind(this,this._onMouseDown));
				this.addChildAt(gripper,index);
			}
			r = haxe.ui.toolkit.containers.VBox.prototype.addChildAt.call(this,child,index + 1);
		}
		return r;
	}
	,removeChild: function(child,dispose) {
		if(dispose == null) dispose = true;
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.containers.VSplitterGripper)) r = haxe.ui.toolkit.containers.VBox.prototype.removeChild.call(this,child,dispose); else {
			if(this.get_numChildren() > 1) this.removeChild(this.getChildAt(this.indexOfChild(child) - 1),dispose);
			r = haxe.ui.toolkit.containers.VBox.prototype.removeChild.call(this,child,dispose);
		}
		return r;
	}
	,_onMouseDown: function(event) {
		this._percents = new haxe.ds.ObjectMap();
		this._gripper = event.get_component();
		this._mouseDownOffset = event.stageY - this._gripper.get_y();
		this._invalidating = true;
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.containers.VSplitterGripper) == false) {
				if(c.get_percentHeight() != -1) {
					var value = c.get_percentHeight();
					this._percents.set(c,value);
					c.set_percentHeight(-1);
				}
			}
		}
		this._invalidating = false;
		this.invalidate(1);
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
	}
	,_onMouseMove: function(event) {
		if(this._gripper != null) {
			var delta = event.stageY - this._gripper.get_y() - this._mouseDownOffset;
			var index = this.indexOfChild(this._gripper);
			var before = this.getChildAt(index - 1);
			var after = this.getChildAt(index + 1);
			var newBefore = before.get_height() + delta;
			var newAfter = after.get_height() - delta;
			if(newBefore > before.get_minHeight() && newAfter > after.get_minHeight() && newBefore - (before.get_layout().get_padding().get_top() + before.get_layout().get_padding().get_bottom()) > 0 && newAfter - (after.get_layout().get_padding().get_top() + after.get_layout().get_padding().get_bottom()) > 0) {
				before.set_height(newBefore);
				after.set_height(newAfter);
			}
		}
	}
	,_onMouseUp: function(event) {
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onMouseMove));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onMouseUp));
		this._gripper = null;
		var ucy = this.get_height();
		ucy -= (this.get_numChildren() - 1) / 2 * (2 * this.get_layout().get_spacingY());
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(this._percents.h.__keys__[c.__id__] != null == false) ucy -= c.get_height();
		}
		this._invalidating = true;
		var $it0 = this._percents.keys();
		while( $it0.hasNext() ) {
			var c1 = $it0.next();
			var newPercent = c1.get_height() / ucy * 100;
			c1.set_percentHeight(newPercent);
		}
		this._invalidating = false;
		this.invalidate(1);
		this._percents = null;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.VSplitter();
	}
	,__class__: haxe.ui.toolkit.containers.VSplitter
});
haxe.ui.toolkit.containers.VSplitterGripper = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_remainPressed(true);
	this.set_useHandCursor(true);
};
$hxClasses["haxe.ui.toolkit.containers.VSplitterGripper"] = haxe.ui.toolkit.containers.VSplitterGripper;
haxe.ui.toolkit.containers.VSplitterGripper.__name__ = ["haxe","ui","toolkit","containers","VSplitterGripper"];
haxe.ui.toolkit.containers.VSplitterGripper.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.containers.VSplitterGripper.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.containers.VSplitterGripper();
	}
	,__class__: haxe.ui.toolkit.containers.VSplitterGripper
});
haxe.ui.toolkit.controls.Calendar = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this._layout = new haxe.ui.toolkit.controls.CalendarLayout();
	this._autoSize = false;
	this._dayItems = new Array();
	this._selectedDate = new Date();
};
$hxClasses["haxe.ui.toolkit.controls.Calendar"] = haxe.ui.toolkit.controls.Calendar;
haxe.ui.toolkit.controls.Calendar.__name__ = ["haxe","ui","toolkit","controls","Calendar"];
haxe.ui.toolkit.controls.Calendar.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.Calendar.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.core.Component.prototype.preInitialize.call(this);
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 7) {
				var j = _g1++;
				var dayItem = new haxe.ui.toolkit.controls.CalendarDay();
				dayItem.addEventListener(openfl.events.MouseEvent.CLICK,this.buildMouseClickFunction(this._dayItems.length));
				this._dayItems.push(dayItem);
				this.addChild(dayItem);
			}
		}
		this.set_date(new Date());
	}
	,previousMonth: function() {
		this._month--;
		if(this._month < 0) {
			this._month = 11;
			this._year--;
		}
		this._day = js.Boot.__cast(Math.min(this._day,this.getEndDay(this._month,this._year)) , Int);
		this.set_date(new Date(this._year,this._month,this._day,0,0,0));
	}
	,nextMonth: function() {
		this._month++;
		if(this._month > 11) {
			this._month = 0;
			this._year++;
		}
		this._day = js.Boot.__cast(Math.min(this._day,this.getEndDay(this._month,this._year)) , Int);
		this.set_date(new Date(this._year,this._month,this._day,0,0,0));
	}
	,get_date: function() {
		return this._date;
	}
	,set_date: function(value) {
		this._date = value;
		this._year = this._date.getFullYear();
		this._month = this._date.getMonth();
		this._day = this._date.getDate();
		var startDay = new Date(this._year,this._month,1,0,0,0).getDay();
		var endDay = this.getEndDay(this._month,this._year);
		var _g = 0;
		var _g1 = this._dayItems;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.set_visible(false);
			item.set_id(null);
		}
		var _g2 = 0;
		while(_g2 < endDay) {
			var i = _g2++;
			var item1 = this._dayItems[i + startDay];
			item1.set_visible(true);
			item1.set_text("" + (i + 1));
			if(i + 1 == this._selectedDate.getDate() && this._month == this._selectedDate.getMonth() && this._year == this._selectedDate.getFullYear()) item1.set_id("selectedDay");
		}
		return value;
	}
	,get_selectedDate: function() {
		return this._selectedDate;
	}
	,set_selectedDate: function(value) {
		this._selectedDate = value;
		this.set_date(this._date);
		return value;
	}
	,getEndDay: function(month,year) {
		var endDay = -1;
		switch(month) {
		case 1:
			if(year % 400 == 0 || year % 100 != 0 && year % 4 == 0) endDay = 29; else endDay = 28;
			break;
		case 3:case 5:case 8:case 10:
			endDay = 30;
			break;
		default:
			endDay = 31;
		}
		return endDay;
	}
	,buildMouseClickFunction: function(index) {
		var _g = this;
		return function(event) {
			_g.mouseClickButton(index);
		};
	}
	,mouseClickButton: function(index) {
		var item = this._dayItems[index];
		var day = Std.parseInt(item.get_text());
		this.set_selectedDate(new Date(this._year,this._month,day,0,0,0));
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Calendar();
	}
	,__class__: haxe.ui.toolkit.controls.Calendar
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate",set_date:"set_date",get_date:"get_date"})
});
haxe.ui.toolkit.controls.CalendarDay = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_autoSize(false);
};
$hxClasses["haxe.ui.toolkit.controls.CalendarDay"] = haxe.ui.toolkit.controls.CalendarDay;
haxe.ui.toolkit.controls.CalendarDay.__name__ = ["haxe","ui","toolkit","controls","CalendarDay"];
haxe.ui.toolkit.controls.CalendarDay.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.CalendarDay.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.CalendarDay();
	}
	,__class__: haxe.ui.toolkit.controls.CalendarDay
});
haxe.ui.toolkit.controls.CalendarLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.CalendarLayout"] = haxe.ui.toolkit.controls.CalendarLayout;
haxe.ui.toolkit.controls.CalendarLayout.__name__ = ["haxe","ui","toolkit","controls","CalendarLayout"];
haxe.ui.toolkit.controls.CalendarLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.controls.CalendarLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var children = this.get_container().get_children();
		var ucx = this.get_usableWidth() - 6 * this.get_spacingX() + (this.get_padding().get_left() + this.get_padding().get_right());
		var ucy = this.get_usableHeight() - 5 * this.get_spacingY() + (this.get_padding().get_top() + this.get_padding().get_bottom());
		var bcx = ucx / 7;
		var bcy = ucy / 6;
		var xpos = 0;
		var ypos = 0;
		var n = 0;
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 7) {
				var j = _g1++;
				var child = children[n];
				if(child != null) {
					child.set_x(xpos);
					child.set_y(ypos);
					child.set_width(bcx);
					child.set_height(bcy);
					n++;
					xpos += bcx + this.get_spacingX();
				}
			}
			xpos = 0;
			ypos += bcy + this.get_spacingY();
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.CalendarLayout();
	}
	,__class__: haxe.ui.toolkit.controls.CalendarLayout
});
haxe.ui.toolkit.controls.CheckBox = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this.set_autoSize(true);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this._value = new haxe.ui.toolkit.controls.CheckBoxValue();
	this._label = new haxe.ui.toolkit.controls.Text();
	this.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
};
$hxClasses["haxe.ui.toolkit.controls.CheckBox"] = haxe.ui.toolkit.controls.CheckBox;
haxe.ui.toolkit.controls.CheckBox.__name__ = ["haxe","ui","toolkit","controls","CheckBox"];
haxe.ui.toolkit.controls.CheckBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.CheckBox.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.CheckBox.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this._value.set_verticalAlign("center");
		this.addChild(this._value);
		this.addChild(this._label);
		this._label.addEventListener("haxeui_" + "click",function(e) {
			_g._value.cycleValues();
		});
		this._value.addEventListener("haxeui_" + "change",function(e1) {
			_g.set_selected(_g._value.get_value() == "selected");
		});
	}
	,get_text: function() {
		return this._label.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.Component.prototype.set_text.call(this,value);
		this._label.set_text(value);
		return value;
	}
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(value) {
		if(this._selected == value) return value;
		this._value.set_value(value == true?"selected":"unselected");
		this._selected = value;
		var event = new openfl.events.Event(openfl.events.Event.CHANGE);
		this.dispatchEvent(event);
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.Component.prototype.applyStyle.call(this);
		if(this._label != null) {
			var labelStyle = new haxe.ui.toolkit.style.Style();
			if(this._baseStyle != null) {
				labelStyle.set_fontName(this._baseStyle.get_fontName());
				labelStyle.set_fontSize(this._baseStyle.get_fontSize());
				labelStyle.set_fontEmbedded(this._baseStyle.get_fontEmbedded());
				labelStyle.set_color(this._baseStyle.get_color());
			}
			this._label.set_baseStyle(labelStyle);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_selected(this.get_selected());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.CheckBox();
	}
	,__class__: haxe.ui.toolkit.controls.CheckBox
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_selected:"set_selected",get_selected:"get_selected"})
});
haxe.ui.toolkit.controls.Value = function() {
	this._interactive = true;
	this._value = "";
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this._autoSize = false;
	this._layout = new haxe.ui.toolkit.layout.AbsoluteLayout();
	this._values = new haxe.ds.StringMap();
	this._valuesList = new Array();
	this.addEventListener(openfl.events.MouseEvent.CLICK,$bind(this,this._onMouseClick));
};
$hxClasses["haxe.ui.toolkit.controls.Value"] = haxe.ui.toolkit.controls.Value;
haxe.ui.toolkit.controls.Value.__name__ = ["haxe","ui","toolkit","controls","Value"];
haxe.ui.toolkit.controls.Value.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.Value.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Value.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	addValue: function(value) {
		if(this._values.get(value) == null) {
			var valueControl = new haxe.ui.toolkit.controls.Button();
			valueControl.set_id(value);
			valueControl.set_percentWidth(100);
			valueControl.set_percentHeight(100);
			this._values.set(value,valueControl);
			this._valuesList.push(value);
			valueControl.set_visible(this._value == value);
			this.addChild(valueControl);
		}
	}
	,cycleValues: function() {
		var currentIndex = Lambda.indexOf(this._valuesList,this._value);
		currentIndex++;
		if(currentIndex > this._valuesList.length - 1) currentIndex = 0;
		this.set_value(this._valuesList[currentIndex]);
	}
	,_onMouseClick: function(event) {
		if(this._interactive == true) this.cycleValues();
	}
	,get_value: function() {
		return this._value;
	}
	,set_value: function(newValue) {
		if(newValue != this._value) {
			var valueControl;
			var key = newValue;
			valueControl = this._values.get(key);
			if(valueControl != null) {
				var currentControl = this._values.get(this._value);
				if(currentControl != null) currentControl.set_visible(false);
				this._value = newValue;
				valueControl.set_visible(true);
			}
			this.dispatchEvent(new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change"));
		}
		return newValue;
	}
	,get_interactive: function() {
		return this._interactive;
	}
	,set_interactive: function(value) {
		this._interactive = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		var _g = 0;
		var _g1 = this._valuesList;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			c.addValue(v);
		}
		return c;
		c.set_interactive(this.get_interactive());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Value();
	}
	,__class__: haxe.ui.toolkit.controls.Value
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_interactive:"set_interactive",get_interactive:"get_interactive"})
});
haxe.ui.toolkit.controls.CheckBoxValue = function() {
	haxe.ui.toolkit.controls.Value.call(this);
	this._value = "unselected";
	this.addValue("selected");
	this.addValue("unselected");
};
$hxClasses["haxe.ui.toolkit.controls.CheckBoxValue"] = haxe.ui.toolkit.controls.CheckBoxValue;
haxe.ui.toolkit.controls.CheckBoxValue.__name__ = ["haxe","ui","toolkit","controls","CheckBoxValue"];
haxe.ui.toolkit.controls.CheckBoxValue.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.CheckBoxValue.__super__ = haxe.ui.toolkit.controls.Value;
haxe.ui.toolkit.controls.CheckBoxValue.prototype = $extend(haxe.ui.toolkit.controls.Value.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Value.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.CheckBoxValue();
	}
	,__class__: haxe.ui.toolkit.controls.CheckBoxValue
});
haxe.ui.toolkit.core.interfaces.IItemRenderer = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IItemRenderer"] = haxe.ui.toolkit.core.interfaces.IItemRenderer;
haxe.ui.toolkit.core.interfaces.IItemRenderer.__name__ = ["haxe","ui","toolkit","core","interfaces","IItemRenderer"];
haxe.ui.toolkit.core.interfaces.IItemRenderer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IStateComponent];
haxe.ui.toolkit.core.interfaces.IItemRenderer.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IItemRenderer
};
haxe.ui.toolkit.controls.Divider = function() {
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.set_autoSize(true);
	this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
};
$hxClasses["haxe.ui.toolkit.controls.Divider"] = haxe.ui.toolkit.controls.Divider;
haxe.ui.toolkit.controls.Divider.__name__ = ["haxe","ui","toolkit","controls","Divider"];
haxe.ui.toolkit.controls.Divider.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IItemRenderer];
haxe.ui.toolkit.controls.Divider.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Divider.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this._line = new haxe.ui.toolkit.core.Component();
		this._line.set_id("line");
		this._line.set_percentWidth(100);
		this.addChild(this._line);
	}
	,get_text: function() {
		if(this._label == null) return null;
		return this._label.get_text();
	}
	,set_text: function(value) {
		if(this._label == null) {
			this._label = new haxe.ui.toolkit.controls.Text();
			this._label.set_id("text");
			this.addChildAt(this._label,0);
		}
		return this._label.set_text(value);
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		if(this.get_data().text != null) this.set_text(this.get_data().text);
		return value;
	}
	,allowSelection: function(stageX,stageY) {
		return false;
	}
	,update: function() {
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Divider();
	}
	,__class__: haxe.ui.toolkit.controls.Divider
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_data:"set_data",get_data:"get_data"})
});
haxe.ui.toolkit.core.interfaces.IDirectional = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDirectional"] = haxe.ui.toolkit.core.interfaces.IDirectional;
haxe.ui.toolkit.core.interfaces.IDirectional.__name__ = ["haxe","ui","toolkit","core","interfaces","IDirectional"];
haxe.ui.toolkit.core.interfaces.IDirectional.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDirectional
};
haxe.ui.toolkit.core.interfaces.IScrollable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IScrollable"] = haxe.ui.toolkit.core.interfaces.IScrollable;
haxe.ui.toolkit.core.interfaces.IScrollable.__name__ = ["haxe","ui","toolkit","core","interfaces","IScrollable"];
haxe.ui.toolkit.core.interfaces.IScrollable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IScrollable
};
haxe.ui.toolkit.controls.Progress = function() {
	this._incrementSize = 1;
	this._pos = 0;
	this._max = 100;
	this._min = 0;
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this.set_direction("horizontal");
	this._valueBgComp = new haxe.ui.toolkit.core.StateComponent();
	this._valueBgComp.addStates(["normal","disabled"]);
	this._valueBgComp.set_id("background");
	this._valueComp = new haxe.ui.toolkit.core.StateComponent();
	this._valueComp.addStates(["normal","disabled"]);
	this._valueComp.set_id("value");
};
$hxClasses["haxe.ui.toolkit.controls.Progress"] = haxe.ui.toolkit.controls.Progress;
haxe.ui.toolkit.controls.Progress.__name__ = ["haxe","ui","toolkit","controls","Progress"];
haxe.ui.toolkit.controls.Progress.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IDirectional,haxe.ui.toolkit.core.interfaces.IScrollable];
haxe.ui.toolkit.controls.Progress.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Progress.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.addChild(this._valueBgComp);
		this._valueBgComp.addChild(this._valueComp);
	}
	,get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		if(value == "horizontal") this._layout = new haxe.ui.toolkit.controls.HProgressLayout(); else if(value == "vertical") this._layout = new haxe.ui.toolkit.controls.VProgressLayout();
		return value;
	}
	,get_min: function() {
		return this._min;
	}
	,set_min: function(value) {
		if(value != this._min) {
			this._min = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_max: function() {
		return this._max;
	}
	,set_max: function(value) {
		if(value != this._max) {
			this._max = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return this._max;
	}
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(this._ready) {
			if(value < this._min) value = this._min;
			if(value > this._max) value = this._max;
		}
		if(value != this._pos) {
			this._pos = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_pageSize: function() {
		return 0;
	}
	,set_pageSize: function(value) {
		return value;
	}
	,get_incrementSize: function() {
		return this._incrementSize;
	}
	,set_incrementSize: function(value) {
		this._incrementSize = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		c.set_direction(this.get_direction());
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		c.set_pos(this.get_pos());
		c.set_pageSize(this.get_pageSize());
		c.set_incrementSize(this.get_incrementSize());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Progress();
	}
	,__class__: haxe.ui.toolkit.controls.Progress
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_pos:"set_pos",get_pos:"get_pos",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_direction:"set_direction",get_direction:"get_direction"})
});
haxe.ui.toolkit.controls.HProgress = function() {
	haxe.ui.toolkit.controls.Progress.call(this);
	this.set_direction("horizontal");
};
$hxClasses["haxe.ui.toolkit.controls.HProgress"] = haxe.ui.toolkit.controls.HProgress;
haxe.ui.toolkit.controls.HProgress.__name__ = ["haxe","ui","toolkit","controls","HProgress"];
haxe.ui.toolkit.controls.HProgress.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.HProgress.__super__ = haxe.ui.toolkit.controls.Progress;
haxe.ui.toolkit.controls.HProgress.prototype = $extend(haxe.ui.toolkit.controls.Progress.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Progress.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HProgress();
	}
	,__class__: haxe.ui.toolkit.controls.HProgress
});
haxe.ui.toolkit.controls.Scroll = function() {
	this._direction = "vertical";
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
};
$hxClasses["haxe.ui.toolkit.controls.Scroll"] = haxe.ui.toolkit.controls.Scroll;
haxe.ui.toolkit.controls.Scroll.__name__ = ["haxe","ui","toolkit","controls","Scroll"];
haxe.ui.toolkit.controls.Scroll.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDirectional];
haxe.ui.toolkit.controls.Scroll.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Scroll.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	get_direction: function() {
		return this._direction;
	}
	,set_direction: function(value) {
		this._direction = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Scroll();
	}
	,__class__: haxe.ui.toolkit.controls.Scroll
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_direction:"set_direction",get_direction:"get_direction"})
});
haxe.ui.toolkit.controls.HScroll = function() {
	this._hasButtons = true;
	this._scrollDirection = 0;
	this._mouseDownOffset = -1;
	this._incrementSize = 20;
	this._pageSize = 0;
	this._max = 100;
	this._min = 0;
	this._pos = 0;
	haxe.ui.toolkit.controls.Scroll.call(this);
	this._layout = new haxe.ui.toolkit.controls.HScrollLayout();
};
$hxClasses["haxe.ui.toolkit.controls.HScroll"] = haxe.ui.toolkit.controls.HScroll;
haxe.ui.toolkit.controls.HScroll.__name__ = ["haxe","ui","toolkit","controls","HScroll"];
haxe.ui.toolkit.controls.HScroll.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IScrollable];
haxe.ui.toolkit.controls.HScroll.__super__ = haxe.ui.toolkit.controls.Scroll;
haxe.ui.toolkit.controls.HScroll.prototype = $extend(haxe.ui.toolkit.controls.Scroll.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.controls.Scroll.prototype.preInitialize.call(this);
		if(this._baseStyle != null) this._hasButtons = this._baseStyle.get_hasButtons();
	}
	,initialize: function() {
		haxe.ui.toolkit.controls.Scroll.prototype.initialize.call(this);
		if(this._hasButtons == true) {
			this._deincButton = new haxe.ui.toolkit.controls.Button();
			this._deincButton.set_autoSize(false);
			this._deincButton.set_iconPosition("center");
			this._deincButton.set_percentHeight(100);
			this._deincButton.set_width(this.get_layout().get_innerHeight());
			this._deincButton.set_id("deinc");
			this._deincButton.set_styleName("left");
			this._deincButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onDeinc));
			this.addChild(this._deincButton);
			this._incButton = new haxe.ui.toolkit.controls.Button();
			this._incButton.set_autoSize(false);
			this._incButton.set_iconPosition("center");
			this._incButton.set_percentHeight(100);
			this._incButton.set_width(this.get_layout().get_innerHeight());
			this._incButton.set_id("inc");
			this._incButton.set_styleName("right");
			this._incButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onInc));
			this.addChild(this._incButton);
		}
		this._thumb = new haxe.ui.toolkit.controls.Button();
		this._thumb.set_iconPosition("center");
		this._thumb.set_autoSize(false);
		this._thumb.set_width(50);
		this._thumb.set_percentHeight(100);
		this._thumb.set_id("thumb");
		this._thumb.set_styleName("thumb");
		this._thumb.set_remainPressed(true);
		this._thumb.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onThumbMouseDown));
		this.addChild(this._thumb);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
	}
	,_onThumbMouseDown: function(event) {
		var ptStage = new openfl.geom.Point(event.stageX,event.stageY);
		this._mouseDownOffset = ptStage.x - this._thumb.get_x();
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScreenMouseMove: function(event) {
		var xpos = event.stageX - this._mouseDownOffset;
		var minX = 0;
		if(this._deincButton != null) minX = this._deincButton.get_width() + this.get_layout().get_spacingX();
		var maxX = this.get_layout().get_usableWidth() - this._thumb.get_width();
		if(this._deincButton != null) maxX += this._deincButton.get_width() + this.get_layout().get_spacingX();
		if(xpos < minX) xpos = minX; else if(xpos > maxX) xpos = maxX;
		var ucx = this.get_layout().get_usableWidth();
		ucx -= this._thumb.get_width();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = xpos - minX;
		var newValue = this.get_min() + v / ucx * m;
		this.set_pos(newValue | 0);
	}
	,_onScreenMouseUp: function(event) {
		this._mouseDownOffset = -1;
		if(this._scrollTimer != null) this._scrollTimer.stop();
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onDeinc: function(event) {
		this.deincrementValue();
		this._scrollDirection = 0;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl.utils.Timer(50,1);
			this._scrollTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onInc: function(event) {
		this.incrementValue();
		this._scrollDirection = 1;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl.utils.Timer(50,1);
			this._scrollTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScrollTimerComplete: function(event) {
		if(this._scrollTimer != null) {
			if(this._scrollDirection == 1) this.incrementValue(); else if(this._scrollDirection == 0) this.deincrementValue();
			this._scrollTimer.reset();
			this._scrollTimer.start();
		}
	}
	,_onMouseDown: function(event) {
		if(event.localX > this._thumb.get_x()) {
			var _g = this;
			_g.set_pos(_g.get_pos() + this.get_pageSize());
		} else {
			var _g1 = this;
			_g1.set_pos(_g1.get_pos() - this.get_pageSize());
		}
	}
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(value < this._min) value = this._min;
		if(value > this._max) value = this._max;
		if(value != this._pos) {
			this._pos = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_min: function() {
		return this._min;
	}
	,set_min: function(value) {
		if(value != this._min) {
			this._min = value;
			if(this._pos < this._min) this._pos = this._min;
			this.invalidate(1);
		}
		return value;
	}
	,get_max: function() {
		return this._max;
	}
	,set_max: function(value) {
		if(value != this._max) {
			this._max = value;
			if(this._pos > this._max) this._pos = this._max;
			this.invalidate(1);
		}
		return value;
	}
	,get_pageSize: function() {
		return this._pageSize;
	}
	,set_pageSize: function(value) {
		if(value != this._pageSize) {
			this._pageSize = value;
			this.invalidate(1);
		}
		return value;
	}
	,get_incrementSize: function() {
		return this._incrementSize;
	}
	,set_incrementSize: function(value) {
		this._incrementSize = value;
		return value;
	}
	,deincrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() - this._incrementSize);
	}
	,incrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() + this._incrementSize);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Scroll.prototype.clone.call(this);
		c.set_pos(this.get_pos());
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		c.set_pageSize(this.get_pageSize());
		c.set_incrementSize(this.get_incrementSize());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HScroll();
	}
	,__class__: haxe.ui.toolkit.controls.HScroll
	,__properties__: $extend(haxe.ui.toolkit.controls.Scroll.prototype.__properties__,{set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_pos:"set_pos",get_pos:"get_pos"})
});
haxe.ui.toolkit.controls.HScrollLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.HScrollLayout"] = haxe.ui.toolkit.controls.HScrollLayout;
haxe.ui.toolkit.controls.HScrollLayout.__name__ = ["haxe","ui","toolkit","controls","HScrollLayout"];
haxe.ui.toolkit.controls.HScrollLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.HScrollLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		if(deinc != null) deinc.set_width(this.get_innerHeight());
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_width(this.get_innerHeight());
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucx = this.get_usableWidth();
			var thumbWidth = scroll.get_pageSize() / m * ucx;
			if(thumbWidth < this.get_innerHeight()) thumbWidth = this.get_innerHeight(); else if(thumbWidth > ucx) thumbWidth = ucx;
			if(thumbWidth > 0 && Math.isNaN(thumbWidth) == false) thumb.set_width(thumbWidth);
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_x(this.get_container().get_width() - inc.get_width() - this.get_padding().get_right());
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableWidth();
			u -= thumb.get_width();
			var x = (scroll.get_pos() - scroll.get_min()) / m * u;
			x += this.get_padding().get_left();
			if(deinc != null) x += deinc.get_width() + this.get_spacingX();
			thumb.set_x(x);
		}
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(deinc != null) ucx -= deinc.get_width() + this.get_spacingX();
		if(inc != null) ucx -= inc.get_width() + this.get_spacingX();
		return ucx;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HScrollLayout();
	}
	,__class__: haxe.ui.toolkit.controls.HScrollLayout
});
haxe.ui.toolkit.controls.Slider = function() {
	this._mouseDownOffset = -1;
	haxe.ui.toolkit.controls.Progress.call(this);
	this._valueBgComp.get_sprite().buttonMode = true;
	this._valueBgComp.get_sprite().useHandCursor = true;
};
$hxClasses["haxe.ui.toolkit.controls.Slider"] = haxe.ui.toolkit.controls.Slider;
haxe.ui.toolkit.controls.Slider.__name__ = ["haxe","ui","toolkit","controls","Slider"];
haxe.ui.toolkit.controls.Slider.__super__ = haxe.ui.toolkit.controls.Progress;
haxe.ui.toolkit.controls.Slider.prototype = $extend(haxe.ui.toolkit.controls.Progress.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.Progress.prototype.initialize.call(this);
		this._thumb = new haxe.ui.toolkit.controls.Button();
		this._thumb.set_id("thumb");
		this._thumb.set_remainPressed(true);
		this._thumb.set_autoSize(false);
		this._thumb.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
		this.addChild(this._thumb);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onMouseWheel));
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onBackgroundMouseDown));
	}
	,get_value: function() {
		return this.get_pos();
	}
	,set_value: function(newValue) {
		this.set_pos(Std.parseFloat(newValue));
		return newValue;
	}
	,_onMouseDown: function(event) {
	}
	,_onScreenMouseMove: function(event) {
	}
	,_onScreenMouseUp: function(event) {
		this._mouseDownOffset = -1;
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onBackgroundMouseDown: function(event) {
	}
	,calcPosFromCoord: function(coord) {
		return 0;
	}
	,_onMouseWheel: function(event) {
		if(event.delta != 0) {
			if(this._direction == "horizontal") {
				if(event.delta < 0) {
					var _g = this;
					_g.set_pos(_g.get_pos() + 5);
				} else if(event.delta > 0) {
					var _g1 = this;
					_g1.set_pos(_g1.get_pos() - 5);
				}
			} else if(this._direction == "vertical") {
				if(event.delta < 0) {
					var _g2 = this;
					_g2.set_pos(_g2.get_pos() - 5);
				} else if(event.delta > 0) {
					var _g3 = this;
					_g3.set_pos(_g3.get_pos() + 5);
				}
			}
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Progress.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Slider();
	}
	,__class__: haxe.ui.toolkit.controls.Slider
});
haxe.ui.toolkit.controls.HSlider = function() {
	haxe.ui.toolkit.controls.Slider.call(this);
	this.set_direction("horizontal");
};
$hxClasses["haxe.ui.toolkit.controls.HSlider"] = haxe.ui.toolkit.controls.HSlider;
haxe.ui.toolkit.controls.HSlider.__name__ = ["haxe","ui","toolkit","controls","HSlider"];
haxe.ui.toolkit.controls.HSlider.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.HSlider.__super__ = haxe.ui.toolkit.controls.Slider;
haxe.ui.toolkit.controls.HSlider.prototype = $extend(haxe.ui.toolkit.controls.Slider.prototype,{
	_onMouseDown: function(event) {
		this.startTracking(event.stageX - this._thumb.get_stageX());
	}
	,_onScreenMouseMove: function(event) {
		var xpos = event.stageX - this.get_stageX() - this._mouseDownOffset;
		this.set_pos(Std["int"](this.calcPosFromCoord(xpos)));
	}
	,_onBackgroundMouseDown: function(event) {
		if(this._thumb.hitTest(event.stageX,event.stageY) == false) {
			var xpos = event.stageX - this.get_stageX();
			xpos -= this._thumb.get_width() / 2;
			this.set_pos(Std["int"](this.calcPosFromCoord(xpos)));
			this._thumb.set_state("down");
			this.startTracking(this._thumb.get_width() / 2);
		}
	}
	,startTracking: function(offset) {
		this._mouseDownOffset = offset;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,calcPosFromCoord: function(xpos) {
		var minX = 0;
		var maxX = this.get_layout().get_usableWidth() - this._thumb.get_width();
		if(xpos < minX) xpos = minX; else if(xpos > maxX) xpos = maxX;
		var ucx = this.get_layout().get_usableWidth();
		ucx -= this._thumb.get_width();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = xpos - minX;
		var newValue = this.get_min() + v / ucx * m;
		return newValue;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Slider.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HSlider();
	}
	,__class__: haxe.ui.toolkit.controls.HSlider
});
haxe.ui.toolkit.controls.Image = function() {
	this._autoDisposeBitmapData = false;
	haxe.ui.toolkit.core.Component.call(this);
	this.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.controls.Image"] = haxe.ui.toolkit.controls.Image;
haxe.ui.toolkit.controls.Image.__name__ = ["haxe","ui","toolkit","controls","Image"];
haxe.ui.toolkit.controls.Image.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.Image.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.Image.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		if(this._bmp != null) {
			if(this.get_height() > this._bmp.get_height()) this._bmp.set_y(Std["int"](this.get_height() / 2 - this._bmp.get_height() / 2));
			if(this.get_autoSize() == true) {
				this.set_width(this._bmp.bitmapData.width);
				this.set_height(this._bmp.bitmapData.height);
			}
		}
		if(this._gifWrapper != null && this.get_autoSize() == true) {
			this.set_width(this._gifWrapper.get_width());
			this.set_height(this._gifWrapper.get_height());
		}
	}
	,dispose: function() {
		if(this._bmp != null) {
			if(this._autoDisposeBitmapData == true) this._bmp.bitmapData.dispose();
			this.get_sprite().removeChild(this._bmp);
			this._bmp = null;
		}
		haxe.ui.toolkit.core.Component.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		haxe.ui.toolkit.core.Component.prototype.invalidate.call(this,type,recursive);
		if((type & 256) == 256) {
			if(this._stretch && this._bmp != null) {
				this._bmp.set_width(this.get_width());
				this._bmp.set_height(this.get_height());
			}
		}
	}
	,get_value: function() {
		return this.get_resource();
	}
	,set_value: function(newValue) {
		this.set_resource(newValue);
		return newValue;
	}
	,get_resource: function() {
		return this._resource;
	}
	,set_resource: function(value) {
		if(this._bmp != null) {
			if(this._autoDisposeBitmapData == true) this._bmp.bitmapData.dispose();
			this.get_sprite().removeChild(this._bmp);
			this._bmp = null;
		}
		if(this._gifWrapper != null && this.get_sprite().contains(this._gifWrapper)) {
			this._gifWrapper.dispose();
			this.get_sprite().removeChild(this._gifWrapper);
		}
		var bmpData = null;
		if(typeof(value) == "string") {
			var res = value;
			if(StringTools.endsWith(res,".gif")) {
				var gif = com.yagp.GifDecoder.parseByteArray(haxe.ui.toolkit.resources.ResourceManager.get_instance().getBytes(res));
				var player = new com.yagp.GifPlayer(gif);
				this._gifWrapper = new com.yagp.GifPlayerWrapper(player);
				this.get_sprite().addChild(this._gifWrapper);
				if(this.get_autoSize() == true && this.get_ready()) {
					this.set_width(this._gifWrapper.get_width());
					this.set_height(this._gifWrapper.get_height());
				}
			} else bmpData = haxe.ui.toolkit.resources.ResourceManager.get_instance().getBitmapData(res);
		} else if(js.Boot.__instanceof(value,openfl.display.Bitmap)) bmpData = (js.Boot.__cast(value , openfl.display.Bitmap)).bitmapData; else if(js.Boot.__instanceof(value,openfl.display.BitmapData)) bmpData = js.Boot.__cast(value , openfl.display.BitmapData);
		if(bmpData != null) {
			this._bmp = new openfl.display.Bitmap(bmpData);
			this.get_sprite().addChild(this._bmp);
			if(this.get_autoSize() == true && this.get_ready()) {
				this.set_width(this._bmp.bitmapData.width);
				this.set_height(this._bmp.bitmapData.height);
			}
		}
		this._resource = value;
		return value;
	}
	,get_stretch: function() {
		return this._stretch;
	}
	,set_stretch: function(value) {
		if(this._stretch == value) return value;
		this._autoSize = !value;
		this._stretch = value;
		this.invalidate(256);
		return value;
	}
	,get_autoDisposeBitmapData: function() {
		return this._autoDisposeBitmapData;
	}
	,set_autoDisposeBitmapData: function(value) {
		this._autoDisposeBitmapData = value;
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_resource(this.get_resource());
		c.set_stretch(this.get_stretch());
		c.set_autoDisposeBitmapData(this.get_autoDisposeBitmapData());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Image();
	}
	,__class__: haxe.ui.toolkit.controls.Image
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_autoDisposeBitmapData:"set_autoDisposeBitmapData",get_autoDisposeBitmapData:"get_autoDisposeBitmapData",set_stretch:"set_stretch",get_stretch:"get_stretch",set_resource:"set_resource",get_resource:"get_resource"})
});
haxe.ui.toolkit.controls.Text = function() {
	haxe.ui.toolkit.core.StateComponent.call(this);
	this._valign = "center";
	this.set_autoSize(true);
	this._textDisplay = new haxe.ui.toolkit.text.TextDisplay();
	this._textDisplay.set_text("");
};
$hxClasses["haxe.ui.toolkit.controls.Text"] = haxe.ui.toolkit.controls.Text;
haxe.ui.toolkit.controls.Text.__name__ = ["haxe","ui","toolkit","controls","Text"];
haxe.ui.toolkit.controls.Text.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.Text.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.Text.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.get_sprite().addChild(this._textDisplay.get_display());
		this._textDisplay.set_autoSize(this.get_autoSize());
		this._textDisplay.set_text(this.get_text());
		if(this.get_autoSize() == true) {
			if(this.get_width() == 0) this.set_width(this._textDisplay.get_display().get_width());
			if(this.get_height() == 0) this.set_height(this._textDisplay.get_display().get_height());
		}
	}
	,dispose: function() {
		if(this.get_sprite().contains(this._textDisplay.get_display())) this.get_sprite().removeChild(this._textDisplay.get_display());
		haxe.ui.toolkit.core.StateComponent.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.StateComponent.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256 && this._autoSize == false) {
			this._textDisplay.get_display().set_width(this.get_layout().get_innerWidth());
			this._textDisplay.get_display().set_height(this.get_layout().get_innerHeight());
		}
		this._invalidating = false;
	}
	,get_text: function() {
		return this._textDisplay.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.StateComponent.prototype.set_text.call(this,value);
		this._textDisplay.set_text(value);
		if(this.get_autoSize() == true) {
			this.set_width(this._textDisplay.get_display().get_width());
			this.set_height(this._textDisplay.get_display().get_height());
		}
		return value;
	}
	,set_autoSize: function(value) {
		value = haxe.ui.toolkit.core.StateComponent.prototype.set_autoSize.call(this,value);
		if(this._textDisplay != null) this._textDisplay.set_autoSize(value);
		return value;
	}
	,set_width: function(value) {
		haxe.ui.toolkit.core.StateComponent.prototype.set_width.call(this,value);
		this._textDisplay.get_display().set_width(value);
		this._textDisplay.set_text(this.get_text());
		this.set_height(this._textDisplay.get_display().get_height());
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.applyStyle.call(this);
		if(this._textDisplay != null) {
			this._textDisplay.set_style(this._baseStyle);
			if(this.get_autoSize() == true) {
				this.set_width(this._textDisplay.get_display().get_width());
				this.set_height(this._textDisplay.get_display().get_height());
			}
		}
	}
	,get_multiline: function() {
		return this._textDisplay.get_multiline();
	}
	,set_multiline: function(value) {
		this._textDisplay.set_multiline(value);
		return value;
	}
	,get_wrapLines: function() {
		return this._textDisplay.get_wrapLines();
	}
	,set_wrapLines: function(value) {
		this._textDisplay.set_wrapLines(value);
		return value;
	}
	,get_selectable: function() {
		return this._textDisplay.get_selectable();
	}
	,set_selectable: function(value) {
		return this._textDisplay.set_selectable(value);
	}
	,get_textAlign: function() {
		if(this._textDisplay == null) return null;
		return this._textDisplay.get_textAlign();
	}
	,set_textAlign: function(value) {
		if(this._textDisplay != null) this._textDisplay.set_textAlign(value);
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		c.set_multiline(this.get_multiline());
		c.set_wrapLines(this.get_wrapLines());
		c.set_selectable(this.get_selectable());
		c.set_textAlign(this.get_textAlign());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Text();
	}
	,__class__: haxe.ui.toolkit.controls.Text
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_selectable:"set_selectable",get_selectable:"get_selectable",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",set_multiline:"set_multiline",get_multiline:"get_multiline"})
});
haxe.ui.toolkit.controls.Link = function() {
	this._isOver = false;
	this._isDown = false;
	haxe.ui.toolkit.controls.Text.call(this);
	this.set_useHandCursor(true);
};
$hxClasses["haxe.ui.toolkit.controls.Link"] = haxe.ui.toolkit.controls.Link;
haxe.ui.toolkit.controls.Link.__name__ = ["haxe","ui","toolkit","controls","Link"];
haxe.ui.toolkit.controls.Link.__super__ = haxe.ui.toolkit.controls.Text;
haxe.ui.toolkit.controls.Link.prototype = $extend(haxe.ui.toolkit.controls.Text.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.Text.prototype.initialize.call(this);
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onScreenMouseDown));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onScreenMouseDown: function(e) {
		if(this.hitTest(e.stageX,e.stageY) == true) {
			this._isDown = true;
			this.set_state("down");
			haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		}
	}
	,_onScreenMouseMove: function(e) {
		if(this.hitTest(e.stageX,e.stageY) == true) {
			if(this._isDown == true) this.set_state("down"); else this.set_state("over");
			this._isOver = true;
		} else if(this._isOver == true) {
			this.set_state("normal");
			this._isOver = false;
		}
	}
	,_onScreenMouseUp: function(e) {
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this.hitTest(e.stageX,e.stageY) == true && this._isDown == true) {
			this._isDown = false;
			this.set_state("over");
			var uiEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "click");
			this.dispatchEvent(uiEvent);
			if(this.url != null) openfl.Lib.getURL(new openfl.net.URLRequest(this.url));
		} else if(this._isOver == false) {
			this._isDown = false;
			this.set_state("normal");
		}
	}
	,get_states: function() {
		return ["normal","over","down"];
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Text.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Link();
	}
	,__class__: haxe.ui.toolkit.controls.Link
});
haxe.ui.toolkit.controls.Menu = function() {
	haxe.ui.toolkit.containers.VBox.call(this);
	this._subMenus = new haxe.ds.ObjectMap();
};
$hxClasses["haxe.ui.toolkit.controls.Menu"] = haxe.ui.toolkit.controls.Menu;
haxe.ui.toolkit.controls.Menu.__name__ = ["haxe","ui","toolkit","controls","Menu"];
haxe.ui.toolkit.controls.Menu.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.controls.Menu.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
		if(this.get_rootMenu() == this) this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
	}
	,addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.MenuItem)) {
			(js.Boot.__cast(child , haxe.ui.toolkit.controls.MenuItem)).addEventListener(openfl.events.MouseEvent.MOUSE_OVER,this.buildMouseOverFunction(this.get_numChildren()));
			(js.Boot.__cast(child , haxe.ui.toolkit.controls.MenuItem)).addEventListener(openfl.events.MouseEvent.CLICK,this.buildMouseClickFunction(this.get_numChildren()));
			r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child);
		} else if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.MenuSeparator)) r = haxe.ui.toolkit.containers.VBox.prototype.addChild.call(this,child); else if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.Menu)) {
			var item = new haxe.ui.toolkit.controls.MenuItem();
			(js.Boot.__cast(child , haxe.ui.toolkit.controls.Menu))._parentMenu = this;
			item.set_text((js.Boot.__cast(child , haxe.ui.toolkit.controls.Menu)).get_text());
			item.set_styleName("expandable");
			var value;
			value = js.Boot.__cast(child , haxe.ui.toolkit.controls.Menu);
			this._subMenus.set(item,value);
			this.addChild(item);
		}
		return r;
	}
	,_onRootMouseDown: function(event) {
		var mouseIn = false;
		var menu = this.get_rootMenu();
		while(menu != null) {
			if(menu.hitTest(event.stageX,event.stageY) == true) {
				mouseIn = true;
				break;
			}
			menu = menu._currentSubMenu;
		}
		if(mouseIn == false) this.get_rootMenu().hideSubMenus();
	}
	,buildMouseOverFunction: function(index) {
		var _g = this;
		return function(event) {
			_g.mouseOverItem(index);
		};
	}
	,buildMouseClickFunction: function(index) {
		var _g = this;
		return function(event) {
			_g.mouseClickItem(index);
		};
	}
	,mouseClickItem: function(index) {
		if(this.getChildAt(index) == null) return;
		var item;
		item = js.Boot.__cast(this.getChildAt(index) , haxe.ui.toolkit.controls.MenuItem);
		var subMenu = this._subMenus.h[item.__id__];
		if(subMenu == null) {
			this.get_rootMenu().hideSubMenus();
			var e = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.SELECT,item);
			this.get_rootMenu().dispatchEvent(e);
		}
	}
	,mouseOverItem: function(index) {
		if(this.getChildAt(index) == null) return;
		var item;
		item = js.Boot.__cast(this.getChildAt(index) , haxe.ui.toolkit.controls.MenuItem);
		var subMenu = this._subMenus.h[item.__id__];
		if(this._currentItem != null) {
			this._currentItem.set_selected(false);
			this._currentItem = null;
		}
		if(this._currentSubMenu != null && this._currentSubMenu != subMenu) this.hideSubMenus();
		if(subMenu != null) {
			this.showSubMenu(item);
			this._currentItem = item;
		} else {
		}
	}
	,showSubMenu: function(item) {
		item.set_selected(true);
		var subMenu = this._subMenus.h[item.__id__];
		if(subMenu != null && subMenu != this._currentSubMenu) {
			subMenu.set_x(item.get_stageX() + item.get_width());
			subMenu.set_y(item.get_stageY());
			this.get_root().addChild(subMenu);
			this._currentSubMenu = subMenu;
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.Menu);
			if(transition == "slide") {
				subMenu.set_clipHeight(0);
				subMenu.get_sprite().set_alpha(1);
				subMenu.set_visible(true);
				motion.Actuate.tween(subMenu,.1,{ clipHeight : subMenu.get_height()},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					subMenu.clearClip();
				});
			} else if(transition == "fade") {
				subMenu.get_sprite().set_alpha(0);
				subMenu.set_visible(true);
				motion.Actuate.tween(subMenu.get_sprite(),.1,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				});
			} else {
				subMenu.get_sprite().set_alpha(1);
				subMenu.set_visible(true);
			}
			var e = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.OPEN,item);
			e.menu = subMenu;
			this.get_rootMenu().dispatchEvent(e);
		}
	}
	,hideSubMenus: function() {
		var _g = this;
		if(this._currentSubMenu == null) return;
		var ref = this._currentSubMenu;
		ref.hideSubMenus();
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.Menu);
		if(transition == "slide") {
			this._currentSubMenu.get_sprite().set_alpha(1);
			motion.Actuate.tween(ref,.1,{ clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				ref.set_visible(false);
				ref.clearClip();
				_g.get_root().removeChild(ref,false);
				_g._currentSubMenu = null;
				ref.hideSubMenus();
			});
		} else if(transition == "fade") motion.Actuate.tween(ref.get_sprite(),.1,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			ref.set_visible(false);
			_g.get_root().removeChild(ref,false);
			_g._currentSubMenu = null;
			ref.hideSubMenus();
		}); else {
			ref.get_sprite().set_alpha(1);
			ref.set_visible(false);
			this.get_root().removeChild(ref,false);
			this._currentSubMenu = null;
			ref.hideSubMenus();
		}
		if(this._currentItem != null) {
			this._currentItem.set_selected(false);
			this._currentItem = null;
		}
	}
	,get_currentSubMenu: function() {
		return this._currentSubMenu;
	}
	,get_parentMenu: function() {
		return this._parentMenu;
	}
	,get_rootMenu: function() {
		var menu = this;
		while(menu._parentMenu != null) menu = menu._parentMenu;
		return menu;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Menu();
	}
	,__class__: haxe.ui.toolkit.controls.Menu
	,__properties__: $extend(haxe.ui.toolkit.containers.VBox.prototype.__properties__,{get_rootMenu:"get_rootMenu",get_parentMenu:"get_parentMenu",get_currentSubMenu:"get_currentSubMenu"})
});
haxe.ui.toolkit.controls.MenuButton = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_toggle(true);
	this.set_allowSelection(false);
};
$hxClasses["haxe.ui.toolkit.controls.MenuButton"] = haxe.ui.toolkit.controls.MenuButton;
haxe.ui.toolkit.controls.MenuButton.__name__ = ["haxe","ui","toolkit","controls","MenuButton"];
haxe.ui.toolkit.controls.MenuButton._currentMenuButton = null;
haxe.ui.toolkit.controls.MenuButton.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.MenuButton.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.initialize.call(this);
		if(this._menu != null) {
			this._menu.addEventListener(haxe.ui.toolkit.events.MenuEvent.SELECT,$bind(this,this._onMenuSelect));
			this._menu.addEventListener(haxe.ui.toolkit.events.MenuEvent.OPEN,$bind(this,this._onMenuOpen));
		}
	}
	,addChild: function(child) {
		var r = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.MenuItem)) {
			if(this._menu == null) {
				this._menu = new haxe.ui.toolkit.controls.Menu();
				this._menu.set_root(this.get_root());
			}
			this._menu.addChild(child);
		} else if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.Menu)) this._menu = js.Boot.__cast(child , haxe.ui.toolkit.controls.Menu); else r = haxe.ui.toolkit.controls.Button.prototype.addChild.call(this,child);
		return r;
	}
	,_onMouseOver: function(event) {
		haxe.ui.toolkit.controls.Button.prototype._onMouseOver.call(this,event);
		if(haxe.ui.toolkit.controls.MenuButton._currentMenuButton != null && haxe.ui.toolkit.controls.MenuButton._currentMenuButton != this) {
			haxe.ui.toolkit.controls.MenuButton._currentMenuButton.hideMenu();
			this.showMenu();
		}
	}
	,_onMouseClick: function(event) {
		if(this.get_root().indexOfChild(this._menu) == -1) this.showMenu(); else this.hideMenu();
	}
	,set_selected: function(value) {
		this._selected = value;
		if(this._selected == true) this.set_state("down"); else this.set_state("normal");
		return value;
	}
	,_onRootMouseDown: function(event) {
		var mouseIn = false;
		if(this.hitTest(event.stageX,event.stageY) == true) mouseIn = true;
		if(this._menu != null && this._menu.hitTest(event.stageX,event.stageY) == true) mouseIn = true;
		if(this._menu != null && mouseIn == false) {
			var menu = this._menu.get_rootMenu();
			while(menu != null) {
				if(menu.hitTest(event.stageX,event.stageY) == true) {
					mouseIn = true;
					break;
				}
				menu = menu.get_currentSubMenu();
			}
		}
		if(this._menu != null && mouseIn == false) this.hideMenu();
	}
	,_onMenuSelect: function(event) {
		this.hideMenu();
		var e = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.SELECT,event.menuItem);
		this.dispatchEvent(e);
		var uiEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "menuSelect",event.menuItem);
		this.dispatchEvent(uiEvent);
	}
	,_onMenuOpen: function(event) {
		var e = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.OPEN);
		e.menu = event.menu;
		this.dispatchEvent(e);
	}
	,showMenu: function() {
		var _g = this;
		this.set_selected(true);
		this._menu.set_x(this.get_stageX() - this.get_root().get_stageX());
		this._menu.set_y(this.get_stageY() + this.get_height() - this.get_root().get_stageY());
		this.get_root().addChild(this._menu);
		this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
		haxe.ui.toolkit.controls.MenuButton._currentMenuButton = this;
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.Menu);
		if(transition == "slide") {
			this._menu.set_clipHeight(0);
			this._menu.get_sprite().set_alpha(1);
			this._menu.set_visible(true);
			motion.Actuate.tween(this._menu,.1,{ clipHeight : this._menu.get_height()},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				_g._menu.clearClip();
			});
		} else if(transition == "fade") {
			this._menu.get_sprite().set_alpha(0);
			this._menu.set_visible(true);
			motion.Actuate.tween(this._menu.get_sprite(),.1,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			});
		} else {
			this._menu.get_sprite().set_alpha(1);
			this._menu.set_visible(true);
		}
		var event = new haxe.ui.toolkit.events.MenuEvent(haxe.ui.toolkit.events.MenuEvent.OPEN);
		event.menu = this._menu;
		this.dispatchEvent(event);
	}
	,hideMenu: function() {
		var _g = this;
		this.set_selected(false);
		this._menu.hideSubMenus();
		this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.Menu);
		if(transition == "slide") {
			this._menu.get_sprite().set_alpha(1);
			motion.Actuate.tween(this._menu,.1,{ clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				_g._menu.set_visible(false);
				_g._menu.clearClip();
				_g.get_root().removeChild(_g._menu,false);
			});
		} else if(transition == "fade") motion.Actuate.tween(this._menu.get_sprite(),.1,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			_g._menu.set_visible(false);
			_g.get_root().removeChild(_g._menu,false);
		}); else {
			this._menu.get_sprite().set_alpha(1);
			this._menu.set_visible(false);
			this.get_root().removeChild(this._menu,false);
		}
		haxe.ui.toolkit.controls.MenuButton._currentMenuButton = null;
		this.set_selected(false);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.MenuButton();
	}
	,__class__: haxe.ui.toolkit.controls.MenuButton
});
haxe.ui.toolkit.controls.MenuItem = function() {
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_toggle(true);
	this.set_allowSelection(false);
};
$hxClasses["haxe.ui.toolkit.controls.MenuItem"] = haxe.ui.toolkit.controls.MenuItem;
haxe.ui.toolkit.controls.MenuItem.__name__ = ["haxe","ui","toolkit","controls","MenuItem"];
haxe.ui.toolkit.controls.MenuItem.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.MenuItem.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	set_selected: function(value) {
		this._selected = value;
		if(this._selected == true) this.set_state("down"); else this.set_state("normal");
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.MenuItem();
	}
	,__class__: haxe.ui.toolkit.controls.MenuItem
});
haxe.ui.toolkit.controls.MenuSeparator = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
};
$hxClasses["haxe.ui.toolkit.controls.MenuSeparator"] = haxe.ui.toolkit.controls.MenuSeparator;
haxe.ui.toolkit.controls.MenuSeparator.__name__ = ["haxe","ui","toolkit","controls","MenuSeparator"];
haxe.ui.toolkit.controls.MenuSeparator.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.MenuSeparator.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.MenuSeparator.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this._line = new haxe.ui.toolkit.core.Component();
		this._line.set_id("line");
		this._line.set_percentWidth(100);
		this.addChild(this._line);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.MenuSeparator();
	}
	,__class__: haxe.ui.toolkit.controls.MenuSeparator
});
haxe.ui.toolkit.controls.OptionBox = function() {
	haxe.ui.toolkit.core.Component.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	if(haxe.ui.toolkit.controls.OptionBox._groups == null) haxe.ui.toolkit.controls.OptionBox._groups = new haxe.ds.StringMap();
	this._value = new haxe.ui.toolkit.controls.OptionBoxValue();
	this._value.set_interactive(false);
	this._label = new haxe.ui.toolkit.controls.Text();
	this._layout = new haxe.ui.toolkit.layout.HorizontalLayout();
	this._autoSize = true;
};
$hxClasses["haxe.ui.toolkit.controls.OptionBox"] = haxe.ui.toolkit.controls.OptionBox;
haxe.ui.toolkit.controls.OptionBox.__name__ = ["haxe","ui","toolkit","controls","OptionBox"];
haxe.ui.toolkit.controls.OptionBox.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.OptionBox._groups = null;
haxe.ui.toolkit.controls.OptionBox.optionInGroup = function(value,option) {
	var exists = false;
	var arr = haxe.ui.toolkit.controls.OptionBox._groups.get(value);
	if(arr != null) {
		var _g = 0;
		while(_g < arr.length) {
			var test = arr[_g];
			++_g;
			if(test == option) {
				exists = true;
				break;
			}
		}
	}
	return exists;
};
haxe.ui.toolkit.controls.OptionBox.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.OptionBox.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	dispose: function() {
		if(this.get_group() != null) {
			var arr = haxe.ui.toolkit.controls.OptionBox._groups.get(this._group);
			HxOverrides.remove(arr,this);
		}
		haxe.ui.toolkit.core.Component.prototype.dispose.call(this);
	}
	,initialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.Component.prototype.initialize.call(this);
		this._value.set_verticalAlign("center");
		this.addChild(this._value);
		this.addChild(this._label);
		this.addEventListener(openfl.events.MouseEvent.CLICK,function(e) {
			if(_g.get_selected() == false) _g.set_selected(!_g.get_selected());
		});
	}
	,get_text: function() {
		return this._label.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.Component.prototype.set_text.call(this,value);
		this._label.set_text(value);
		return value;
	}
	,get_selected: function() {
		return this._value.get_value() == "selected";
	}
	,set_selected: function(value) {
		if(this.get_selected() == value) return value;
		this._value.set_value(value == true?"selected":"unselected");
		if(this._group != null && value == true) {
			var arr = haxe.ui.toolkit.controls.OptionBox._groups.get(this._group);
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var option = arr[_g];
					++_g;
					if(option != this) option.set_selected(false);
				}
			}
		}
		var event = new openfl.events.Event(openfl.events.Event.CHANGE);
		this.dispatchEvent(event);
		return value;
	}
	,get_group: function() {
		return this._group;
	}
	,set_group: function(value) {
		if(value != null) {
			var arr = haxe.ui.toolkit.controls.OptionBox._groups.get(value);
			if(arr != null) HxOverrides.remove(arr,this);
		}
		this._group = value;
		var arr1 = haxe.ui.toolkit.controls.OptionBox._groups.get(value);
		if(arr1 == null) arr1 = new Array();
		if(haxe.ui.toolkit.controls.OptionBox.optionInGroup(value,this) == false) arr1.push(this);
		haxe.ui.toolkit.controls.OptionBox._groups.set(value,arr1);
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.Component.prototype.applyStyle.call(this);
		if(this._label != null) {
			var labelStyle = new haxe.ui.toolkit.style.Style();
			if(this._baseStyle != null) {
				labelStyle.set_fontName(this._baseStyle.get_fontName());
				labelStyle.set_fontSize(this._baseStyle.get_fontSize());
				labelStyle.set_fontEmbedded(this._baseStyle.get_fontEmbedded());
				labelStyle.set_color(this._baseStyle.get_color());
			}
			this._label.set_baseStyle(labelStyle);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		c.set_selected(this.get_selected());
		c.set_group(this.get_group());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.OptionBox();
	}
	,__class__: haxe.ui.toolkit.controls.OptionBox
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{set_group:"set_group",get_group:"get_group",set_selected:"set_selected",get_selected:"get_selected"})
});
haxe.ui.toolkit.controls.OptionBoxValue = function() {
	haxe.ui.toolkit.controls.Value.call(this);
	this._value = "unselected";
	this.addValue("selected");
	this.addValue("unselected");
};
$hxClasses["haxe.ui.toolkit.controls.OptionBoxValue"] = haxe.ui.toolkit.controls.OptionBoxValue;
haxe.ui.toolkit.controls.OptionBoxValue.__name__ = ["haxe","ui","toolkit","controls","OptionBoxValue"];
haxe.ui.toolkit.controls.OptionBoxValue.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.OptionBoxValue.__super__ = haxe.ui.toolkit.controls.Value;
haxe.ui.toolkit.controls.OptionBoxValue.prototype = $extend(haxe.ui.toolkit.controls.Value.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Value.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.OptionBoxValue();
	}
	,__class__: haxe.ui.toolkit.controls.OptionBoxValue
});
haxe.ui.toolkit.controls.HProgressLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.HProgressLayout"] = haxe.ui.toolkit.controls.HProgressLayout;
haxe.ui.toolkit.controls.HProgressLayout.__name__ = ["haxe","ui","toolkit","controls","HProgressLayout"];
haxe.ui.toolkit.controls.HProgressLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.HProgressLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		var background = this.get_container().findChild("background",haxe.ui.toolkit.core.Component);
		var value = null;
		if(background != null) value = background.findChild("value");
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		if(value != null) {
			var ucx = this.get_usableWidth();
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) ucx -= thumb.get_width();
			value.set_percentWidth(-1);
			var cx = (scroll.get_pos() - scroll.get_min()) / (scroll.get_max() - scroll.get_min()) * ucx;
			if(cx < 0) cx = 0; else if(cx > ucx) cx = ucx;
			if(thumb != null) cx += thumb.get_width() / 2;
			if(cx == 0) value.set_visible(false); else {
				value.set_width(cx);
				value.set_visible(true);
			}
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var background = this.get_container().findChild("background",haxe.ui.toolkit.core.Component);
		var value = null;
		if(background != null) {
			background.set_y(this.get_container().get_height() / 2 - background.get_height() / 2);
			value = background.findChild("value");
		}
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		if(value != null) {
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) {
				var xpos = this.get_padding().get_left() + value.get_x() + value.get_width() - thumb.get_width() / 2;
				thumb.set_x(xpos | 0);
			}
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.HProgressLayout();
	}
	,__class__: haxe.ui.toolkit.controls.HProgressLayout
});
haxe.ui.toolkit.controls.VProgressLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.VProgressLayout"] = haxe.ui.toolkit.controls.VProgressLayout;
haxe.ui.toolkit.controls.VProgressLayout.__name__ = ["haxe","ui","toolkit","controls","VProgressLayout"];
haxe.ui.toolkit.controls.VProgressLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.VProgressLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		var background = this.get_container().findChild("background",haxe.ui.toolkit.core.Component);
		var value = null;
		if(background != null) value = background.findChild("value");
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		if(value != null) {
			var ucy = this.get_usableHeight();
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) ucy -= thumb.get_height();
			value.set_percentHeight(-1);
			var cy = (scroll.get_pos() - scroll.get_min()) / (scroll.get_max() - scroll.get_min()) * ucy;
			if(cy < 0) cy = 0; else if(cy > ucy) cy = ucy;
			if(thumb != null) cy += thumb.get_height() / 2;
			if(cy == 0) value.set_visible(false); else {
				value.set_height(cy);
				value.set_visible(true);
			}
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var background = this.get_container().findChild("background",haxe.ui.toolkit.core.Component);
		var value = null;
		if(background != null) {
			background.set_x(this.get_container().get_width() / 2 - background.get_width() / 2);
			value = background.findChild("value");
		}
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		if(value != null) {
			var ucy = this.get_usableHeight();
			value.set_y(ucy - value.get_height() - background.get_layout().get_padding().get_bottom());
			var thumb = this.get_container().findChild("thumb");
			if(thumb != null) {
				var ypos = this.get_padding().get_top() + value.get_y() - thumb.get_height() / 2;
				thumb.set_y(ypos | 0);
			}
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VProgressLayout();
	}
	,__class__: haxe.ui.toolkit.controls.VProgressLayout
});
haxe.ui.toolkit.controls.Spacer = function() {
	haxe.ui.toolkit.core.Component.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.Spacer"] = haxe.ui.toolkit.controls.Spacer;
haxe.ui.toolkit.controls.Spacer.__name__ = ["haxe","ui","toolkit","controls","Spacer"];
haxe.ui.toolkit.controls.Spacer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.Spacer.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.controls.Spacer.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.Spacer();
	}
	,__class__: haxe.ui.toolkit.controls.Spacer
});
haxe.ui.toolkit.controls.TabBar = function() {
	this._selectedIndex = -1;
	haxe.ui.toolkit.containers.ScrollView.call(this);
	this.set_autoSize(false);
	this._scrollSensitivity = 5;
	this._showHScroll = this._showVScroll = false;
	this._content = new haxe.ui.toolkit.containers.HBox();
	this._content.set_id("content");
	this._content.set_percentHeight(100);
	this._content.addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onMouseWheel));
	this.addChild(this._content);
};
$hxClasses["haxe.ui.toolkit.controls.TabBar"] = haxe.ui.toolkit.controls.TabBar;
haxe.ui.toolkit.controls.TabBar.__name__ = ["haxe","ui","toolkit","controls","TabBar"];
haxe.ui.toolkit.controls.TabBar.__super__ = haxe.ui.toolkit.containers.ScrollView;
haxe.ui.toolkit.controls.TabBar.prototype = $extend(haxe.ui.toolkit.containers.ScrollView.prototype,{
	initialize: function() {
		haxe.ui.toolkit.containers.ScrollView.prototype.initialize.call(this);
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(value != this._selectedIndex) {
			var _g1 = 0;
			var _g = this._content.get_children().length;
			while(_g1 < _g) {
				var n = _g1++;
				var button;
				button = js.Boot.__cast(this._content.get_children()[n] , haxe.ui.toolkit.controls.Button);
				if(n == value) button.set_selected(true); else button.set_selected(false);
			}
			this._selectedIndex = value;
			var event = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(event);
		}
		return value;
	}
	,get_numTabs: function() {
		return this._content.get_numChildren();
	}
	,addTab: function(text) {
		var _g = this;
		var button = new haxe.ui.toolkit.controls.Button();
		button.set_text(text);
		button.set_toggle(true);
		button.set_id("tabButton");
		button.set_verticalAlign("bottom");
		button.set_allowSelection(false);
		this._content.addChild(button);
		button.set_selected(this._content.get_children().length - 1 == this._selectedIndex);
		button.addEventListener("haxeui_" + "click",$bind(this,this.tabButtonClick),false,1);
		button.addEventListener("haxeui_" + "glyphClick",$bind(this,this.tabGlyphClick));
		button.addEventListener(openfl.events.Event.ADDED_TO_STAGE,function(e) {
			var cy = _g.get_height();
			var newCY = button.get_height() + _g.get_baseStyle().get_paddingTop() + _g.get_baseStyle().get_paddingBottom();
			if(newCY > cy) _g.set_height(newCY);
			button.removeEventListenerType(openfl.events.Event.ADDED_TO_STAGE);
		});
		return button;
	}
	,removeTab: function(index) {
		this._content.removeChildAt(index);
		var newIndex = this.get_selectedIndex();
		if(newIndex > this._content.get_numChildren() - 1) newIndex = this._content.get_numChildren() - 1;
		this.set_selectedIndex(-1);
		this.set_selectedIndex(newIndex);
	}
	,getTabButton: function(index) {
		return this._content.getChildAt(index);
	}
	,removeAllTabs: function() {
		this._content.removeAllChildren();
		this._selectedIndex = -1;
	}
	,setTabText: function(index,text) {
		var button;
		button = js.Boot.__cast(this._content.getChildAt(index) , haxe.ui.toolkit.controls.Button);
		button.set_text(text);
	}
	,tabButtonClick: function(event) {
		this.set_selectedIndex(this._content.indexOfChild(event.displayObject));
	}
	,tabGlyphClick: function(event) {
		var newEvent = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "glyphClick");
		newEvent.data = this._content.indexOfChild(event.displayObject);
		this.dispatchEvent(newEvent);
	}
	,_onMouseWheel: function(event) {
		if(this._hscroll != null && this._content.get_width() > this.get_layout().get_usableWidth()) {
			if(event.delta != 0) {
				if(event.delta < 0) this._hscroll.incrementValue(); else if(event.delta > 0) this._hscroll.deincrementValue();
			}
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.ScrollView.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.TabBar();
	}
	,__class__: haxe.ui.toolkit.controls.TabBar
	,__properties__: $extend(haxe.ui.toolkit.containers.ScrollView.prototype.__properties__,{get_numTabs:"get_numTabs",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.controls.TextInput = function() {
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.addStates(["normal","disabled"]);
	this._layout = new haxe.ui.toolkit.controls.TextInputLayout();
	this._textDisplay = new haxe.ui.toolkit.text.TextDisplay();
	this._textDisplay.set_interactive(true);
	this._textDisplay.set_autoSize(false);
	this._textDisplay.set_text("");
};
$hxClasses["haxe.ui.toolkit.controls.TextInput"] = haxe.ui.toolkit.controls.TextInput;
haxe.ui.toolkit.controls.TextInput.__name__ = ["haxe","ui","toolkit","controls","TextInput"];
haxe.ui.toolkit.controls.TextInput.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.TextInput.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.controls.TextInput.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.preInitialize.call(this);
	}
	,initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.get_sprite().addChild(this._textDisplay.get_display());
		if(this.get_multiline() == true) {
			this._textDisplay.get_display().set_width(this._layout.get_innerWidth());
			this._textDisplay.get_display().set_height(this._layout.get_innerHeight());
		}
		this._textDisplay.get_display().addEventListener(openfl.events.Event.CHANGE,$bind(this,this._onTextChange));
		this._textDisplay.get_display().addEventListener(openfl.events.Event.SCROLL,$bind(this,this._onTextScroll));
		this.checkScrolls();
		if(this._textPlaceHolder != null && this.contains(this._textPlaceHolder) == false) this.addChild(this._textPlaceHolder);
		if(this._textPlaceHolder != null) {
			if(this.get_text().length > 0) this._textPlaceHolder.set_visible(false);
			this._textPlaceHolder.set_textAlign(this._textDisplay.get_textAlign());
			this.setChildIndex(this._textPlaceHolder,0);
		}
	}
	,dispose: function() {
		this._textDisplay.get_display().removeEventListener(openfl.events.Event.CHANGE,$bind(this,this._onTextChange));
		this._textDisplay.get_display().removeEventListener(openfl.events.Event.SCROLL,$bind(this,this._onTextScroll));
		this.get_sprite().removeChild(this._textDisplay.get_display());
		if(this._textPlaceHolder != null && this.contains(this._textPlaceHolder)) this.removeChild(this._textPlaceHolder);
		haxe.ui.toolkit.core.StateComponent.prototype.dispose.call(this);
	}
	,invalidate: function(type,recursive) {
		if(recursive == null) recursive = false;
		if(type == null) type = 1118481;
		if(!this._ready || this._invalidating) return;
		haxe.ui.toolkit.core.StateComponent.prototype.invalidate.call(this,type,recursive);
		this._invalidating = true;
		if((type & 256) == 256) {
			this.checkScrolls();
			this._textDisplay.get_display().set_width(this.get_layout().get_innerWidth());
			this._textDisplay.get_display().set_height(this.get_layout().get_innerHeight());
		}
		this._invalidating = false;
	}
	,set_disabled: function(value) {
		haxe.ui.toolkit.core.StateComponent.prototype.set_disabled.call(this,value);
		if(value == true) this._textDisplay.set_interactive(false); else this._textDisplay.set_interactive(true);
		return value;
	}
	,_onTextChange: function(event) {
		this.checkScrolls();
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_visible(this.get_text().length == 0);
	}
	,_onTextScroll: function(event) {
		this.checkScrolls();
	}
	,_onVScrollChange: function(event) {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
	}
	,_onHScrollChange: function(event) {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
	}
	,get_text: function() {
		return this._textDisplay.get_text();
	}
	,set_text: function(value) {
		value = haxe.ui.toolkit.core.StateComponent.prototype.set_text.call(this,value);
		this._textDisplay.set_text(value);
		return value;
	}
	,applyStyle: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.applyStyle.call(this);
		if(this._textDisplay != null) this._textDisplay.set_style(this._baseStyle);
	}
	,get_multiline: function() {
		return this._textDisplay.get_multiline();
	}
	,set_multiline: function(value) {
		this._textDisplay.set_wrapLines(value);
		this._textDisplay.set_multiline(value);
		return value;
	}
	,get_selectionBeginIndex: function() {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
		var n = 0;
		return n;
	}
	,get_selectionEndIndex: function() {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
		var n = 0;
		return n;
	}
	,get_selectedTextFormat: function() {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
		return tf.getTextFormat(this.get_selectionBeginIndex() - 1,this.get_selectionEndIndex());
	}
	,get_wrapLines: function() {
		return this._textDisplay.get_wrapLines();
	}
	,set_wrapLines: function(value) {
		this._textDisplay.set_wrapLines(value);
		return value;
	}
	,get_displayAsPassword: function() {
		return this._textDisplay.get_displayAsPassword();
	}
	,set_displayAsPassword: function(value) {
		this._textDisplay.set_displayAsPassword(value);
		return value;
	}
	,get_placeholderText: function() {
		if(this._textPlaceHolder == null) return null;
		return this._textPlaceHolder.get_text();
	}
	,set_placeholderText: function(value) {
		if(this._textPlaceHolder == null) {
			this._textPlaceHolder = new haxe.ui.toolkit.controls.Text();
			this._textPlaceHolder.set_autoSize(false);
			this._textPlaceHolder.set_id("placeholder");
		}
		this._textPlaceHolder.set_text(value);
		if(this._ready && this.contains(this._textPlaceHolder) == false && value != null) this.addChild(this._textPlaceHolder);
		if(value == null) {
			if(this.contains(this._textPlaceHolder)) this.removeChild(this._textPlaceHolder);
			this._textPlaceHolder = null;
		}
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_visible(this.get_text().length == 0);
		return value;
	}
	,get_textAlign: function() {
		if(this._textDisplay == null) return null;
		return this._textDisplay.get_textAlign();
	}
	,set_textAlign: function(value) {
		if(this._textDisplay != null) this._textDisplay.set_textAlign(value);
		if(this._textPlaceHolder != null) this._textPlaceHolder.set_textAlign(value);
		return value;
	}
	,get_maxChars: function() {
		return this._textDisplay.get_maxChars();
	}
	,set_maxChars: function(value) {
		return this._textDisplay.set_maxChars(value);
	}
	,get_restrictChars: function() {
		return this._textDisplay.get_restrictChars();
	}
	,set_restrictChars: function(value) {
		return this._textDisplay.set_restrictChars(value);
	}
	,get_vscrollPos: function() {
		if(this._vscroll != null) return this._vscroll.get_pos();
		return 0;
	}
	,set_vscrollPos: function(value) {
		if(this._vscroll != null) this._vscroll.set_pos(value);
		return value;
	}
	,get_vscrollMin: function() {
		if(this._vscroll != null) return this._vscroll.get_min();
		return 0;
	}
	,get_vscrollMax: function() {
		if(this._vscroll != null) return this._vscroll.get_max();
		return 0;
	}
	,replaceSelectedText: function(s) {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
	}
	,focus: function() {
		var tf;
		tf = js.Boot.__cast(this._textDisplay.get_display() , openfl.text.TextField);
		tf.stage.set_focus(tf);
	}
	,checkScrolls: function() {
		if(this.get_multiline() == false || this.get_ready() == false) return;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		c.set_multiline(this.get_multiline());
		c.set_wrapLines(this.get_wrapLines());
		c.set_displayAsPassword(this.get_displayAsPassword());
		c.set_placeholderText(this.get_placeholderText());
		c.set_textAlign(this.get_textAlign());
		c.set_maxChars(this.get_maxChars());
		c.set_restrictChars(this.get_restrictChars());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.TextInput();
	}
	,__class__: haxe.ui.toolkit.controls.TextInput
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{get_vscrollMax:"get_vscrollMax",get_vscrollMin:"get_vscrollMin",set_vscrollPos:"set_vscrollPos",get_vscrollPos:"get_vscrollPos",set_restrictChars:"set_restrictChars",get_restrictChars:"get_restrictChars",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_placeholderText:"set_placeholderText",get_placeholderText:"get_placeholderText",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",get_selectedTextFormat:"get_selectedTextFormat",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_multiline:"set_multiline",get_multiline:"get_multiline"})
});
haxe.ui.toolkit.controls.TextInputLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.TextInputLayout"] = haxe.ui.toolkit.controls.TextInputLayout;
haxe.ui.toolkit.controls.TextInputLayout.__name__ = ["haxe","ui","toolkit","controls","TextInputLayout"];
haxe.ui.toolkit.controls.TextInputLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.TextInputLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		if(this.get_container().get_sprite().get_numChildren() > 0) {
			var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
			var text = this.findTextField();
			if(text != null) {
				text.set_x(this.get_padding().get_left());
				if(text.multiline == true) {
					text.set_y(this.get_padding().get_top());
					text.set_height(this.get_usableHeight());
				} else {
					text.set_height(text.get_defaultTextFormat().size + 8);
					text.set_y(this.get_container().get_height() / 2 - text.get_height() / 2);
				}
				text.set_width(this.get_usableWidth());
				var placeholder = this.get_container().findChild("placeholder");
				if(placeholder != null) {
					placeholder.set_width(text.get_width());
					placeholder.set_height(text.get_height());
				}
			}
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
		if(vscroll != null) vscroll.set_x(this.get_container().get_width() - vscroll.get_width() - this.get_padding().get_right());
		var hscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.HScroll);
		if(hscroll != null) hscroll.set_y(this.get_container().get_height() - hscroll.get_height() - this.get_padding().get_bottom());
		var text = this.findTextField();
		var placeholder = this.get_container().findChild("placeholder");
		if(text != null && placeholder != null) {
			placeholder.set_x(text.get_x());
			placeholder.set_y(text.get_y() + 1);
		}
	}
	,get_usableWidth: function() {
		var ucx = this.get_innerWidth();
		var vscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.VScroll);
		if(vscroll != null && vscroll.get_visible() == true) ucx -= vscroll.get_width() + this.get_spacingX();
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var hscroll = this.get_container().findChildAs(haxe.ui.toolkit.controls.HScroll);
		if(hscroll != null && hscroll.get_visible() == true) ucy -= hscroll.get_height() - this.get_spacingY();
		return ucy;
	}
	,findTextField: function() {
		var tf = null;
		var _g1 = 0;
		var _g = this.get_container().get_sprite().get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			var child = this.get_container().get_sprite().getChildAt(i);
			if(js.Boot.__instanceof(child,openfl.text.TextField)) {
				tf = js.Boot.__cast(child , openfl.text.TextField);
				break;
			}
		}
		return tf;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.TextInputLayout();
	}
	,__class__: haxe.ui.toolkit.controls.TextInputLayout
});
haxe.ui.toolkit.controls.VProgress = function() {
	haxe.ui.toolkit.controls.Progress.call(this);
	this.set_direction("vertical");
};
$hxClasses["haxe.ui.toolkit.controls.VProgress"] = haxe.ui.toolkit.controls.VProgress;
haxe.ui.toolkit.controls.VProgress.__name__ = ["haxe","ui","toolkit","controls","VProgress"];
haxe.ui.toolkit.controls.VProgress.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.VProgress.__super__ = haxe.ui.toolkit.controls.Progress;
haxe.ui.toolkit.controls.VProgress.prototype = $extend(haxe.ui.toolkit.controls.Progress.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.controls.Progress.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VProgress();
	}
	,__class__: haxe.ui.toolkit.controls.VProgress
});
haxe.ui.toolkit.controls.VScroll = function() {
	this._hasButtons = true;
	this._scrollDirection = 0;
	this._mouseDownOffset = -1;
	this._incrementSize = 20;
	this._pageSize = 0;
	this._max = 100;
	this._min = 0;
	this._pos = 0;
	haxe.ui.toolkit.controls.Scroll.call(this);
	this._layout = new haxe.ui.toolkit.controls.VScrollLayout();
};
$hxClasses["haxe.ui.toolkit.controls.VScroll"] = haxe.ui.toolkit.controls.VScroll;
haxe.ui.toolkit.controls.VScroll.__name__ = ["haxe","ui","toolkit","controls","VScroll"];
haxe.ui.toolkit.controls.VScroll.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IScrollable];
haxe.ui.toolkit.controls.VScroll.__super__ = haxe.ui.toolkit.controls.Scroll;
haxe.ui.toolkit.controls.VScroll.prototype = $extend(haxe.ui.toolkit.controls.Scroll.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.controls.Scroll.prototype.preInitialize.call(this);
		if(this._baseStyle != null) this._hasButtons = this._baseStyle.get_hasButtons();
	}
	,initialize: function() {
		haxe.ui.toolkit.controls.Scroll.prototype.initialize.call(this);
		if(this._hasButtons == true) {
			this._deincButton = new haxe.ui.toolkit.controls.Button();
			this._deincButton.set_autoSize(false);
			this._deincButton.set_iconPosition("center");
			this._deincButton.set_percentWidth(100);
			this._deincButton.set_height(this.get_layout().get_innerWidth());
			this._deincButton.set_id("deinc");
			this._deincButton.set_styleName("up");
			this._deincButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onDeinc));
			this.addChild(this._deincButton);
			this._incButton = new haxe.ui.toolkit.controls.Button();
			this._incButton.set_autoSize(false);
			this._incButton.set_iconPosition("center");
			this._incButton.set_percentWidth(100);
			this._incButton.set_height(this.get_layout().get_innerWidth());
			this._incButton.set_id("inc");
			this._incButton.set_styleName("down");
			this._incButton.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onInc));
			this.addChild(this._incButton);
		}
		this._thumb = new haxe.ui.toolkit.controls.Button();
		this._thumb.set_iconPosition("center");
		this._thumb.set_autoSize(false);
		this._thumb.set_percentWidth(100);
		this._thumb.set_height(50);
		this._thumb.set_id("thumb");
		this._thumb.set_styleName("thumb");
		this._thumb.set_remainPressed(true);
		this._thumb.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onThumbMouseDown));
		this.addChild(this._thumb);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onMouseDown));
	}
	,_onThumbMouseDown: function(event) {
		var ptStage = new openfl.geom.Point(event.stageX,event.stageY);
		this._mouseDownOffset = ptStage.y - this._thumb.get_y();
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScreenMouseMove: function(event) {
		var ypos = event.stageY - this._mouseDownOffset;
		var minY = 0;
		if(this._deincButton != null) minY = this._deincButton.get_height() + this.get_layout().get_spacingY();
		var maxY = this.get_layout().get_usableHeight() - this._thumb.get_height();
		if(this._deincButton != null) maxY += this._deincButton.get_height() + this.get_layout().get_spacingY();
		if(ypos < minY) ypos = minY; else if(ypos > maxY) ypos = maxY;
		var ucy = this.get_layout().get_usableHeight();
		ucy -= this._thumb.get_height();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = ypos - minY;
		var newValue = this.get_min() + v / ucy * m;
		this.set_pos(newValue | 0);
	}
	,_onScreenMouseUp: function(event) {
		this._mouseDownOffset = -1;
		if(this._scrollTimer != null) this._scrollTimer.stop();
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().removeEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,_onDeinc: function(event) {
		this.deincrementValue();
		this._scrollDirection = 0;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl.utils.Timer(50,1);
			this._scrollTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onInc: function(event) {
		this.incrementValue();
		this._scrollDirection = 1;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		if(this._scrollTimer == null) {
			this._scrollTimer = new openfl.utils.Timer(50,1);
			this._scrollTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onScrollTimerComplete));
		}
		this._scrollTimer.reset();
		this._scrollTimer.start();
		event.stopImmediatePropagation();
		event.stopPropagation();
	}
	,_onScrollTimerComplete: function(event) {
		if(this._scrollTimer != null) {
			if(this._scrollDirection == 1) this.incrementValue(); else if(this._scrollDirection == 0) this.deincrementValue();
			this._scrollTimer.reset();
			this._scrollTimer.start();
		}
	}
	,_onMouseDown: function(event) {
		if(event.localY > this._thumb.get_y()) {
			var _g = this;
			_g.set_pos(_g.get_pos() + this.get_pageSize());
		} else {
			var _g1 = this;
			_g1.set_pos(_g1.get_pos() - this.get_pageSize());
		}
	}
	,get_pos: function() {
		return this._pos;
	}
	,set_pos: function(value) {
		if(value < this._min) value = this._min;
		if(value > this._max) value = this._max;
		if(value != this._pos) {
			this._pos = value;
			var changeEvent = new openfl.events.Event(openfl.events.Event.CHANGE);
			this.dispatchEvent(changeEvent);
			this.invalidate(1);
		}
		return value;
	}
	,get_min: function() {
		return this._min;
	}
	,set_min: function(value) {
		if(value != this._min) {
			this._min = value;
			if(this._pos < this._min) this._pos = this._min;
			this.invalidate(1);
		}
		return value;
	}
	,get_max: function() {
		return this._max;
	}
	,set_max: function(value) {
		if(value != this._max) {
			this._max = value;
			if(this._pos > this._max) this._pos = this._max;
			this.invalidate(1);
		}
		return value;
	}
	,get_pageSize: function() {
		return this._pageSize;
	}
	,set_pageSize: function(value) {
		if(value != this._pageSize) {
			this._pageSize = value;
			this.invalidate(1);
		}
		return value;
	}
	,get_incrementSize: function() {
		return this._incrementSize;
	}
	,set_incrementSize: function(value) {
		this._incrementSize = value;
		return value;
	}
	,deincrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() - this._incrementSize);
	}
	,incrementValue: function() {
		var _g = this;
		_g.set_pos(_g.get_pos() + this._incrementSize);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Scroll.prototype.clone.call(this);
		c.set_pos(this.get_pos());
		c.set_min(this.get_min());
		c.set_max(this.get_max());
		c.set_pageSize(this.get_pageSize());
		c.set_incrementSize(this.get_incrementSize());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VScroll();
	}
	,__class__: haxe.ui.toolkit.controls.VScroll
	,__properties__: $extend(haxe.ui.toolkit.controls.Scroll.prototype.__properties__,{set_incrementSize:"set_incrementSize",get_incrementSize:"get_incrementSize",set_pageSize:"set_pageSize",get_pageSize:"get_pageSize",set_max:"set_max",get_max:"get_max",set_min:"set_min",get_min:"get_min",set_pos:"set_pos",get_pos:"get_pos"})
});
haxe.ui.toolkit.controls.VScrollLayout = function() {
	haxe.ui.toolkit.layout.DefaultLayout.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.VScrollLayout"] = haxe.ui.toolkit.controls.VScrollLayout;
haxe.ui.toolkit.controls.VScrollLayout.__name__ = ["haxe","ui","toolkit","controls","VScrollLayout"];
haxe.ui.toolkit.controls.VScrollLayout.__super__ = haxe.ui.toolkit.layout.DefaultLayout;
haxe.ui.toolkit.controls.VScrollLayout.prototype = $extend(haxe.ui.toolkit.layout.DefaultLayout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.resizeChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		if(deinc != null) deinc.set_height(this.get_innerWidth());
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_height(this.get_innerWidth());
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var ucy = this.get_usableHeight();
			var thumbHeight = scroll.get_pageSize() / m * ucy;
			if(thumbHeight < this.get_innerWidth()) thumbHeight = this.get_innerWidth(); else if(thumbHeight > ucy) thumbHeight = ucy;
			if(thumbHeight > 0 && Math.isNaN(thumbHeight) == false) thumb.set_height(thumbHeight);
		}
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.DefaultLayout.prototype.repositionChildren.call(this);
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(inc != null) inc.set_y(this.get_container().get_height() - inc.get_height() - this.get_padding().get_bottom());
		var scroll;
		scroll = js.Boot.__cast(this.get_container() , haxe.ui.toolkit.core.interfaces.IScrollable);
		var thumb = this.get_container().findChild("thumb");
		if(thumb != null) {
			var m = scroll.get_max() - scroll.get_min();
			var u = this.get_usableHeight();
			u -= thumb.get_height();
			var y = (scroll.get_pos() - scroll.get_min()) / m * u;
			y += this.get_padding().get_top();
			if(deinc != null) y += deinc.get_height() + this.get_spacingY();
			thumb.set_y(y);
		}
	}
	,get_usableHeight: function() {
		var ucy = this.get_innerHeight();
		var deinc = this.get_container().findChild("deinc");
		var inc = this.get_container().findChild("inc");
		if(deinc != null) ucy -= deinc.get_height() + this.get_spacingY();
		if(inc != null) ucy -= inc.get_height() + this.get_spacingY();
		return ucy;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.DefaultLayout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VScrollLayout();
	}
	,__class__: haxe.ui.toolkit.controls.VScrollLayout
});
haxe.ui.toolkit.controls.VSlider = function() {
	haxe.ui.toolkit.controls.Slider.call(this);
	this.set_direction("vertical");
};
$hxClasses["haxe.ui.toolkit.controls.VSlider"] = haxe.ui.toolkit.controls.VSlider;
haxe.ui.toolkit.controls.VSlider.__name__ = ["haxe","ui","toolkit","controls","VSlider"];
haxe.ui.toolkit.controls.VSlider.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.controls.VSlider.__super__ = haxe.ui.toolkit.controls.Slider;
haxe.ui.toolkit.controls.VSlider.prototype = $extend(haxe.ui.toolkit.controls.Slider.prototype,{
	_onMouseDown: function(event) {
		this.startTracking(event.stageY - this._thumb.get_stageY());
	}
	,_onScreenMouseMove: function(event) {
		var ypos = event.stageY - this.get_stageY() - this._mouseDownOffset;
		this.set_pos(Std["int"](this.calcPosFromCoord(ypos)));
	}
	,_onBackgroundMouseDown: function(event) {
		if(this._thumb.hitTest(event.stageX,event.stageY) == false) {
			var ypos = event.stageY - this.get_stageY();
			ypos -= this._thumb.get_height() / 2;
			this.set_pos(Std["int"](this.calcPosFromCoord(ypos)));
			this._thumb.set_state("down");
			this.startTracking(this._thumb.get_height() / 2);
		}
	}
	,startTracking: function(offset) {
		this._mouseDownOffset = offset;
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_UP,$bind(this,this._onScreenMouseUp));
		haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,$bind(this,this._onScreenMouseMove));
	}
	,calcPosFromCoord: function(ypos) {
		var minY = 0;
		var maxY = this.get_layout().get_usableHeight() - this._thumb.get_height();
		if(ypos < minY) ypos = minY; else if(ypos > maxY) ypos = maxY;
		var ucy = this.get_layout().get_usableHeight();
		ucy -= this._thumb.get_height();
		var m = Std["int"](this.get_max() - this.get_min());
		var v = ypos - minY;
		var newValue = this.get_max() - v / ucy * m;
		return newValue;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Slider.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.VSlider();
	}
	,__class__: haxe.ui.toolkit.controls.VSlider
});
haxe.ui.toolkit.controls.popups = {};
haxe.ui.toolkit.controls.popups.PopupContent = function() {
	haxe.ui.toolkit.containers.VBox.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.popups.PopupContent"] = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.PopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","PopupContent"];
haxe.ui.toolkit.controls.popups.PopupContent.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.controls.popups.PopupContent.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	onButtonClicked: function(button) {
		return true;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.PopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.PopupContent
});
haxe.ui.toolkit.controls.popups.SimplePopupContent = function(text) {
	if(text == null) text = "";
	haxe.ui.toolkit.controls.popups.PopupContent.call(this);
	this._autoSize = true;
	this._textControl = new haxe.ui.toolkit.controls.Text();
	this._textControl.set_multiline(true);
	this._textControl.set_wrapLines(true);
	this._textControl.set_percentWidth(100);
	this._textControl.set_text(text);
	this._textControl.set_autoSize(true);
};
$hxClasses["haxe.ui.toolkit.controls.popups.SimplePopupContent"] = haxe.ui.toolkit.controls.popups.SimplePopupContent;
haxe.ui.toolkit.controls.popups.SimplePopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","SimplePopupContent"];
haxe.ui.toolkit.controls.popups.SimplePopupContent.__super__ = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.SimplePopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.popups.PopupContent.prototype.initialize.call(this);
		this.addChild(this._textControl);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.SimplePopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.SimplePopupContent
});
haxe.ui.toolkit.controls.popups.BusyPopupContent = function(text) {
	if(text == null) text = "";
	haxe.ui.toolkit.controls.popups.SimplePopupContent.call(this,text);
};
$hxClasses["haxe.ui.toolkit.controls.popups.BusyPopupContent"] = haxe.ui.toolkit.controls.popups.BusyPopupContent;
haxe.ui.toolkit.controls.popups.BusyPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","BusyPopupContent"];
haxe.ui.toolkit.controls.popups.BusyPopupContent.__super__ = haxe.ui.toolkit.controls.popups.SimplePopupContent;
haxe.ui.toolkit.controls.popups.BusyPopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.SimplePopupContent.prototype,{
	initialize: function() {
		this.addChild(this._textControl);
		this.set_height(this._textControl.get_height() + 15);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.SimplePopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.BusyPopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.BusyPopupContent
});
haxe.ui.toolkit.controls.popups.CalendarPopupContent = function() {
	haxe.ui.toolkit.controls.popups.PopupContent.call(this);
	this._cal = new haxe.ui.toolkit.containers.CalendarView();
	this._cal.set_percentWidth(100);
};
$hxClasses["haxe.ui.toolkit.controls.popups.CalendarPopupContent"] = haxe.ui.toolkit.controls.popups.CalendarPopupContent;
haxe.ui.toolkit.controls.popups.CalendarPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","CalendarPopupContent"];
haxe.ui.toolkit.controls.popups.CalendarPopupContent.__super__ = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.CalendarPopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.popups.PopupContent.prototype.initialize.call(this);
		this.addChild(this._cal);
		this.set_height(this._cal.get_height());
	}
	,get_selectedDate: function() {
		return this._cal.get_selectedDate();
	}
	,set_selectedDate: function(value) {
		this._cal.set_selectedDate(value);
		return value;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.CalendarPopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.CalendarPopupContent
	,__properties__: $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype.__properties__,{set_selectedDate:"set_selectedDate",get_selectedDate:"get_selectedDate"})
});
haxe.ui.toolkit.controls.popups.CustomPopupContent = function(display) {
	haxe.ui.toolkit.controls.popups.PopupContent.call(this);
	this._display = display;
};
$hxClasses["haxe.ui.toolkit.controls.popups.CustomPopupContent"] = haxe.ui.toolkit.controls.popups.CustomPopupContent;
haxe.ui.toolkit.controls.popups.CustomPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","CustomPopupContent"];
haxe.ui.toolkit.controls.popups.CustomPopupContent.__super__ = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.CustomPopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.popups.PopupContent.prototype.initialize.call(this);
		this.addChild(this._display);
		this.set_height(this._display.get_height());
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.CustomPopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.CustomPopupContent
});
haxe.ui.toolkit.controls.popups.ListPopupContent = function(dataSource,selectedIndex,fn) {
	if(selectedIndex == null) selectedIndex = -1;
	this.DELAY = 0;
	this._selectedIndex = -1;
	this._maxListSize = 4;
	haxe.ui.toolkit.controls.popups.PopupContent.call(this);
	this._selectedIndex = selectedIndex;
	this._fn = fn;
	this._list = new haxe.ui.toolkit.containers.ListView();
	this._list.set_percentWidth(100);
	this._list.set_dataSource(dataSource);
};
$hxClasses["haxe.ui.toolkit.controls.popups.ListPopupContent"] = haxe.ui.toolkit.controls.popups.ListPopupContent;
haxe.ui.toolkit.controls.popups.ListPopupContent.__name__ = ["haxe","ui","toolkit","controls","popups","ListPopupContent"];
haxe.ui.toolkit.controls.popups.ListPopupContent.__super__ = haxe.ui.toolkit.controls.popups.PopupContent;
haxe.ui.toolkit.controls.popups.ListPopupContent.prototype = $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.controls.popups.PopupContent.prototype.initialize.call(this);
		this._list.addEventListener("haxeui_" + "change",$bind(this,this._onListChange));
		this.addChild(this._list);
		var n = this._maxListSize;
		if(n > this._list.get_listSize()) n = this._list.get_listSize();
		var listHeight = n * this._list.get_itemHeight() + (this._list.get_layout().get_padding().get_top() + this._list.get_layout().get_padding().get_bottom());
		this._list.set_height(listHeight);
		this.set_height(listHeight);
		this._list.setSelectedIndexNoEvent(this._selectedIndex);
	}
	,get_selectedIndex: function() {
		var index = this._selectedIndex;
		if(this._list.get_ready()) index = this._list.get_selectedIndex();
		return index;
	}
	,set_selectedIndex: function(value) {
		this._selectedIndex = value;
		if(this._list.get_ready()) this._list.set_selectedIndex(value);
		return value;
	}
	,get_listSize: function() {
		if(this._list.get_ready() == false) return -1;
		return this._list.get_listSize();
	}
	,_onListChange: function(event) {
		this.hideTimer = new openfl.utils.Timer(this.DELAY,1);
		this.hideTimer.addEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onTimerComplete));
		this.hideTimer.start();
	}
	,_onTimerComplete: function(event) {
		this.hideTimer.removeEventListener(openfl.events.TimerEvent.TIMER_COMPLETE,$bind(this,this._onTimerComplete));
		if(Std["is"](this.get_parent(),haxe.ui.toolkit.controls.popups.Popup)) haxe.ui.toolkit.core.PopupManager.get_instance().hidePopup(js.Boot.__cast(this.get_parent() , haxe.ui.toolkit.controls.popups.Popup));
		if(this._fn != null) {
			var item = this._list.get_selectedItems()[0];
			var index = this._list.getItemIndex(item);
			item.get_data().index = index;
			this._fn(item);
		}
	}
	,setSelectedIndexNoEvent: function(index) {
		this._selectedIndex = index;
		if(this._list.get_ready()) this._list.setSelectedIndexNoEvent(index);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.popups.PopupContent.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.ListPopupContent();
	}
	,__class__: haxe.ui.toolkit.controls.popups.ListPopupContent
	,__properties__: $extend(haxe.ui.toolkit.controls.popups.PopupContent.prototype.__properties__,{get_listSize:"get_listSize",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex"})
});
haxe.ui.toolkit.core.interfaces.IDraggable = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.IDraggable"] = haxe.ui.toolkit.core.interfaces.IDraggable;
haxe.ui.toolkit.core.interfaces.IDraggable.__name__ = ["haxe","ui","toolkit","core","interfaces","IDraggable"];
haxe.ui.toolkit.core.interfaces.IDraggable.prototype = {
	__class__: haxe.ui.toolkit.core.interfaces.IDraggable
};
haxe.ui.toolkit.controls.popups.Popup = function(title,content,config,fn) {
	haxe.ui.toolkit.containers.VBox.call(this);
	this._autoSize = true;
	if(title != null) {
		this._titleBar = new haxe.ui.toolkit.containers.Box();
		this._titleBar.set_autoSize(false);
		this._titleBar.set_id("titleBar");
	}
	this._content = content;
	this._content.popup = this;
	if(title != null) {
		this._title = new haxe.ui.toolkit.controls.Text();
		this._title.set_id("title");
		this._title.set_text(title);
	}
	this._buttonBar = new haxe.ui.toolkit.containers.Box();
	this._buttonBar.set_id("buttonBar");
	this._buttonBar.set_horizontalAlign("center");
	this._config = config;
	if(this._config == null) {
		this._config = { };
		this._config.buttons = new Array();
	}
	if(this._config.id != null) this.set_id(this._config.id);
	if(this._config.styleName != null) this.set_styleName(this._config.styleName);
	this._fn = fn;
};
$hxClasses["haxe.ui.toolkit.controls.popups.Popup"] = haxe.ui.toolkit.controls.popups.Popup;
haxe.ui.toolkit.controls.popups.Popup.__name__ = ["haxe","ui","toolkit","controls","popups","Popup"];
haxe.ui.toolkit.controls.popups.Popup.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDraggable];
haxe.ui.toolkit.controls.popups.Popup.__super__ = haxe.ui.toolkit.containers.VBox;
haxe.ui.toolkit.controls.popups.Popup.prototype = $extend(haxe.ui.toolkit.containers.VBox.prototype,{
	initialize: function() {
		var _g = this;
		haxe.ui.toolkit.containers.VBox.prototype.initialize.call(this);
		if(this._titleBar != null) {
			this._titleBar.set_percentWidth(100);
			this._titleBar.addChild(this._title);
			if(this._config.closeButton == true) {
				this._exitButton = new haxe.ui.toolkit.controls.Button();
				this._exitButton.set_text("x");
				this._exitButton.set_id("close");
				this._exitButton.set_styleName("close");
				this._exitButton.addEventListener(openfl.events.MouseEvent.CLICK,function(e) {
					haxe.ui.toolkit.core.PopupManager.get_instance().hidePopup(_g);
				});
				this._titleBar.addChild(this._exitButton);
			}
			this._titleBar.get_sprite().buttonMode = true;
			this._titleBar.get_sprite().useHandCursor = true;
			this.addChild(this._titleBar);
		}
		if(this._content == null) this._content = new haxe.ui.toolkit.controls.popups.PopupContent();
		this._content.set_id("popupContent");
		this._content.set_percentWidth(100);
		this.addChild(this._content);
		if(this._config.buttons.length > 0) {
			var box = new haxe.ui.toolkit.containers.HBox();
			box.set_horizontalAlign(this._buttonBar.get_horizontalAlign());
			var buttons = this._config.buttons;
			this._buttonBar.addChild(box);
			var _g1 = 0;
			while(_g1 < buttons.length) {
				var info = [buttons[_g1]];
				++_g1;
				if((info[0].type & 16777216) != 16777216) {
					var button = this.createStandardButton(info[0].type);
					if(button != null) box.addChild(button);
				} else {
					var button1 = new haxe.ui.toolkit.controls.Button();
					button1.set_text(info[0].text);
					button1.addEventListener(openfl.events.MouseEvent.CLICK,(function(info) {
						return function(e1) {
							_g.clickButton(info[0].type);
						};
					})(info));
					box.addChild(button1);
				}
			}
			this.addChild(this._buttonBar);
		}
		if(this._config.width != null) this.set_width(this._config.width);
		haxe.ui.toolkit.core.PopupManager.get_instance().centerPopup(this);
	}
	,allowDrag: function(event) {
		return this._titleBar.hitTest(event.stageX,event.stageY);
	}
	,get_content: function() {
		return this._content;
	}
	,get_config: function() {
		return this._config;
	}
	,createStandardButton: function(v) {
		var _g = this;
		var button = null;
		if(v == 1) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("OK");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e) {
				_g.clickButton(1);
			});
		}
		if(v == 16) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("Yes");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e1) {
				_g.clickButton(16);
			});
		}
		if(v == 256) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("No");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e2) {
				_g.clickButton(256);
			});
		}
		if(v == 4096) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("Cancel");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e3) {
				_g.clickButton(4096);
			});
		}
		if(v == 65536) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("Confirm");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e4) {
				_g.clickButton(65536);
			});
		}
		if(v == 1048576) {
			button = new haxe.ui.toolkit.controls.Button();
			button.set_text("Close");
			button.addEventListener(openfl.events.MouseEvent.CLICK,function(e5) {
				_g.clickButton(1048576);
			});
		}
		return button;
	}
	,clickButton: function(button) {
		if(this._content.onButtonClicked(button) == true) haxe.ui.toolkit.core.PopupManager.get_instance().hidePopup(this);
		if(this._fn != null) this._fn(button);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.containers.VBox.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.popups.Popup();
	}
	,__class__: haxe.ui.toolkit.controls.popups.Popup
	,__properties__: $extend(haxe.ui.toolkit.containers.VBox.prototype.__properties__,{get_config:"get_config",get_content:"get_content"})
});
haxe.ui.toolkit.controls.selection = {};
haxe.ui.toolkit.controls.selection.DateSelector = function() {
	this.dateFormat = "%d/%m/%Y";
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_text("Select Date");
	this.set_toggle(true);
};
$hxClasses["haxe.ui.toolkit.controls.selection.DateSelector"] = haxe.ui.toolkit.controls.selection.DateSelector;
haxe.ui.toolkit.controls.selection.DateSelector.__name__ = ["haxe","ui","toolkit","controls","selection","DateSelector"];
haxe.ui.toolkit.controls.selection.DateSelector.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.selection.DateSelector.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.preInitialize.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,initialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.initialize.call(this);
		this.set_autoSize(false);
	}
	,_onMouseClick: function(event) {
		haxe.ui.toolkit.controls.Button.prototype._onMouseClick.call(this,event);
		if(this._cal == null || this._cal.get_visible() == false) this.showCalendar(); else this.hideCalendar();
	}
	,applyStyle: function() {
		haxe.ui.toolkit.controls.Button.prototype.applyStyle.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null && this._method == null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,showCalendar: function() {
		var _g = this;
		if(this._method == "popup") haxe.ui.toolkit.core.PopupManager.get_instance().showCalendar("Select Date",function(button,date) {
			_g.set_selected(false);
			if(button == 65536) {
				var dateString = DateTools.format(date,_g.dateFormat);
				_g.set_text(dateString);
			}
		}); else {
			if(this._cal == null) {
				this._cal = new haxe.ui.toolkit.containers.CalendarView();
				this._cal.set_styleName("dropDown");
				if(this.get_id() != null) this._cal.set_id(this.get_id() + "_dropDown");
				this._cal.addEventListener(openfl.events.Event.CHANGE,$bind(this,this.onDateChange));
				this._cal.addEventListener(openfl.events.Event.ADDED_TO_STAGE,function(e) {
					_g.showCalendar();
				});
				this.get_root().addChild(this._cal);
				return;
			}
			this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this._cal.set_x(this.get_stageX() - this.get_root().get_stageX());
			this._cal.set_y(this.get_stageY() + this.get_height() - this.get_root().get_stageY());
			if(this._cal.get_stageY() + this._cal.get_height() > haxe.ui.toolkit.core.Screen.get_instance().get_height()) {
				this._cal.set_y(this.get_stageY() - this._cal.get_height());
				this.set_styleName("dropUp");
			} else this.set_styleName(null);
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.selection.DateSelector);
			if(transition == "slide") {
				this._cal.set_clipHeight(0);
				this._cal.get_sprite().set_alpha(1);
				this._cal.set_visible(true);
				motion.Actuate.tween(this._cal,.1,{ clipHeight : this._cal.get_height()},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					_g._cal.clearClip();
				});
			} else if(transition == "fade") {
				this._cal.get_sprite().set_alpha(0);
				this._cal.set_visible(true);
				motion.Actuate.tween(this._cal.get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				});
			} else {
				this._cal.get_sprite().set_alpha(1);
				this._cal.set_visible(true);
			}
			this.set_selected(true);
		}
	}
	,hideCalendar: function() {
		var _g = this;
		if(this._cal != null) {
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.selection.DateSelector);
			if(transition == "slide") {
				this._cal.get_sprite().set_alpha(1);
				motion.Actuate.tween(this._cal,.1,{ clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					_g._cal.set_visible(false);
					_g._cal.clearClip();
				});
			} else if(transition == "fade") motion.Actuate.tween(this._cal.get_sprite(),.2,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				_g._cal.set_visible(false);
			}); else {
				this._cal.get_sprite().set_alpha(1);
				this._cal.set_visible(false);
			}
			this.set_selected(false);
		}
	}
	,get_method: function() {
		return this._method;
	}
	,set_method: function(value) {
		this._method = value;
		return value;
	}
	,get_date: function() {
		if(this._cal != null) return this._cal.get_selectedDate();
		return new Date();
	}
	,set_dateFormat: function(value) {
		this.dateFormat = value;
		if(this._cal != null) this.set_text(DateTools.format(this._cal.get_selectedDate(),this.dateFormat));
		return value;
	}
	,_onRootMouseDown: function(event) {
		var mouseInList = false;
		if(this._cal != null) mouseInList = this._cal.hitTest(event.stageX,event.stageY);
		var mouseIn = this.hitTest(event.stageX,event.stageY);
		if(mouseInList == false && this._cal != null && mouseIn == false) {
			this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this.hideCalendar();
		}
	}
	,onDateChange: function(event) {
		var dateString = DateTools.format(this._cal.get_selectedDate(),this.dateFormat);
		this.set_text(dateString);
		this.hideCalendar();
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.selection.DateSelector();
	}
	,__class__: haxe.ui.toolkit.controls.selection.DateSelector
	,__properties__: $extend(haxe.ui.toolkit.controls.Button.prototype.__properties__,{set_dateFormat:"set_dateFormat",get_date:"get_date",set_method:"set_method",get_method:"get_method"})
});
haxe.ui.toolkit.controls.selection.ListSelector = function() {
	this._selectedIndex = -1;
	this._maxListSize = 4;
	haxe.ui.toolkit.controls.Button.call(this);
	this.set_toggle(true);
	this.set_allowSelection(false);
	this.dispatchChangeEvents = false;
	this.set_autoSize(false);
};
$hxClasses["haxe.ui.toolkit.controls.selection.ListSelector"] = haxe.ui.toolkit.controls.selection.ListSelector;
haxe.ui.toolkit.controls.selection.ListSelector.__name__ = ["haxe","ui","toolkit","controls","selection","ListSelector"];
haxe.ui.toolkit.controls.selection.ListSelector.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IDataComponent];
haxe.ui.toolkit.controls.selection.ListSelector.__super__ = haxe.ui.toolkit.controls.Button;
haxe.ui.toolkit.controls.selection.ListSelector.prototype = $extend(haxe.ui.toolkit.controls.Button.prototype,{
	preInitialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.preInitialize.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,initialize: function() {
		haxe.ui.toolkit.controls.Button.prototype.initialize.call(this);
	}
	,_onMouseClick: function(event) {
		if(this._list == null || this._list.get_visible() == false) this.showList(); else this.hideList();
	}
	,applyStyle: function() {
		haxe.ui.toolkit.controls.Button.prototype.applyStyle.call(this);
		if(this._baseStyle != null) {
			if(this._baseStyle.get_selectionMethod() != null && this._method == null) this._method = this._baseStyle.get_selectionMethod();
		}
	}
	,get_dataSource: function() {
		if(this._dataSource == null) this._dataSource = new haxe.ui.toolkit.data.ArrayDataSource();
		return this._dataSource;
	}
	,set_dataSource: function(value) {
		this._dataSource = value;
		return value;
	}
	,showList: function() {
		var _g = this;
		if(this._method == "popup") haxe.ui.toolkit.core.PopupManager.get_instance().showList(this.get_dataSource(),this._selectedIndex,"Select Item",{ },function(item) {
			_g._selectedIndex = item.get_data().index;
			_g.set_text(item.get_data().text);
			_g._selectedItems = new Array();
			_g._selectedItems.push(item);
			_g.set_selected(false);
			var event = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change");
			_g.dispatchEvent(event);
		}); else {
			if(this._list == null) {
				this._list = new haxe.ui.toolkit.containers.ListView();
				this._list.set_styleName("dropDown");
				if(this.get_id() != null) this._list.set_id(this.get_id() + "_dropDown");
				this._list.addEventListener("haxeui_" + "change",$bind(this,this._onListChange));
				this._list.get_content().addEventListener(openfl.events.Event.ADDED_TO_STAGE,function(e) {
					_g.showList();
				});
				this.get_root().addChild(this._list);
				return;
			}
			this._list.set_dataSource(this._dataSource);
			this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().addEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this._list.set_x(this.get_stageX() - this.get_root().get_stageX());
			this._list.set_y(this.get_stageY() + this.get_height() - this.get_root().get_stageY());
			this._list.set_width(this.get_width());
			var n = this._maxListSize;
			if(n > this._list.get_listSize()) n = this._list.get_listSize();
			var listHeight = n * this._list.get_itemHeight() + (this._list.get_layout().get_padding().get_top() + this._list.get_layout().get_padding().get_bottom());
			this._list.set_height(listHeight);
			this._list.setSelectedIndexNoEvent(this._selectedIndex);
			if(this._list.get_stageY() + listHeight > haxe.ui.toolkit.core.Screen.get_instance().get_height()) {
				this._list.set_y(this.get_stageY() - this._list.get_height());
				this.set_styleName("dropUp");
			} else this.set_styleName(null);
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.selection.ListSelector);
			if(transition == "slide") {
				this._list.set_clipHeight(0);
				this._list.get_sprite().set_alpha(1);
				this._list.set_visible(true);
				motion.Actuate.tween(this._list,.1,{ clipHeight : listHeight},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					_g._list.clearClip();
				});
			} else if(transition == "fade") {
				this._list.get_sprite().set_alpha(0);
				this._list.set_visible(true);
				motion.Actuate.tween(this._list.get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				});
			} else {
				this._list.get_sprite().set_alpha(1);
				this._list.set_visible(true);
			}
			this.set_selected(true);
		}
	}
	,hideList: function() {
		var _g = this;
		if(this._list != null) {
			var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.selection.ListSelector);
			if(transition == "slide") {
				this._list.get_sprite().set_alpha(1);
				motion.Actuate.tween(this._list,.1,{ clipHeight : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
					_g._list.set_visible(false);
					_g._list.clearClip();
				});
			} else if(transition == "fade") motion.Actuate.tween(this._list.get_sprite(),.2,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
				_g._list.set_visible(false);
			}); else {
				this._list.get_sprite().set_alpha(1);
				this._list.set_visible(false);
			}
			this.set_selected(false);
		}
	}
	,get_method: function() {
		return this._method;
	}
	,set_method: function(value) {
		this._method = value;
		return value;
	}
	,get_listSize: function() {
		return this._maxListSize;
	}
	,set_listSize: function(value) {
		this._maxListSize = value;
		return value;
	}
	,get_selectedItems: function() {
		return this._selectedItems;
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		this._selectedIndex = value;
		if(this._list != null) {
			this._list.set_selectedIndex(value);
			this._selectedItems = this._list.get_selectedItems();
		}
		if(this._selectedIndex > -1 && this._dataSource != null) {
			var n = 0;
			if(this.get_dataSource().moveFirst()) do {
				if(n == this._selectedIndex) {
					this.set_text(this._dataSource.get().text);
					break;
				}
				n++;
			} while(this.get_dataSource().moveNext());
		}
		return value;
	}
	,_onRootMouseDown: function(event) {
		var mouseInList = false;
		if(this._list != null) mouseInList = this._list.hitTest(event.stageX,event.stageY);
		var mouseIn = this.hitTest(event.stageX,event.stageY);
		if(mouseInList == false && this._list != null && mouseIn == false) {
			this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_DOWN,$bind(this,this._onRootMouseDown));
			this.get_root().removeEventListener(openfl.events.MouseEvent.MOUSE_WHEEL,$bind(this,this._onRootMouseDown));
			this.hideList();
		}
	}
	,_onListChange: function(event) {
		if(this._list.get_selectedItems() != null && this._list.get_selectedItems().length > 0) {
			this.set_text(this._list.get_selectedItems()[0].get_data().text);
			this._selectedIndex = this._list.get_selectedIndex();
			this._selectedItems = this._list.get_selectedItems();
			this.hideList();
			var event1 = new haxe.ui.toolkit.events.UIEvent("haxeui_" + "change");
			this.dispatchEvent(event1);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.controls.Button.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.selection.ListSelector();
	}
	,__class__: haxe.ui.toolkit.controls.selection.ListSelector
	,__properties__: $extend(haxe.ui.toolkit.controls.Button.prototype.__properties__,{set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",get_selectedItems:"get_selectedItems",set_listSize:"set_listSize",get_listSize:"get_listSize",set_method:"set_method",get_method:"get_method",set_dataSource:"set_dataSource",get_dataSource:"get_dataSource"})
});
haxe.ui.toolkit.controls.selection.DropDownList = function() {
	haxe.ui.toolkit.containers.ListView.call(this);
};
$hxClasses["haxe.ui.toolkit.controls.selection.DropDownList"] = haxe.ui.toolkit.controls.selection.DropDownList;
haxe.ui.toolkit.controls.selection.DropDownList.__name__ = ["haxe","ui","toolkit","controls","selection","DropDownList"];
haxe.ui.toolkit.controls.selection.DropDownList.__super__ = haxe.ui.toolkit.containers.ListView;
haxe.ui.toolkit.controls.selection.DropDownList.prototype = $extend(haxe.ui.toolkit.containers.ListView.prototype,{
	clone: function() {
		var c = haxe.ui.toolkit.containers.ListView.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.controls.selection.DropDownList();
	}
	,__class__: haxe.ui.toolkit.controls.selection.DropDownList
});
haxe.ui.toolkit.core.ClassManager = function() {
	this.registerDefaults();
};
$hxClasses["haxe.ui.toolkit.core.ClassManager"] = haxe.ui.toolkit.core.ClassManager;
haxe.ui.toolkit.core.ClassManager.__name__ = ["haxe","ui","toolkit","core","ClassManager"];
haxe.ui.toolkit.core.ClassManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.ClassManager._instance = null;
haxe.ui.toolkit.core.ClassManager.instance = null;
haxe.ui.toolkit.core.ClassManager.get_instance = function() {
	if(haxe.ui.toolkit.core.ClassManager._instance == null) haxe.ui.toolkit.core.ClassManager._instance = new haxe.ui.toolkit.core.ClassManager();
	return haxe.ui.toolkit.core.ClassManager._instance;
};
haxe.ui.toolkit.core.ClassManager.prototype = {
	registerDefaults: function() {
	}
	,getComponentClassName: function(simpleName) {
		if(this.componentClassMap == null) return null;
		var key = simpleName;
		var entry = this.componentClassMap.get(key);
		if(entry == null) return null;
		return entry.className;
	}
	,registerComponentClass: function(cls,simpleName) {
		var className = Type.getClassName(cls);
		this.registerComponentClassName(className,simpleName);
	}
	,registerComponentClassName: function(className,simpleName) {
		if(this.componentClassMap == null) this.componentClassMap = new haxe.ds.StringMap();
		var entry = new haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry();
		entry.simpleName = simpleName;
		entry.className = className;
		this.componentClassMap.set(simpleName,entry);
	}
	,hasDataSourceClass: function(simpleName) {
		if(this.dataSourceClassMap == null) return false;
		return this.dataSourceClassMap.exists(simpleName);
	}
	,getDataSourceClassName: function(simpleName) {
		if(this.dataSourceClassMap == null) return null;
		var entry = this.dataSourceClassMap.get(simpleName);
		if(entry == null) return null;
		return entry.className;
	}
	,registerDataSourceClass: function(cls,simpleName) {
		var className = Type.getClassName(cls);
		this.registerDataSourceClassName(className,simpleName);
	}
	,registerDataSourceClassName: function(className,simpleName) {
		if(this.dataSourceClassMap == null) this.dataSourceClassMap = new haxe.ds.StringMap();
		var entry = new haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry();
		entry.simpleName = simpleName;
		entry.className = className;
		this.dataSourceClassMap.set(simpleName,entry);
	}
	,__class__: haxe.ui.toolkit.core.ClassManager
};
haxe.ui.toolkit.core._ClassManager = {};
haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry = function() {
};
$hxClasses["haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry"] = haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry;
haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.__name__ = ["haxe","ui","toolkit","core","_ClassManager","ClassRegistryEntry"];
haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.prototype = {
	__class__: haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry
};
haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry = function() {
	haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.call(this);
};
$hxClasses["haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry"] = haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry;
haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry.__name__ = ["haxe","ui","toolkit","core","_ClassManager","ComponentRegistryEntry"];
haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry.__super__ = haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry;
haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry.prototype = $extend(haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.prototype,{
	__class__: haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry
});
haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry = function() {
	haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.call(this);
};
$hxClasses["haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry"] = haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry;
haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry.__name__ = ["haxe","ui","toolkit","core","_ClassManager","DataSourceRegistryEntry"];
haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry.__super__ = haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry;
haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry.prototype = $extend(haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry.prototype,{
	__class__: haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry
});
haxe.ui.toolkit.core.Client = function() {
};
$hxClasses["haxe.ui.toolkit.core.Client"] = haxe.ui.toolkit.core.Client;
haxe.ui.toolkit.core.Client.__name__ = ["haxe","ui","toolkit","core","Client"];
haxe.ui.toolkit.core.Client.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.Client._instance = null;
haxe.ui.toolkit.core.Client.instance = null;
haxe.ui.toolkit.core.Client.get_instance = function() {
	if(haxe.ui.toolkit.core.Client._instance == null) {
		haxe.ui.toolkit.core.Client._instance = new haxe.ui.toolkit.core.Client();
		haxe.ui.toolkit.core.Client._instance.init();
	}
	return haxe.ui.toolkit.core.Client._instance;
};
haxe.ui.toolkit.core.Client.prototype = {
	init: function() {
	}
	,get_language: function() {
		return openfl.system.Capabilities.get_language();
	}
	,get_dpi: function() {
		return openfl.system.Capabilities.get_screenDPI();
	}
	,get_platform: function() {
		return "html5";
		return null;
	}
	,get_target: function() {
		return "html5";
		return null;
	}
	,get_mobile: function() {
		return false;
	}
	,get_screenWidth: function() {
		return openfl.system.Capabilities.get_screenResolutionX();
	}
	,get_screenHeight: function() {
		return openfl.system.Capabilities.get_screenResolutionY();
	}
	,get_windowWidth: function() {
		return openfl.Lib.current.stage.stageWidth;
	}
	,get_windowHeight: function() {
		return openfl.Lib.current.stage.stageHeight;
	}
	,__class__: haxe.ui.toolkit.core.Client
	,__properties__: {get_mobile:"get_mobile",get_target:"get_target",get_windowHeight:"get_windowHeight",get_windowWidth:"get_windowWidth",get_screenHeight:"get_screenHeight",get_screenWidth:"get_screenWidth",get_platform:"get_platform",get_dpi:"get_dpi",get_language:"get_language"}
};
haxe.ui.toolkit.core.Controller = function(view,options) {
	var _g = this;
	if(js.Boot.__instanceof(view,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) this._view = js.Boot.__cast(view , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer); else if(js.Boot.__instanceof(view,Class)) {
		var cls;
		cls = js.Boot.__cast(view , Class);
		this._view = Type.createInstance(cls,[]);
	} else if(view != null) options = view;
	if(this._view == null) this._view = new haxe.ui.toolkit.core.Component();
	if(options != null) {
		var _g1 = 0;
		var _g11 = Reflect.fields(options);
		while(_g1 < _g11.length) {
			var f = _g11[_g1];
			++_g1;
			if(Reflect.getProperty(this._view,"set_" + f) != null) Reflect.setProperty(this._view,f,Reflect.field(options,f));
		}
	}
	this.refereshNamedComponents();
	this._view.addEventListener("haxeui_" + "addedToStage",function(e) {
		if(_g._view.get_width() != 0 && _g._view.get_height() != 0) _g.onReady();
	});
};
$hxClasses["haxe.ui.toolkit.core.Controller"] = haxe.ui.toolkit.core.Controller;
haxe.ui.toolkit.core.Controller.__name__ = ["haxe","ui","toolkit","core","Controller"];
haxe.ui.toolkit.core.Controller.prototype = {
	onReady: function() {
	}
	,addChild: function(child,options) {
		var childObject = null;
		if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObject)) childObject = js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObject); else if(js.Boot.__instanceof(child,Class)) {
			var cls;
			cls = js.Boot.__cast(child , Class);
			childObject = Type.createInstance(cls,[]);
		} else if(child != null) options = child;
		if(childObject == null) childObject = new haxe.ui.toolkit.core.Component();
		if(options != null) {
			var _g = 0;
			var _g1 = Reflect.fields(options);
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(Reflect.getProperty(childObject,"set_" + f) != null) Reflect.setProperty(childObject,f,Reflect.field(options,f));
			}
		}
		var retVal = this._view.addChild(childObject);
		this.refereshNamedComponents();
		return retVal;
	}
	,attachView: function(newView) {
		this._view = newView;
		this.refereshNamedComponents();
	}
	,attachEvent: function(id,type,listener) {
		var c = this.getComponent(id);
		if(c != null) c.addEventListener(type,listener);
	}
	,detachEvent: function(id,type,listener) {
		var c = this.getComponent(id);
		if(c != null) c.removeEventListener(type,listener);
	}
	,detachEvents: function(id,type) {
		var c = this.getComponent(id);
		if(c != null) c.removeEventListenerType(type);
	}
	,getComponent: function(id) {
		return this.getComponentAs(id,haxe.ui.toolkit.core.Component);
	}
	,getComponentAs: function(id,type) {
		var c = this._namedComponents.get(id);
		if(c == null) return null;
		return c;
	}
	,refereshNamedComponents: function() {
		this._namedComponents = new haxe.ds.StringMap();
		this.addNamedComponentsFrom(this._view);
	}
	,addNamedComponentsFrom: function(parent) {
		if(parent == null) return;
		if(parent != null && parent.get_id() != null) this._namedComponents.set(parent.get_id(),parent);
		var _g = 0;
		var _g1 = parent.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.addNamedComponentsFrom(js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer));
		}
	}
	,get_view: function() {
		return this._view;
	}
	,get_root: function() {
		if(this._view == null) return null;
		return this._view.get_root();
	}
	,get_popup: function() {
		var popup = null;
		if(Std["is"](this.get_view().get_parent(),haxe.ui.toolkit.controls.popups.PopupContent)) popup = (js.Boot.__cast(this.get_view().get_parent() , haxe.ui.toolkit.controls.popups.PopupContent)).popup;
		return popup;
	}
	,get_namedComponents: function() {
		return this._namedComponents;
	}
	,showPopup: function(text,title,config,fn) {
		if(config == null) config = 1;
		return this.showSimplePopup(text,title,config,fn);
	}
	,showSimplePopup: function(text,title,config,fn) {
		if(config == null) config = 1;
		return haxe.ui.toolkit.core.PopupManager.get_instance().showSimple(text,title,config,fn);
	}
	,showCustomPopup: function(content,title,config,fn) {
		if(config == null) config = 1;
		var display = null;
		if(js.Boot.__instanceof(content,haxe.ui.toolkit.core.interfaces.IDisplayObject)) display = js.Boot.__cast(content , haxe.ui.toolkit.core.interfaces.IDisplayObject); else if(typeof(content) == "string") display = haxe.ui.toolkit.core.Toolkit.processXmlResource(js.Boot.__cast(content , String));
		if(display == null) return null;
		return haxe.ui.toolkit.core.PopupManager.get_instance().showCustom(display,title,config,fn);
	}
	,showListPopup: function(items,selectedIndex,title,fn) {
		if(selectedIndex == null) selectedIndex = -1;
		return haxe.ui.toolkit.core.PopupManager.get_instance().showList(items,selectedIndex,title,fn);
	}
	,showBusyPopup: function(text,delay,title,config,fn) {
		if(delay == null) delay = -1;
		this.hideBusy();
		return this._currentBusyPopup = haxe.ui.toolkit.core.PopupManager.get_instance().showBusy(text,delay,title,config,fn);
	}
	,showBusy: function(text,delay,title,config,fn) {
		if(delay == null) delay = -1;
		return this.showBusyPopup(text,delay,title,config,fn);
	}
	,hideBusy: function() {
		if(this._currentBusyPopup != null) {
			haxe.ui.toolkit.core.PopupManager.get_instance().hidePopup(this._currentBusyPopup);
			this._currentBusyPopup = null;
		}
	}
	,showCalendarPopup: function(title,fn) {
		return haxe.ui.toolkit.core.PopupManager.get_instance().showCalendar(title,fn);
	}
	,__class__: haxe.ui.toolkit.core.Controller
	,__properties__: {get_namedComponents:"get_namedComponents",get_popup:"get_popup",get_root:"get_root",get_view:"get_view"}
};
haxe.ui.toolkit.core.FocusManager = function() {
};
$hxClasses["haxe.ui.toolkit.core.FocusManager"] = haxe.ui.toolkit.core.FocusManager;
haxe.ui.toolkit.core.FocusManager.__name__ = ["haxe","ui","toolkit","core","FocusManager"];
haxe.ui.toolkit.core.FocusManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.FocusManager._instance = null;
haxe.ui.toolkit.core.FocusManager.instance = null;
haxe.ui.toolkit.core.FocusManager.get_instance = function() {
	if(haxe.ui.toolkit.core.FocusManager._instance == null) haxe.ui.toolkit.core.FocusManager._instance = new haxe.ui.toolkit.core.FocusManager();
	return haxe.ui.toolkit.core.FocusManager._instance;
};
haxe.ui.toolkit.core.FocusManager.prototype = {
	__class__: haxe.ui.toolkit.core.FocusManager
};
haxe.ui.toolkit.core.Macros = function() { };
$hxClasses["haxe.ui.toolkit.core.Macros"] = haxe.ui.toolkit.core.Macros;
haxe.ui.toolkit.core.Macros.__name__ = ["haxe","ui","toolkit","core","Macros"];
haxe.ui.toolkit.core.Macros.processNode = function(node,types,paths) {
	var nodeName = node.get_nodeName();
	var n = nodeName.indexOf(":");
	if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
	nodeName = nodeName.toLowerCase();
	if(nodeName == "import") {
	}
	var id = node.get("id");
	if(id != null && id.length > 0) {
		var cls = haxe.ui.toolkit.core.Macros.componentClasses.get(nodeName);
		if(cls != null) types.set(id,cls); else haxe.Log.trace("WARNING: '" + nodeName + "' hasnt been registered",{ fileName : "Macros.hx", lineNumber : 466, className : "haxe.ui.toolkit.core.Macros", methodName : "processNode"});
	}
	var $it0 = node.elements();
	while( $it0.hasNext() ) {
		var child = $it0.next();
		haxe.ui.toolkit.core.Macros.processNode(child,types,paths);
	}
};
haxe.ui.toolkit.core.Macros.getFunction = function(name,fields) {
	var fn = null;
	var _g = 0;
	try {
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			if(f.name == name) {
				{
					var _g1 = f.kind;
					switch(_g1[1]) {
					case 1:
						var f1 = _g1[2];
						fn = f1;
						throw "__break__";
						break;
					default:
					}
				}
				throw "__break__";
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	return fn;
};
haxe.ui.toolkit.core.Macros.addFunction = function(name,e,access,fields,pos) {
	var fn;
	{
		var _g = e.expr;
		switch(_g[1]) {
		case 11:
			var f = _g[3];
			fn = f;
			break;
		default:
			throw "false";
		}
	}
	fields.push({ name : name, doc : null, meta : [], access : access, kind : haxe.macro.FieldType.FFun(fn), pos : pos});
};
haxe.ui.toolkit.core.Macros.getFieldsWithMeta = function(meta,fields) {
	var arr = new Array();
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		if(haxe.ui.toolkit.core.Macros.hasMeta(f,meta)) arr.push(f);
	}
	return arr;
};
haxe.ui.toolkit.core.Macros.getSuperClass = function(t) {
	var superClass = null;
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		break;
	case 0:
		var t2 = t[2];
		break;
	case 7:
		var t3 = t[2];
		break;
	case 4:
		var t4 = t[2];
		break;
	case 6:
		var t5 = t[2];
		break;
	case 2:
		var t6 = t[2];
		superClass = t6.get().superClass;
		break;
	case 1:
		var t7 = t[2];
		break;
	case 3:
		var t8 = t[2];
		break;
	case 8:
		var t9 = t[2];
		break;
	}
	return superClass;
};
haxe.ui.toolkit.core.Macros.insertLine = function(fn,e,location) {
	{
		var _g = fn.expr.expr;
		switch(_g[1]) {
		case 12:
			var el = _g[2];
			fn.expr = { expr : haxe.macro.ExprDef.EBlock(haxe.ui.toolkit.core.Macros.insertExpr(el,location,e)), pos : { file : "F:/dev/HaxeToolkit/haxe/lib/haxeui/1,7,0/haxe/ui/toolkit/core/Macros.hx", min : 17531, max : 17560}};
			break;
		default:
			fn.expr = { expr : haxe.macro.ExprDef.EBlock(haxe.ui.toolkit.core.Macros.insertExpr([fn.expr],location,e)), pos : { file : "F:/dev/HaxeToolkit/haxe/lib/haxeui/1,7,0/haxe/ui/toolkit/core/Macros.hx", min : 17583, max : 17621}};
		}
	}
};
haxe.ui.toolkit.core.Macros.insertExpr = function(arr,pos,item) {
	if(pos == -1) arr.push(item); else arr.splice(pos,0,item);
	return arr;
};
haxe.ui.toolkit.core.Macros.getClassNameFromType = function(t) {
	var className = "";
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		className = t1.toString();
		break;
	case 0:
		var t2 = t[2];
		className = t2.toString();
		break;
	case 7:
		var t3 = t[2];
		className = "";
		break;
	case 4:
		var t4 = t[2];
		className = t4.toString();
		break;
	case 6:
		var t5 = t[2];
		className = "";
		break;
	case 2:
		var t6 = t[2];
		className = t6.toString();
		break;
	case 1:
		var t7 = t[2];
		className = t7.toString();
		break;
	case 3:
		var t8 = t[2];
		className = t8.toString();
		break;
	case 8:
		var t9 = t[2];
		className = t9.toString();
		break;
	}
	return className;
};
haxe.ui.toolkit.core.Macros.hasMeta = function(f,meta) {
	var has = false;
	var _g = 0;
	var _g1 = f.meta;
	while(_g < _g1.length) {
		var m = _g1[_g];
		++_g;
		if(m.name == meta || m.name == ":" + meta) {
			has = true;
			break;
		}
	}
	return has;
};
haxe.ui.toolkit.core.Macros.getClassName = function(t) {
	var name = null;
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		break;
	case 0:
		var t2 = t[2];
		break;
	case 7:
		var t3 = t[2];
		break;
	case 4:
		var t4 = t[2];
		break;
	case 6:
		var t5 = t[2];
		break;
	case 2:
		var t6 = t[2];
		name = t6.get().module;
		break;
	case 1:
		var t7 = t[2];
		break;
	case 3:
		var t8 = t[2];
		break;
	case 8:
		var t9 = t[2];
		break;
	}
	return name;
};
haxe.ui.toolkit.core.Macros.hasInterface = function(t,interfaceRequired) {
	var has = false;
	switch(t[1]) {
	case 5:
		var t1 = t[2];
		break;
	case 0:
		var t2 = t[2];
		break;
	case 7:
		var t3 = t[2];
		break;
	case 4:
		var t4 = t[2];
		break;
	case 6:
		var t5 = t[2];
		break;
	case 2:
		var t6 = t[2];
		while(t6 != null) {
			var _g = 0;
			var _g1 = t6.get().interfaces;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var interfaceName = i.t.toString();
				if(interfaceName == interfaceRequired) {
					has = true;
					break;
				}
			}
			if(has == false) {
				if(t6.get().superClass != null) t6 = t6.get().superClass.t; else t6 = null;
			} else break;
		}
		break;
	case 1:
		var t7 = t[2];
		break;
	case 3:
		var t8 = t[2];
		break;
	case 8:
		var t9 = t[2];
		break;
	}
	return has;
};
haxe.ui.toolkit.core.Macros.resolveResource = function(resourcePath,paths) {
	return resourcePath;
};
haxe.ui.toolkit.core.PopupManager = function() {
	this.defaultWidth = 300;
	this.defaultTitle = "HaxeUI";
};
$hxClasses["haxe.ui.toolkit.core.PopupManager"] = haxe.ui.toolkit.core.PopupManager;
haxe.ui.toolkit.core.PopupManager.__name__ = ["haxe","ui","toolkit","core","PopupManager"];
haxe.ui.toolkit.core.PopupManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.PopupManager._instance = null;
haxe.ui.toolkit.core.PopupManager.instance = null;
haxe.ui.toolkit.core.PopupManager.get_instance = function() {
	if(haxe.ui.toolkit.core.PopupManager._instance == null) haxe.ui.toolkit.core.PopupManager._instance = new haxe.ui.toolkit.core.PopupManager();
	return haxe.ui.toolkit.core.PopupManager._instance;
};
haxe.ui.toolkit.core.PopupManager.prototype = {
	showSimple: function(text,title,config,fn) {
		if(config == null) config = 1;
		var p = this.buildPopup(new haxe.ui.toolkit.controls.popups.SimplePopupContent(text),title,config,fn);
		this.showPopup(p);
		return p;
	}
	,showCustom: function(display,title,config,fn) {
		if(config == null) config = 1;
		var p = this.buildPopup(new haxe.ui.toolkit.controls.popups.CustomPopupContent(display),title,config,fn);
		this.showPopup(p);
		return p;
	}
	,showList: function(items,selectedIndex,title,config,fn) {
		if(selectedIndex == null) selectedIndex = -1;
		var ds = null;
		if((items instanceof Array) && items.__enum__ == null) {
			var arr;
			arr = js.Boot.__cast(items , Array);
			ds = new haxe.ui.toolkit.data.ArrayDataSource();
			var _g = 0;
			while(_g < arr.length) {
				var item = arr[_g];
				++_g;
				if(typeof(item) == "string") {
					var o = { };
					o.text = js.Boot.__cast(item , String);
					ds.add(o);
				} else ds.add(item);
			}
		} else if(js.Boot.__instanceof(items,haxe.ui.toolkit.data.IDataSource)) ds = js.Boot.__cast(items , haxe.ui.toolkit.data.IDataSource);
		var p = this.buildPopup(new haxe.ui.toolkit.controls.popups.ListPopupContent(ds,selectedIndex,fn),title,config,fn);
		this.showPopup(p);
		return p;
	}
	,showCalendar: function(title,fn) {
		var config = { modal : true, buttons : 69632};
		var content = new haxe.ui.toolkit.controls.popups.CalendarPopupContent();
		var tempFn = function(button) {
			if(fn != null) {
				if(button == 65536) fn(button,content.get_selectedDate()); else fn(button,null);
			}
		};
		var p = this.buildPopup(content,title,config,tempFn);
		this.showPopup(p);
		return p;
	}
	,showBusy: function(text,delay,title,config,fn) {
		if(delay == null) delay = -1;
		var _g = this;
		if(config == null) config = { };
		config.useDefaultTitle = false;
		var p = this.buildPopup(new haxe.ui.toolkit.controls.popups.BusyPopupContent(text),title,config,fn);
		this.showPopup(p);
		if(delay > 0) {
			var timer = new haxe.Timer(delay);
			timer.run = function() {
				timer.stop();
				_g.hidePopup(p);
			};
		}
		return p;
	}
	,showPopup: function(p) {
		var modal = true;
		if(p.get_config().modal != null) modal = p.get_config().modal;
		if(modal == true) p.get_root().showModalOverlay();
		p.get_root().addChild(p);
		this.centerPopup(p);
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.popups.Popup);
		if(transition == "slide") {
			var ypos = p.get_y();
			p.set_y(-p.get_height());
			p.set_visible(true);
			motion.Actuate.tween(p,.2,{ y : ypos},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			});
		} else if(transition == "fade") {
			p.get_sprite().set_alpha(0);
			p.set_visible(true);
			motion.Actuate.tween(p.get_sprite(),.2,{ alpha : 1},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			});
		} else p.set_visible(true);
	}
	,hidePopup: function(p,dispose) {
		if(dispose == null) dispose = true;
		var transition = haxe.ui.toolkit.core.Toolkit.getTransitionForClass(haxe.ui.toolkit.controls.popups.Popup);
		if(transition == "slide") motion.Actuate.tween(p,.2,{ y : p.get_root().get_height()},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			p.get_root().removeChild(p,dispose);
			p.get_root().hideModalOverlay();
		}); else if(transition == "fade") motion.Actuate.tween(p.get_sprite(),.2,{ alpha : 0},true).ease(motion.easing.Linear.get_easeNone()).onComplete(function() {
			p.get_root().removeChild(p,dispose);
			p.get_root().hideModalOverlay();
		}); else {
			p.get_root().removeChild(p,dispose);
			p.get_root().hideModalOverlay();
		}
	}
	,centerPopup: function(p) {
		p.set_x(Std["int"](p.get_root().get_width() / 2 - p.get_width() / 2));
		p.set_y(Std["int"](p.get_root().get_height() / 2 - p.get_height() / 2));
	}
	,buildPopup: function(content,title,config,fn) {
		config = this.buildConfig(config);
		if(title == null && config.useDefaultTitle == true) title = haxe.ui.toolkit.core.PopupManager.get_instance().defaultTitle;
		var p = new haxe.ui.toolkit.controls.popups.Popup(title,content,config,fn);
		p.set_root(config.root);
		p.set_visible(false);
		return p;
	}
	,buildConfig: function(config) {
		var c;
		if(((config | 0) === config) || (config instanceof Array) && config.__enum__ == null) c = { }; else c = Reflect.copy(config);
		c.id = null;
		c.styleName = null;
		c.modal = true;
		c.width = haxe.ui.toolkit.core.PopupManager.get_instance().defaultWidth;
		c.useDefaultTitle = true;
		c.root = haxe.ui.toolkit.core.RootManager.get_instance().get_currentRoot();
		if(config != null && !((config | 0) === config) && !((config instanceof Array) && config.__enum__ == null)) {
			if(config.id != null) c.id = config.id; else c.id = null;
			if(config.styleName != null) c.styleName = config.styleName; else c.styleName = null;
			if(config.modal != null) c.modal = config.modal; else c.modal = true;
			if(config.width != null) c.width = config.width; else c.width = haxe.ui.toolkit.core.PopupManager.get_instance().defaultWidth;
			if(config.useDefaultTitle != null) c.useDefaultTitle = config.useDefaultTitle; else c.useDefaultTitle = true;
			if(config.root != null) c.root = config.root; else c.root = haxe.ui.toolkit.core.RootManager.get_instance().get_currentRoot();
		}
		c.buttons = new Array();
		if(config != null) {
			if(((config | 0) === config)) c.buttons = this.buildButtonArray(config); else if((config instanceof Array) && config.__enum__ == null) c.buttons = this.buildButtonArray(config); else if(config.buttons != null) c.buttons = this.buildButtonArray(config.buttons);
		}
		return c;
	}
	,buildButtonArray: function(data) {
		var buttons = new Array();
		if(((data | 0) === data)) {
			var n;
			n = js.Boot.__cast(data , Int);
			if((n & 1) == 1) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(1));
			if((n & 16) == 16) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(16));
			if((n & 256) == 256) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(256));
			if((n & 4096) == 4096) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(4096));
			if((n & 65536) == 65536) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(65536));
			if((n & 1048576) == 1048576) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(1048576));
		} else if((data instanceof Array) && data.__enum__ == null) {
			var arr = data;
			var _g = 0;
			while(_g < arr.length) {
				var item = arr[_g];
				++_g;
				if(((item | 0) === item)) buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(js.Boot.__cast(item , Int))); else {
					var type = 16777216;
					if(item.type != null) type = item.type;
					var text = item.text;
					var fn = item.fn;
					buttons.push(new haxe.ui.toolkit.core.PopupButtonInfo(type,text,fn));
				}
			}
		}
		return buttons;
	}
	,__class__: haxe.ui.toolkit.core.PopupManager
};
haxe.ui.toolkit.core.PopupButton = function() { };
$hxClasses["haxe.ui.toolkit.core.PopupButton"] = haxe.ui.toolkit.core.PopupButton;
haxe.ui.toolkit.core.PopupButton.__name__ = ["haxe","ui","toolkit","core","PopupButton"];
haxe.ui.toolkit.core.PopupButtonInfo = function(type,text,fn) {
	if(type == null) type = 1;
	this.type = -1;
	this.type = type;
	this.text = text;
	this.fn = fn;
};
$hxClasses["haxe.ui.toolkit.core.PopupButtonInfo"] = haxe.ui.toolkit.core.PopupButtonInfo;
haxe.ui.toolkit.core.PopupButtonInfo.__name__ = ["haxe","ui","toolkit","core","PopupButtonInfo"];
haxe.ui.toolkit.core.PopupButtonInfo.prototype = {
	__class__: haxe.ui.toolkit.core.PopupButtonInfo
};
haxe.ui.toolkit.core.Root = function() {
	this._modalOverlayCounter = 0;
	haxe.ui.toolkit.core.Component.call(this);
	this._layout = new haxe.ui.toolkit.layout.AbsoluteLayout();
	this._clipContent = false;
	this._mousePos = new openfl.geom.Point(0,0);
	haxe.ui.toolkit.core.Screen.get_instance().addEventListener(openfl.events.Event.RESIZE,$bind(this,this._onScreenResize));
};
$hxClasses["haxe.ui.toolkit.core.Root"] = haxe.ui.toolkit.core.Root;
haxe.ui.toolkit.core.Root.__name__ = ["haxe","ui","toolkit","core","Root"];
haxe.ui.toolkit.core.Root.__super__ = haxe.ui.toolkit.core.Component;
haxe.ui.toolkit.core.Root.prototype = $extend(haxe.ui.toolkit.core.Component.prototype,{
	preInitialize: function() {
		var _g = this;
		haxe.ui.toolkit.core.Component.prototype.preInitialize.call(this);
		this.addEventListener(openfl.events.MouseEvent.MOUSE_MOVE,function(event) {
			_g._mousePos = new openfl.geom.Point(event.stageX,event.stageY);
		});
		this.resizeRoot();
	}
	,_onScreenResize: function(event) {
		this.resizeRoot();
	}
	,get_mousePosition: function() {
		return this._mousePos;
	}
	,add: function(item) {
		var r = null;
		if(typeof(item) == "string") r = this.addChild(haxe.ui.toolkit.core.Toolkit.processXmlResource(item)); else if(js.Boot.__instanceof(item,haxe.ui.toolkit.core.Controller)) r = this.addChild((js.Boot.__cast(item , haxe.ui.toolkit.core.Controller)).get_view()); else haxe.Log.trace(Std.string(item) + " item not supported in Root.add",{ fileName : "Root.hx", lineNumber : 66, className : "haxe.ui.toolkit.core.Root", methodName : "add"});
		return r;
	}
	,resizeRoot: function() {
		if(this.get_percentWidth() > 0) this.set_width(haxe.ui.toolkit.core.Screen.get_instance().get_width() * this.get_percentWidth() / 100);
		if(this.get_percentHeight() > 0) this.set_height(haxe.ui.toolkit.core.Screen.get_instance().get_height() * this.get_percentHeight() / 100);
	}
	,showModalOverlay: function() {
		this._modalOverlayCounter++;
		if(this._modalOverlay == null) {
			this._modalOverlay = new haxe.ui.toolkit.core.Component();
			this._modalOverlay.set_id("modalOverlay");
			this._modalOverlay.set_percentWidth(this._modalOverlay.set_percentHeight(100));
		}
		if(this.findChild("modalOverlay") == null) this.addChild(this._modalOverlay);
		this._modalOverlay.set_visible(true);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.popups.Popup) == false && child.get_id() != "modalOverlay") {
				var c;
				c = js.Boot.__cast(child , haxe.ui.toolkit.core.Component);
			}
		}
	}
	,hideModalOverlay: function() {
		this._modalOverlayCounter--;
		if(this._modalOverlayCounter <= 0) {
			if(this._modalOverlay != null) this._modalOverlay.set_visible(false);
			var _g = 0;
			var _g1 = this.get_children();
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(js.Boot.__instanceof(child,haxe.ui.toolkit.controls.popups.Popup) == false && child.get_id() != "modalOverlay") {
					var c;
					c = js.Boot.__cast(child , haxe.ui.toolkit.core.Component);
				}
			}
			this._modalOverlayCounter = 0;
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.Component.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.Root();
	}
	,__class__: haxe.ui.toolkit.core.Root
	,__properties__: $extend(haxe.ui.toolkit.core.Component.prototype.__properties__,{get_mousePosition:"get_mousePosition"})
});
haxe.ui.toolkit.core.RootManager = function() {
	this._roots = new Array();
};
$hxClasses["haxe.ui.toolkit.core.RootManager"] = haxe.ui.toolkit.core.RootManager;
haxe.ui.toolkit.core.RootManager.__name__ = ["haxe","ui","toolkit","core","RootManager"];
haxe.ui.toolkit.core.RootManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.RootManager._instance = null;
haxe.ui.toolkit.core.RootManager.instance = null;
haxe.ui.toolkit.core.RootManager.get_instance = function() {
	if(haxe.ui.toolkit.core.RootManager._instance == null) haxe.ui.toolkit.core.RootManager._instance = new haxe.ui.toolkit.core.RootManager();
	return haxe.ui.toolkit.core.RootManager._instance;
};
haxe.ui.toolkit.core.RootManager.prototype = {
	createRoot: function(options,fn) {
		if(options == null) options = { };
		if(options.parent != null) options.parent = options.parent; else options.parent = openfl.Lib.current.stage;
		var root = new haxe.ui.toolkit.core.Root();
		root.get_sprite().set_scaleX(root.get_sprite().set_scaleY(haxe.ui.toolkit.core.Toolkit.get_scaleFactor()));
		this._roots.push(root);
		root.addEventListener(openfl.events.Event.ADDED_TO_STAGE,function(e) {
			if(fn != null) {
				fn(root);
				root.invalidate(1048576);
			}
			root.removeEventListenerType(openfl.events.Event.ADDED_TO_STAGE);
		});
		root.set_root(root);
		root.set_id(options.id != null?options.id:"root");
		root.set_styleName(options.styleName != null?options.styleName:null);
		root.set_x(options.x != null?options.x:0);
		root.set_y(options.y != null?options.y:0);
		root.set_width(options.width != null?options.width:0);
		root.set_height(options.height != null?options.height:0);
		root.set_percentWidth(options.percentWidth != null?options.percentWidth:-1);
		root.set_percentHeight(options.percentHeight != null?options.percentHeight:-1);
		options.parent.addChild(root.get_sprite());
		return root;
	}
	,destroyRoot: function(root) {
		if(root.get_sprite().parent != null) root.get_sprite().parent.removeChild(root.get_sprite());
		root.dispose();
		HxOverrides.remove(this._roots,root);
	}
	,destroyAllRoots: function() {
		var _g = 0;
		var _g1 = this._roots;
		while(_g < _g1.length) {
			var root = _g1[_g];
			++_g;
			this.destroyRoot(root);
		}
	}
	,get_roots: function() {
		return this._roots;
	}
	,get_currentRoot: function() {
		if(this._roots.length == 0) return null;
		return this._roots[this._roots.length - 1];
	}
	,__class__: haxe.ui.toolkit.core.RootManager
	,__properties__: {get_currentRoot:"get_currentRoot",get_roots:"get_roots"}
};
haxe.ui.toolkit.core.Screen = function() {
};
$hxClasses["haxe.ui.toolkit.core.Screen"] = haxe.ui.toolkit.core.Screen;
haxe.ui.toolkit.core.Screen.__name__ = ["haxe","ui","toolkit","core","Screen"];
haxe.ui.toolkit.core.Screen.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.core.Screen._instance = null;
haxe.ui.toolkit.core.Screen.instance = null;
haxe.ui.toolkit.core.Screen.get_instance = function() {
	if(haxe.ui.toolkit.core.Screen._instance == null) haxe.ui.toolkit.core.Screen._instance = new haxe.ui.toolkit.core.Screen();
	return haxe.ui.toolkit.core.Screen._instance;
};
haxe.ui.toolkit.core.Screen.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		var target = openfl.Lib.current.stage;
		target.addEventListener(type,listener,useCapture,priority,useWeakReference);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		var target = openfl.Lib.current.stage;
		target.removeEventListener(type,listener,useCapture);
	}
	,get_width: function() {
		return openfl.Lib.current.stage.stageWidth;
	}
	,get_height: function() {
		return openfl.Lib.current.stage.stageHeight;
	}
	,__class__: haxe.ui.toolkit.core.Screen
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
haxe.ui.toolkit.core.Toolkit = function() {
	this.initInstance();
};
$hxClasses["haxe.ui.toolkit.core.Toolkit"] = haxe.ui.toolkit.core.Toolkit;
haxe.ui.toolkit.core.Toolkit.__name__ = ["haxe","ui","toolkit","core","Toolkit"];
haxe.ui.toolkit.core.Toolkit.__properties__ = {set_scaleFactor:"set_scaleFactor",get_scaleFactor:"get_scaleFactor",set_defaultTransition:"set_defaultTransition",get_defaultTransition:"get_defaultTransition",get_versionString:"get_versionString",get_versionInfo:"get_versionInfo",get_instance:"get_instance"}
haxe.ui.toolkit.core.Toolkit._instance = null;
haxe.ui.toolkit.core.Toolkit.instance = null;
haxe.ui.toolkit.core.Toolkit.get_instance = function() {
	if(haxe.ui.toolkit.core.Toolkit._instance == null) {
		openfl.Lib.current.stage.align = openfl.display.StageAlign.TOP_LEFT;
		openfl.Lib.current.stage.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
		haxe.ui.toolkit.core.Toolkit._instance = new haxe.ui.toolkit.core.Toolkit();
	}
	return haxe.ui.toolkit.core.Toolkit._instance;
};
haxe.ui.toolkit.core.Toolkit.init = function() {
	(function() {
		var value = JSON.parse("{\n\t\"name\": \"openfl\",\n\t\"url\": \"http://www.openfl.org\",\n\t\"license\": \"MIT\",\n\t\"tags\": [],\n\t\"description\": \"The \\\"Open Flash Library\\\" for fast 2D development\",\n\t\"version\": \"2.2.4\",\n\t\"releasenote\": \"Added bitmapData.encode, improved HTML5 -final, other fixes\",\n\t\"contributors\": [ \"singmajesty\" ],\n\t\"dependencies\": {}\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("openfl",value);
		var value1 = JSON.parse("{\r\n  \"name\": \"yagp\",\r\n  \"url\" : \"https://github.com/yanrishatum/yagp/\",\r\n  \"license\": \"MIT\",\r\n  \"tags\": [\"cross\", \"gif\", \"decoding\", \"animated\", \"multimedia\"],\r\n  \"description\": \"Yet another implementation of gif parsing. It provides you information about GIF file, so you can make a custom player, or use shipped simple implementation.\",\r\n  \"version\": \"1.1.4\",\r\n  \"releasenote\": \"Async parsing, documentation, bugfixes. See CHANGELOG.txt\",\r\n  \"contributors\": [\"Yanrishatum\"],\r\n  \"dependencies\":\r\n  {\r\n    \"openfl\": \"\"\r\n  }\r\n}\r\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("yagp",value1);
		var value2 = JSON.parse("{\n  \"name\": \"actuate\",\n  \"url\": \"http://github.com/openfl/actuate\",\n  \"license\": \"MIT\",\n  \"tags\": [ \"flash\", \"cpp\", \"neko\", \"js\" ],\n  \"description\": \"Actuate is a fast and flexible tween library that uses a jQuery-style \\\"chaining\\\" syntax. It out-performs other libraries (such as TweenLite) and is easy to extend with custom actuators.\",\n  \"version\": \"1.8.1\",\n  \"releasenote\": \"Minor patch\",\n  \"contributors\": [ \"singmajesty\" ],\n  \"dependencies\": {}\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("actuate",value2);
		var value3 = JSON.parse("{\n\t\"name\": \"lime\",\n\t\"url\": \"https://github.com/openfl/lime\",\n\t\"license\": \"MIT\",\n\t\"tags\": [],\n\t\"description\": \"A flexible lightweight layer for Haxe cross-platform developers\",\n\t\"version\": \"2.0.6\",\n\t\"releasenote\": \"Ongoing improvements\",\n\t\"contributors\": [ \"singmajesty\" ],\n\t\"dependencies\": {}\n}\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("lime",value3);
		var value4 = JSON.parse("{\r\n  \"name\": \"hscript\",\r\n  \"url\": \"https://github.com/HaxeFoundation/hscript\",\r\n  \"license\": \"MIT\",\r\n  \"description\": \"Haxe Script is a scripting engine for a subset of the Haxe language\",\r\n  \"version\": \"2.0.4\",\r\n  \"releasenote\": \"switch and array comprehension support\",\r\n  \"contributors\": [\"ncannasse\"]\r\n}");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("hscript",value4);
		var value5 = JSON.parse("{\r\n  \"name\": \"svg\",\r\n  \"url\": \"http://github.com/haxenme/svg\",\r\n  \"license\": \"MIT\",\r\n  \"tags\": [ \"cpp\", \"flash\" ],\r\n  \"description\": \"Provides support for parsing and rendering SVG content\",\r\n  \"version\": \"1.0.8\",\r\n  \"releasenote\": \"Compile fix\",\r\n  \"contributors\": [ \"singmajesty\", \"gamehaxe\" ],\r\n  \"dependencies\": {}\r\n}");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("svg",value5);
		var value6 = JSON.parse("{\r\n    \"name\"         : \"haxeui\",\r\n    \"url\"          : \"https://github.com/ianharrigan/haxeui\",\r\n    \"license\"      : \"MIT\",\r\n    \"tags\"         : [\"rich\", \"ui\"],\r\n    \"description\"  : \"Styleable application centric rich UI\",\r\n    \"version\"      : \"1.7.0\",\r\n    \"releasenote\"  : \"Added ability to rotate and transform components\",\r\n    \"contributors\" : [\"ianharrigan\"],\r\n    \"dependencies\" : {\r\n        \"openfl\"        : \"\",\r\n        \"actuate\"       : \"\",\r\n        \"hscript\"       : \"\",\r\n        \"svg\"           : \"\",\r\n        \"yagp\"          : \"\"\r\n    }\r\n}\r\n");
		haxe.ui.toolkit.core.Toolkit._versionInfo.set("haxeui",value6);
	})();
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ScrollView","scrollview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Text","text");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.TextInput","textinput");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Absolute","absolute");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ListView","listview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.VBox","vbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Menu","menu");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ContinuousHBox","continuoushbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.renderers.ComponentItemRenderer","componentitemrenderer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.renderers.ItemRenderer","itemrenderer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.Component","component");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.HBox","hbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.HSplitter","hsplitter");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.MenuItem","menuitem");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Container","container");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.MenuSeparator","menuseparator");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Spacer","spacer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.VSplitterGripper","vsplittergripper");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.VScroll","vscroll");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.MenuBar","menubar");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Value","value");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.CheckBoxValue","checkboxvalue");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.HScroll","hscroll");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.TabView","tabview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Progress","progress");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ExpandablePanel","expandablepanel");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Slider","slider");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.MenuButton","menubutton");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.VSplitter","vsplitter");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.selection.DropDownList","dropdownlist");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.CalendarView","calendarview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ExpandableButton","expandablebutton");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Link","link");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.StateComponent","statecomponent");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.VSlider","vslider");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.CalendarDay","calendarday");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.VProgress","vprogress");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.ContinuousVBox","continuousvbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.TabBar","tabbar");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Image","image");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.OptionBoxValue","optionboxvalue");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.HSlider","hslider");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.TableView","tableview");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.CheckBox","checkbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.TableViewRow","tableviewrow");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.DisplayObject","displayobject");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.OptionBox","optionbox");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.Root","root");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.DisplayObjectContainer","displayobjectcontainer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Box","box");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.HProgress","hprogress");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.StyleableDisplayObject","styleabledisplayobject");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.AccordionButton","accordionbutton");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Grid","grid");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.HSplitterGripper","hsplittergripper");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Stack","stack");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.SpriteContainer","spritecontainer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Divider","divider");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.selection.ListSelector","listselector");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.containers.Accordion","accordion");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Button","button");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Scroll","scroll");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.core.renderers.BasicItemRenderer","basicitemrenderer");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.Calendar","calendar");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerComponentClassName("haxe.ui.toolkit.controls.selection.DateSelector","dateselector");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.ArrayDataSource","array");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.XMLDataSource","xml");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.JSONDataSource","json");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.FilesDataSource","files");
	haxe.ui.toolkit.core.ClassManager.get_instance().registerDataSourceClassName("haxe.ui.toolkit.data.MySQLDataSource","mysql");
	haxe.ui.toolkit.themes.Theme.addAsset("gradient","styles/gradient/gradient.css");
	haxe.ui.toolkit.themes.Theme.addAsset("default",haxe.ui.toolkit.style.DefaultStyles);
	haxe.ui.toolkit.themes.Theme.addAsset("gradient_mobile","styles/gradient/gradient_mobile.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/windows.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/buttons.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/tabs.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/listview.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/scrolls.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/sliders.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/accordion.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/rtf.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/calendar.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/popups.css");
	haxe.ui.toolkit.themes.Theme.addAsset("windows","styles/windows/menus.css");
	haxe.ui.toolkit.core.Toolkit.get_instance();
	haxe.ui.toolkit.core.Toolkit.registerXMLProcessor(haxe.ui.toolkit.core.xml.UIProcessor,"ui");
	haxe.ui.toolkit.core.Toolkit.registerXMLProcessor(haxe.ui.toolkit.core.xml.UIProcessor,"selection");
	haxe.ui.toolkit.core.Toolkit.registerXMLProcessor(haxe.ui.toolkit.core.xml.StyleProcessor,"style");
	haxe.ui.toolkit.core.Toolkit.registerXMLProcessor(haxe.ui.toolkit.core.xml.DataProcessor,"data");
	if(haxe.ui.toolkit.core.Toolkit._defaultTransition != "none" && haxe.ui.toolkit.core.Toolkit._transitionRegister != null && haxe.ui.toolkit.core.Toolkit._transitionRegister.get(Type.getClassName(haxe.ui.toolkit.controls.Menu)) == null) haxe.ui.toolkit.core.Toolkit.setTransitionForClass(haxe.ui.toolkit.controls.Menu,"fade");
	var t = null;
	if(js.Boot.__instanceof(haxe.ui.toolkit.core.Toolkit.theme,haxe.ui.toolkit.themes.Theme)) t = haxe.ui.toolkit.core.Toolkit.theme; else if(typeof(haxe.ui.toolkit.core.Toolkit.theme) == "string") {
		t = new haxe.ui.toolkit.themes.Theme();
		t.name = haxe.ui.toolkit.core.Toolkit.theme;
	}
	if(t == null && haxe.ui.toolkit.core.Toolkit.useDefaultTheme == true) t = new haxe.ui.toolkit.themes.DefaultTheme();
	if(t != null) t.apply();
};
haxe.ui.toolkit.core.Toolkit.versionInfo = null;
haxe.ui.toolkit.core.Toolkit.get_versionInfo = function() {
	return haxe.ui.toolkit.core.Toolkit._versionInfo;
};
haxe.ui.toolkit.core.Toolkit.versionString = null;
haxe.ui.toolkit.core.Toolkit.get_versionString = function() {
	var s = "";
	var $it0 = haxe.ui.toolkit.core.Toolkit._versionInfo.keys();
	while( $it0.hasNext() ) {
		var lib = $it0.next();
		s += lib + " [" + Std.string(haxe.ui.toolkit.core.Toolkit._versionInfo.get(lib).version) + "]\n";
	}
	return s;
};
haxe.ui.toolkit.core.Toolkit._registeredProcessors = null;
haxe.ui.toolkit.core.Toolkit.registerXMLProcessor = function(cls,prefix) {
	if(haxe.ui.toolkit.core.Toolkit._registeredProcessors == null) haxe.ui.toolkit.core.Toolkit._registeredProcessors = new haxe.ds.StringMap();
	haxe.ui.toolkit.core.Toolkit._registeredProcessors.set(prefix,Type.getClassName(cls));
};
haxe.ui.toolkit.core.Toolkit.theme = null;
haxe.ui.toolkit.core.Toolkit.processXmlResource = function(resourceId) {
	return haxe.ui.toolkit.core.Toolkit.processXml(haxe.ui.toolkit.resources.ResourceManager.get_instance().getXML(resourceId));
};
haxe.ui.toolkit.core.Toolkit.processXml = function(xml) {
	var result = null;
	result = haxe.ui.toolkit.core.Toolkit.processXmlNode(xml.firstElement());
	haxe.ui.toolkit.core.Toolkit.postProcessXmlNode(xml.firstElement(),result);
	return result;
};
haxe.ui.toolkit.core.Toolkit.processXmlNode = function(node) {
	if(node == null) return null;
	var result = null;
	var nodeName = node.get_nodeName();
	var n = nodeName.indexOf(":");
	if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
	nodeName = nodeName.toLowerCase();
	var condition = node.get("condition");
	if(condition != null) {
		var parser = new hscript.Parser();
		var program = parser.parseString(condition);
		var interp = new hscript.Interp();
		var clientWrapper = new haxe.ui.toolkit.hscript.ClientWrapper();
		interp.variables.set("Client",clientWrapper);
		var conditionResult = interp.execute(program);
		if(conditionResult == false) return null;
	}
	if(nodeName == "import") {
		var importResource = node.get("resource");
		if(importResource != null) {
			var importData = haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(importResource);
			if(importData != null) {
				var importXml = Xml.parse(importData);
				return haxe.ui.toolkit.core.Toolkit.processXml(importXml);
			}
		}
	} else if(nodeName == "script") {
	} else if(nodeName == "style") {
		var p = new haxe.ui.toolkit.core.xml.StyleProcessor();
		result = p.process(node);
	} else if(haxe.ui.toolkit.core.ClassManager.get_instance().hasDataSourceClass(nodeName)) {
		var p1 = new haxe.ui.toolkit.core.xml.DataProcessor();
		result = p1.process(node);
	} else {
		var p2 = new haxe.ui.toolkit.core.xml.UIProcessor();
		result = p2.process(node);
		if(result == null) haxe.Log.trace("WARNING: Could not find processor for '" + nodeName + "'",{ fileName : "Toolkit.hx", lineNumber : 173, className : "haxe.ui.toolkit.core.Toolkit", methodName : "processXmlNode"});
	}
	var $it0 = node.elements();
	while( $it0.hasNext() ) {
		var child = $it0.next();
		var childResult = haxe.ui.toolkit.core.Toolkit.processXmlNode(child);
		if(js.Boot.__instanceof(childResult,haxe.ui.toolkit.data.IDataSource) && js.Boot.__instanceof(result,haxe.ui.toolkit.core.interfaces.IDataComponent)) (js.Boot.__cast(result , haxe.ui.toolkit.core.interfaces.IDataComponent)).set_dataSource(js.Boot.__cast(childResult , haxe.ui.toolkit.data.IDataSource));
		if(js.Boot.__instanceof(childResult,haxe.ui.toolkit.core.interfaces.IDisplayObject) && js.Boot.__instanceof(result,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) (js.Boot.__cast(result , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)).addChild(js.Boot.__cast(childResult , haxe.ui.toolkit.core.interfaces.IDisplayObject));
	}
	return result;
};
haxe.ui.toolkit.core.Toolkit.postProcessXmlNode = function(node,parentObject) {
	if(node == null) return null;
	var result = null;
	var nodeName = node.get_nodeName();
	var n = nodeName.indexOf(":");
	if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
	nodeName = nodeName.toLowerCase();
	var condition = node.get("condition");
	if(condition != null) {
		var parser = new hscript.Parser();
		var program = parser.parseString(condition);
		var interp = new hscript.Interp();
		var clientWrapper = new haxe.ui.toolkit.hscript.ClientWrapper();
		interp.variables.set("Client",clientWrapper);
		var conditionResult = interp.execute(program);
		if(conditionResult == false) return null;
	}
	if(nodeName == "script") {
		var scriptResource = node.get("resource");
		var scriptData = "";
		if(scriptResource != null) {
			scriptData += haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(scriptResource);
			scriptData += "\n\n";
		}
		var scriptNodeData = node.firstChild().get_nodeValue();
		if(scriptNodeData != null) {
			scriptNodeData = StringTools.trim(scriptNodeData);
			scriptData += "\n\n" + scriptNodeData;
		}
		if(parentObject != null && js.Boot.__instanceof(parentObject,haxe.ui.toolkit.core.interfaces.IComponent)) (js.Boot.__cast(parentObject , haxe.ui.toolkit.core.interfaces.IComponent)).addScriptlet(scriptData);
	}
	var $it0 = node.elements();
	while( $it0.hasNext() ) {
		var child = $it0.next();
		var childResult = haxe.ui.toolkit.core.Toolkit.postProcessXmlNode(child,parentObject);
	}
	return result;
};
haxe.ui.toolkit.core.Toolkit._transitionRegister = null;
haxe.ui.toolkit.core.Toolkit.get_defaultTransition = function() {
	return haxe.ui.toolkit.core.Toolkit._defaultTransition;
};
haxe.ui.toolkit.core.Toolkit.set_defaultTransition = function(value) {
	haxe.ui.toolkit.core.Toolkit._defaultTransition = value;
	return value;
};
haxe.ui.toolkit.core.Toolkit.getTransitionForClass = function(cls) {
	var s = haxe.ui.toolkit.core.Toolkit._defaultTransition;
	var className = Type.getClassName(cls);
	if(haxe.ui.toolkit.core.Toolkit._transitionRegister != null && haxe.ui.toolkit.core.Toolkit._transitionRegister.get(className) != null) s = haxe.ui.toolkit.core.Toolkit._transitionRegister.get(className);
	return s;
};
haxe.ui.toolkit.core.Toolkit.setTransitionForClass = function(cls,transition) {
	if(haxe.ui.toolkit.core.Toolkit._transitionRegister == null) haxe.ui.toolkit.core.Toolkit._transitionRegister = new haxe.ds.StringMap();
	var className = Type.getClassName(cls);
	haxe.ui.toolkit.core.Toolkit._transitionRegister.set(className,transition);
};
haxe.ui.toolkit.core.Toolkit.addScriptletClass = function(name,cls) {
	haxe.ui.toolkit.hscript.ScriptManager.get_instance().addClass(name,cls);
};
haxe.ui.toolkit.core.Toolkit.addStyleSheet = function(resourceId) {
	haxe.ui.toolkit.style.StyleManager.get_instance().addStyles(haxe.ui.toolkit.style.StyleParser.fromString(haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(resourceId)));
};
haxe.ui.toolkit.core.Toolkit.open = function(fn,options) {
	if(options != null) return haxe.ui.toolkit.core.Toolkit.openPopup(options,fn);
	return haxe.ui.toolkit.core.Toolkit.openFullscreen(fn);
};
haxe.ui.toolkit.core.Toolkit.openFullscreen = function(fn) {
	var root = haxe.ui.toolkit.core.RootManager.get_instance().createRoot({ x : 0, y : 0, percentWidth : 100, percentHeight : 100, styleName : "fullscreen"},fn);
	return root;
};
haxe.ui.toolkit.core.Toolkit.openPopup = function(options,fn) {
	if(options == null) options = { };
	if(options.x != null) options.x = options.x; else options.x = 20;
	if(options.y != null) options.y = options.y; else options.y = 20;
	if(options.styleName != null) options.styleName = options.styleName; else options.styleName = "popup";
	var root = haxe.ui.toolkit.core.RootManager.get_instance().createRoot(options,fn);
	return root;
};
haxe.ui.toolkit.core.Toolkit.get_scaleFactor = function() {
	if(haxe.ui.toolkit.core.Toolkit._scaleFactor == 0) {
		if(haxe.ui.toolkit.core.Toolkit.autoScale == true) {
			haxe.ui.toolkit.core.Toolkit.set_scaleFactor(openfl.system.Capabilities.get_screenDPI());
			if(haxe.ui.toolkit.core.Toolkit._scaleFactor > 120) haxe.ui.toolkit.core.Toolkit._scaleFactor /= 120; else haxe.ui.toolkit.core.Toolkit._scaleFactor = 1;
		} else haxe.ui.toolkit.core.Toolkit._scaleFactor = 1;
	}
	return haxe.ui.toolkit.core.Toolkit._scaleFactor;
};
haxe.ui.toolkit.core.Toolkit.set_scaleFactor = function(value) {
	haxe.ui.toolkit.core.Toolkit._scaleFactor = value;
	return value;
};
haxe.ui.toolkit.core.Toolkit.prototype = {
	initInstance: function() {
		haxe.ui.toolkit.core.ClassManager.get_instance();
	}
	,__class__: haxe.ui.toolkit.core.Toolkit
};
haxe.ui.toolkit.core.XMLController = function(xmlResourceId) {
	haxe.ui.toolkit.core.Controller.call(this,haxe.ui.toolkit.core.Toolkit.processXml(Xml.parse(haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(xmlResourceId))));
};
$hxClasses["haxe.ui.toolkit.core.XMLController"] = haxe.ui.toolkit.core.XMLController;
haxe.ui.toolkit.core.XMLController.__name__ = ["haxe","ui","toolkit","core","XMLController"];
haxe.ui.toolkit.core.XMLController.__super__ = haxe.ui.toolkit.core.Controller;
haxe.ui.toolkit.core.XMLController.prototype = $extend(haxe.ui.toolkit.core.Controller.prototype,{
	__class__: haxe.ui.toolkit.core.XMLController
});
haxe.ui.toolkit.core.base = {};
haxe.ui.toolkit.core.base.HorizontalAlign = function() { };
$hxClasses["haxe.ui.toolkit.core.base.HorizontalAlign"] = haxe.ui.toolkit.core.base.HorizontalAlign;
haxe.ui.toolkit.core.base.HorizontalAlign.__name__ = ["haxe","ui","toolkit","core","base","HorizontalAlign"];
haxe.ui.toolkit.core.base.State = function() { };
$hxClasses["haxe.ui.toolkit.core.base.State"] = haxe.ui.toolkit.core.base.State;
haxe.ui.toolkit.core.base.State.__name__ = ["haxe","ui","toolkit","core","base","State"];
haxe.ui.toolkit.core.base.VerticalAlign = function() { };
$hxClasses["haxe.ui.toolkit.core.base.VerticalAlign"] = haxe.ui.toolkit.core.base.VerticalAlign;
haxe.ui.toolkit.core.base.VerticalAlign.__name__ = ["haxe","ui","toolkit","core","base","VerticalAlign"];
haxe.ui.toolkit.core.interfaces.Direction = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.Direction"] = haxe.ui.toolkit.core.interfaces.Direction;
haxe.ui.toolkit.core.interfaces.Direction.__name__ = ["haxe","ui","toolkit","core","interfaces","Direction"];
haxe.ui.toolkit.core.interfaces.InvalidationFlag = function() { };
$hxClasses["haxe.ui.toolkit.core.interfaces.InvalidationFlag"] = haxe.ui.toolkit.core.interfaces.InvalidationFlag;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.__name__ = ["haxe","ui","toolkit","core","interfaces","InvalidationFlag"];
haxe.ui.toolkit.core.renderers = {};
haxe.ui.toolkit.core.renderers.ItemRenderer = function() {
	haxe.ui.toolkit.core.StateComponent.call(this);
	this.get_sprite().buttonMode = true;
	this.get_sprite().useHandCursor = true;
	this.set_state("normal");
};
$hxClasses["haxe.ui.toolkit.core.renderers.ItemRenderer"] = haxe.ui.toolkit.core.renderers.ItemRenderer;
haxe.ui.toolkit.core.renderers.ItemRenderer.__name__ = ["haxe","ui","toolkit","core","renderers","ItemRenderer"];
haxe.ui.toolkit.core.renderers.ItemRenderer.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable,haxe.ui.toolkit.core.interfaces.IItemRenderer];
haxe.ui.toolkit.core.renderers.ItemRenderer.__super__ = haxe.ui.toolkit.core.StateComponent;
haxe.ui.toolkit.core.renderers.ItemRenderer.prototype = $extend(haxe.ui.toolkit.core.StateComponent.prototype,{
	initialize: function() {
		haxe.ui.toolkit.core.StateComponent.prototype.initialize.call(this);
		this.addStatesRecursively(this);
	}
	,addStatesRecursively: function(c) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.StateComponent) && c != this) (js.Boot.__cast(c , haxe.ui.toolkit.core.StateComponent)).addStates(this.get_states());
		var _g = 0;
		var _g1 = c.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(this.isInteractive(c)) continue;
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) this.addStatesRecursively(js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer));
		}
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		this.updateComponents();
		this.attachEvents(this);
		return value;
	}
	,update: function() {
		this.updateComponents();
	}
	,allowSelection: function(stageX,stageY) {
		var allow = true;
		var c = this.findComponentUnderPoint(stageX,stageY);
		while(c != null) {
			if(this.isInteractive(c)) {
				allow = false;
				break;
			}
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.DisplayObjectContainer) == false) break;
			c = (js.Boot.__cast(c , haxe.ui.toolkit.core.DisplayObjectContainer)).findComponentUnderPoint(stageX,stageY);
		}
		return allow;
	}
	,attachEvents: function(c) {
		var _g = 0;
		var _g1 = c.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(this.isInteractive(child)) this.attachEvent(child); else if(js.Boot.__instanceof(child,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) this.attachEvents(js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer));
		}
	}
	,attachEvent: function(c) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Slider)) {
			c.removeEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
		} else if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Button)) {
			c.removeEventListener("haxeui_" + "click",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "click",$bind(this,this._onComponentEvent));
		} else if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.TextInput)) {
			c.removeEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
			c.addEventListener("haxeui_" + "change",$bind(this,this._onComponentEvent));
		}
	}
	,_onComponentEvent: function(event) {
		if(event.get_component() != null && event.get_component().get_id() != null && event.get_component().get_id().length > 0) Reflect.setField(this._data,event.get_component().get_id(),event.get_component().get_value());
		this.dispatchProxyEvent("haxeui_" + "componentEvent",event);
	}
	,dispatchProxyEvent: function(type,refEvent) {
		if(this.eventDispatcher != null) {
			var c = null;
			if(refEvent != null && refEvent.get_component() != null) c = refEvent.get_component();
			var uiEvent = new haxe.ui.toolkit.events.UIEvent(type,c);
			uiEvent.data = this._data;
			uiEvent.data.update = $bind(this,this.update);
			uiEvent.data.itemRenderer = this;
			this.eventDispatcher.dispatchEvent(uiEvent);
		}
	}
	,updateComponents: function() {
		var fields = Reflect.fields(this._data);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var componentId = f;
			var value = Reflect.field(this._data,f);
			var c = this.findChild(componentId,null,true);
			if(c != null) this.updateComponentValue(c,value);
		}
	}
	,updateComponentValue: function(c,value) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.Component)) (js.Boot.__cast(c , haxe.ui.toolkit.core.Component)).set_value(value);
	}
	,get_states: function() {
		return ["normal","over","selected","disabled"];
	}
	,set_state: function(value) {
		this.setStateRecursively(value,this);
		return haxe.ui.toolkit.core.StateComponent.prototype.set_state.call(this,value);
	}
	,setStateRecursively: function(value,c) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.StateComponent) && c != this) (js.Boot.__cast(c , haxe.ui.toolkit.core.StateComponent)).set_state(value);
		var _g = 0;
		var _g1 = c.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(this.isInteractive(c)) continue;
			if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer)) this.setStateRecursively(value,js.Boot.__cast(child , haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer));
		}
	}
	,isInteractive: function(c) {
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Button) || js.Boot.__instanceof(c,haxe.ui.toolkit.controls.Slider) || js.Boot.__instanceof(c,haxe.ui.toolkit.controls.TextInput)) return true;
		return false;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.StateComponent.prototype.clone.call(this);
		var _g = 0;
		var _g1 = this.get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			c.addChild(child.clone());
		}
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.renderers.ItemRenderer();
	}
	,__class__: haxe.ui.toolkit.core.renderers.ItemRenderer
	,__properties__: $extend(haxe.ui.toolkit.core.StateComponent.prototype.__properties__,{set_data:"set_data",get_data:"get_data"})
});
haxe.ui.toolkit.core.renderers.BasicItemRenderer = function() {
	haxe.ui.toolkit.core.renderers.ItemRenderer.call(this);
	this._layout = new haxe.ui.toolkit.layout.HorizontalLayout();
	this._maintext = new haxe.ui.toolkit.controls.Text();
	this._maintext.set_text("Text");
	this._maintext.set_id("text");
	this._maintext.set_verticalAlign("center");
	this._maintext.set_percentWidth(100);
	this.addChild(this._maintext);
};
$hxClasses["haxe.ui.toolkit.core.renderers.BasicItemRenderer"] = haxe.ui.toolkit.core.renderers.BasicItemRenderer;
haxe.ui.toolkit.core.renderers.BasicItemRenderer.__name__ = ["haxe","ui","toolkit","core","renderers","BasicItemRenderer"];
haxe.ui.toolkit.core.renderers.BasicItemRenderer.__super__ = haxe.ui.toolkit.core.renderers.ItemRenderer;
haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype = $extend(haxe.ui.toolkit.core.renderers.ItemRenderer.prototype,{
	set_data: function(value) {
		var n = 0;
		if(value.icon != null) {
			if(this._icon == null) {
				this._icon = new haxe.ui.toolkit.controls.Image();
				this._icon.set_id("icon");
				this._icon.set_verticalAlign("center");
				this.addChildAt(this._icon,n);
				n++;
			}
		}
		if(value.subtext != null) {
			if(this._vbox == null) {
				this._vbox = new haxe.ui.toolkit.containers.VBox();
				this._vbox.set_percentWidth(100);
				this.addChildAt(this._vbox,n);
			}
			if(this._subtext == null) {
				this._subtext = new haxe.ui.toolkit.controls.Text();
				this._subtext.set_id("subtext");
				this._subtext.set_percentWidth(100);
				this._subtext.set_multiline(true);
				this._subtext.set_wrapLines(true);
				this.removeChild(this._maintext,false);
				this._vbox.addChild(this._maintext);
				this._vbox.addChild(this._subtext);
			}
		}
		return haxe.ui.toolkit.core.renderers.ItemRenderer.prototype.set_data.call(this,value);
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.renderers.ItemRenderer.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.renderers.BasicItemRenderer();
	}
	,__class__: haxe.ui.toolkit.core.renderers.BasicItemRenderer
});
haxe.ui.toolkit.core.renderers.ComponentItemRenderer = function() {
	haxe.ui.toolkit.core.renderers.BasicItemRenderer.call(this);
};
$hxClasses["haxe.ui.toolkit.core.renderers.ComponentItemRenderer"] = haxe.ui.toolkit.core.renderers.ComponentItemRenderer;
haxe.ui.toolkit.core.renderers.ComponentItemRenderer.__name__ = ["haxe","ui","toolkit","core","renderers","ComponentItemRenderer"];
haxe.ui.toolkit.core.renderers.ComponentItemRenderer.__super__ = haxe.ui.toolkit.core.renderers.BasicItemRenderer;
haxe.ui.toolkit.core.renderers.ComponentItemRenderer.prototype = $extend(haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype,{
	get_component: function() {
		return this._component;
	}
	,set_data: function(value) {
		var type = value.componentType;
		if(type != null) {
			var cls = this.getClassFromType(type);
			if(cls != null && js.Boot.__instanceof(this._component,cls) == false) {
				if(this._component != null) this.removeChild(this._component);
				this._component = Type.createInstance(cls,[]);
				this._component.set_verticalAlign("center");
				this._component.set_id("componentValue");
				this._component.set_styleName(value.componentStyleName);
				if(value.componentSize != null) {
					var cx = value.componentSize;
					this._component.set_autoSize(false);
					this._component.set_width(cx);
				}
				this.addChildAt(this._component,this.get_numChildren());
			}
		}
		return haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype.set_data.call(this,value);
	}
	,getClassFromType: function(type) {
		type = type.toLowerCase();
		if(type == "button") return haxe.ui.toolkit.controls.Button; else if(type == "slider") return haxe.ui.toolkit.controls.HSlider; else if(type == "image") return haxe.ui.toolkit.controls.Image; else if(type == "textinput") return haxe.ui.toolkit.controls.TextInput;
		return null;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.core.renderers.ComponentItemRenderer();
	}
	,__class__: haxe.ui.toolkit.core.renderers.ComponentItemRenderer
	,__properties__: $extend(haxe.ui.toolkit.core.renderers.BasicItemRenderer.prototype.__properties__,{get_component:"get_component"})
});
haxe.ui.toolkit.core.xml = {};
haxe.ui.toolkit.core.xml.IXMLProcessor = function() { };
$hxClasses["haxe.ui.toolkit.core.xml.IXMLProcessor"] = haxe.ui.toolkit.core.xml.IXMLProcessor;
haxe.ui.toolkit.core.xml.IXMLProcessor.__name__ = ["haxe","ui","toolkit","core","xml","IXMLProcessor"];
haxe.ui.toolkit.core.xml.IXMLProcessor.prototype = {
	__class__: haxe.ui.toolkit.core.xml.IXMLProcessor
};
haxe.ui.toolkit.core.xml.XMLProcessor = function() {
};
$hxClasses["haxe.ui.toolkit.core.xml.XMLProcessor"] = haxe.ui.toolkit.core.xml.XMLProcessor;
haxe.ui.toolkit.core.xml.XMLProcessor.__name__ = ["haxe","ui","toolkit","core","xml","XMLProcessor"];
haxe.ui.toolkit.core.xml.XMLProcessor.__interfaces__ = [haxe.ui.toolkit.core.xml.IXMLProcessor];
haxe.ui.toolkit.core.xml.XMLProcessor.prototype = {
	process: function(node) {
		return null;
	}
	,stripNamespace: function(nodeName) {
		var n = nodeName.indexOf(":");
		if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
		nodeName = nodeName.toLowerCase();
		return nodeName;
	}
	,__class__: haxe.ui.toolkit.core.xml.XMLProcessor
};
haxe.ui.toolkit.core.xml.DataProcessor = function() {
	haxe.ui.toolkit.core.xml.XMLProcessor.call(this);
};
$hxClasses["haxe.ui.toolkit.core.xml.DataProcessor"] = haxe.ui.toolkit.core.xml.DataProcessor;
haxe.ui.toolkit.core.xml.DataProcessor.__name__ = ["haxe","ui","toolkit","core","xml","DataProcessor"];
haxe.ui.toolkit.core.xml.DataProcessor.createDataSource = function(className,config) {
	var ds = Type.createInstance(Type.resolveClass(className),[]);
	if(ds != null) {
		ds.create(config);
		haxe.ui.toolkit.data.DataManager.get_instance().registerDataSource(ds);
	}
	return ds;
};
haxe.ui.toolkit.core.xml.DataProcessor.__super__ = haxe.ui.toolkit.core.xml.XMLProcessor;
haxe.ui.toolkit.core.xml.DataProcessor.prototype = $extend(haxe.ui.toolkit.core.xml.XMLProcessor.prototype,{
	process: function(node) {
		var result = null;
		var nodeName = this.stripNamespace(node.get_nodeName());
		nodeName = nodeName.toLowerCase();
		var className = haxe.ui.toolkit.core.ClassManager.get_instance().getDataSourceClassName(nodeName);
		if(className != null) result = haxe.ui.toolkit.core.xml.DataProcessor.createDataSource(className,node);
		return result;
	}
	,__class__: haxe.ui.toolkit.core.xml.DataProcessor
});
haxe.ui.toolkit.core.xml.StyleProcessor = function() {
	haxe.ui.toolkit.core.xml.XMLProcessor.call(this);
};
$hxClasses["haxe.ui.toolkit.core.xml.StyleProcessor"] = haxe.ui.toolkit.core.xml.StyleProcessor;
haxe.ui.toolkit.core.xml.StyleProcessor.__name__ = ["haxe","ui","toolkit","core","xml","StyleProcessor"];
haxe.ui.toolkit.core.xml.StyleProcessor.__super__ = haxe.ui.toolkit.core.xml.XMLProcessor;
haxe.ui.toolkit.core.xml.StyleProcessor.prototype = $extend(haxe.ui.toolkit.core.xml.XMLProcessor.prototype,{
	process: function(node) {
		var styleData = node.firstChild().get_nodeValue();
		styleData = StringTools.trim(styleData);
		var styles = haxe.ui.toolkit.style.StyleParser.fromString(styleData);
		haxe.ui.toolkit.style.StyleManager.get_instance().addStyles(styles);
		return null;
	}
	,__class__: haxe.ui.toolkit.core.xml.StyleProcessor
});
haxe.ui.toolkit.core.xml.UIProcessor = function() {
	haxe.ui.toolkit.core.xml.XMLProcessor.call(this);
};
$hxClasses["haxe.ui.toolkit.core.xml.UIProcessor"] = haxe.ui.toolkit.core.xml.UIProcessor;
haxe.ui.toolkit.core.xml.UIProcessor.__name__ = ["haxe","ui","toolkit","core","xml","UIProcessor"];
haxe.ui.toolkit.core.xml.UIProcessor.createComponent = function(className,config) {
	var c = Type.createInstance(Type.resolveClass(className),[]);
	try {
		var $it0 = config.attributes();
		while( $it0.hasNext() ) {
			var attr = $it0.next();
			if(StringTools.startsWith(attr,"xmlns:")) continue;
			var value = config.get(attr);
			if(haxe.ui.toolkit.hscript.ScriptUtils.isScript(value)) value = haxe.ui.toolkit.hscript.ScriptManager.get_instance().executeScript(value);
			if(attr == "width") {
				var width = 0;
				var percentWidth = -1;
				var widthString = value;
				if(widthString != null) {
					width = Std.parseFloat(widthString);
					if(widthString.indexOf("%") != -1) {
						width = 0;
						percentWidth = Std.parseFloat(HxOverrides.substr(widthString,0,widthString.length - 1));
					}
				}
				if(width != 0) c.set_width(width);
				if(percentWidth != -1) c.set_percentWidth(percentWidth);
			} else if(attr == "height") {
				var height = 0;
				var percentHeight = -1;
				var heightString = value;
				if(heightString != null) {
					height = Std.parseFloat(heightString);
					if(heightString.indexOf("%") != -1) {
						height = 0;
						percentHeight = Std.parseFloat(HxOverrides.substr(heightString,0,heightString.length - 1));
					}
				}
				if(height != 0) c.set_height(height);
				if(percentHeight != -1) c.set_percentHeight(percentHeight);
			} else if(attr == "style") {
				if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.StyleableDisplayObject)) {
					var inlineStyles = haxe.ui.toolkit.style.StyleParser.fromString("_temp {" + value + "}");
					if(inlineStyles != null) {
						var style = inlineStyles.getStyle("_temp");
						if(style != null) {
							(js.Boot.__cast(c , haxe.ui.toolkit.core.StyleableDisplayObject)).set_style(style);
							(js.Boot.__cast(c , haxe.ui.toolkit.core.StyleableDisplayObject)).set_styleString(value);
						}
					}
				}
			} else if(attr == "condition") {
			} else if(attr == "layout") switch(value) {
			case "absolute":
				c.set_layout(new haxe.ui.toolkit.layout.AbsoluteLayout());
				throw "__break__";
				break;
			case "box":
				c.set_layout(new haxe.ui.toolkit.layout.BoxLayout());
				throw "__break__";
				break;
			case "grid":
				c.set_layout(new haxe.ui.toolkit.layout.GridLayout());
				throw "__break__";
				break;
			case "horizontal":
				c.set_layout(new haxe.ui.toolkit.layout.HorizontalLayout());
				throw "__break__";
				break;
			case "vertical":
				c.set_layout(new haxe.ui.toolkit.layout.VerticalLayout());
				throw "__break__";
				break;
			case "continuousVertical":
				c.set_layout(new haxe.ui.toolkit.layout.VerticalContinuousLayout());
				throw "__break__";
				break;
			case "continuousHorizontal":
				c.set_layout(new haxe.ui.toolkit.layout.HorizontalContinuousLayout());
				throw "__break__";
				break;
			default:
				c.set_layout(new haxe.ui.toolkit.layout.DefaultLayout());
				throw "__break__";
			} else if(attr == "dataSource") {
				if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IDataComponent)) {
					var dataComponent;
					dataComponent = js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IDataComponent);
					var registeredDataSource = haxe.ui.toolkit.data.DataManager.get_instance().getRegisteredDataSource(value);
					if(registeredDataSource != null) dataComponent.set_dataSource(registeredDataSource); else {
						var n = value.indexOf("://");
						if(n != -1) {
							var proto = HxOverrides.substr(value,0,n);
							value = HxOverrides.substr(value,n + 3,value.length);
							var className1 = haxe.ui.toolkit.core.ClassManager.get_instance().getDataSourceClassName(proto);
							var ds = Type.createInstance(Type.resolveClass(className1),[]);
							if(ds != null) {
								ds.createFromResource(value);
								haxe.ui.toolkit.data.DataManager.get_instance().registerDataSource(ds);
								dataComponent.set_dataSource(ds);
							}
						}
					}
				}
			} else if(attr == "text") c.set_text(value); else if(StringTools.startsWith(attr.toLowerCase(),"on")) {
				var event = HxOverrides.substr(attr,2,attr.length).toLowerCase();
				c.addScriptletEventHandler(event,value);
			} else try {
				if(Std.parseInt(value) != null) Reflect.setProperty(c,attr,Std.parseInt(value)); else if(value == "true" || value == "yes" || value == "false" || value == "no") Reflect.setProperty(c,attr,haxe.ui.toolkit.util.TypeParser.parseBool(value)); else Reflect.setProperty(c,attr,value);
			} catch( e ) {
				haxe.Log.trace("Exception setting component property: " + attr + " (" + Std.string(e) + ")",{ fileName : "UIProcessor.hx", lineNumber : 163, className : "haxe.ui.toolkit.core.xml.UIProcessor", methodName : "createComponent"});
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	return c;
};
haxe.ui.toolkit.core.xml.UIProcessor.__super__ = haxe.ui.toolkit.core.xml.XMLProcessor;
haxe.ui.toolkit.core.xml.UIProcessor.prototype = $extend(haxe.ui.toolkit.core.xml.XMLProcessor.prototype,{
	process: function(node) {
		var result = null;
		var nodeName = node.get_nodeName();
		var n = nodeName.indexOf(":");
		if(n != -1) nodeName = HxOverrides.substr(nodeName,n + 1,nodeName.length);
		nodeName = nodeName.toLowerCase();
		var className = haxe.ui.toolkit.core.ClassManager.get_instance().getComponentClassName(nodeName);
		var direction = node.get("direction");
		if(direction != null) {
			var directionalPrefix = HxOverrides.substr(direction,0,1);
			var directionalName = directionalPrefix + nodeName;
			var directionalClassName = haxe.ui.toolkit.core.ClassManager.get_instance().getComponentClassName(directionalName);
			if(directionalClassName != null) className = directionalClassName;
		}
		if(className != null) result = haxe.ui.toolkit.core.xml.UIProcessor.createComponent(className,node);
		return result;
	}
	,__class__: haxe.ui.toolkit.core.xml.UIProcessor
});
haxe.ui.toolkit.data = {};
haxe.ui.toolkit.data.IDataSource = function() { };
$hxClasses["haxe.ui.toolkit.data.IDataSource"] = haxe.ui.toolkit.data.IDataSource;
haxe.ui.toolkit.data.IDataSource.__name__ = ["haxe","ui","toolkit","data","IDataSource"];
haxe.ui.toolkit.data.IDataSource.prototype = {
	__class__: haxe.ui.toolkit.data.IDataSource
};
haxe.ui.toolkit.data.DataSource = function() {
	this._hasChanged = false;
	this._allowEvents = true;
	this.allowDeletions = true;
	this.allowUpdates = true;
	this.allowAdditions = true;
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["haxe.ui.toolkit.data.DataSource"] = haxe.ui.toolkit.data.DataSource;
haxe.ui.toolkit.data.DataSource.__name__ = ["haxe","ui","toolkit","data","DataSource"];
haxe.ui.toolkit.data.DataSource.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IEventDispatcher,haxe.ui.toolkit.data.IDataSource];
haxe.ui.toolkit.data.DataSource.__super__ = openfl.events.EventDispatcher;
haxe.ui.toolkit.data.DataSource.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_config: function() {
		return this._config;
	}
	,clone: function() {
		var newDS = null;
		return newDS;
	}
	,get_allowEvents: function() {
		return this._allowEvents;
	}
	,set_allowEvents: function(value) {
		this._allowEvents = value;
		if(this._allowEvents == true) {
			if(this._hasChanged == true) this.dispatchChanged();
		}
		return value;
	}
	,get_id: function() {
		return this._id;
	}
	,set_id: function(value) {
		this._id = value;
		return value;
	}
	,create: function(config) {
		this._config = config;
		if(this._config == null) return;
		this._id = config.get("id");
	}
	,open: function() {
		return this._open();
	}
	,close: function() {
		return this._close();
	}
	,moveFirst: function() {
		return this._moveFirst();
	}
	,moveNext: function() {
		return this._moveNext();
	}
	,get: function() {
		return this._get();
	}
	,add: function(o) {
		var b = false;
		if(this.allowAdditions) {
			b = this._add(o);
			if(b == true) this.dispatchChanged();
		}
		return b;
	}
	,update: function(o) {
		var b = false;
		if(this.allowUpdates) {
			b = this._update(o);
			if(b) this.dispatchChanged();
		}
		return b;
	}
	,remove: function() {
		var b = false;
		if(this.allowDeletions) {
			b = this._remove();
			if(b) this.dispatchChanged();
		}
		return b;
	}
	,removeAll: function() {
		if(this.moveFirst()) do this.remove(); while(this.moveFirst());
	}
	,hash: function() {
		var o = this.get();
		if(o == null) return null;
		return "" + this.getObjectId(o);
	}
	,size: function() {
		return -1;
	}
	,_open: function() {
		return false;
	}
	,_close: function() {
		return false;
	}
	,_moveFirst: function() {
		return false;
	}
	,_moveNext: function() {
		return false;
	}
	,_get: function() {
		return null;
	}
	,_add: function(o) {
		return false;
	}
	,_update: function(o) {
		return false;
	}
	,_remove: function() {
		return false;
	}
	,createFromString: function(data,config) {
	}
	,createFromResource: function(resourceId,config) {
		if(resourceId != null) {
			var data = haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(resourceId);
			this.createFromString(data,config);
		}
	}
	,dispatchChanged: function() {
		this._hasChanged = true;
		if(this._allowEvents == true) {
			this._hasChanged = false;
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
		}
	}
	,getObjectId: function(obj) {
		if(js.Boot.__instanceof(obj,Class)) {
			if(obj.__cls_id__ == null) obj.__cls_id__ = haxe.ui.toolkit.data.DataSource.clsId++;
			return obj.__cls_id__;
		} else {
			if(obj.__get_id__ == null) {
				var cls = Type.getClass(obj);
				if(cls == null) {
					var id = Std.random(2147483647);
					obj.__get_id__ = function() {
						return id;
					};
					return id;
				}
				var fstid = Std.random(2147483647);
				var _this = this;
				cls.prototype.__get_id__ = function() {
					if(_this.___id___ == null) return _this.___id___ = Std.random(2147483647);
					return _this.___id___;
				};
			}
			return obj.__get_id__();
		}
	}
	,__class__: haxe.ui.toolkit.data.DataSource
	,__properties__: {set_id:"set_id",get_id:"get_id",set_allowEvents:"set_allowEvents",get_allowEvents:"get_allowEvents",get_config:"get_config"}
});
haxe.ui.toolkit.data.ArrayDataSource = function() {
	this.pos = 0;
	haxe.ui.toolkit.data.DataSource.call(this);
	this.array = new Array();
};
$hxClasses["haxe.ui.toolkit.data.ArrayDataSource"] = haxe.ui.toolkit.data.ArrayDataSource;
haxe.ui.toolkit.data.ArrayDataSource.__name__ = ["haxe","ui","toolkit","data","ArrayDataSource"];
haxe.ui.toolkit.data.ArrayDataSource.__super__ = haxe.ui.toolkit.data.DataSource;
haxe.ui.toolkit.data.ArrayDataSource.prototype = $extend(haxe.ui.toolkit.data.DataSource.prototype,{
	create: function(config) {
		haxe.ui.toolkit.data.DataSource.prototype.create.call(this,config);
		if(config == null) return;
		this._id = config.get("id");
		var delimeter = config.get("delimeter");
		if(delimeter == null) delimeter = ",";
		delimeter = StringTools.replace(delimeter,"\\n","\n");
		var resource = config.get("resource");
		if(resource != null) this.createFromResource(resource,{ delimeter : delimeter});
		var nodeText = null;
		if(config.firstChild() != null) nodeText = config.firstChild().get_nodeValue();
		if(nodeText != null) this.createFromString(nodeText,{ delimeter : delimeter});
	}
	,_moveFirst: function() {
		this.pos = 0;
		if(this.array == null || this.array.length == 0) return false;
		return true;
	}
	,_moveNext: function() {
		if(this.array == null || this.array.length == 0) return false;
		var b = false;
		if(this.pos + 1 < this.array.length) {
			this.pos += 1;
			b = true;
		}
		return b;
	}
	,_get: function() {
		if(this.array == null || this.array.length == 0) return null;
		return this.array[this.pos];
	}
	,_add: function(o) {
		this.array.push(o);
		return true;
	}
	,_remove: function() {
		var x = this.get();
		return HxOverrides.remove(this.array,x);
	}
	,size: function() {
		return this.array.length;
	}
	,createFromString: function(data,config) {
		if(data != null) {
			if(config == null) config = { };
			if(config.delimeter != null) config.delimeter = config.delimeter; else config.delimeter = ",";
			var arr = data.split(config.delimeter);
			if(arr != null) {
				var _g = 0;
				while(_g < arr.length) {
					var s = arr[_g];
					++_g;
					s = StringTools.trim(s);
					if(s.length > 0) {
						var o = { text : s};
						this.add(o);
					}
				}
			}
		}
	}
	,__class__: haxe.ui.toolkit.data.ArrayDataSource
});
haxe.ui.toolkit.data.DataManager = function() {
	this._dataSourceMap = new haxe.ds.StringMap();
};
$hxClasses["haxe.ui.toolkit.data.DataManager"] = haxe.ui.toolkit.data.DataManager;
haxe.ui.toolkit.data.DataManager.__name__ = ["haxe","ui","toolkit","data","DataManager"];
haxe.ui.toolkit.data.DataManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.data.DataManager._instance = null;
haxe.ui.toolkit.data.DataManager.instance = null;
haxe.ui.toolkit.data.DataManager.get_instance = function() {
	if(haxe.ui.toolkit.data.DataManager._instance == null) haxe.ui.toolkit.data.DataManager._instance = new haxe.ui.toolkit.data.DataManager();
	return haxe.ui.toolkit.data.DataManager._instance;
};
haxe.ui.toolkit.data.DataManager.prototype = {
	registerDataSource: function(dataSource) {
		var dataSourceId = dataSource.get_id();
		if(dataSourceId == null || dataSourceId.length == 0) {
			dataSourceId = haxe.ui.toolkit.util.Identifier.guid();
			dataSource.set_id(dataSourceId);
		}
		this._dataSourceMap.set(dataSourceId,dataSource);
	}
	,getRegisteredDataSource: function(id) {
		return this._dataSourceMap.get(id);
	}
	,get_dataSources: function() {
		var arr = new Array();
		var $it0 = this._dataSourceMap.iterator();
		while( $it0.hasNext() ) {
			var ds = $it0.next();
			arr.push(ds);
		}
		return arr;
	}
	,__class__: haxe.ui.toolkit.data.DataManager
	,__properties__: {get_dataSources:"get_dataSources"}
};
haxe.ui.toolkit.data.FilesDataSource = function() {
	haxe.ui.toolkit.data.ArrayDataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.FilesDataSource"] = haxe.ui.toolkit.data.FilesDataSource;
haxe.ui.toolkit.data.FilesDataSource.__name__ = ["haxe","ui","toolkit","data","FilesDataSource"];
haxe.ui.toolkit.data.FilesDataSource.__super__ = haxe.ui.toolkit.data.ArrayDataSource;
haxe.ui.toolkit.data.FilesDataSource.prototype = $extend(haxe.ui.toolkit.data.ArrayDataSource.prototype,{
	create: function(config) {
		if(config == null) return;
		this._id = config.get("id");
		var resource = config.get("resource");
		if(resource != null) this.createFromString(resource);
	}
	,_open: function() {
		return true;
	}
	,createFromString: function(data,config) {
		if(data != null) this._dir = this.fixDir(data);
	}
	,createFromResource: function(resourceId,config) {
		this.createFromString(resourceId,config);
	}
	,isDir: function(dir) {
		var isDir = false;
		return isDir;
	}
	,isRoot: function(dir) {
		var isRoot = false;
		return isRoot;
	}
	,fixDir: function(dir) {
		if(dir == null) return "";
		var fixedDir = dir;
		fixedDir = StringTools.replace(fixedDir,"\\","/");
		if(fixedDir.lastIndexOf("/") == fixedDir.length - 1 || fixedDir.lastIndexOf("\\") == fixedDir.length - 1) fixedDir = HxOverrides.substr(fixedDir,0,fixedDir.length - 1);
		return fixedDir;
	}
	,__class__: haxe.ui.toolkit.data.FilesDataSource
});
haxe.ui.toolkit.data.JSONDataSource = function() {
	haxe.ui.toolkit.data.ArrayDataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.JSONDataSource"] = haxe.ui.toolkit.data.JSONDataSource;
haxe.ui.toolkit.data.JSONDataSource.__name__ = ["haxe","ui","toolkit","data","JSONDataSource"];
haxe.ui.toolkit.data.JSONDataSource.__super__ = haxe.ui.toolkit.data.ArrayDataSource;
haxe.ui.toolkit.data.JSONDataSource.prototype = $extend(haxe.ui.toolkit.data.ArrayDataSource.prototype,{
	create: function(config) {
		if(config == null) return;
		this._id = config.get("id");
		var resource = config.get("resource");
		if(resource != null) this.createFromResource(resource);
		var nodeText = null;
		if(config.firstChild() != null) nodeText = config.firstChild().get_nodeValue();
		if(nodeText != null) this.createFromString(nodeText);
	}
	,createFromString: function(data,config) {
		if(data != null) {
			var jsonObject = JSON.parse(data);
			var arr = null;
			if((jsonObject instanceof Array) && jsonObject.__enum__ == null) {
				arr = js.Boot.__cast(jsonObject , Array);
				var _g = 0;
				while(_g < arr.length) {
					var o = arr[_g];
					++_g;
					this.add(o);
				}
			}
		}
	}
	,__class__: haxe.ui.toolkit.data.JSONDataSource
});
haxe.ui.toolkit.data.MySQLDataSource = function() {
	haxe.ui.toolkit.data.DataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.MySQLDataSource"] = haxe.ui.toolkit.data.MySQLDataSource;
haxe.ui.toolkit.data.MySQLDataSource.__name__ = ["haxe","ui","toolkit","data","MySQLDataSource"];
haxe.ui.toolkit.data.MySQLDataSource.__super__ = haxe.ui.toolkit.data.DataSource;
haxe.ui.toolkit.data.MySQLDataSource.prototype = $extend(haxe.ui.toolkit.data.DataSource.prototype,{
	__class__: haxe.ui.toolkit.data.MySQLDataSource
});
haxe.ui.toolkit.data.XMLDataSource = function() {
	haxe.ui.toolkit.data.ArrayDataSource.call(this);
};
$hxClasses["haxe.ui.toolkit.data.XMLDataSource"] = haxe.ui.toolkit.data.XMLDataSource;
haxe.ui.toolkit.data.XMLDataSource.__name__ = ["haxe","ui","toolkit","data","XMLDataSource"];
haxe.ui.toolkit.data.XMLDataSource.__super__ = haxe.ui.toolkit.data.ArrayDataSource;
haxe.ui.toolkit.data.XMLDataSource.prototype = $extend(haxe.ui.toolkit.data.ArrayDataSource.prototype,{
	create: function(config) {
		if(config == null) return;
		this._id = config.get("id");
		var resource = config.get("resource");
		if(resource != null) this.createFromResource(resource);
		var nodeText = null;
		if(config.firstChild() != null) nodeText = config.firstElement().toString();
		if(nodeText != null) this.createFromString(nodeText);
	}
	,createFromString: function(data,config) {
		if(data != null) {
			var xml = Xml.parse(data);
			if(xml != null) {
				var it = xml.firstElement().elements();
				while( it.hasNext() ) {
					var e = it.next();
					var o = { };
					var $it0 = e.attributes();
					while( $it0.hasNext() ) {
						var attrName = $it0.next();
						Reflect.setField(o,attrName,e.get(attrName));
					}
					if(Reflect.fields(o).length != 0) this.add(o);
				}
			}
		}
	}
	,__class__: haxe.ui.toolkit.data.XMLDataSource
});
haxe.ui.toolkit.events = {};
haxe.ui.toolkit.events.MenuEvent = function(type,menuItem) {
	openfl.events.Event.call(this,type);
	this.menuItem = menuItem;
};
$hxClasses["haxe.ui.toolkit.events.MenuEvent"] = haxe.ui.toolkit.events.MenuEvent;
haxe.ui.toolkit.events.MenuEvent.__name__ = ["haxe","ui","toolkit","events","MenuEvent"];
haxe.ui.toolkit.events.MenuEvent.__super__ = openfl.events.Event;
haxe.ui.toolkit.events.MenuEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: haxe.ui.toolkit.events.MenuEvent
});
haxe.ui.toolkit.events.UIEvent = function(type,c,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this._component = c;
};
$hxClasses["haxe.ui.toolkit.events.UIEvent"] = haxe.ui.toolkit.events.UIEvent;
haxe.ui.toolkit.events.UIEvent.__name__ = ["haxe","ui","toolkit","events","UIEvent"];
haxe.ui.toolkit.events.UIEvent.__super__ = openfl.events.Event;
haxe.ui.toolkit.events.UIEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		var c = new haxe.ui.toolkit.events.UIEvent(this.type,this._component,this.bubbles,this.cancelable);
		c.displayObject = this.displayObject;
		c.data = this.data;
		c.stageX = this.stageX;
		c.stageY = this.stageY;
		return c;
	}
	,get_component: function() {
		if(this._component != null) return this._component;
		if(this.displayObject == null || js.Boot.__instanceof(this.displayObject,haxe.ui.toolkit.core.Component) == false) return null;
		return js.Boot.__cast(this.displayObject , haxe.ui.toolkit.core.Component);
	}
	,getComponentAs: function(type) {
		var c = this.get_component();
		if(c == null) return null;
		return c;
	}
	,getDataAs: function(type) {
		var d = this.data;
		if(d == null) return null;
		return d;
	}
	,__class__: haxe.ui.toolkit.events.UIEvent
	,__properties__: {get_component:"get_component"}
});
haxe.ui.toolkit.hscript = {};
haxe.ui.toolkit.hscript.ClientWrapper = function() {
	this.language = haxe.ui.toolkit.core.Client.get_instance().get_language();
	this.dpi = haxe.ui.toolkit.core.Client.get_instance().get_dpi();
	this.platform = haxe.ui.toolkit.core.Client.get_instance().get_platform();
	this.target = haxe.ui.toolkit.core.Client.get_instance().get_target();
	this.mobile = haxe.ui.toolkit.core.Client.get_instance().get_mobile();
	this.screenWidth = haxe.ui.toolkit.core.Client.get_instance().get_screenWidth();
	this.screenHeight = haxe.ui.toolkit.core.Client.get_instance().get_screenHeight();
	this.windowWidth = haxe.ui.toolkit.core.Client.get_instance().get_windowWidth();
	this.windowHeight = haxe.ui.toolkit.core.Client.get_instance().get_windowHeight();
};
$hxClasses["haxe.ui.toolkit.hscript.ClientWrapper"] = haxe.ui.toolkit.hscript.ClientWrapper;
haxe.ui.toolkit.hscript.ClientWrapper.__name__ = ["haxe","ui","toolkit","hscript","ClientWrapper"];
haxe.ui.toolkit.hscript.ClientWrapper.prototype = {
	__class__: haxe.ui.toolkit.hscript.ClientWrapper
};
var hscript = {};
hscript.Interp = function() {
	this.variables = new haxe.ds.StringMap();
	this.locals = new haxe.ds.StringMap();
	this.variables.set("null",null);
	this.variables.set("true",true);
	this.variables.set("false",false);
	this.variables.set("trace",function(e) {
		haxe.Log.trace(Std.string(e),{ fileName : "hscript", lineNumber : 0});
	});
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript.Interp;
hscript.Interp.__name__ = ["hscript","Interp"];
hscript.Interp.prototype = {
	initOps: function() {
		var me = this;
		this.binops = new haxe.ds.StringMap();
		this.binops.set("+",function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		});
		this.binops.set("-",function(e11,e21) {
			return me.expr(e11) - me.expr(e21);
		});
		this.binops.set("*",function(e12,e22) {
			return me.expr(e12) * me.expr(e22);
		});
		this.binops.set("/",function(e13,e23) {
			return me.expr(e13) / me.expr(e23);
		});
		this.binops.set("%",function(e14,e24) {
			return me.expr(e14) % me.expr(e24);
		});
		this.binops.set("&",function(e15,e25) {
			return me.expr(e15) & me.expr(e25);
		});
		this.binops.set("|",function(e16,e26) {
			return me.expr(e16) | me.expr(e26);
		});
		this.binops.set("^",function(e17,e27) {
			return me.expr(e17) ^ me.expr(e27);
		});
		this.binops.set("<<",function(e18,e28) {
			return me.expr(e18) << me.expr(e28);
		});
		this.binops.set(">>",function(e19,e29) {
			return me.expr(e19) >> me.expr(e29);
		});
		this.binops.set(">>>",function(e110,e210) {
			return me.expr(e110) >>> me.expr(e210);
		});
		this.binops.set("==",function(e111,e211) {
			return me.expr(e111) == me.expr(e211);
		});
		this.binops.set("!=",function(e112,e212) {
			return me.expr(e112) != me.expr(e212);
		});
		this.binops.set(">=",function(e113,e213) {
			return me.expr(e113) >= me.expr(e213);
		});
		this.binops.set("<=",function(e114,e214) {
			return me.expr(e114) <= me.expr(e214);
		});
		this.binops.set(">",function(e115,e215) {
			return me.expr(e115) > me.expr(e215);
		});
		this.binops.set("<",function(e116,e216) {
			return me.expr(e116) < me.expr(e216);
		});
		this.binops.set("||",function(e117,e217) {
			return me.expr(e117) == true || me.expr(e217) == true;
		});
		this.binops.set("&&",function(e118,e218) {
			return me.expr(e118) == true && me.expr(e218) == true;
		});
		this.binops.set("=",$bind(this,this.assign));
		this.binops.set("...",function(e119,e219) {
			return new IntIterator(me.expr(e119),me.expr(e219));
		});
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v11,v21) {
			return v11 - v21;
		});
		this.assignOp("*=",function(v12,v22) {
			return v12 * v22;
		});
		this.assignOp("/=",function(v13,v23) {
			return v13 / v23;
		});
		this.assignOp("%=",function(v14,v24) {
			return v14 % v24;
		});
		this.assignOp("&=",function(v15,v25) {
			return v15 & v25;
		});
		this.assignOp("|=",function(v16,v26) {
			return v16 | v26;
		});
		this.assignOp("^=",function(v17,v27) {
			return v17 ^ v27;
		});
		this.assignOp("<<=",function(v18,v28) {
			return v18 << v28;
		});
		this.assignOp(">>=",function(v19,v29) {
			return v19 >> v29;
		});
		this.assignOp(">>>=",function(v110,v210) {
			return v110 >>> v210;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			if(l == null) this.variables.set(id,v); else l.r = v;
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			this.expr(e3)[this.expr(index)] = v;
			break;
		default:
			this.error(hscript.Error.EInvalidOp("="));
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		this.binops.set(op,function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		});
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) this.variables.set(id,v); else l.r = v;
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			var arr = this.expr(e3);
			var index1 = this.expr(index);
			v = fop(arr[index1],this.expr(e2));
			arr[index1] = v;
			break;
		default:
			return this.error(hscript.Error.EInvalidOp(op));
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e[1]) {
		case 1:
			var id = e[2];
			var l = this.locals.get(id);
			var v;
			if(l == null) v = this.variables.get(id); else v = l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					var value = v;
					this.variables.set(id,value);
				} else l.r = v;
			} else if(l == null) {
				var value1 = v + delta;
				this.variables.set(id,value1);
			} else l.r = v + delta;
			return v;
		case 5:
			var f = e[3];
			var e1 = e[2];
			var obj = this.expr(e1);
			var v1 = this.get(obj,f);
			if(prefix) {
				v1 += delta;
				this.set(obj,f,v1);
			} else this.set(obj,f,v1 + delta);
			return v1;
		case 16:
			var index = e[3];
			var e2 = e[2];
			var arr = this.expr(e2);
			var index1 = this.expr(index);
			var v2 = arr[index1];
			if(prefix) {
				v2 += delta;
				arr[index1] = v2;
			} else arr[index1] = v2 + delta;
			return v2;
		default:
			return this.error(hscript.Error.EInvalidOp(delta > 0?"++":"--"));
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe.ds.StringMap();
		this.declared = new Array();
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( e1 ) {
			if( js.Boot.__instanceof(e1,hscript._Interp.Stop) ) {
				switch(e1[1]) {
				case 0:
					throw "Invalid break";
					break;
				case 1:
					throw "Invalid continue";
					break;
				case 2:
					var v = e1[2];
					return v;
				}
			} else throw(e1);
		}
		return null;
	}
	,duplicate: function(h) {
		var h2 = new haxe.ds.StringMap();
		var $it0 = h.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = h.get(k);
			h2.set(k,value);
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			this.locals.set(d.n,d.old);
		}
	}
	,edef: function(e) {
		return e;
	}
	,error: function(e) {
		throw e;
		return null;
	}
	,resolve: function(id) {
		var l = this.locals.get(id);
		if(l != null) return l.r;
		var v = this.variables.get(id);
		if(v == null && !this.variables.exists(id)) this.error(hscript.Error.EUnknownVariable(id));
		return v;
	}
	,expr: function(e) {
		switch(e[1]) {
		case 0:
			var c = e[2];
			switch(c[1]) {
			case 0:
				var v = c[2];
				return v;
			case 1:
				var f = c[2];
				return f;
			case 2:
				var s = c[2];
				return s;
			}
			break;
		case 1:
			var id = e[2];
			return this.resolve(id);
		case 2:
			var e1 = e[4];
			var n = e[2];
			this.declared.push({ n : n, old : this.locals.get(n)});
			var value = { r : e1 == null?null:this.expr(e1)};
			this.locals.set(n,value);
			return null;
		case 3:
			var e2 = e[2];
			return this.expr(e2);
		case 4:
			var exprs = e[2];
			var old = this.declared.length;
			var v1 = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e3 = exprs[_g];
				++_g;
				v1 = this.expr(e3);
			}
			this.restore(old);
			return v1;
		case 5:
			var f1 = e[3];
			var e4 = e[2];
			return this.get(this.expr(e4),f1);
		case 6:
			var e21 = e[4];
			var e11 = e[3];
			var op = e[2];
			var fop = this.binops.get(op);
			if(fop == null) this.error(hscript.Error.EInvalidOp(op));
			return fop(e11,e21);
		case 7:
			var e5 = e[4];
			var prefix = e[3];
			var op1 = e[2];
			switch(op1) {
			case "!":
				return this.expr(e5) != true;
			case "-":
				return -this.expr(e5);
			case "++":
				return this.increment(e5,prefix,1);
			case "--":
				return this.increment(e5,prefix,-1);
			case "~":
				return ~this.expr(e5);
			default:
				this.error(hscript.Error.EInvalidOp(op1));
			}
			break;
		case 8:
			var params = e[3];
			var e6 = e[2];
			var args = new Array();
			var _g1 = 0;
			while(_g1 < params.length) {
				var p = params[_g1];
				++_g1;
				args.push(this.expr(p));
			}
			switch(e6[1]) {
			case 5:
				var f2 = e6[3];
				var e7 = e6[2];
				var obj = this.expr(e7);
				if(obj == null) this.error(hscript.Error.EInvalidAccess(f2));
				return this.fcall(obj,f2,args);
			default:
				return this.call(null,this.expr(e6),args);
			}
			break;
		case 9:
			var e22 = e[4];
			var e12 = e[3];
			var econd = e[2];
			if(this.expr(econd) == true) return this.expr(e12); else if(e22 == null) return null; else return this.expr(e22);
			break;
		case 10:
			var e8 = e[3];
			var econd1 = e[2];
			this.whileLoop(econd1,e8);
			return null;
		case 11:
			var e9 = e[4];
			var it = e[3];
			var v2 = e[2];
			this.forLoop(v2,it,e9);
			return null;
		case 12:
			throw hscript._Interp.Stop.SBreak;
			break;
		case 13:
			throw hscript._Interp.Stop.SContinue;
			break;
		case 15:
			var e10 = e[2];
			throw hscript._Interp.Stop.SReturn(e10 == null?null:this.expr(e10));
			break;
		case 14:
			var name = e[4];
			var fexpr = e[3];
			var params1 = e[2];
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g2 = 0;
			while(_g2 < params1.length) {
				var p1 = params1[_g2];
				++_g2;
				if(p1.opt) hasOpt = true; else minParams++;
			}
			var f3 = function(args1) {
				if(args1.length != params1.length) {
					if(args1.length < minParams) {
						var str = "Invalid number of parameters. Got " + args1.length + ", required " + minParams;
						if(name != null) str += " for function '" + name + "'";
						throw str;
					}
					var args2 = [];
					var extraParams = args1.length - minParams;
					var pos = 0;
					var _g3 = 0;
					while(_g3 < params1.length) {
						var p2 = params1[_g3];
						++_g3;
						if(p2.opt) {
							if(extraParams > 0) {
								args2.push(args1[pos++]);
								extraParams--;
							} else args2.push(null);
						} else args2.push(args1[pos++]);
					}
					args1 = args2;
				}
				var old1 = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g11 = 0;
				var _g4 = params1.length;
				while(_g11 < _g4) {
					var i = _g11++;
					me.locals.set(params1[i].name,{ r : args1[i]});
				}
				var r = null;
				try {
					r = me.exprReturn(fexpr);
				} catch( e13 ) {
					me.locals = old1;
					me.depth = depth;
					throw e13;
				}
				me.locals = old1;
				me.depth = depth;
				return r;
			};
			var f4 = Reflect.makeVarArgs(f3);
			if(name != null) {
				if(this.depth == 0) this.variables.set(name,f4); else {
					this.declared.push({ n : name, old : this.locals.get(name)});
					var ref = { r : f4};
					this.locals.set(name,ref);
					capturedLocals.set(name,ref);
				}
			}
			return f4;
		case 17:
			var arr = e[2];
			var a = new Array();
			var _g5 = 0;
			while(_g5 < arr.length) {
				var e14 = arr[_g5];
				++_g5;
				a.push(this.expr(e14));
			}
			return a;
		case 16:
			var index = e[3];
			var e15 = e[2];
			return this.expr(e15)[this.expr(index)];
		case 18:
			var params2 = e[3];
			var cl = e[2];
			var a1 = new Array();
			var _g6 = 0;
			while(_g6 < params2.length) {
				var e16 = params2[_g6];
				++_g6;
				a1.push(this.expr(e16));
			}
			return this.cnew(cl,a1);
		case 19:
			var e17 = e[2];
			throw this.expr(e17);
			break;
		case 20:
			var ecatch = e[5];
			var n1 = e[3];
			var e18 = e[2];
			var old2 = this.declared.length;
			try {
				var v3 = this.expr(e18);
				this.restore(old2);
				return v3;
			} catch( $e0 ) {
				if( js.Boot.__instanceof($e0,hscript._Interp.Stop) ) {
					var err = $e0;
					throw err;
				} else {
				var err1 = $e0;
				this.restore(old2);
				this.declared.push({ n : n1, old : this.locals.get(n1)});
				this.locals.set(n1,{ r : err1});
				var v4 = this.expr(ecatch);
				this.restore(old2);
				return v4;
				}
			}
			break;
		case 21:
			var fl = e[2];
			var o = { };
			var _g7 = 0;
			while(_g7 < fl.length) {
				var f5 = fl[_g7];
				++_g7;
				this.set(o,f5.name,this.expr(f5.e));
			}
			return o;
		case 22:
			var e23 = e[4];
			var e19 = e[3];
			var econd2 = e[2];
			if(this.expr(econd2) == true) return this.expr(e19); else return this.expr(e23);
			break;
		case 23:
			var def = e[4];
			var cases = e[3];
			var e20 = e[2];
			var val = this.expr(e20);
			var match = false;
			var _g8 = 0;
			while(_g8 < cases.length) {
				var c1 = cases[_g8];
				++_g8;
				var _g12 = 0;
				var _g21 = c1.values;
				while(_g12 < _g21.length) {
					var v5 = _g21[_g12];
					++_g12;
					if(this.expr(v5) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c1.expr);
					break;
				}
			}
			if(!match) if(def == null) val = null; else val = this.expr(def);
			return val;
		}
		return null;
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		try {
			while(this.expr(econd) == true) try {
				this.expr(e);
			} catch( err ) {
				if( js.Boot.__instanceof(err,hscript._Interp.Stop) ) {
					switch(err[1]) {
					case 1:
						break;
					case 0:
						throw "__break__";
						break;
					case 2:
						throw err;
						break;
					}
				} else throw(err);
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $iterator(v)();
		} catch( e ) {
		}
		if(v.hasNext == null || v.next == null) this.error(hscript.Error.EInvalidIterator(v));
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		this.declared.push({ n : n, old : this.locals.get(n)});
		var it1 = this.makeIterator(this.expr(it));
		try {
			while(it1.hasNext()) {
				var value = { r : it1.next()};
				this.locals.set(n,value);
				try {
					this.expr(e);
				} catch( err ) {
					if( js.Boot.__instanceof(err,hscript._Interp.Stop) ) {
						switch(err[1]) {
						case 1:
							break;
						case 0:
							throw "__break__";
							break;
						case 2:
							throw err;
							break;
						}
					} else throw(err);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,get: function(o,f) {
		if(o == null) this.error(hscript.Error.EInvalidAccess(f));
		return Reflect.field(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) this.error(hscript.Error.EInvalidAccess(f));
		o[f] = v;
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,Reflect.field(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = Type.resolveClass(cl);
		if(c == null) c = this.resolve(cl);
		return Type.createInstance(c,args);
	}
	,__class__: hscript.Interp
};
haxe.ui.toolkit.hscript.ScriptInterp = function() {
	hscript.Interp.call(this);
	var defaultClasses = haxe.ui.toolkit.hscript.ScriptManager.get_instance().get_classes();
	var $it0 = defaultClasses.keys();
	while( $it0.hasNext() ) {
		var name = $it0.next();
		var c = defaultClasses.get(name);
		var value = c;
		this.variables.set(name,value);
	}
};
$hxClasses["haxe.ui.toolkit.hscript.ScriptInterp"] = haxe.ui.toolkit.hscript.ScriptInterp;
haxe.ui.toolkit.hscript.ScriptInterp.__name__ = ["haxe","ui","toolkit","hscript","ScriptInterp"];
haxe.ui.toolkit.hscript.ScriptInterp.__super__ = hscript.Interp;
haxe.ui.toolkit.hscript.ScriptInterp.prototype = $extend(hscript.Interp.prototype,{
	get: function(o,f) {
		if(o == null) throw this.error(hscript.Error.EInvalidAccess(f));
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) throw this.error(hscript.Error.EInvalidAccess(f));
		Reflect.setProperty(o,f,v);
		return v;
	}
	,__class__: haxe.ui.toolkit.hscript.ScriptInterp
});
haxe.ui.toolkit.hscript.ScriptManager = function() {
	this._defaultClasses = new haxe.ds.StringMap();
	this._defaultClasses.set("Std",Std);
	this._defaultClasses.set("Math",Math);
	this._defaultClasses.set("Client",haxe.ui.toolkit.hscript.ClientWrapper);
};
$hxClasses["haxe.ui.toolkit.hscript.ScriptManager"] = haxe.ui.toolkit.hscript.ScriptManager;
haxe.ui.toolkit.hscript.ScriptManager.__name__ = ["haxe","ui","toolkit","hscript","ScriptManager"];
haxe.ui.toolkit.hscript.ScriptManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.hscript.ScriptManager._instance = null;
haxe.ui.toolkit.hscript.ScriptManager.instance = null;
haxe.ui.toolkit.hscript.ScriptManager.get_instance = function() {
	if(haxe.ui.toolkit.hscript.ScriptManager._instance == null) haxe.ui.toolkit.hscript.ScriptManager._instance = new haxe.ui.toolkit.hscript.ScriptManager();
	return haxe.ui.toolkit.hscript.ScriptManager._instance;
};
haxe.ui.toolkit.hscript.ScriptManager.prototype = {
	get_classes: function() {
		return this._defaultClasses;
	}
	,addClass: function(name,cls) {
		var value = cls;
		this._defaultClasses.set(name,value);
	}
	,executeScript: function(script) {
		var fullScript = "";
		fullScript += script;
		var retVal = null;
		try {
			var parser = new hscript.Parser();
			var program = parser.parseString(fullScript);
			var interp = new haxe.ui.toolkit.hscript.ScriptInterp();
			retVal = interp.execute(program);
		} catch( e ) {
			retVal = script;
		}
		return retVal;
	}
	,__class__: haxe.ui.toolkit.hscript.ScriptManager
	,__properties__: {get_classes:"get_classes"}
};
haxe.ui.toolkit.hscript.ScriptUtils = function() { };
$hxClasses["haxe.ui.toolkit.hscript.ScriptUtils"] = haxe.ui.toolkit.hscript.ScriptUtils;
haxe.ui.toolkit.hscript.ScriptUtils.__name__ = ["haxe","ui","toolkit","hscript","ScriptUtils"];
haxe.ui.toolkit.hscript.ScriptUtils.isScript = function(data) {
	if(data.indexOf("+") != -1 || data.indexOf("-") != -1 || data.indexOf("*") != -1 || data.indexOf("/") != -1 || data.indexOf("(") != -1 || data.indexOf(")") != -1 || data.indexOf("[") != -1 || data.indexOf("]") != -1) return true;
	return false;
};
haxe.ui.toolkit.hscript.ScriptUtils.isCssException = function(name) {
	if(name == "filter" || name == "icon" || name == "backgroundImage" || name == "fontName") return true;
	return false;
};
haxe.ui.toolkit.layout.AbsoluteLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.AbsoluteLayout"] = haxe.ui.toolkit.layout.AbsoluteLayout;
haxe.ui.toolkit.layout.AbsoluteLayout.__name__ = ["haxe","ui","toolkit","layout","AbsoluteLayout"];
haxe.ui.toolkit.layout.AbsoluteLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.AbsoluteLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.AbsoluteLayout();
	}
	,__class__: haxe.ui.toolkit.layout.AbsoluteLayout
});
haxe.ui.toolkit.layout.BoxLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.BoxLayout"] = haxe.ui.toolkit.layout.BoxLayout;
haxe.ui.toolkit.layout.BoxLayout.__name__ = ["haxe","ui","toolkit","layout","BoxLayout"];
haxe.ui.toolkit.layout.BoxLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.BoxLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			if(child.get_width() > totalWidth) totalWidth = child.get_width();
			if(child.get_height() > totalHeight) totalHeight = child.get_height();
		}
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var xpos = this.get_padding().get_left();
			var ypos = this.get_padding().get_top();
			var halign = child.get_horizontalAlign();
			var valign = child.get_verticalAlign();
			switch(halign) {
			case "center":
				xpos = this.get_container().get_width() / 2 - child.get_width() / 2;
				break;
			case "right":
				xpos = this.get_container().get_width() - child.get_width() - this.get_padding().get_right();
				break;
			default:
			}
			switch(valign) {
			case "center":
				ypos = this.get_container().get_height() / 2 - child.get_height() / 2;
				break;
			case "bottom":
				ypos = this.get_container().get_height() - child.get_height() - this.get_padding().get_bottom();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(ypos);
		}
	}
	,get_usableWidth: function() {
		var ucx = haxe.ui.toolkit.layout.Layout.prototype.get_usableWidth.call(this);
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = haxe.ui.toolkit.layout.Layout.prototype.get_usableHeight.call(this);
		return ucy;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.BoxLayout();
	}
	,__class__: haxe.ui.toolkit.layout.BoxLayout
});
haxe.ui.toolkit.layout.GridLayout = function() {
	this._columns = 1;
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.GridLayout"] = haxe.ui.toolkit.layout.GridLayout;
haxe.ui.toolkit.layout.GridLayout.__name__ = ["haxe","ui","toolkit","layout","GridLayout"];
haxe.ui.toolkit.layout.GridLayout.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.layout.GridLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.GridLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	get_columns: function() {
		return this._columns;
	}
	,set_columns: function(value) {
		this._columns = value;
		return value;
	}
	,resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var columnWidths = this.calcColumnWidths();
		var rowHeights = this.calcRowHeights();
		var totalWidth = 0;
		var totalHeight = 0;
		var rowIndex = 0;
		var columnIndex = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() > -1) {
				var ucx = columnWidths[columnIndex];
				child.set_width(ucx * child.get_percentWidth() / 100);
			}
			if(child.get_percentHeight() > -1) {
				var ucy = rowHeights[rowIndex];
				child.set_height(ucy * child.get_percentHeight() / 100);
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		var _g2 = 0;
		while(_g2 < columnWidths.length) {
			var cx = columnWidths[_g2];
			++_g2;
			totalWidth += cx;
		}
		if(columnWidths.length > 1) totalWidth += this.get_spacingX() * (columnWidths.length - 1);
		var _g3 = 0;
		while(_g3 < rowHeights.length) {
			var cy = rowHeights[_g3];
			++_g3;
			totalHeight += cy;
		}
		if(rowHeights.length > 1) totalHeight += this.get_spacingY() * (rowHeights.length - 1);
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var columnWidths = this.calcColumnWidths();
		var rowHeights = this.calcRowHeights();
		var rowIndex = 0;
		var columnIndex = 0;
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var halign = child.get_horizontalAlign();
			var valign = child.get_verticalAlign();
			switch(halign) {
			case "center":
				child.set_x(xpos + (columnWidths[columnIndex] - child.get_width()) * 0.5);
				break;
			case "right":
				child.set_x(xpos + (columnWidths[columnIndex] - child.get_width()));
				break;
			default:
				child.set_x(xpos);
			}
			switch(valign) {
			case "center":
				child.set_y(ypos + (rowHeights[rowIndex] - child.get_height()) * 0.5);
				break;
			case "bottom":
				child.set_y(ypos + (rowHeights[rowIndex] - child.get_height()));
				break;
			default:
				child.set_y(ypos);
			}
			xpos += columnWidths[columnIndex] + this.get_spacingX();
			columnIndex++;
			if(columnIndex >= this._columns) {
				xpos = this.get_padding().get_left();
				ypos += rowHeights[rowIndex] + this.get_spacingY();
				columnIndex = 0;
				rowIndex++;
			}
		}
	}
	,get_usableWidth: function() {
		var ucx = haxe.ui.toolkit.layout.Layout.prototype.get_usableWidth.call(this);
		return ucx;
	}
	,get_usableHeight: function() {
		var ucy = haxe.ui.toolkit.layout.Layout.prototype.get_usableHeight.call(this);
		return ucy;
	}
	,calcColumnWidths: function() {
		var columnWidths = new Array();
		var _g1 = 0;
		var _g = this._columns;
		while(_g1 < _g) {
			var n = _g1++;
			columnWidths.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentWidth() <= 0) {
				if(child.get_width() > columnWidths[columnIndex]) columnWidths[columnIndex] = child.get_width();
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		rowIndex = 0;
		columnIndex = 0;
		var _g3 = 0;
		var _g12 = this.get_container().get_children();
		while(_g3 < _g12.length) {
			var child1 = _g12[_g3];
			++_g3;
			if(child1.get_visible() == false || child1.get_includeInLayout() == false) continue;
			if(child1.get_percentWidth() > 0) {
				var ucx = this.get_usableWidth() - (this.get_columns() - 1) * this.get_spacingX();
				var _g31 = 0;
				var _g21 = columnWidths.length;
				while(_g31 < _g21) {
					var n1 = _g31++;
					if(n1 != columnIndex) ucx -= columnWidths[n1];
				}
				var cx = ucx * child1.get_percentWidth() / 100;
				if(cx > columnWidths[columnIndex]) columnWidths[columnIndex] = cx;
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		return columnWidths;
	}
	,calcRowHeights: function() {
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		var rowCount = visibleChildren / this._columns | 0;
		if(visibleChildren % this._columns != 0) rowCount++;
		var rowHeights = new Array();
		var _g2 = 0;
		while(_g2 < rowCount) {
			var n = _g2++;
			rowHeights.push(0);
		}
		var rowIndex = 0;
		var columnIndex = 0;
		var _g3 = 0;
		var _g11 = this.get_container().get_children();
		while(_g3 < _g11.length) {
			var child = _g11[_g3];
			++_g3;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_percentHeight() <= 0) {
				if(child.get_height() > rowHeights[rowIndex]) rowHeights[rowIndex] = child.get_height();
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		rowIndex = 0;
		columnIndex = 0;
		var _g4 = 0;
		var _g12 = this.get_container().get_children();
		while(_g4 < _g12.length) {
			var child1 = _g12[_g4];
			++_g4;
			if(child1.get_visible() == false || child1.get_includeInLayout() == false) continue;
			if(child1.get_percentHeight() > 0) {
				var ucy = this.get_usableHeight() - (rowCount - 1) * this.get_spacingY();
				var _g31 = 0;
				var _g21 = rowHeights.length;
				while(_g31 < _g21) {
					var n1 = _g31++;
					if(n1 != rowIndex) ucy -= rowHeights[n1];
				}
				var cy = ucy * child1.get_percentHeight() / 100;
				if(cy > rowHeights[rowIndex]) rowHeights[rowIndex] = cy;
			}
			columnIndex++;
			if(columnIndex >= this._columns) {
				columnIndex = 0;
				rowIndex++;
			}
		}
		return rowHeights;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		c.set_columns(this.get_columns());
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.GridLayout();
	}
	,__class__: haxe.ui.toolkit.layout.GridLayout
	,__properties__: $extend(haxe.ui.toolkit.layout.Layout.prototype.__properties__,{set_columns:"set_columns",get_columns:"get_columns"})
});
haxe.ui.toolkit.layout.HorizontalContinuousLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.HorizontalContinuousLayout"] = haxe.ui.toolkit.layout.HorizontalContinuousLayout;
haxe.ui.toolkit.layout.HorizontalContinuousLayout.__name__ = ["haxe","ui","toolkit","layout","HorizontalContinuousLayout"];
haxe.ui.toolkit.layout.HorizontalContinuousLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.HorizontalContinuousLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var usedCX = this.get_padding().get_left() + this.get_padding().get_right();
		var usedCY = this.get_padding().get_top() + this.get_padding().get_bottom();
		var rowCY = 0;
		var rowHeights = new Array();
		var rowChildren = new Array();
		rowHeights.push(0);
		var row = 0;
		var maxCX = this.get_container().get_width();
		if(this.get_container().get_autoSize() == true && this.get_container().get_parent() != null) maxCX = this.get_container().get_parent().get_layout().get_usableWidth();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			rowChildren.push(child);
			if(child.get_percentWidth() > -1) child.set_width((maxCX - this.get_spacingX()) * child.get_percentWidth() / 100);
			usedCX += child.get_width() + this.get_spacingX();
			if(usedCX - this.get_spacingX() > maxCX) {
				xpos = this.get_padding().get_left();
				rowHeights.push(0);
				ypos += rowHeights[row] + this.get_spacingY();
				row++;
				usedCX = this.get_padding().get_left() + this.get_padding().get_right() + child.get_width() + this.get_spacingX();
				rowChildren = new Array();
				rowChildren.push(child);
			}
			var reposition = false;
			if(child.get_height() > rowHeights[row]) {
				rowHeights[row] = child.get_height();
				reposition = true;
			}
			usedCY = this.get_padding().get_top() + this.get_padding().get_bottom();
			var _g2 = 0;
			while(_g2 < rowHeights.length) {
				var cy = rowHeights[_g2];
				++_g2;
				usedCY += cy + this.get_spacingY();
			}
			usedCY -= this.get_spacingY();
			if(reposition) {
				var _g21 = 0;
				while(_g21 < rowChildren.length) {
					var temp = rowChildren[_g21];
					++_g21;
					var valign = temp.get_verticalAlign();
					var tempYpos = temp.get_y();
					switch(valign) {
					case "center":
						tempYpos = usedCY - temp.get_height() - this.get_padding().get_top() - (rowHeights[row] / 2 - temp.get_height() / 2);
						break;
					case "bottom":
						tempYpos = usedCY - temp.get_height() - this.get_padding().get_top();
						break;
					default:
					}
					temp.set_y(tempYpos);
				}
			}
			if(usedCX - this.get_spacingX() > this.get_container().get_width() && this.get_container().get_autoSize()) this.get_container().set_width(usedCX - this.get_spacingX());
			if(usedCY > this.get_container().get_height() && this.get_container().get_autoSize()) this.get_container().set_height(usedCY);
			var valign1 = child.get_verticalAlign();
			var tempYPos = ypos;
			switch(valign1) {
			case "center":
				tempYPos = usedCY - child.get_height() - this.get_padding().get_top() - (rowHeights[row] / 2 - child.get_height() / 2);
				break;
			case "bottom":
				tempYPos = usedCY - child.get_height() - this.get_padding().get_top();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(tempYPos);
			xpos += child.get_width() + this.get_spacingX();
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.HorizontalContinuousLayout();
	}
	,__class__: haxe.ui.toolkit.layout.HorizontalContinuousLayout
});
haxe.ui.toolkit.layout.HorizontalLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.HorizontalLayout"] = haxe.ui.toolkit.layout.HorizontalLayout;
haxe.ui.toolkit.layout.HorizontalLayout.__name__ = ["haxe","ui","toolkit","layout","HorizontalLayout"];
haxe.ui.toolkit.layout.HorizontalLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.HorizontalLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var numChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			numChildren++;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			totalWidth += child.get_width();
			if(child.get_height() > totalHeight) totalHeight = child.get_height();
		}
		if(numChildren > 1) totalWidth += this.get_spacingX() * (numChildren - 1);
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var ypos = this.get_padding().get_top();
			var valign = child.get_verticalAlign();
			switch(valign) {
			case "center":
				ypos = this.get_container().get_height() / 2 - child.get_height() / 2;
				break;
			case "bottom":
				ypos = this.get_container().get_height() - child.get_height() - this.get_padding().get_bottom();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(ypos);
			xpos += child.get_width() + this.get_spacingX();
		}
	}
	,get_usableWidth: function() {
		var ucx = haxe.ui.toolkit.layout.Layout.prototype.get_usableWidth.call(this);
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		if(visibleChildren > 1) ucx -= this.get_spacingX() * (visibleChildren - 1);
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_width() > 0 && child.get_percentWidth() < 0) ucx -= child.get_width();
		}
		if(ucx < 0) ucx = 0;
		return ucx;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.HorizontalLayout();
	}
	,__class__: haxe.ui.toolkit.layout.HorizontalLayout
});
haxe.ui.toolkit.layout.VerticalContinuousLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.VerticalContinuousLayout"] = haxe.ui.toolkit.layout.VerticalContinuousLayout;
haxe.ui.toolkit.layout.VerticalContinuousLayout.__name__ = ["haxe","ui","toolkit","layout","VerticalContinuousLayout"];
haxe.ui.toolkit.layout.VerticalContinuousLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.VerticalContinuousLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var xpos = this.get_padding().get_left();
		var ypos = this.get_padding().get_top();
		var usedCX = this.get_padding().get_left() + this.get_padding().get_right();
		var usedCY = this.get_padding().get_top() + this.get_padding().get_bottom();
		var colCX = 0;
		var colWidths = new Array();
		var colChildren = new Array();
		colWidths.push(0);
		var col = 0;
		var maxCY = this.get_container().get_height();
		if(this.get_container().get_autoSize() == true && this.get_container().get_parent() != null) maxCY = this.get_container().get_parent().get_layout().get_usableHeight();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			colChildren.push(child);
			usedCY += child.get_height() + this.get_spacingY();
			if(usedCY - this.get_spacingY() > maxCY) {
				ypos = this.get_padding().get_top();
				colWidths.push(0);
				xpos += colWidths[col] + this.get_spacingX();
				col++;
				usedCY = this.get_padding().get_top() + this.get_padding().get_bottom() + child.get_height() + this.get_spacingY();
				colChildren = new Array();
				colChildren.push(child);
			}
			var reposition = false;
			if(child.get_width() > colWidths[col]) {
				colWidths[col] = child.get_width();
				reposition = true;
			}
			usedCX = this.get_padding().get_left() + this.get_padding().get_right();
			var _g2 = 0;
			while(_g2 < colWidths.length) {
				var cx = colWidths[_g2];
				++_g2;
				usedCX += cx + this.get_spacingX();
			}
			usedCX -= this.get_spacingX();
			if(reposition) {
				var _g21 = 0;
				while(_g21 < colChildren.length) {
					var temp = colChildren[_g21];
					++_g21;
					var halign = child.get_horizontalAlign();
					var tempXpos = temp.get_x();
					switch(halign) {
					case "center":
						tempXpos = usedCX - temp.get_width() - this.get_padding().get_left() - (colWidths[col] / 2 - temp.get_width() / 2);
						break;
					case "right":
						tempXpos = usedCX - temp.get_width() - this.get_padding().get_left();
						break;
					default:
					}
					temp.set_x(tempXpos);
				}
			}
			if(usedCY - this.get_spacingY() > this.get_container().get_height() && this.get_container().get_autoSize()) this.get_container().set_height(usedCY - this.get_spacingY());
			if(usedCX > this.get_container().get_width() && this.get_container().get_autoSize()) this.get_container().set_width(usedCX);
			var halign1 = child.get_horizontalAlign();
			var tempXPos = xpos;
			switch(halign1) {
			case "center":
				tempXPos = usedCX - child.get_width() - this.get_padding().get_left() - (colWidths[col] / 2 - child.get_width() / 2);
				break;
			case "right":
				tempXPos = usedCX - child.get_width() - this.get_padding().get_left();
				break;
			default:
			}
			child.set_x(tempXPos);
			child.set_y(ypos);
			ypos += child.get_height() + this.get_spacingY();
		}
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.VerticalContinuousLayout();
	}
	,__class__: haxe.ui.toolkit.layout.VerticalContinuousLayout
});
haxe.ui.toolkit.layout.VerticalLayout = function() {
	haxe.ui.toolkit.layout.Layout.call(this);
};
$hxClasses["haxe.ui.toolkit.layout.VerticalLayout"] = haxe.ui.toolkit.layout.VerticalLayout;
haxe.ui.toolkit.layout.VerticalLayout.__name__ = ["haxe","ui","toolkit","layout","VerticalLayout"];
haxe.ui.toolkit.layout.VerticalLayout.__super__ = haxe.ui.toolkit.layout.Layout;
haxe.ui.toolkit.layout.VerticalLayout.prototype = $extend(haxe.ui.toolkit.layout.Layout.prototype,{
	resizeChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.resizeChildren.call(this);
		var ucx = this.get_usableWidth();
		var ucy = this.get_usableHeight();
		var totalWidth = 0;
		var totalHeight = 0;
		var numChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			numChildren++;
			if(child.get_percentWidth() > -1) child.set_width(ucx * child.get_percentWidth() / 100);
			if(child.get_percentHeight() > -1) child.set_height(ucy * child.get_percentHeight() / 100);
			totalHeight += child.get_height();
			if(child.get_width() > totalWidth) totalWidth = child.get_width();
		}
		if(numChildren > 1) totalHeight += this.get_spacingY() * (numChildren - 1);
		this.autoSize(totalWidth,totalHeight);
	}
	,repositionChildren: function() {
		haxe.ui.toolkit.layout.Layout.prototype.repositionChildren.call(this);
		var ypos = this.get_padding().get_top();
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			var xpos = this.get_padding().get_left();
			var halign = child.get_horizontalAlign();
			switch(halign) {
			case "center":
				xpos = this.get_container().get_width() / 2 - child.get_width() / 2;
				break;
			case "right":
				xpos = this.get_container().get_width() - child.get_width() - this.get_padding().get_left();
				break;
			default:
			}
			child.set_x(xpos);
			child.set_y(ypos);
			ypos += child.get_height() + this.get_spacingY();
		}
	}
	,get_usableHeight: function() {
		var ucy = haxe.ui.toolkit.layout.Layout.prototype.get_usableHeight.call(this);
		var visibleChildren = 0;
		var _g = 0;
		var _g1 = this.get_container().get_children();
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_visible()) visibleChildren++;
		}
		if(visibleChildren > 1) ucy -= this.get_spacingY() * (visibleChildren - 1);
		var _g2 = 0;
		var _g11 = this.get_container().get_children();
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			if(child.get_visible() == false || child.get_includeInLayout() == false) continue;
			if(child.get_height() > 0 && child.get_percentHeight() < 0) ucy -= child.get_height();
		}
		if(ucy < 0) ucy = 0;
		return ucy;
	}
	,clone: function() {
		var c = haxe.ui.toolkit.layout.Layout.prototype.clone.call(this);
		return c;
	}
	,self: function() {
		return new haxe.ui.toolkit.layout.VerticalLayout();
	}
	,__class__: haxe.ui.toolkit.layout.VerticalLayout
});
haxe.ui.toolkit.resources = {};
haxe.ui.toolkit.resources.ResourceManager = function() {
};
$hxClasses["haxe.ui.toolkit.resources.ResourceManager"] = haxe.ui.toolkit.resources.ResourceManager;
haxe.ui.toolkit.resources.ResourceManager.__name__ = ["haxe","ui","toolkit","resources","ResourceManager"];
haxe.ui.toolkit.resources.ResourceManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.resources.ResourceManager._instance = null;
haxe.ui.toolkit.resources.ResourceManager.instance = null;
haxe.ui.toolkit.resources.ResourceManager.get_instance = function() {
	if(haxe.ui.toolkit.resources.ResourceManager._instance == null) haxe.ui.toolkit.resources.ResourceManager._instance = new haxe.ui.toolkit.resources.ResourceManager();
	return haxe.ui.toolkit.resources.ResourceManager._instance;
};
haxe.ui.toolkit.resources.ResourceManager.prototype = {
	hasAsset: function(resouceId) {
		return openfl.Assets.exists(resouceId);
	}
	,getXML: function(resourceId,locale) {
		var text = this.getText(resourceId,locale);
		var xml = null;
		if(text != null) xml = Xml.parse(text);
		return xml;
	}
	,getText: function(resourceId,locale) {
		var str = haxe.Resource.getString(resourceId);
		if(str == null) str = openfl.Assets.getText(resourceId);
		return str;
	}
	,getSVG: function(resourceId,locale) {
		var text = this.getText(resourceId,locale);
		var svg = null;
		if(text != null) svg = new format.SVG(text);
		return svg;
	}
	,getBitmapData: function(resourceId,locale) {
		if(resourceId == null || resourceId.length == 0) return null;
		var bmp = null;
		var bytes = haxe.Resource.getBytes(resourceId);
		if(bytes != null) {
			var ba = haxe.ui.toolkit.util.ByteConverter.fromHaxeBytes(bytes);
			var loader = new openfl.display.Loader();
			loader.loadBytes(ba);
			if(loader.content != null) bmp = (js.Boot.__cast(loader.content , openfl.display.Bitmap)).bitmapData;
		} else bmp = openfl.Assets.getBitmapData(resourceId,true);
		return bmp;
	}
	,getBytes: function(resourceId,locale) {
		return openfl.Assets.getBytes(resourceId);
	}
	,reset: function() {
	}
	,__class__: haxe.ui.toolkit.resources.ResourceManager
};
haxe.ui.toolkit.style = {};
haxe.ui.toolkit.style.Styles = function() {
	this._styles = new haxe.ds.StringMap();
	this._styleRules = new Array();
};
$hxClasses["haxe.ui.toolkit.style.Styles"] = haxe.ui.toolkit.style.Styles;
haxe.ui.toolkit.style.Styles.__name__ = ["haxe","ui","toolkit","style","Styles"];
haxe.ui.toolkit.style.Styles.prototype = {
	addStyle: function(rule,style) {
		if(rule.indexOf(",") != -1) {
			var rules = rule.split(",");
			var _g = 0;
			while(_g < rules.length) {
				var r = rules[_g];
				++_g;
				r = StringTools.trim(r);
				this.addStyle(r,style);
			}
			return null;
		}
		var currentStyle = this.getStyle(rule);
		if(currentStyle != null) {
			currentStyle.merge(style);
			style = currentStyle;
		} else this._styleRules.push(rule);
		this._styles.set(rule,style);
		return style;
	}
	,getStyle: function(rule) {
		return this._styles.get(rule);
	}
	,get_rules: function() {
		return HxOverrides.iter(this._styleRules);
	}
	,__class__: haxe.ui.toolkit.style.Styles
	,__properties__: {get_rules:"get_rules"}
};
haxe.ui.toolkit.style.DefaultStyles = function() {
	haxe.ui.toolkit.style.Styles.call(this);
	var f = openfl.Assets.getFont("fonts/Oxygen.ttf");
	var fb = openfl.Assets.getFont("fonts/Oxygen-Bold.ttf");
	this.addStyle("Root",new haxe.ui.toolkit.style.Style({ padding : 0}));
	this.addStyle("Root.popup",new haxe.ui.toolkit.style.Style({ padding : 0}));
	this.addStyle("Root.fullscreen",new haxe.ui.toolkit.style.Style({ padding : 0, backgroundColor : 8947848}));
	this.addStyle("Component",new haxe.ui.toolkit.style.Style({ padding : 0, backgroundColor : 8947848}));
	this.addStyle("#modalOverlay",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, alpha : .7}));
	this.addStyle("Text",new haxe.ui.toolkit.style.Style({ fontSize : 14, fontName : f.fontName, fontEmbedded : true, color : 4473924}));
	this.addStyle("Code",new haxe.ui.toolkit.style.Style({ fontSize : 14, fontName : "_sans", fontEmbedded : false, color : 4473924}));
	this.addStyle("Container",new haxe.ui.toolkit.style.Style({ spacing : 5}));
	this.addStyle("Accordion",new haxe.ui.toolkit.style.Style({ spacing : 0}));
	this.addStyle(".page",new haxe.ui.toolkit.style.Style({ padding : 5, backgroundColor : -1}));
	this.addStyle("Button",new haxe.ui.toolkit.style.Style({ fontSize : 14, fontName : f.fontName, fontEmbedded : true, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 2236962, padding : 10, borderColor : 4473924, borderSize : 1, cornerRadius : 2, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), spacing : 5, textAlign : "center"}));
	this.addStyle("Button:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle("Button:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle("Button:disabled",new haxe.ui.toolkit.style.Style({ backgroundColor : 9211020, backgroundColorGradientEnd : 7105644, color : 13421772, borderColor : 6710886}));
	this.addStyle("Button.expandable",new haxe.ui.toolkit.style.Style({ icon : "styles/default/expand.png", textAlign : "left"}));
	this.addStyle("Button.expandable:down",new haxe.ui.toolkit.style.Style({ icon : "styles/default/collapse.png"}));
	this.addStyle("CheckBox, OptionBox",new haxe.ui.toolkit.style.Style({ spacingX : 2, fontSize : 14, fontName : f.fontName, fontEmbedded : true, color : 4473924}));
	this.addStyle("CheckBoxValue, OptionBoxValue",new haxe.ui.toolkit.style.Style({ width : 32, height : 32}));
	this.addStyle("CheckBoxValue #unselected",new haxe.ui.toolkit.style.Style({ iconPosition : "center"}));
	this.addStyle("CheckBoxValue #unselected:disabled",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("CheckBoxValue #selected",new haxe.ui.toolkit.style.Style({ icon : "styles/default/cross.png", iconPosition : "center"}));
	this.addStyle("CheckBoxValue #selected:disabled",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("OptionBoxValue #unselected",new haxe.ui.toolkit.style.Style({ iconPosition : "center"}));
	this.addStyle("OptionBoxValue #unselected:disabled",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("OptionBoxValue #selected",new haxe.ui.toolkit.style.Style({ icon : "styles/default/circle.png", iconPosition : "center"}));
	this.addStyle("OptionBoxValue #selected:disabled",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("TextInput",new haxe.ui.toolkit.style.Style({ backgroundColor : 16777215, color : 2236962, width : 150, height : 42, borderColor : 2236962, borderSize : 1, padding : 2, cornerRadius : 2, filter : new openfl.filters.DropShadowFilter(2,45,12566463,1,2,2,1,3,true), fontSize : 14, fontName : f.fontName, fontEmbedded : true}));
	this.addStyle("TextInput #placeholder",new haxe.ui.toolkit.style.Style({ color : 11184810}));
	this.addStyle("ListSelector, DateSelector",new haxe.ui.toolkit.style.Style({ icon : "styles/default/up_down.png", iconPosition : "right", selectionMethod : "popup", textAlign : "left"}));
	this.addStyle("CalendarView, Calendar",new haxe.ui.toolkit.style.Style({ width : 310, height : 310, spacing : 3, padding : 2}));
	this.addStyle("CalendarView",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, filter : new openfl.filters.DropShadowFilter(1,45,2236962,1,2,2,1,3), borderColor : 4473924, borderSize : 1, cornerRadius : 2, padding : 5, spacing : 5}));
	this.addStyle("CalendarView Calendar",new haxe.ui.toolkit.style.Style({ borderSize : 0}));
	this.addStyle("CalendarPopupContent",new haxe.ui.toolkit.style.Style({ padding : 50}));
	this.addStyle("CalendarDay",new haxe.ui.toolkit.style.Style({ padding : 0, backgroundColor : 13421772}));
	this.addStyle("CalendarView #currentMonthYear",new haxe.ui.toolkit.style.Style({ textAlign : "center"}));
	this.addStyle("Calendar #selectedDay",new haxe.ui.toolkit.style.Style({ fontSize : 14, fontName : f.fontName, fontEmbedded : true, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 2236962, padding : 10, borderColor : 4473924, borderSize : 1, cornerRadius : 2, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), spacing : 5}));
	this.addStyle("CalendarDay:over, Calendar #selectedDay:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle("CalendarDay:down, Calendar #selectedDay:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle("TabView",new haxe.ui.toolkit.style.Style({ backgroundColor : 13421772, borderColor : -1, filter : null, spacing : 0}));
	this.addStyle("TabView Container",new haxe.ui.toolkit.style.Style({ backgroundColor : 13421772}));
	this.addStyle("TabBar",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, height : 41, paddingTop : 0, paddingLeft : 0, paddingRight : 0, paddingBottom : 0, cornerRadius : 0, filter : null, borderColor : -1, borderSize : 0, spacing : 0}));
	this.addStyle("TabBar #content",new haxe.ui.toolkit.style.Style({ spacing : 1, borderColor : -1, backgroundColor : 8947848}));
	this.addStyle("TabBar #container",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848}));
	this.addStyle("TabBar Button",new haxe.ui.toolkit.style.Style({ height : 42, iconPosition : "left", cornerRadius : 0, autoSize : true, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 2236962, borderSize : 0, borderColor : -1, paddingLeft : 20, paddingRight : 20}));
	this.addStyle("TabBar Button:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 15658734, backgroundColorGradientEnd : 13421772, color : 4473924}));
	this.addStyle("HProgress",new haxe.ui.toolkit.style.Style({ width : 150, height : 30, backgroundColor : 6710886, borderColor : -1, padding : 2, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("HProgress #background",new haxe.ui.toolkit.style.Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("HProgress #value",new haxe.ui.toolkit.style.Style({ percentHeight : 100, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2}));
	this.addStyle("VProgress",new haxe.ui.toolkit.style.Style({ width : 30, height : 150, backgroundColor : 6710886, borderColor : -1, padding : 2, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("VProgress #background",new haxe.ui.toolkit.style.Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("VProgress #value",new haxe.ui.toolkit.style.Style({ percentWidth : 100, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2, gradientType : "horizontal"}));
	this.addStyle("HSlider",new haxe.ui.toolkit.style.Style({ width : 150, height : 30, backgroundColor : 6710886, borderColor : -1, padding : 2, paddingLeft : 0, paddingRight : 0, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("HSlider #background",new haxe.ui.toolkit.style.Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("HSlider #value",new haxe.ui.toolkit.style.Style({ percentHeight : 0, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2}));
	this.addStyle("HSlider Button",new haxe.ui.toolkit.style.Style({ width : 26, height : 26, gradientType : "vertical", filter : new openfl.filters.DropShadowFilter(2,45,6710886,1,2,2,1,3,false)}));
	this.addStyle("VSlider",new haxe.ui.toolkit.style.Style({ width : 30, height : 150, backgroundColor : 6710886, borderColor : -1, padding : 2, paddingLeft : 0, paddingRight : 0, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true)}));
	this.addStyle("VSlider #background",new haxe.ui.toolkit.style.Style({ percentWidth : 100, percentHeight : 100, backgroundColor : -1, borderSize : 0, borderColor : -1}));
	this.addStyle("VSlider #value",new haxe.ui.toolkit.style.Style({ percentWidth : 0, backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, borderColor : -1, cornerRadius : 2}));
	this.addStyle("VSlider Button",new haxe.ui.toolkit.style.Style({ width : 26, height : 26, gradientType : "horizontal", filter : new openfl.filters.DropShadowFilter(2,45,6710886,1,2,2,1,3,false)}));
	this.addStyle("ScrollView",new haxe.ui.toolkit.style.Style({ backgroundColor : 4473924, borderColor : -1, padding : 1, cornerRadius : 2, borderSize : 0, filter : new openfl.filters.DropShadowFilter(1,45,4473924,1,2,2,1,3,true), inlineScrolls : true, autoHideScrolls : true, spacing : 0}));
	this.addStyle("ListView",new haxe.ui.toolkit.style.Style({ }));
	this.addStyle("ListView #content",new haxe.ui.toolkit.style.Style({ backgroundColor : 4473924, borderColor : -1, padding : 0, spacing : 1}));
	this.addStyle(".even, .odd",new haxe.ui.toolkit.style.Style({ padding : 10, backgroundColor : 6710886}));
	this.addStyle(".even:over, .odd:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle(".even:selected, .odd:selected",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle(".even #text, .odd #text",new haxe.ui.toolkit.style.Style({ color : 16754764}));
	this.addStyle(".even #text:over, .odd #text:over",new haxe.ui.toolkit.style.Style({ color : 2236962}));
	this.addStyle(".even #text:selected, .odd #text:selected",new haxe.ui.toolkit.style.Style({ color : 4473924}));
	this.addStyle("VScroll",new haxe.ui.toolkit.style.Style({ width : 10, height : 100, hasButtons : false}));
	this.addStyle("VScroll Button",new haxe.ui.toolkit.style.Style({ cornerRadius : 2, gradientType : "horizontal", filter : null}));
	this.addStyle("HScroll",new haxe.ui.toolkit.style.Style({ width : 100, height : 10, hasButtons : false}));
	this.addStyle("HScroll Button",new haxe.ui.toolkit.style.Style({ cornerRadius : 2, gradientType : "vertical", filter : null}));
	this.addStyle("MenuBar",new haxe.ui.toolkit.style.Style({ backgroundColor : 14671325, percentWidth : 100, height : 10, padding : 5, borderColor : -1, cornerRadius : 0, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), autoSize : true}));
	this.addStyle("MenuBar Container",new haxe.ui.toolkit.style.Style({ backgroundColor : 14671325}));
	this.addStyle("Popup",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), borderColor : 8947848, borderSize : 1, cornerRadius : 2, padding : 1, spacing : 1, width : 400}));
	this.addStyle("Popup Container",new haxe.ui.toolkit.style.Style({ backgroundColor : 13421772}));
	this.addStyle("Popup #titleBar",new haxe.ui.toolkit.style.Style({ backgroundColor : 13421772, height : 45, paddingTop : 5, paddingBottom : 5, paddingLeft : 5, paddingRight : 5}));
	this.addStyle("Popup #titleBar Button.close",new haxe.ui.toolkit.style.Style({ autoSize : false, width : 23, height : 24, horizontalAlignment : "left", verticalAlignment : "center", filter : null, backgroundImage : "styles/default/cross.png", backgroundColor : 13421772, borderColor : 13421772}));
	this.addStyle("Popup #popupContent",new haxe.ui.toolkit.style.Style({ padding : 5, backgroundColor : 13421772}));
	this.addStyle("Popup #buttonBar",new haxe.ui.toolkit.style.Style({ paddingTop : 5, paddingBottom : 5, height : 55, backgroundColor : 13421772, percentWidth : 100}));
	this.addStyle("Popup #titleBar #title",new haxe.ui.toolkit.style.Style({ fontName : fb.fontName, fontEmbedded : true, fontSize : 24, color : 8947848, horizontalAlignment : "right"}));
	this.addStyle("ListPopupContent ListView, ListPopupContent #popupContent",new haxe.ui.toolkit.style.Style({ padding : 2, borderSize : 0}));
	this.addStyle("Menu",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), borderColor : 4473924, borderSize : 1, cornerRadius : 1, padding : 1, width : 175, spacing : 1}));
	this.addStyle("MenuButton",new haxe.ui.toolkit.style.Style({ backgroundColor : 14671325, backgroundColorGradientEnd : 14671325, color : 2236962, padding : 10, borderColor : -1, borderSize : 0, cornerRadius : 2, filter : null}));
	this.addStyle("MenuButton:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), borderSize : 1}));
	this.addStyle("MenuButton:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924, filter : new openfl.filters.DropShadowFilter(2,45,4473924,1,2,2,1,3), borderSize : 1}));
	this.addStyle("MenuItem",new haxe.ui.toolkit.style.Style({ percentWidth : 100, iconPosition : "right", filter : null, borderSize : 0, cornerRadius : 0, backgroundColor : 13421772, color : 2236962, textAlign : "left"}));
	this.addStyle("MenuItem:over",new haxe.ui.toolkit.style.Style({ backgroundColor : 16758635, backgroundColorGradientEnd : 16744196, color : 2236962}));
	this.addStyle("MenuItem:down",new haxe.ui.toolkit.style.Style({ backgroundColor : 16754764, backgroundColorGradientEnd : 16743181, color : 4473924}));
	this.addStyle("MenuItem.expandable",new haxe.ui.toolkit.style.Style({ icon : "styles/default/expand.png"}));
	this.addStyle("MenuSeparator",new haxe.ui.toolkit.style.Style({ backgroundColor : 8947848, percentWidth : 100, paddingTop : 2, paddingLeft : 5, paddingBottom : 3, paddingRight : 5}));
	this.addStyle("MenuSeparator #line",new haxe.ui.toolkit.style.Style({ height : 0, backgroundColor : 8947848}));
	this.addStyle("Divider",new haxe.ui.toolkit.style.Style({ paddingTop : 5, percentWidth : 100}));
	this.addStyle("Divider #text",new haxe.ui.toolkit.style.Style({ fontSize : 16, fontBold : true, color : 6710886}));
	this.addStyle("Divider #line",new haxe.ui.toolkit.style.Style({ height : 2, backgroundColor : 6710886}));
};
$hxClasses["haxe.ui.toolkit.style.DefaultStyles"] = haxe.ui.toolkit.style.DefaultStyles;
haxe.ui.toolkit.style.DefaultStyles.__name__ = ["haxe","ui","toolkit","style","DefaultStyles"];
haxe.ui.toolkit.style.DefaultStyles.__super__ = haxe.ui.toolkit.style.Styles;
haxe.ui.toolkit.style.DefaultStyles.prototype = $extend(haxe.ui.toolkit.style.Styles.prototype,{
	__class__: haxe.ui.toolkit.style.DefaultStyles
});
haxe.ui.toolkit.style.Style = function(defaults) {
	this._inlineScrolls = -1;
	this._autoHideScrolls = -1;
	this._hasButtons = -1;
	this._fontUnderline = -1;
	this._fontItalic = -1;
	this._fontBold = -1;
	this._fontEmbedded = -1;
	this._fontScale = -1;
	this._fontSize = -1;
	this._alpha = -1;
	this._filterSet = false;
	this._cornerRadiusBottomRight = -1;
	this._cornerRadiusBottomLeft = -1;
	this._cornerRadiusTopRight = -1;
	this._cornerRadiusTopLeft = -1;
	this._rotationZ = -1;
	this._rotationY = -1;
	this._rotationX = -1;
	this._spacingY = -1;
	this._spacingX = -1;
	this._paddingBottom = -1;
	this._paddingTop = -1;
	this._paddingRight = -1;
	this._paddingLeft = -1;
	this._color = -1;
	this._borderAlpha = -1;
	this._borderSize = -1;
	this._borderColor = -1;
	this._backgroundAlpha = -1;
	this._backgroundColorGradientEnd = -1;
	this._backgroundColor = -1;
	this._autoSize = -1;
	this._percentHeight = -1;
	this._percentWidth = -1;
	this._height = -1;
	this._width = -1;
	this._autoApply = true;
	var _g = 0;
	var _g1 = Reflect.fields(defaults);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		if(Reflect.getProperty(this,"set_" + field) != null) Reflect.setProperty(this,field,Reflect.field(defaults,field));
	}
};
$hxClasses["haxe.ui.toolkit.style.Style"] = haxe.ui.toolkit.style.Style;
haxe.ui.toolkit.style.Style.__name__ = ["haxe","ui","toolkit","style","Style"];
haxe.ui.toolkit.style.Style.__interfaces__ = [haxe.ui.toolkit.core.interfaces.IClonable];
haxe.ui.toolkit.style.Style.prototype = {
	get_target: function() {
		return this._target;
	}
	,set_target: function(value) {
		this._target = value;
		this.apply();
		return value;
	}
	,get_autoApply: function() {
		return this._autoApply;
	}
	,set_autoApply: function(value) {
		this._autoApply = value;
		return value;
	}
	,get_width: function() {
		if(this.hasDynamicValue("width")) return this.getDynamicValue("width");
		return this._width;
	}
	,set_width: function(value) {
		if(value != this._width) {
			this._width = value;
			this.apply();
		}
		return value;
	}
	,get_height: function() {
		if(this.hasDynamicValue("height")) return this.getDynamicValue("height");
		return this._height;
	}
	,set_height: function(value) {
		if(value != this._height) {
			this._height = value;
			this.apply();
		}
		return value;
	}
	,get_percentWidth: function() {
		if(this.hasDynamicValue("percentWidth")) return this.getDynamicValue("percentWidth");
		return this._percentWidth;
	}
	,set_percentWidth: function(value) {
		if(value != this._percentWidth) {
			this._percentWidth = value;
			this.apply();
		}
		return value;
	}
	,get_percentHeight: function() {
		if(this.hasDynamicValue("percentHeight")) return this.getDynamicValue("percentHeight");
		return this._percentHeight;
	}
	,set_percentHeight: function(value) {
		if(value != this._percentHeight) {
			this._percentHeight = value;
			this.apply();
		}
		return value;
	}
	,get_autoSize: function() {
		if(this.hasDynamicValue("autoSize")) return this.getDynamicValue("autoSize");
		if(this._autoSize == -1) return true;
		return this._autoSize == 1;
	}
	,set_autoSize: function(value) {
		if(value) this._autoSize = 1; else this._autoSize = 0;
		this.apply();
		return value;
	}
	,get_autoSizeSet: function() {
		if(this.hasDynamicValue("autoSize")) return true;
		if(this._autoSize != -1) return true;
		return false;
	}
	,get_backgroundImage: function() {
		if(this.hasDynamicValue("backgroundImage")) return this.getDynamicValue("backgroundImage");
		return this._backgroundImage;
	}
	,set_backgroundImage: function(value) {
		if(value != this._backgroundImage) {
			this._backgroundImage = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundImageScale9: function() {
		if(this.hasDynamicValue("backgroundImageScale9")) return this.getDynamicValue("backgroundImageScale9");
		return this._backgroundImageScale9;
	}
	,set_backgroundImageScale9: function(value) {
		if(value != this._backgroundImageScale9) {
			this._backgroundImageScale9 = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundImageRect: function() {
		if(this.hasDynamicValue("backgroundImageRect")) return this.getDynamicValue("backgroundImageRect");
		return this._backgroundImageRect;
	}
	,set_backgroundImageRect: function(value) {
		if(value != this._backgroundImageRect) {
			this._backgroundImageRect = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundColor: function() {
		if(this.hasDynamicValue("backgroundColor")) return this.getDynamicValue("backgroundColor");
		return this._backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this._backgroundColor) {
			this._backgroundColor = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundColorGradientEnd: function() {
		if(this.hasDynamicValue("backgroundColorGradientEnd")) return this.getDynamicValue("backgroundColorGradientEnd");
		return this._backgroundColorGradientEnd;
	}
	,set_backgroundColorGradientEnd: function(value) {
		if(value != this._backgroundColorGradientEnd) {
			this._backgroundColorGradientEnd = value;
			this.apply();
		}
		return value;
	}
	,get_backgroundAlpha: function() {
		if(this.hasDynamicValue("backgroundAlpha")) return this.getDynamicValue("backgroundAlpha");
		return this._backgroundAlpha;
	}
	,set_backgroundAlpha: function(value) {
		if(value != this._backgroundAlpha) {
			this._backgroundAlpha = value;
			this.apply();
		}
		return value;
	}
	,get_borderColor: function() {
		if(this.hasDynamicValue("borderColor")) return this.getDynamicValue("borderColor");
		return this._borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this._borderColor) {
			this._borderColor = value;
			this.apply();
		}
		return value;
	}
	,get_borderSize: function() {
		if(this.hasDynamicValue("borderSize")) return this.getDynamicValue("borderSize");
		return this._borderSize;
	}
	,set_borderSize: function(value) {
		if(value != this._borderSize) {
			this._borderSize = value;
			this.apply();
		}
		return value;
	}
	,get_borderAlpha: function() {
		if(this.hasDynamicValue("borderAlpha")) return this.getDynamicValue("borderAlpha");
		return this._borderAlpha;
	}
	,set_borderAlpha: function(value) {
		if(value != this._borderAlpha) {
			this._borderAlpha = value;
			this.apply();
		}
		return value;
	}
	,get_color: function() {
		if(this.hasDynamicValue("color")) return this.getDynamicValue("color");
		return this._color;
	}
	,set_color: function(value) {
		if(value != this._color) {
			this._color = value;
			this.apply();
		}
		return value;
	}
	,get_paddingLeft: function() {
		if(this.hasDynamicValue("paddingLeft")) return this.getDynamicValue("paddingRight");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(value != this._paddingLeft) {
			this._paddingLeft = value;
			this.apply();
		}
		return value;
	}
	,get_paddingRight: function() {
		if(this.hasDynamicValue("paddingRight")) return this.getDynamicValue("paddingRight");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingRight;
	}
	,set_paddingRight: function(value) {
		if(value != this._paddingRight) {
			this._paddingRight = value;
			this.apply();
		}
		return value;
	}
	,get_paddingTop: function() {
		if(this.hasDynamicValue("paddingTop")) return this.getDynamicValue("paddingTop");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingTop;
	}
	,set_paddingTop: function(value) {
		if(value != this._paddingTop) {
			this._paddingTop = value;
			this.apply();
		}
		return value;
	}
	,get_paddingBottom: function() {
		if(this.hasDynamicValue("paddingBottom")) return this.getDynamicValue("paddingBottom");
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return this._paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(value != this._paddingBottom) {
			this._paddingBottom = value;
			this.apply();
		}
		return value;
	}
	,get_padding: function() {
		if(this.hasDynamicValue("padding")) return this.getDynamicValue("padding");
		return js.Boot.__cast(this._paddingLeft | this._paddingRight | this._paddingTop | this._paddingBottom , Int);
	}
	,set_padding: function(value) {
		if(value != this._paddingLeft || value != this._paddingRight || value != this._paddingTop || value != this._paddingBottom) {
			this._paddingLeft = value;
			this._paddingRight = value;
			this._paddingTop = value;
			this._paddingBottom = value;
			this.apply();
		}
		return value;
	}
	,get_spacingX: function() {
		if(this.hasDynamicValue("spacingX")) return this.getDynamicValue("spacingX");
		if(this.hasDynamicValue("spacing")) return this.getDynamicValue("spacing");
		return this._spacingX;
	}
	,set_spacingX: function(value) {
		if(value != this._spacingX) {
			this._spacingX = value;
			this.apply();
		}
		return value;
	}
	,get_spacingY: function() {
		if(this.hasDynamicValue("spacingY")) return this.getDynamicValue("spacingY");
		if(this.hasDynamicValue("spacing")) return this.getDynamicValue("spacing");
		return this._spacingY;
	}
	,set_spacingY: function(value) {
		if(value != this._spacingY) {
			this._spacingY = value;
			this.apply();
		}
		return value;
	}
	,get_spacing: function() {
		if(this.hasDynamicValue("spacing")) return this.getDynamicValue("spacing");
		return this._spacingX | this._spacingY;
	}
	,set_spacing: function(value) {
		if(value != this._spacingX || value != this._spacingY) {
			this._spacingX = value;
			this._spacingY = value;
			this.apply();
		}
		return value;
	}
	,get_rotationX: function() {
		if(this.hasDynamicValue("rotationX")) return this.getDynamicValue("rotationX");
		return this._rotationX;
	}
	,set_rotationX: function(value) {
		if(value != this._rotationX) {
			this._rotationX = value;
			this.apply();
		}
		return value;
	}
	,get_rotationY: function() {
		if(this.hasDynamicValue("rotationY")) return this.getDynamicValue("rotationY");
		return this._rotationY;
	}
	,set_rotationY: function(value) {
		if(value != this._rotationY) {
			this._rotationY = value;
			this.apply();
		}
		return value;
	}
	,get_rotationZ: function() {
		if(this.hasDynamicValue("rotationZ")) return this.getDynamicValue("rotationZ");
		return this._rotationY;
	}
	,set_rotationZ: function(value) {
		if(value != this._rotationZ) {
			this._rotationZ = value;
			this.apply();
		}
		return value;
	}
	,get_horizontalAlignment: function() {
		if(this.hasDynamicValue("horizontalAlignment")) return this.getDynamicValue("horizontalAlignment");
		return this._horizontalAlignment;
	}
	,set_horizontalAlignment: function(value) {
		if(value != this._horizontalAlignment) {
			this._horizontalAlignment = value;
			this.apply();
		}
		return value;
	}
	,get_verticalAlignment: function() {
		if(this.hasDynamicValue("verticalAlignment")) return this.getDynamicValue("verticalAlignment");
		return this._verticalAlignment;
	}
	,set_verticalAlignment: function(value) {
		if(value != this._verticalAlignment) {
			this._verticalAlignment = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusTopLeft: function() {
		if(this.hasDynamicValue("cornerRadiusTopLeft")) return this.getDynamicValue("cornerRadiusTopLeft");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusTopLeft;
	}
	,set_cornerRadiusTopLeft: function(value) {
		if(value != this._cornerRadiusTopLeft) {
			this._cornerRadiusTopLeft = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusTopRight: function() {
		if(this.hasDynamicValue("cornerRadiusTopRight")) return this.getDynamicValue("cornerRadiusTopRight");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusTopRight;
	}
	,set_cornerRadiusTopRight: function(value) {
		if(value != this._cornerRadiusTopRight) {
			this._cornerRadiusTopRight = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusBottomLeft: function() {
		if(this.hasDynamicValue("cornerRadiusBottomLeft")) return this.getDynamicValue("cornerRadiusBottomLeft");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusBottomLeft;
	}
	,set_cornerRadiusBottomLeft: function(value) {
		if(value != this._cornerRadiusBottomLeft) {
			this._cornerRadiusBottomLeft = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadiusBottomRight: function() {
		if(this.hasDynamicValue("cornerRadiusBottomRight")) return this.getDynamicValue("cornerRadiusBottomRight");
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusBottomRight;
	}
	,set_cornerRadiusBottomRight: function(value) {
		if(value != this._cornerRadiusBottomRight) {
			this._cornerRadiusBottomRight = value;
			this.apply();
		}
		return value;
	}
	,get_cornerRadius: function() {
		if(this.hasDynamicValue("cornerRadius")) return this.getDynamicValue("cornerRadius");
		return this._cornerRadiusTopLeft | this._cornerRadiusTopRight | this._cornerRadiusBottomLeft | this._cornerRadiusBottomRight;
	}
	,set_cornerRadius: function(value) {
		if(value != this._cornerRadiusTopLeft || value != this._cornerRadiusTopRight || value != this._cornerRadiusBottomLeft || value != this._cornerRadiusBottomRight) {
			this._cornerRadiusTopLeft = value;
			this._cornerRadiusTopRight = value;
			this._cornerRadiusBottomLeft = value;
			this._cornerRadiusBottomRight = value;
			this.apply();
		}
		return value;
	}
	,get_filter: function() {
		var filter = null;
		if(this.hasDynamicValue("filter")) filter = this.getDynamicValue("filter"); else filter = this._filter;
		var overrideQuality = -1;
		if(overrideQuality != -1) filter = haxe.ui.toolkit.util.FilterParser.changeFilterQuality(filter,overrideQuality);
		return filter;
	}
	,set_filter: function(value) {
		this._filterSet = true;
		this._filter = value;
		this.apply();
		return this._filter;
	}
	,get_alpha: function() {
		if(this.hasDynamicValue("alpha")) return this.getDynamicValue("alpha");
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value != this._alpha) {
			this._alpha = value;
			this.apply();
		}
		return value;
	}
	,get_fontName: function() {
		if(this.hasDynamicValue("fontName")) return this.getDynamicValue("fontName");
		return this._fontName;
	}
	,set_fontName: function(value) {
		if(value != this._fontName) {
			this._fontName = value;
			this.apply();
		}
		return value;
	}
	,get_fontSize: function() {
		if(this.hasDynamicValue("fontSize")) return this.getDynamicValue("fontSize");
		var size = this._fontSize;
		if(this._fontScale > 0) size = this._fontSize * this._fontScale;
		return size;
	}
	,set_fontSize: function(value) {
		if(value != this._fontSize) {
			this._fontSize = value;
			this.apply();
		}
		return value;
	}
	,get_fontScale: function() {
		if(this.hasDynamicValue("fontScale")) return this.getDynamicValue("fontScale");
		return this._fontScale;
	}
	,set_fontScale: function(value) {
		if(value != this._fontScale) {
			this._fontScale = value;
			this.apply();
		}
		return value;
	}
	,get_fontEmbedded: function() {
		if(this.hasDynamicValue("fontEmbedded")) return this.getDynamicValue("fontEmbedded");
		if(this._fontEmbedded == -1) return false;
		return this._fontEmbedded == 1;
	}
	,set_fontEmbedded: function(value) {
		if(value) this._fontEmbedded = 1; else this._fontEmbedded = 0;
		this.apply();
		return value;
	}
	,get_fontBold: function() {
		if(this.hasDynamicValue("fontBold")) return this.getDynamicValue("fontBold");
		if(this._fontBold == -1) return false;
		return this._fontBold == 1;
	}
	,set_fontBold: function(value) {
		if(value) this._fontBold = 1; else this._fontBold = 0;
		this.apply();
		return value;
	}
	,get_fontItalic: function() {
		if(this.hasDynamicValue("fontItalic")) return this.getDynamicValue("fontItalic");
		if(this._fontItalic == -1) return false;
		return this._fontItalic == 1;
	}
	,set_fontItalic: function(value) {
		if(value) this._fontItalic = 1; else this._fontItalic = 0;
		this.apply();
		return value;
	}
	,get_fontUnderline: function() {
		if(this.hasDynamicValue("fontUnderline")) return this.getDynamicValue("fontUnderline");
		if(this._fontUnderline == -1) return false;
		return this._fontUnderline == 1;
	}
	,set_fontUnderline: function(value) {
		if(value) this._fontUnderline = 1; else this._fontUnderline = 0;
		this.apply();
		return value;
	}
	,get_textAlign: function() {
		if(this.hasDynamicValue("textAlign")) return this.getDynamicValue("textAlign");
		return this._textAlign;
	}
	,set_textAlign: function(value) {
		if(value != this._textAlign) {
			this._textAlign = value;
			this.apply();
		}
		return value;
	}
	,get_iconPosition: function() {
		if(this.hasDynamicValue("iconPosition")) return this.getDynamicValue("iconPosition");
		return this._iconPosition;
	}
	,set_iconPosition: function(value) {
		if(value != this._iconPosition) {
			this._iconPosition = value;
			this.apply();
		}
		return value;
	}
	,get_icon: function() {
		if(this.hasDynamicValue("icon")) return this.getDynamicValue("icon");
		return this._icon;
	}
	,set_icon: function(value) {
		if(value != this._icon) {
			this._icon = value;
			this.apply();
		}
		return value;
	}
	,get_hasButtons: function() {
		if(this.hasDynamicValue("hasButtons")) return this.getDynamicValue("hasButtons");
		if(this._hasButtons == -1) return true;
		return this._hasButtons == 1;
	}
	,set_hasButtons: function(value) {
		if(value) this._hasButtons = 1; else this._hasButtons = 0;
		this.apply();
		return value;
	}
	,get_gradientType: function() {
		if(this.hasDynamicValue("gradientType")) return this.getDynamicValue("gradientType");
		return this._gradientType;
	}
	,set_gradientType: function(value) {
		if(value != this._gradientType) {
			this._gradientType = value;
			this.apply();
		}
		return value;
	}
	,get_selectionMethod: function() {
		if(this.hasDynamicValue("selectionMethod")) return this.getDynamicValue("selectionMethod");
		return this._selectionMethod;
	}
	,set_selectionMethod: function(value) {
		if(value != this._selectionMethod) {
			this._selectionMethod = value;
			this.apply();
		}
		return value;
	}
	,get_autoHideScrolls: function() {
		if(this.hasDynamicValue("autoHideScrolls")) return this.getDynamicValue("autoHideScrolls");
		if(this._autoHideScrolls == -1) return false;
		return this._autoHideScrolls == 1;
	}
	,set_autoHideScrolls: function(value) {
		if(value) this._autoHideScrolls = 1; else this._autoHideScrolls = 0;
		this.apply();
		return value;
	}
	,get_inlineScrolls: function() {
		if(this.hasDynamicValue("inlineScrolls")) return this.getDynamicValue("inlineScrolls");
		if(this._inlineScrolls == -1) return false;
		return this._inlineScrolls == 1;
	}
	,set_inlineScrolls: function(value) {
		if(value) this._inlineScrolls = 1; else this._inlineScrolls = 0;
		this.apply();
		return value;
	}
	,apply: function() {
		if(this._target != null && this._autoApply == true) {
			if(js.Boot.__instanceof(this._target,haxe.ui.toolkit.core.StyleableDisplayObject)) (js.Boot.__cast(this._target , haxe.ui.toolkit.core.StyleableDisplayObject)).applyStyle();
		}
	}
	,addDynamicValue: function(property,script) {
		if(this._dynamicValues == null) this._dynamicValues = new haxe.ds.StringMap();
		this._dynamicValues.set(property,script);
	}
	,hasDynamicValue: function(property) {
		if(this._dynamicValues == null) return false;
		return this._dynamicValues.get(property) != null;
	}
	,getDynamicValue: function(property) {
		var script = this._dynamicValues.get(property);
		var retVal = haxe.ui.toolkit.hscript.ScriptManager.get_instance().executeScript(script);
		return retVal;
	}
	,merge: function($with) {
		if($with == null) return;
		if($with._width != -1) this._width = $with._width;
		if($with._height != -1) this._height = $with._height;
		if($with._percentWidth != -1) this._percentWidth = $with._percentWidth;
		if($with._percentHeight != -1) this._percentHeight = $with._percentHeight;
		if($with._autoSize != -1) this._autoSize = $with._autoSize;
		if($with._backgroundImage != null) {
			this._backgroundImage = $with._backgroundImage;
			this._backgroundImageScale9 = null;
			this._backgroundImageRect = null;
		}
		if($with._backgroundImageScale9 != null) this._backgroundImageScale9 = $with._backgroundImageScale9;
		if($with._backgroundImageRect != null) this._backgroundImageRect = $with._backgroundImageRect;
		if($with._backgroundColor != -1) this._backgroundColor = $with._backgroundColor;
		if($with._backgroundColor != -1) this._backgroundColorGradientEnd = $with._backgroundColor;
		if($with._backgroundColorGradientEnd != -1) this._backgroundColorGradientEnd = $with._backgroundColorGradientEnd;
		if($with._backgroundAlpha != -1) this._backgroundAlpha = $with._backgroundAlpha;
		if($with._borderColor != -1) this._borderColor = $with._borderColor;
		if($with._borderSize != -1) this._borderSize = $with._borderSize;
		if($with._borderAlpha != -1) this._borderAlpha = $with._borderAlpha;
		if($with._color != -1) this._color = $with._color;
		if($with._paddingLeft != -1) this._paddingLeft = $with._paddingLeft;
		if($with._paddingRight != -1) this._paddingRight = $with._paddingRight;
		if($with._paddingTop != -1) this._paddingTop = $with._paddingTop;
		if($with._paddingBottom != -1) this._paddingBottom = $with._paddingBottom;
		if($with._spacingX != -1) this._spacingX = $with._spacingX;
		if($with._spacingY != -1) this._spacingY = $with._spacingY;
		if($with._horizontalAlignment != null) this._horizontalAlignment = $with._horizontalAlignment;
		if($with._verticalAlignment != null) this._verticalAlignment = $with._verticalAlignment;
		if($with._cornerRadiusTopLeft != -1) this._cornerRadiusTopLeft = $with._cornerRadiusTopLeft;
		if($with._cornerRadiusTopRight != -1) this._cornerRadiusTopRight = $with._cornerRadiusTopRight;
		if($with._cornerRadiusBottomLeft != -1) this._cornerRadiusBottomLeft = $with._cornerRadiusBottomLeft;
		if($with._cornerRadiusBottomRight != -1) this._cornerRadiusBottomRight = $with._cornerRadiusBottomRight;
		if($with._filterSet == true) {
			this._filter = $with._filter;
			this._filterSet = $with._filterSet;
		}
		if($with._alpha != -1) this._alpha = $with._alpha;
		if($with._fontName != null) this._fontName = $with._fontName;
		if($with._fontSize != -1) this._fontSize = $with._fontSize;
		if($with._fontScale != -1) this._fontScale = $with._fontScale;
		if($with._fontEmbedded != -1) this._fontEmbedded = $with._fontEmbedded;
		if($with._fontBold != -1) this._fontBold = $with._fontBold;
		if($with._fontItalic != -1) this._fontItalic = $with._fontItalic;
		if($with._fontUnderline != -1) this._fontUnderline = $with._fontUnderline;
		if($with._textAlign != null) this._textAlign = $with._textAlign;
		if($with._iconPosition != null) this._iconPosition = $with._iconPosition;
		if($with._icon != null) this._icon = $with._icon;
		if($with._hasButtons != -1) this._hasButtons = $with._hasButtons;
		if($with._gradientType != null) this._gradientType = $with._gradientType;
		if($with._selectionMethod != null) this._selectionMethod = $with._selectionMethod;
		if($with._autoHideScrolls != -1) this._autoHideScrolls = $with._autoHideScrolls;
		if($with._inlineScrolls != -1) this._inlineScrolls = $with._inlineScrolls;
		if($with._dynamicValues != null) {
			if(this._dynamicValues == null) this._dynamicValues = new haxe.ds.StringMap();
			var $it0 = $with._dynamicValues.keys();
			while( $it0.hasNext() ) {
				var property = $it0.next();
				var script = $with._dynamicValues.get(property);
				this._dynamicValues.set(property,script);
			}
		}
	}
	,toString: function() {
		var s = "";
		if(this._width != -1 || this.hasDynamicValue("width")) s += "width: " + (this._width != -1?Std.string(this._width):this._dynamicValues.get("width")) + ";\n";
		if(this._height != -1 || this.hasDynamicValue("height")) s += "height: " + (this._height != -1?Std.string(this._height):this._dynamicValues.get("height")) + ";\n";
		if(this._percentWidth != -1 || this.hasDynamicValue("percentWidth")) s += "width: " + (this._percentWidth != -1?Std.string(this._percentWidth):this._dynamicValues.get("percentWidth")) + "%;\n";
		if(this._percentHeight != -1 || this.hasDynamicValue("percentHeight")) s += "height: " + (this._percentHeight != -1?Std.string(this._percentHeight):this._dynamicValues.get("percentHeight")) + "%;\n";
		if(this._backgroundImage != null || this.hasDynamicValue("backgroundImage")) s += "backgroundImage: \"" + (this._backgroundImage != null?Std.string(this._backgroundImage):this._dynamicValues.get("backgroundImage")) + "\";\n";
		if(this._backgroundColor != -1 || this.hasDynamicValue("backgroundColor")) s += "backgroundColor: #" + (this._backgroundColor != -1?StringTools.hex(this._backgroundColor,6):this._dynamicValues.get("backgroundColor")) + ";\n";
		if(this._backgroundColorGradientEnd != -1 || this.hasDynamicValue("backgroundColorGradientEnd")) s += "backgroundColorGradientEnd: #" + (this._backgroundColorGradientEnd != -1?StringTools.hex(this._backgroundColorGradientEnd,6):this._dynamicValues.get("backgroundColorGradientEnd")) + ";\n";
		return s;
	}
	,addRawProperty: function(prop) {
		if(this._rawProperties == null) this._rawProperties = new Array();
		this._rawProperties.push(prop);
	}
	,get_rawProperties: function() {
		return this._rawProperties;
	}
	,self: function() {
		return new haxe.ui.toolkit.style.Style();
	}
	,clone: function() {
		var c = this.self();
		c.merge(this);
		return c;
	}
	,__class__: haxe.ui.toolkit.style.Style
	,__properties__: {get_rawProperties:"get_rawProperties",set_autoApply:"set_autoApply",get_autoApply:"get_autoApply",set_target:"set_target",get_target:"get_target",set_inlineScrolls:"set_inlineScrolls",get_inlineScrolls:"get_inlineScrolls",set_autoHideScrolls:"set_autoHideScrolls",get_autoHideScrolls:"get_autoHideScrolls",set_selectionMethod:"set_selectionMethod",get_selectionMethod:"get_selectionMethod",set_gradientType:"set_gradientType",get_gradientType:"get_gradientType",set_hasButtons:"set_hasButtons",get_hasButtons:"get_hasButtons",set_icon:"set_icon",get_icon:"get_icon",set_iconPosition:"set_iconPosition",get_iconPosition:"get_iconPosition",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_fontUnderline:"set_fontUnderline",get_fontUnderline:"get_fontUnderline",set_fontItalic:"set_fontItalic",get_fontItalic:"get_fontItalic",set_fontBold:"set_fontBold",get_fontBold:"get_fontBold",set_fontEmbedded:"set_fontEmbedded",get_fontEmbedded:"get_fontEmbedded",set_fontScale:"set_fontScale",get_fontScale:"get_fontScale",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_fontName:"set_fontName",get_fontName:"get_fontName",set_alpha:"set_alpha",get_alpha:"get_alpha",set_filter:"set_filter",get_filter:"get_filter",set_cornerRadius:"set_cornerRadius",get_cornerRadius:"get_cornerRadius",set_cornerRadiusBottomRight:"set_cornerRadiusBottomRight",get_cornerRadiusBottomRight:"get_cornerRadiusBottomRight",set_cornerRadiusBottomLeft:"set_cornerRadiusBottomLeft",get_cornerRadiusBottomLeft:"get_cornerRadiusBottomLeft",set_cornerRadiusTopRight:"set_cornerRadiusTopRight",get_cornerRadiusTopRight:"get_cornerRadiusTopRight",set_cornerRadiusTopLeft:"set_cornerRadiusTopLeft",get_cornerRadiusTopLeft:"get_cornerRadiusTopLeft",set_horizontalAlignment:"set_horizontalAlignment",get_horizontalAlignment:"get_horizontalAlignment",set_verticalAlignment:"set_verticalAlignment",get_verticalAlignment:"get_verticalAlignment",set_spacing:"set_spacing",get_spacing:"get_spacing",set_spacingY:"set_spacingY",get_spacingY:"get_spacingY",set_spacingX:"set_spacingX",get_spacingX:"get_spacingX",set_padding:"set_padding",get_padding:"get_padding",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_color:"set_color",get_color:"get_color",set_borderAlpha:"set_borderAlpha",get_borderAlpha:"get_borderAlpha",set_borderSize:"set_borderSize",get_borderSize:"get_borderSize",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_backgroundAlpha:"set_backgroundAlpha",get_backgroundAlpha:"get_backgroundAlpha",set_backgroundColorGradientEnd:"set_backgroundColorGradientEnd",get_backgroundColorGradientEnd:"get_backgroundColorGradientEnd",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_backgroundImageRect:"set_backgroundImageRect",get_backgroundImageRect:"get_backgroundImageRect",set_backgroundImageScale9:"set_backgroundImageScale9",get_backgroundImageScale9:"get_backgroundImageScale9",set_backgroundImage:"set_backgroundImage",get_backgroundImage:"get_backgroundImage",get_autoSizeSet:"get_autoSizeSet",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
};
haxe.ui.toolkit.style.StyleHelper = function() { };
$hxClasses["haxe.ui.toolkit.style.StyleHelper"] = haxe.ui.toolkit.style.StyleHelper;
haxe.ui.toolkit.style.StyleHelper.__name__ = ["haxe","ui","toolkit","style","StyleHelper"];
haxe.ui.toolkit.style.StyleHelper.sectionCache = null;
haxe.ui.toolkit.style.StyleHelper.clearCache = function() {
	haxe.ui.toolkit.style.StyleHelper.sectionCache = new haxe.ds.StringMap();
};
haxe.ui.toolkit.style.StyleHelper.paintStyle = function(g,style,rc) {
	g.clear();
	if(style == null || rc.width == 0 || rc.height == 0) return;
	if(style.get_backgroundColor() != -1 || style.get_borderColor() != -1) {
		if(style.get_borderColor() != -1) {
			var borderSize = 1;
			if(style.get_borderSize() != -1) borderSize = style.get_borderSize();
			if(borderSize > 0) {
				var borderAlpha = 1;
				if(style.get_borderAlpha() != -1) borderAlpha = style.get_borderAlpha();
				g.lineStyle(borderSize,style.get_borderColor(),borderAlpha);
				rc.inflate(-(borderSize / 2),-(borderSize / 2));
			}
		}
		if(style.get_backgroundColor() != -1) {
			var backgroundAlpha = 1;
			if(style.get_backgroundAlpha() != -1) backgroundAlpha = style.get_backgroundAlpha();
			if(style.get_backgroundColorGradientEnd() != -1) {
				var w = rc.width | 0;
				var h = rc.height | 0;
				var colors_0 = style.get_backgroundColor();
				var colors_1 = style.get_backgroundColorGradientEnd();
				var alphas_0 = backgroundAlpha;
				var alphas_1 = backgroundAlpha;
				var ratios_0 = 0;
				var ratios_1 = 255;
				var matrix = new openfl.geom.Matrix();
				var gradientType = "vertical";
				if(style.get_gradientType() != null) gradientType = style.get_gradientType();
				if(gradientType == "vertical") matrix.createGradientBox(w - 2,h - 2,Math.PI / 2,0,0); else if(gradientType == "horizontal") matrix.createGradientBox(w - 2,h - 2,0,0,0);
				g.beginFill(style.get_backgroundColor(),backgroundAlpha);
			} else g.beginFill(style.get_backgroundColor(),backgroundAlpha);
		}
		if(style.get_cornerRadiusTopLeft() != -1 || style.get_cornerRadiusTopRight() != -1 || style.get_cornerRadiusBottomLeft() != -1 || style.get_cornerRadiusBottomRight() != -1) {
			var radiusTopLeft = style.get_cornerRadiusTopLeft();
			var radiusTopRight = style.get_cornerRadiusTopRight();
			var radiusBottomLeft = style.get_cornerRadiusBottomLeft();
			var radiusBottomRight = style.get_cornerRadiusBottomRight();
			if(((radiusTopLeft | 0) & (radiusTopRight | 0) & (radiusBottomLeft | 0) & (radiusBottomRight | 0)) == radiusTopLeft) {
				radiusTopLeft -= 2;
				g.drawRoundRect(rc.get_left(),rc.get_top(),rc.width,rc.height,radiusTopLeft + 2,radiusTopLeft + 2);
			} else g.drawRect(rc.get_left(),rc.get_top(),rc.width,rc.height);
		} else g.drawRect(rc.get_left(),rc.get_top(),rc.width,rc.height);
		g.endFill();
	}
	if(style.get_backgroundImage() != null) {
		var backgroundImageRect = null;
		if(style.get_backgroundImageRect() != null) backgroundImageRect = style.get_backgroundImageRect();
		if(((function($this) {
			var $r;
			var _this = style.get_backgroundImage();
			$r = HxOverrides.substr(_this,-3,null);
			return $r;
		}(this))).toLowerCase() != "svg") {
			if(style.get_backgroundImageScale9() != null) haxe.ui.toolkit.style.StyleHelper.paintScale9(g,style.get_backgroundImage(),backgroundImageRect,style.get_backgroundImageScale9(),rc); else {
				var rects = new haxe.ds.StringMap();
				var bitmapData = haxe.ui.toolkit.style.StyleHelper.getBitmapSection(style.get_backgroundImage(),backgroundImageRect);
				if(bitmapData != null) {
					rects.set("middle",new openfl.geom.Rectangle(0,0,bitmapData.width,bitmapData.height));
					haxe.ui.toolkit.style.StyleHelper.paintCompoundBitmap(g,style.get_backgroundImage(),backgroundImageRect,rects,rc);
				}
			}
		} else {
			var svg = haxe.ui.toolkit.resources.ResourceManager.get_instance().getSVG(style.get_backgroundImage());
			svg.render(g,rc.get_left(),rc.get_top(),rc.width,rc.height);
		}
	}
};
haxe.ui.toolkit.style.StyleHelper.paintScale9 = function(g,resourceId,resourceRect,scale9,rc) {
	if(scale9 != null) {
		var resource = haxe.ui.toolkit.style.StyleHelper.getBitmapSection(resourceId,resourceRect);
		if(resource == null) return;
		var w = resource.width;
		var h = resource.height;
		var x1 = Std["int"](scale9.get_left());
		var y1 = Std["int"](scale9.get_top());
		var x2 = Std["int"](scale9.get_right());
		var y2 = Std["int"](scale9.get_bottom());
		var rects = new haxe.ds.StringMap();
		rects.set("top.left",new openfl.geom.Rectangle(0,0,x1,y1));
		rects.set("top",new openfl.geom.Rectangle(x1,0,x2 - x1,y1));
		rects.set("top.right",new openfl.geom.Rectangle(x2,0,w - x2,y1));
		rects.set("left",new openfl.geom.Rectangle(0,y1,x1,y2 - y1));
		rects.set("middle",new openfl.geom.Rectangle(x1,y1,x2 - x1,y2 - y1));
		rects.set("right",new openfl.geom.Rectangle(x2,y1,w - x2,y2 - y1));
		rects.set("bottom.left",new openfl.geom.Rectangle(0,y2,x1,h - y2));
		rects.set("bottom",new openfl.geom.Rectangle(x1,y2,x2 - x1,h - y2));
		rects.set("bottom.right",new openfl.geom.Rectangle(x2,y2,w - x2,h - y2));
		haxe.ui.toolkit.style.StyleHelper.paintCompoundBitmap(g,resourceId,resourceRect,rects,rc);
	}
};
haxe.ui.toolkit.style.StyleHelper.paintCompoundBitmap = function(g,resourceId,resourceRect,sourceRects,targetRect) {
	targetRect.set_left(Std["int"](targetRect.get_left()));
	targetRect.set_top(Std["int"](targetRect.get_top()));
	targetRect.set_right(Std["int"](targetRect.get_right()));
	targetRect.set_bottom(Std["int"](targetRect.get_bottom()));
	var tl = sourceRects.get("top.left");
	if(tl != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,tl,new openfl.geom.Rectangle(0,0,tl.width,tl.height)); else tl = new openfl.geom.Rectangle();
	var tr = sourceRects.get("top.right");
	if(tr != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,tr,new openfl.geom.Rectangle(targetRect.width - tr.width,0,tr.width,tr.height)); else tr = new openfl.geom.Rectangle();
	var t = sourceRects.get("top");
	if(t != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,t,new openfl.geom.Rectangle(tl.width,0,targetRect.width - tl.width - tr.width,t.height)); else t = new openfl.geom.Rectangle();
	var bl = sourceRects.get("bottom.left");
	if(bl != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,bl,new openfl.geom.Rectangle(0,targetRect.height - bl.height,bl.width,bl.height)); else bl = new openfl.geom.Rectangle();
	var br = sourceRects.get("bottom.right");
	if(br != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,br,new openfl.geom.Rectangle(targetRect.width - br.width,targetRect.height - br.height,br.width,br.height)); else br = new openfl.geom.Rectangle();
	var b = sourceRects.get("bottom");
	if(b != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,b,new openfl.geom.Rectangle(bl.width,targetRect.height - b.height,targetRect.width - bl.width - br.width,b.height)); else b = new openfl.geom.Rectangle();
	var l = sourceRects.get("left");
	if(l != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,l,new openfl.geom.Rectangle(0,tl.height,l.width,targetRect.height - tl.height - bl.height)); else l = new openfl.geom.Rectangle();
	var r = sourceRects.get("right");
	if(r != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,r,new openfl.geom.Rectangle(targetRect.width - r.width,tr.height,r.width,targetRect.height - tl.height - bl.height)); else r = new openfl.geom.Rectangle();
	var m = sourceRects.get("middle");
	if(m != null) haxe.ui.toolkit.style.StyleHelper.paintBitmapSection(g,resourceId,resourceRect,m,new openfl.geom.Rectangle(l.width,t.height,targetRect.width - l.width - r.width,targetRect.height - t.height - b.height)); else m = new openfl.geom.Rectangle();
};
haxe.ui.toolkit.style.StyleHelper.paintBitmapSection = function(g,resourceId,resourceRect,src,dst) {
	var srcData = haxe.ui.toolkit.style.StyleHelper.getBitmapSection(resourceId,resourceRect);
	if(srcData == null) return;
	if(src.width <= 0 || src.height <= 0 || dst.width <= 0 || dst.height <= 0) return;
	if(resourceRect == null) resourceRect = new openfl.geom.Rectangle(0,0,srcData.width,srcData.height);
	var cacheId = resourceId + "_" + resourceRect.get_left() + "_" + resourceRect.get_top() + "_" + resourceRect.width + "_" + resourceRect.height + "___" + src.get_left() + "_" + src.get_top() + "_" + src.width + "_" + src.height;
	var section = haxe.ui.toolkit.style.StyleHelper.sectionCache.get(cacheId);
	if(section == null) {
		var fillcolor = 16777215;
		section = new openfl.display.BitmapData(src.width | 0,src.height | 0,true,fillcolor);
		section.copyPixels(srcData,src,new openfl.geom.Point(0,0));
		haxe.ui.toolkit.style.StyleHelper.sectionCache.set(cacheId,section);
	}
	src.set_left(Std["int"](src.get_left()));
	src.set_top(Std["int"](src.get_top()));
	src.set_bottom(Std["int"](src.get_bottom()));
	src.set_right(Std["int"](src.get_right()));
	dst.set_left(Std["int"](dst.get_left()));
	dst.set_top(Std["int"](dst.get_top()));
	dst.set_bottom(Std["int"](dst.get_bottom()));
	dst.set_right(Std["int"](dst.get_right()));
	var mat = new openfl.geom.Matrix();
	mat.scale(dst.width / section.width,dst.height / section.height);
	mat.translate(dst.get_left(),dst.get_top());
	g.lineStyle(0,0,0);
	g.beginBitmapFill(section,mat,false,false);
	g.drawRect(dst.x,dst.y,dst.width,dst.height);
	g.endFill();
};
haxe.ui.toolkit.style.StyleHelper.getBitmapSection = function(resourceId,rc) {
	if(resourceId == null || resourceId.length == 0) return null;
	if(haxe.ui.toolkit.style.StyleHelper.sectionCache == null) haxe.ui.toolkit.style.StyleHelper.sectionCache = new haxe.ds.StringMap();
	if(rc == null) {
		var resource = haxe.ui.toolkit.resources.ResourceManager.get_instance().getBitmapData(resourceId);
		if(resource != null) rc = new openfl.geom.Rectangle(0,0,resource.width,resource.height);
	}
	var cacheId = resourceId + "_" + rc.get_left() + "_" + rc.get_top() + "_" + rc.width + "_" + rc.height;
	var section = haxe.ui.toolkit.style.StyleHelper.sectionCache.get(cacheId);
	if(section == null) {
		var resource1 = haxe.ui.toolkit.resources.ResourceManager.get_instance().getBitmapData(resourceId);
		if(resource1 != null) {
			var fillcolor = 16777215;
			section = new openfl.display.BitmapData(rc.width | 0,rc.height | 0,true,fillcolor);
			section.copyPixels(resource1,rc,new openfl.geom.Point(0,0));
			haxe.ui.toolkit.style.StyleHelper.sectionCache.set(cacheId,section);
		}
	}
	return section;
};
haxe.ui.toolkit.style.StyleManager = function() {
	this._cacheStyles = true;
	this.stylesBuilt = 0;
	this._styles = new haxe.ds.StringMap();
	this._rules = new Array();
	this.stylesBuiltFor = new haxe.ds.StringMap();
};
$hxClasses["haxe.ui.toolkit.style.StyleManager"] = haxe.ui.toolkit.style.StyleManager;
haxe.ui.toolkit.style.StyleManager.__name__ = ["haxe","ui","toolkit","style","StyleManager"];
haxe.ui.toolkit.style.StyleManager.__properties__ = {get_instance:"get_instance"}
haxe.ui.toolkit.style.StyleManager._instance = null;
haxe.ui.toolkit.style.StyleManager.instance = null;
haxe.ui.toolkit.style.StyleManager.get_instance = function() {
	if(haxe.ui.toolkit.style.StyleManager._instance == null) haxe.ui.toolkit.style.StyleManager._instance = new haxe.ui.toolkit.style.StyleManager();
	return haxe.ui.toolkit.style.StyleManager._instance;
};
haxe.ui.toolkit.style.StyleManager.prototype = {
	getRules: function() {
		return this._rules;
	}
	,removeStyle: function(rule) {
		this._styles.remove(rule);
		HxOverrides.remove(this._rules,rule);
	}
	,addStyle: function(rule,style) {
		this._cachedStyles = null;
		var arr = rule.split(",");
		var _g = 0;
		while(_g < arr.length) {
			var a = arr[_g];
			++_g;
			a = StringTools.trim(a);
			var existingStyleRule = this._styles.get(a);
			var existingStyle = null;
			if(existingStyleRule != null) {
				var existingStyle1 = existingStyleRule.style;
				existingStyle1.merge(style);
				var styleRule = new haxe.ui.toolkit.style._StyleManager.StyleRule(a,existingStyle1);
				this._styles.set(a,styleRule);
			} else {
				var styleRule1 = new haxe.ui.toolkit.style._StyleManager.StyleRule(a,style);
				this._styles.set(a,styleRule1);
				this._rules.push(a);
			}
		}
	}
	,addStyles: function(styles) {
		var $it0 = styles.get_rules();
		while( $it0.hasNext() ) {
			var rule = $it0.next();
			this.addStyle(rule,styles.getStyle(rule));
		}
	}
	,findStyle: function(rule) {
		var existingStyleRule = this._styles.get(rule);
		if(existingStyleRule != null) return existingStyleRule.style;
		return null;
	}
	,clear: function() {
		this._styles = new haxe.ds.StringMap();
		this._rules = new Array();
		haxe.ui.toolkit.style.StyleHelper.clearCache();
	}
	,get_useCache: function() {
		return this._cacheStyles;
	}
	,set_useCache: function(value) {
		this._cacheStyles = false;
		return value;
	}
	,clearCache: function() {
		this._cachedStyles = new haxe.ds.StringMap();
	}
	,findAncestor: function(c,rulePart) {
		var a = null;
		var t = c;
		while(a == null) if(this.rulePartMatch(t,rulePart,null) == true) a = t; else {
			t = t.get_parent();
			if(t == null) break;
		}
		return a;
	}
	,rulePartMatch: function(c,rulePart,state,overriddenClassName) {
		var match = false;
		if(state == "normal") state = null;
		var className = Type.getClassName(Type.getClass(c));
		var n = className.lastIndexOf(".");
		className = HxOverrides.substr(className,n + 1,className.length);
		if(overriddenClassName != null) className = overriddenClassName;
		var id = c.get_id();
		var styleName = null;
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)) styleName = (js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)).get_styleName();
		var rulePartId = rulePart.id;
		var rulePartClassName = rulePart.className;
		var rulePartState = rulePart.state;
		var rulePartStyleName = rulePart.styleName;
		if(rulePartStyleName != null && rulePartStyleName.length == 0) rulePartStyleName = null;
		var s = new haxe.ui.toolkit.style.Style();
		if(rulePartId != null) {
			match = rulePartId == id;
			if(rulePartStyleName != null && match == true) match = rulePartStyleName == styleName;
		} else if(rulePartClassName != null) {
			match = rulePartClassName == className;
			if(rulePartStyleName != null && match == true) match = rulePartStyleName == styleName;
		} else if(rulePartStyleName != null) match = rulePartStyleName == styleName;
		if(rulePartState != null && match == true) match = rulePartState == state;
		return match;
	}
	,ruleMatch: function(c,rule,state,overriddenClassName) {
		var match = true;
		if(state == "normal") state = null;
		var className = Type.getClassName(Type.getClass(c));
		var n = className.lastIndexOf(".");
		className = HxOverrides.substr(className,n + 1,className.length);
		if(overriddenClassName != null) className = overriddenClassName;
		var id = c.get_id();
		var styleName = null;
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)) styleName = (js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)).get_styleName();
		var styleRule = this._styles.get(rule);
		var skipRule = true;
		if(styleRule.isRelevant(id,className,state,styleName) == true) skipRule = false;
		if(styleName != null && rule.indexOf("." + styleName) != -1) skipRule = false;
		if(skipRule == true) return false;
		var t = c;
		var _g = 0;
		var _g1 = styleRule.ruleParts;
		while(_g < _g1.length) {
			var rulePart = _g1[_g];
			++_g;
			var partMatch = this.rulePartMatch(t,rulePart,state,overriddenClassName);
			if(partMatch == false) {
				t = this.findAncestor(t,rulePart);
				if(t == null) {
					match = false;
					break;
				} else state = null;
			}
		}
		return match;
	}
	,buildStyleFor: function(c,state) {
		if(state == "normal") state = null;
		var cacheKey = null;
		if(this._cacheStyles == true) {
			cacheKey = this.buildFullCacheKey(c,state);
			if(this._cachedStyles == null) this._cachedStyles = new haxe.ds.StringMap();
			if(this._cachedStyles.get(cacheKey) != null) return this._cachedStyles.get(cacheKey).clone();
		}
		var style = new haxe.ui.toolkit.style.Style();
		style.set_autoApply(false);
		var superClass = Type.getSuperClass(Type.getClass(c));
		while(superClass != haxe.ui.toolkit.core.Component && superClass != haxe.ui.toolkit.core.StateComponent && superClass != haxe.ui.toolkit.core.StyleableDisplayObject && superClass != haxe.ui.toolkit.core.DisplayObjectContainer && superClass != haxe.ui.toolkit.core.DisplayObject && superClass != null) {
			var superClassName = Type.getClassName(superClass);
			var n = superClassName.lastIndexOf(".");
			superClassName = HxOverrides.substr(superClassName,n + 1,superClassName.length);
			var _g = 0;
			var _g1 = this._rules;
			while(_g < _g1.length) {
				var rule = _g1[_g];
				++_g;
				if(this.ruleMatch(c,rule,state,superClassName) == true) {
					var matchedStyle = this._styles.get(rule).style;
					style.merge(matchedStyle);
				}
			}
			superClass = Type.getSuperClass(superClass);
		}
		var _g2 = 0;
		var _g11 = this._rules;
		while(_g2 < _g11.length) {
			var rule1 = _g11[_g2];
			++_g2;
			if(this.ruleMatch(c,rule1,state) == true) {
				var matchedStyle1 = this._styles.get(rule1).style;
				style.merge(matchedStyle1);
			}
		}
		this.stylesBuilt++;
		var className = Type.getClassName(Type.getClass(c));
		if(this.stylesBuiltFor.get(className) == null) this.stylesBuiltFor.set(className,0);
		var n1 = this.stylesBuiltFor.get(className);
		n1++;
		this.stylesBuiltFor.set(className,n1);
		if(this._cacheStyles == true && cacheKey != null) this._cachedStyles.set(cacheKey,style);
		style.set_target(c);
		style.set_autoApply(true);
		return style.clone();
	}
	,buildCacheKey: function(c,state) {
		if(state == "normal") state = null;
		var className = Type.getClassName(Type.getClass(c));
		var n = className.lastIndexOf(".");
		className = HxOverrides.substr(className,n + 1,className.length);
		var id = c.get_id();
		var styleName = null;
		var styleString = null;
		if(js.Boot.__instanceof(c,haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)) {
			styleName = (js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)).get_styleName();
			styleString = (js.Boot.__cast(c , haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject)).get_styleString();
		}
		var s = className;
		if(id != null) s += "#" + id;
		if(styleName != null) s += "." + styleName;
		if(state != null) s += ":" + state;
		if(styleString != null) s += "{" + styleString + "}";
		return s;
	}
	,buildFullCacheKey: function(c,state) {
		if(state == "normal") state = null;
		var key = this.buildCacheKey(c,state);
		var p = c.get_parent();
		while(p != null) {
			key += ">" + this.buildCacheKey(p,null);
			p = p.get_parent();
		}
		return key;
	}
	,dump: function() {
		var $it0 = this.stylesBuiltFor.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			haxe.Log.trace("> " + key + " = " + this.stylesBuiltFor.get(key),{ fileName : "StyleManager.hx", lineNumber : 343, className : "haxe.ui.toolkit.style.StyleManager", methodName : "dump"});
		}
		haxe.Log.trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",{ fileName : "StyleManager.hx", lineNumber : 345, className : "haxe.ui.toolkit.style.StyleManager", methodName : "dump"});
	}
	,get_hasStyles: function() {
		if(this._styles == null) return false;
		return this._styles.keys().hasNext();
	}
	,__class__: haxe.ui.toolkit.style.StyleManager
	,__properties__: {set_useCache:"set_useCache",get_useCache:"get_useCache",get_hasStyles:"get_hasStyles"}
};
haxe.ui.toolkit.style._StyleManager = {};
haxe.ui.toolkit.style._StyleManager.StyleRule = function(rule,style) {
	this.style = style;
	this.ruleParts = new Array();
	var ruleArr = rule.split(" ");
	ruleArr.reverse();
	var _g = 0;
	while(_g < ruleArr.length) {
		var rulePart = ruleArr[_g];
		++_g;
		this.ruleParts.push(new haxe.ui.toolkit.style._StyleManager.StyleRulePart(rulePart));
	}
};
$hxClasses["haxe.ui.toolkit.style._StyleManager.StyleRule"] = haxe.ui.toolkit.style._StyleManager.StyleRule;
haxe.ui.toolkit.style._StyleManager.StyleRule.__name__ = ["haxe","ui","toolkit","style","_StyleManager","StyleRule"];
haxe.ui.toolkit.style._StyleManager.StyleRule.prototype = {
	containsClassName: function(className) {
		var found = false;
		var _g = 0;
		var _g1 = this.ruleParts;
		while(_g < _g1.length) {
			var rulePart = _g1[_g];
			++_g;
			if(rulePart.className != null && rulePart.className == className) {
				found = true;
				break;
			}
		}
		return found;
	}
	,isRelevant: function(id,className,state,styleName) {
		var relevant = false;
		var _g = 0;
		var _g1 = this.ruleParts;
		while(_g < _g1.length) {
			var rulePart = _g1[_g];
			++_g;
			if(rulePart.id != null && rulePart.id == id) {
				relevant = true;
				break;
			}
			if(rulePart.className != null && rulePart.className == className) {
				relevant = true;
				break;
			}
			if(rulePart.state != null && rulePart.state == state) {
				relevant = true;
				break;
			}
			if(rulePart.styleName != null && rulePart.styleName == styleName) {
				relevant = true;
				break;
			}
		}
		return relevant;
	}
	,__class__: haxe.ui.toolkit.style._StyleManager.StyleRule
};
haxe.ui.toolkit.style._StyleManager.StyleRulePart = function(rulePart) {
	var n = rulePart.indexOf(":");
	if(n != -1) {
		this.state = HxOverrides.substr(rulePart,n + 1,rulePart.length);
		rulePart = HxOverrides.substr(rulePart,0,n);
	}
	if(StringTools.startsWith(rulePart,"#")) {
		this.id = HxOverrides.substr(rulePart,1,rulePart.length);
		n = this.id.indexOf(".");
		if(n != -1) {
			this.styleName = HxOverrides.substr(this.id,n + 1,this.id.length);
			this.id = HxOverrides.substr(this.id,0,n);
		}
	} else {
		this.className = rulePart;
		n = this.className.indexOf(".");
		if(n != -1) {
			this.styleName = HxOverrides.substr(this.className,n + 1,this.className.length);
			this.className = HxOverrides.substr(this.className,0,n);
			if(this.className.length == 0) this.className = null;
		}
	}
	if(this.styleName != null && this.styleName.length == 0) this.styleName = null;
};
$hxClasses["haxe.ui.toolkit.style._StyleManager.StyleRulePart"] = haxe.ui.toolkit.style._StyleManager.StyleRulePart;
haxe.ui.toolkit.style._StyleManager.StyleRulePart.__name__ = ["haxe","ui","toolkit","style","_StyleManager","StyleRulePart"];
haxe.ui.toolkit.style._StyleManager.StyleRulePart.prototype = {
	__class__: haxe.ui.toolkit.style._StyleManager.StyleRulePart
};
haxe.ui.toolkit.style.StyleParser = function() { };
$hxClasses["haxe.ui.toolkit.style.StyleParser"] = haxe.ui.toolkit.style.StyleParser;
haxe.ui.toolkit.style.StyleParser.__name__ = ["haxe","ui","toolkit","style","StyleParser"];
haxe.ui.toolkit.style.StyleParser.fromString = function(styleString,storeRaw) {
	if(storeRaw == null) storeRaw = false;
	if(styleString == null || styleString.length == 0) return new haxe.ui.toolkit.style.Styles();
	var styles = new haxe.ui.toolkit.style.Styles();
	var n1 = -1;
	var n2 = styleString.indexOf("{",0);
	while(n2 > -1) {
		var n3 = styleString.indexOf("}",n2);
		var styleName = StringTools.trim(HxOverrides.substr(styleString,n1 + 1,n2 - n1 - 1));
		var styleData = HxOverrides.substr(styleString,n2 + 1,n3 - n2 - 1);
		var style = new haxe.ui.toolkit.style.Style();
		var props = styleData.split(";");
		var _g = 0;
		while(_g < props.length) {
			var prop = props[_g];
			++_g;
			prop = StringTools.trim(prop);
			if(prop.length == 0 || StringTools.startsWith(prop,"//")) continue;
			if(storeRaw == true) style.addRawProperty(prop);
			if(prop != null && prop.length > 0) {
				var temp = prop.split(":");
				var propName = StringTools.trim(temp[0]);
				propName = haxe.ui.toolkit.util.StringUtil.capitalizeHyphens(propName);
				if(Reflect.field(style,"set_" + propName) == null) {
					haxe.Log.trace("Warning: " + propName + " not found",{ fileName : "StyleParser.hx", lineNumber : 39, className : "haxe.ui.toolkit.style.StyleParser", methodName : "fromString"});
					continue;
				}
				var propValue = StringTools.trim(temp[1]);
				if(temp.length == 3) propValue += ":" + StringTools.trim(temp[2]);
				propValue = StringTools.replace(propValue,"\"","");
				propValue = StringTools.replace(propValue,"'","");
				if(haxe.ui.toolkit.hscript.ScriptUtils.isScript(propValue) && !haxe.ui.toolkit.hscript.ScriptUtils.isCssException(propName)) {
					style.addDynamicValue(propName,propValue);
					continue;
				}
				if(propName == "width" && propValue.indexOf("%") != -1) {
					propName = "percentWidth";
					propValue = HxOverrides.substr(propValue,0,propValue.length - 1);
				} else if(propName == "height" && propValue.indexOf("%") != -1) {
					propName = "percentHeight";
					propValue = HxOverrides.substr(propValue,0,propValue.length - 1);
				} else if(propName == "filter") {
					style.set_filter(haxe.ui.toolkit.util.FilterParser.parseFilter(propValue));
					continue;
				} else if(propName == "backgroundImageScale9") {
					var coords = propValue.split(",");
					var x1 = Std.parseInt(coords[0]);
					var y1 = Std.parseInt(coords[1]);
					var x2 = Std.parseInt(coords[2]);
					var y2 = Std.parseInt(coords[3]);
					var scale9 = new openfl.geom.Rectangle();
					scale9.set_left(x1);
					scale9.set_top(y1);
					scale9.set_right(x2);
					scale9.set_bottom(y2);
					style.set_backgroundImageScale9(scale9);
					continue;
				} else if(propName == "backgroundImageRect") {
					var arr = propValue.split(",");
					style.set_backgroundImageRect(new openfl.geom.Rectangle(Std.parseInt(arr[0]),Std.parseInt(arr[1]),Std.parseInt(arr[2]),Std.parseInt(arr[3])));
					continue;
				}
				if(propValue.indexOf(",") != -1 || !StringTools.startsWith(propValue,"#") && Std.string(Std.parseFloat(propValue)) == Std.string(Math.NaN)) {
					if(propValue == "true" || propValue == "false") Reflect.setProperty(style,propName,propValue == "true"); else Reflect.setProperty(style,propName,propValue);
				} else {
					if(StringTools.startsWith(propValue,"#")) propValue = "0x" + HxOverrides.substr(propValue,1,propValue.length - 1);
					if(StringTools.startsWith(propValue,"0x")) Reflect.setProperty(style,propName,Std.parseInt(propValue)); else Reflect.setProperty(style,propName,Std.parseFloat(propValue));
				}
			}
		}
		if(styleName.indexOf(",") == -1) styles.addStyle(styleName,style); else {
			var arr1 = styleName.split(",");
			var _g1 = 0;
			while(_g1 < arr1.length) {
				var s = arr1[_g1];
				++_g1;
				s = StringTools.trim(s);
				styles.addStyle(s,style);
			}
		}
		n1 = n3;
		n2 = styleString.indexOf("{",n1);
	}
	return styles;
};
haxe.ui.toolkit.text = {};
haxe.ui.toolkit.text.ITextDisplay = function() { };
$hxClasses["haxe.ui.toolkit.text.ITextDisplay"] = haxe.ui.toolkit.text.ITextDisplay;
haxe.ui.toolkit.text.ITextDisplay.__name__ = ["haxe","ui","toolkit","text","ITextDisplay"];
haxe.ui.toolkit.text.ITextDisplay.prototype = {
	__class__: haxe.ui.toolkit.text.ITextDisplay
};
haxe.ui.toolkit.text.TextDisplay = function() {
	this._autoSize = true;
	this._tf = new openfl.text.TextField();
	this._tf.set_type(openfl.text.TextFieldType.DYNAMIC);
	this._tf.selectable = false;
	this._tf.multiline = false;
	this._tf.mouseEnabled = false;
	this._tf.set_wordWrap(false);
	this._tf.set_autoSize(openfl.text.TextFieldAutoSize.LEFT);
	this._tf.set_text("");
};
$hxClasses["haxe.ui.toolkit.text.TextDisplay"] = haxe.ui.toolkit.text.TextDisplay;
haxe.ui.toolkit.text.TextDisplay.__name__ = ["haxe","ui","toolkit","text","TextDisplay"];
haxe.ui.toolkit.text.TextDisplay.__interfaces__ = [haxe.ui.toolkit.text.ITextDisplay];
haxe.ui.toolkit.text.TextDisplay.prototype = {
	get_text: function() {
		return this._tf.get_text();
	}
	,set_text: function(value) {
		if(value != null) {
			if(this._tf.multiline == false) this._tf.set_text(StringTools.replace(value,"\\n","\n")); else this._tf.set_text(StringTools.replace(value,"\\n","\n"));
		}
		this.set_style(this._style);
		if(this._tf.get_height() - 2 != this._tf.get_textHeight()) this._tf.set_height(this._tf.get_textHeight() - 2);
		return value;
	}
	,get_style: function() {
		return this._style;
	}
	,set_style: function(value) {
		if(value == null) return value;
		this._style = value;
		var format = this._tf.getTextFormat();
		var fontName = this._style.get_fontName();
		if(fontName != null) {
			if(fontName == "_sans") fontName = "Tahoma";
			this._tf.embedFonts = this._style.get_fontEmbedded();
			format.font = fontName;
		}
		if(this._style.get_fontSize() != -1) format.size = this._style.get_fontSize();
		if(this._style.get_color() != -1) format.color = this._style.get_color();
		format.bold = this._style.get_fontBold();
		format.italic = this._style.get_fontItalic();
		format.underline = this._style.get_fontUnderline();
		this._tf.set_defaultTextFormat(format);
		this._tf.setTextFormat(format);
		if(this._style.get_textAlign() != null) this.set_textAlign(this._style.get_textAlign());
		return value;
	}
	,get_display: function() {
		return this._tf;
	}
	,get_interactive: function() {
		return this._tf.type == openfl.text.TextFieldType.INPUT;
	}
	,set_interactive: function(value) {
		if(value == true) {
			this._tf.set_type(openfl.text.TextFieldType.INPUT);
			this._tf.selectable = true;
			this._tf.mouseEnabled = true;
		} else {
			this._tf.set_type(openfl.text.TextFieldType.DYNAMIC);
			this._tf.selectable = false;
			this._tf.mouseEnabled = false;
		}
		return value;
	}
	,get_multiline: function() {
		return this._tf.multiline;
	}
	,set_multiline: function(value) {
		this._tf.multiline = value;
		return value;
	}
	,get_wrapLines: function() {
		return this._tf.get_wordWrap();
	}
	,set_wrapLines: function(value) {
		this._tf.set_wordWrap(value);
		return value;
	}
	,get_displayAsPassword: function() {
		return this._tf.displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		this._tf.displayAsPassword = value;
		return value;
	}
	,get_visible: function() {
		return this._tf.get_visible();
	}
	,set_visible: function(value) {
		this._tf.set_visible(value);
		return value;
	}
	,get_selectable: function() {
		return this._tf.selectable;
	}
	,set_selectable: function(value) {
		this._tf.mouseEnabled = value;
		return this._tf.selectable = value;
	}
	,get_autoSize: function() {
		return this._tf.autoSize != openfl.text.TextFieldAutoSize.NONE;
	}
	,set_autoSize: function(value) {
		if(value == true) this._tf.set_autoSize(openfl.text.TextFieldAutoSize.LEFT); else this._tf.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
		return value;
	}
	,get_textAlign: function() {
		var format = this._tf.getTextFormat();
		var align = "left";
		var _g = format.align;
		switch(_g[1]) {
		case 0:
			align = "left";
			break;
		case 3:
			align = "center";
			break;
		case 1:
			align = "right";
			break;
		default:
			align = "left";
		}
		return align;
	}
	,set_textAlign: function(value) {
		var format = this._tf.getTextFormat();
		switch(value) {
		case "left":
			format.align = openfl.text.TextFormatAlign.LEFT;
			break;
		case "center":
			format.align = openfl.text.TextFormatAlign.CENTER;
			break;
		case "right":
			format.align = openfl.text.TextFormatAlign.RIGHT;
			break;
		default:
			format.align = openfl.text.TextFormatAlign.LEFT;
		}
		this._tf.set_defaultTextFormat(format);
		this._tf.setTextFormat(format);
		return value;
	}
	,get_maxChars: function() {
		return this._tf.maxChars;
	}
	,set_maxChars: function(value) {
		return this._tf.maxChars = value;
	}
	,get_restrictChars: function() {
		return null;
	}
	,set_restrictChars: function(value) {
		return value;
	}
	,__class__: haxe.ui.toolkit.text.TextDisplay
	,__properties__: {set_restrictChars:"set_restrictChars",get_restrictChars:"get_restrictChars",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",set_textAlign:"set_textAlign",get_textAlign:"get_textAlign",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_selectable:"set_selectable",get_selectable:"get_selectable",set_visible:"set_visible",get_visible:"get_visible",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_wrapLines:"set_wrapLines",get_wrapLines:"get_wrapLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_interactive:"set_interactive",get_interactive:"get_interactive",get_display:"get_display",set_style:"set_style",get_style:"get_style",set_text:"set_text",get_text:"get_text"}
};
haxe.ui.toolkit.themes = {};
haxe.ui.toolkit.themes.Theme = function() {
};
$hxClasses["haxe.ui.toolkit.themes.Theme"] = haxe.ui.toolkit.themes.Theme;
haxe.ui.toolkit.themes.Theme.__name__ = ["haxe","ui","toolkit","themes","Theme"];
haxe.ui.toolkit.themes.Theme.addPublicAsset = function(asset) {
	haxe.ui.toolkit.themes.Theme.addAsset("__PUBLIC__",asset);
};
haxe.ui.toolkit.themes.Theme.addAsset = function(t,asset) {
	var list = haxe.ui.toolkit.themes.Theme.assets.get(t);
	if(list == null) {
		list = new Array();
		haxe.ui.toolkit.themes.Theme.assets.set(t,list);
	}
	list.push(asset);
};
haxe.ui.toolkit.themes.Theme.prototype = {
	apply: function() {
		this.applyAssetList(this.name);
		this.applyAssetList("__PUBLIC__");
	}
	,applyAssetList: function(n) {
		var list = haxe.ui.toolkit.themes.Theme.assets.get(n);
		if(list == null) return;
		var _g = 0;
		while(_g < list.length) {
			var asset = list[_g];
			++_g;
			this.applyAsset(asset);
		}
	}
	,applyAsset: function(asset) {
		if(typeof(asset) == "string") {
			if(StringTools.endsWith(asset,".css")) haxe.ui.toolkit.style.StyleManager.get_instance().addStyles(haxe.ui.toolkit.style.StyleParser.fromString(haxe.ui.toolkit.resources.ResourceManager.get_instance().getText(asset)));
		} else if(js.Boot.__instanceof(asset,Class)) {
			var styles = Type.createInstance(asset,[]);
			if(styles != null) haxe.ui.toolkit.style.StyleManager.get_instance().addStyles(styles);
		}
	}
	,__class__: haxe.ui.toolkit.themes.Theme
};
haxe.ui.toolkit.themes.DefaultTheme = function() {
	haxe.ui.toolkit.themes.Theme.call(this);
	this.name = "default";
};
$hxClasses["haxe.ui.toolkit.themes.DefaultTheme"] = haxe.ui.toolkit.themes.DefaultTheme;
haxe.ui.toolkit.themes.DefaultTheme.__name__ = ["haxe","ui","toolkit","themes","DefaultTheme"];
haxe.ui.toolkit.themes.DefaultTheme.__super__ = haxe.ui.toolkit.themes.Theme;
haxe.ui.toolkit.themes.DefaultTheme.prototype = $extend(haxe.ui.toolkit.themes.Theme.prototype,{
	__class__: haxe.ui.toolkit.themes.DefaultTheme
});
haxe.ui.toolkit.themes.GradientTheme = function() {
	haxe.ui.toolkit.themes.Theme.call(this);
	this.name = "gradient";
};
$hxClasses["haxe.ui.toolkit.themes.GradientTheme"] = haxe.ui.toolkit.themes.GradientTheme;
haxe.ui.toolkit.themes.GradientTheme.__name__ = ["haxe","ui","toolkit","themes","GradientTheme"];
haxe.ui.toolkit.themes.GradientTheme.__super__ = haxe.ui.toolkit.themes.Theme;
haxe.ui.toolkit.themes.GradientTheme.prototype = $extend(haxe.ui.toolkit.themes.Theme.prototype,{
	__class__: haxe.ui.toolkit.themes.GradientTheme
});
haxe.ui.toolkit.util = {};
haxe.ui.toolkit.util.ByteConverter = function() { };
$hxClasses["haxe.ui.toolkit.util.ByteConverter"] = haxe.ui.toolkit.util.ByteConverter;
haxe.ui.toolkit.util.ByteConverter.__name__ = ["haxe","ui","toolkit","util","ByteConverter"];
haxe.ui.toolkit.util.ByteConverter.fromHaxeBytes = function(bytes) {
	var ba = new lime.utils.ByteArray();
	var _g1 = 0;
	var _g = bytes.length;
	while(_g1 < _g) {
		var a = _g1++;
		ba.writeByte(bytes.b[a]);
	}
	return ba;
};
haxe.ui.toolkit.util.ByteConverter.toHaxeBytes = function(ba) {
	var bytes = haxe.io.Bytes.alloc(ba.length);
	var _g1 = 0;
	var _g = ba.length;
	while(_g1 < _g) {
		var a = _g1++;
		bytes.set(a,ba.readByte());
	}
	return bytes;
};
haxe.ui.toolkit.util.CallStackHelper = function() { };
$hxClasses["haxe.ui.toolkit.util.CallStackHelper"] = haxe.ui.toolkit.util.CallStackHelper;
haxe.ui.toolkit.util.CallStackHelper.__name__ = ["haxe","ui","toolkit","util","CallStackHelper"];
haxe.ui.toolkit.util.CallStackHelper.traceCallStack = function() {
	var arr = haxe.CallStack.callStack();
	if(arr == null) {
		haxe.Log.trace("Callstack is null!",{ fileName : "CallStackHelper.hx", lineNumber : 9, className : "haxe.ui.toolkit.util.CallStackHelper", methodName : "traceCallStack"});
		return;
	}
	haxe.Log.trace(haxe.CallStack.toString(arr),{ fileName : "CallStackHelper.hx", lineNumber : 12, className : "haxe.ui.toolkit.util.CallStackHelper", methodName : "traceCallStack"});
	haxe.Log.trace(">>>>>>>>>>>>>>>>>>>>>>>>>>>> END >>>>>>>>>>>>>>>>>>>>>>>>>>>>",{ fileName : "CallStackHelper.hx", lineNumber : 13, className : "haxe.ui.toolkit.util.CallStackHelper", methodName : "traceCallStack"});
};
haxe.ui.toolkit.util.FilterParser = function() { };
$hxClasses["haxe.ui.toolkit.util.FilterParser"] = haxe.ui.toolkit.util.FilterParser;
haxe.ui.toolkit.util.FilterParser.__name__ = ["haxe","ui","toolkit","util","FilterParser"];
haxe.ui.toolkit.util.FilterParser.parseFilter = function(filterString) {
	return null;
	var filter = null;
	var filterName = null;
	var filterParams = null;
	var n1 = filterString.indexOf("(");
	var n2 = filterString.indexOf(")");
	if(n1 != -1 && n2 != -1) {
		filterName = HxOverrides.substr(filterString,0,n1);
		filterParams = HxOverrides.substr(filterString,n1 + 1,n2 - n1 - 1);
	} else filterName = filterString;
	if(filterName != null) {
		filterName = StringTools.trim(filterName);
		filter = haxe.ui.toolkit.util.FilterParser.createFilter(filterName,filterParams);
	}
	return filter;
};
haxe.ui.toolkit.util.FilterParser.createFilter = function(filterName,filterParams) {
	var filter = null;
	var params = null;
	if(filterParams != null) params = filterParams.split(",");
	params = haxe.ui.toolkit.util.FilterParser.copyFilterDefaults(filterName,params);
	if(filterName == "blur") filter = haxe.ui.toolkit.util.FilterParser.createBlurFilter(params); else if(filterName == "dropShadow") filter = haxe.ui.toolkit.util.FilterParser.createDropShadowFilter(params); else if(filterName == "glow") filter = haxe.ui.toolkit.util.FilterParser.createGlowFilter(params);
	return filter;
};
haxe.ui.toolkit.util.FilterParser.createBlurFilter = function(params) {
	var filter = new openfl.filters.BlurFilter(haxe.ui.toolkit.util.TypeParser.parseFloat(params[0]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[1]),haxe.ui.toolkit.util.TypeParser.parseInt(params[2]));
	return filter;
};
haxe.ui.toolkit.util.FilterParser.createDropShadowFilter = function(params) {
	var filter = new openfl.filters.DropShadowFilter(haxe.ui.toolkit.util.TypeParser.parseFloat(params[0]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[1]),haxe.ui.toolkit.util.TypeParser.parseInt(params[2]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[3]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[4]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[5]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[6]),haxe.ui.toolkit.util.TypeParser.parseInt(params[7]),haxe.ui.toolkit.util.TypeParser.parseBool(params[8]),haxe.ui.toolkit.util.TypeParser.parseBool(params[9]),haxe.ui.toolkit.util.TypeParser.parseBool(params[10]));
	return filter;
};
haxe.ui.toolkit.util.FilterParser.createGlowFilter = function(params) {
	var filter = new openfl.filters.GlowFilter(haxe.ui.toolkit.util.TypeParser.parseInt(params[0]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[1]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[2]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[3]),haxe.ui.toolkit.util.TypeParser.parseFloat(params[4]),haxe.ui.toolkit.util.TypeParser.parseInt(params[5]),haxe.ui.toolkit.util.TypeParser.parseBool(params[6]),haxe.ui.toolkit.util.TypeParser.parseBool(params[7]));
	return filter;
};
haxe.ui.toolkit.util.FilterParser.copyFilterDefaults = function(filterName,params) {
	var copy = new Array();
	var defaultParams = Reflect.field(haxe.ui.toolkit.util.FilterParser.filterParamDefaults,filterName);
	if(defaultParams != null) {
		var _g = 0;
		while(_g < defaultParams.length) {
			var p = defaultParams[_g];
			++_g;
			copy.push(p);
		}
	}
	if(params != null) {
		var n = 0;
		var _g1 = 0;
		while(_g1 < params.length) {
			var p1 = params[_g1];
			++_g1;
			copy[n] = p1;
			n++;
		}
	}
	return copy;
};
haxe.ui.toolkit.util.FilterParser.changeFilterQuality = function(filter,quality) {
	if(filter == null) return null;
	if(js.Boot.__instanceof(filter,openfl.filters.BlurFilter)) (js.Boot.__cast(filter , openfl.filters.BlurFilter)).quality = quality; else if(js.Boot.__instanceof(filter,openfl.filters.DropShadowFilter)) (js.Boot.__cast(filter , openfl.filters.DropShadowFilter)).quality = quality; else if(js.Boot.__instanceof(filter,openfl.filters.GlowFilter)) (js.Boot.__cast(filter , openfl.filters.GlowFilter)).quality = quality;
	return filter;
};
haxe.ui.toolkit.util.Identifier = function() { };
$hxClasses["haxe.ui.toolkit.util.Identifier"] = haxe.ui.toolkit.util.Identifier;
haxe.ui.toolkit.util.Identifier.__name__ = ["haxe","ui","toolkit","util","Identifier"];
haxe.ui.toolkit.util.Identifier.createObjectId = function(instance) {
	return haxe.ui.toolkit.util.Identifier.createClassId(Type.getClass(instance));
};
haxe.ui.toolkit.util.Identifier.createClassId = function(type) {
	var className = Type.getClassName(type);
	var c = haxe.ui.toolkit.util.Identifier._objectCount.get(className);
	if(haxe.ui.toolkit.util.Identifier._objectCount.exists(className) == false) {
		haxe.ui.toolkit.util.Identifier._objectCount.set(className,-1);
		c = -1;
	}
	c++;
	haxe.ui.toolkit.util.Identifier._objectCount.set(className,c);
	var id = className + c;
	return id;
};
haxe.ui.toolkit.util.Identifier.guid = function() {
	return haxe.ui.toolkit.util.Identifier.S4() + haxe.ui.toolkit.util.Identifier.S4() + "-" + haxe.ui.toolkit.util.Identifier.S4() + "-" + haxe.ui.toolkit.util.Identifier.S4() + "-" + haxe.ui.toolkit.util.Identifier.S4() + "-" + haxe.ui.toolkit.util.Identifier.S4() + haxe.ui.toolkit.util.Identifier.S4() + haxe.ui.toolkit.util.Identifier.S4();
};
haxe.ui.toolkit.util.Identifier.S4 = function() {
	var n = (1 + Std.random(65536)) * 65536 | 0;
	var _this = StringTools.hex(n,4);
	return HxOverrides.substr(_this,0,4);
};
haxe.ui.toolkit.util.StringUtil = function() { };
$hxClasses["haxe.ui.toolkit.util.StringUtil"] = haxe.ui.toolkit.util.StringUtil;
haxe.ui.toolkit.util.StringUtil.__name__ = ["haxe","ui","toolkit","util","StringUtil"];
haxe.ui.toolkit.util.StringUtil.capitalizeFirstLetter = function(s) {
	s = HxOverrides.substr(s,0,1).toUpperCase() + HxOverrides.substr(s,1,s.length);
	return s;
};
haxe.ui.toolkit.util.StringUtil.capitalizeHyphens = function(s) {
	var r = s;
	var n = r.indexOf("-");
	while(n != -1) {
		var before = HxOverrides.substr(r,0,n);
		var after = HxOverrides.substr(r,n + 1,r.length);
		r = before + haxe.ui.toolkit.util.StringUtil.capitalizeFirstLetter(after);
		n = r.indexOf("-",n + 1);
	}
	return r;
};
haxe.ui.toolkit.util.TypeParser = function() { };
$hxClasses["haxe.ui.toolkit.util.TypeParser"] = haxe.ui.toolkit.util.TypeParser;
haxe.ui.toolkit.util.TypeParser.__name__ = ["haxe","ui","toolkit","util","TypeParser"];
haxe.ui.toolkit.util.TypeParser.parseInt = function(s) {
	var i = 0;
	if(s != null) {
		s = StringTools.trim(s);
		i = Std.parseInt(s);
	}
	return i;
};
haxe.ui.toolkit.util.TypeParser.parseFloat = function(s) {
	var f = 0;
	if(s != null) {
		s = StringTools.trim(s);
		f = Std.parseFloat(s);
	}
	return f;
};
haxe.ui.toolkit.util.TypeParser.parseBool = function(s) {
	var b = false;
	if(s != null) {
		s = StringTools.trim(s);
		s = s.toLowerCase();
		if(s == "true" || s == "yes" || s == "1") b = true;
	}
	return b;
};
haxe.ui.toolkit.util.TypeParser.parseColor = function(s) {
	var c = 0;
	if(s != null) {
		s = StringTools.trim(s);
		if(StringTools.startsWith(s,"#")) s = "0x" + HxOverrides.substr(s,1,s.length - 1);
		c = Std.parseInt(s);
	}
	return c;
};
haxe.ui.toolkit.util.XmlUtil = function() { };
$hxClasses["haxe.ui.toolkit.util.XmlUtil"] = haxe.ui.toolkit.util.XmlUtil;
haxe.ui.toolkit.util.XmlUtil.__name__ = ["haxe","ui","toolkit","util","XmlUtil"];
haxe.ui.toolkit.util.XmlUtil.getPathValues = function(xml,path) {
	var values = new Array();
	var parts = path.split("/");
	var _g = 0;
	while(_g < parts.length) {
		var p = parts[_g];
		++_g;
		if(p.length == 0) HxOverrides.remove(parts,p);
	}
	var matchToFind = parts[0];
	HxOverrides.remove(parts,matchToFind);
	if(xml.get_nodeName() == matchToFind) {
		if(parts.length > 1) {
			var $it0 = xml.elements();
			while( $it0.hasNext() ) {
				var child = $it0.next();
				values = values.concat(haxe.ui.toolkit.util.XmlUtil.getPathValues(child,parts.join("/")));
			}
		} else {
			matchToFind = parts.pop();
			if(StringTools.startsWith(matchToFind,"@")) {
				var attrName = HxOverrides.substr(matchToFind,1,matchToFind.length);
				var attrValue = xml.get(attrName);
				if(attrValue != null) values.push(attrValue);
			} else if(matchToFind == "text()") {
				var nodeValue = xml.firstChild().get_nodeValue();
				if(nodeValue != null) values.push(nodeValue);
			}
		}
	}
	return values;
};
haxe.xml = {};
haxe.xml.Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe.xml.Parser;
haxe.xml.Parser.__name__ = ["haxe","xml","Parser"];
haxe.xml.Parser.parse = function(str) {
	var doc = Xml.createDocument();
	haxe.xml.Parser.doParse(str,0,doc);
	return doc;
};
haxe.xml.Parser.doParse = function(str,p,parent) {
	if(p == null) p = 0;
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	while(!(c != c)) {
		switch(state) {
		case 0:
			switch(c) {
			case 10:case 13:case 9:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			switch(c) {
			case 60:
				state = 0;
				next = 2;
				break;
			default:
				start = p;
				state = 13;
				continue;
			}
			break;
		case 13:
			if(c == 60) {
				var child = Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start));
				buf = new StringBuf();
				parent.addChild(child);
				nsubs++;
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf.addSub(str,start,p - start);
				state = 18;
				next = 13;
				start = p + 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				nsubs++;
				p += 2;
				state = 1;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") throw "Expected <![CDATA[";
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") throw "Expected <!DOCTYPE";
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw "Expected <!--"; else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 63:
				state = 14;
				start = p;
				break;
			case 47:
				if(parent == null) throw "Expected node name";
				start = p + 1;
				state = 0;
				next = 10;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) throw "Expected node name";
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				nsubs++;
				break;
			case 62:
				state = 9;
				nsubs++;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) throw "Expected attribute name";
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) throw "Duplicate attribute";
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			switch(c) {
			case 61:
				state = 0;
				next = 7;
				break;
			default:
				throw "Expected =";
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				state = 8;
				start = p;
				break;
			default:
				throw "Expected \"";
			}
			break;
		case 8:
			if(c == str.charCodeAt(start)) {
				var val = HxOverrides.substr(str,start + 1,p - start - 1);
				xml.set(aname,val);
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = haxe.xml.Parser.doParse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 11:
			switch(c) {
			case 62:
				state = 1;
				break;
			default:
				throw "Expected >";
			}
			break;
		case 12:
			switch(c) {
			case 62:
				if(nsubs == 0) parent.addChild(Xml.createPCData(""));
				return p;
			default:
				throw "Expected >";
			}
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) throw "Expected node name";
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.get_nodeName()) throw "Expected </" + parent.get_nodeName() + ">";
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) nbrackets++; else if(c == 93) nbrackets--; else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				state = 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				p++;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var i;
					if(s.charCodeAt(1) == 120) i = Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)); else i = Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.add(String.fromCharCode(i));
				} else if(!haxe.xml.Parser.escapes.exists(s)) buf.b += Std.string("&" + s + ";"); else buf.add(haxe.xml.Parser.escapes.get(s));
				start = p + 1;
				state = next;
			}
			break;
		}
		c = StringTools.fastCodeAt(str,++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) parent.addChild(Xml.createPCData(buf.b + HxOverrides.substr(str,start,p - start)));
		return p;
	}
	throw "Unexpected end";
};
hscript.Const = $hxClasses["hscript.Const"] = { __ename__ : true, __constructs__ : ["CInt","CFloat","CString"] };
hscript.Const.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = hscript.Const; $x.toString = $estr; return $x; };
hscript.Const.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = hscript.Const; $x.toString = $estr; return $x; };
hscript.Const.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = hscript.Const; $x.toString = $estr; return $x; };
hscript.Expr = $hxClasses["hscript.Expr"] = { __ename__ : true, __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch"] };
hscript.Expr.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EIdent = function(v) { var $x = ["EIdent",1,v]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EVar = function(n,t,e) { var $x = ["EVar",2,n,t,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EParent = function(e) { var $x = ["EParent",3,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EBlock = function(e) { var $x = ["EBlock",4,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EField = function(e,f) { var $x = ["EField",5,e,f]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EBinop = function(op,e1,e2) { var $x = ["EBinop",6,op,e1,e2]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EUnop = function(op,prefix,e) { var $x = ["EUnop",7,op,prefix,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ECall = function(e,params) { var $x = ["ECall",8,e,params]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EIf = function(cond,e1,e2) { var $x = ["EIf",9,cond,e1,e2]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EWhile = function(cond,e) { var $x = ["EWhile",10,cond,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EFor = function(v,it,e) { var $x = ["EFor",11,v,it,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EBreak = ["EBreak",12];
hscript.Expr.EBreak.toString = $estr;
hscript.Expr.EBreak.__enum__ = hscript.Expr;
hscript.Expr.EContinue = ["EContinue",13];
hscript.Expr.EContinue.toString = $estr;
hscript.Expr.EContinue.__enum__ = hscript.Expr;
hscript.Expr.EFunction = function(args,e,name,ret) { var $x = ["EFunction",14,args,e,name,ret]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EReturn = function(e) { var $x = ["EReturn",15,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EArray = function(e,index) { var $x = ["EArray",16,e,index]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EArrayDecl = function(e) { var $x = ["EArrayDecl",17,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ENew = function(cl,params) { var $x = ["ENew",18,cl,params]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EThrow = function(e) { var $x = ["EThrow",19,e]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ETry = function(e,v,t,ecatch) { var $x = ["ETry",20,e,v,t,ecatch]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.EObject = function(fl) { var $x = ["EObject",21,fl]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ETernary = function(cond,e1,e2) { var $x = ["ETernary",22,cond,e1,e2]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.Expr.ESwitch = function(e,cases,defaultExpr) { var $x = ["ESwitch",23,e,cases,defaultExpr]; $x.__enum__ = hscript.Expr; $x.toString = $estr; return $x; };
hscript.CType = $hxClasses["hscript.CType"] = { __ename__ : true, __constructs__ : ["CTPath","CTFun","CTAnon","CTParent"] };
hscript.CType.CTPath = function(path,params) { var $x = ["CTPath",0,path,params]; $x.__enum__ = hscript.CType; $x.toString = $estr; return $x; };
hscript.CType.CTFun = function(args,ret) { var $x = ["CTFun",1,args,ret]; $x.__enum__ = hscript.CType; $x.toString = $estr; return $x; };
hscript.CType.CTAnon = function(fields) { var $x = ["CTAnon",2,fields]; $x.__enum__ = hscript.CType; $x.toString = $estr; return $x; };
hscript.CType.CTParent = function(t) { var $x = ["CTParent",3,t]; $x.__enum__ = hscript.CType; $x.toString = $estr; return $x; };
hscript.Error = $hxClasses["hscript.Error"] = { __ename__ : true, __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess"] };
hscript.Error.EInvalidChar = function(c) { var $x = ["EInvalidChar",0,c]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EUnexpected = function(s) { var $x = ["EUnexpected",1,s]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EUnterminatedString = ["EUnterminatedString",2];
hscript.Error.EUnterminatedString.toString = $estr;
hscript.Error.EUnterminatedString.__enum__ = hscript.Error;
hscript.Error.EUnterminatedComment = ["EUnterminatedComment",3];
hscript.Error.EUnterminatedComment.toString = $estr;
hscript.Error.EUnterminatedComment.__enum__ = hscript.Error;
hscript.Error.EUnknownVariable = function(v) { var $x = ["EUnknownVariable",4,v]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EInvalidIterator = function(v) { var $x = ["EInvalidIterator",5,v]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EInvalidOp = function(op) { var $x = ["EInvalidOp",6,op]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript.Error.EInvalidAccess = function(f) { var $x = ["EInvalidAccess",7,f]; $x.__enum__ = hscript.Error; $x.toString = $estr; return $x; };
hscript._Interp = {};
hscript._Interp.Stop = $hxClasses["hscript._Interp.Stop"] = { __ename__ : true, __constructs__ : ["SBreak","SContinue","SReturn"] };
hscript._Interp.Stop.SBreak = ["SBreak",0];
hscript._Interp.Stop.SBreak.toString = $estr;
hscript._Interp.Stop.SBreak.__enum__ = hscript._Interp.Stop;
hscript._Interp.Stop.SContinue = ["SContinue",1];
hscript._Interp.Stop.SContinue.toString = $estr;
hscript._Interp.Stop.SContinue.__enum__ = hscript._Interp.Stop;
hscript._Interp.Stop.SReturn = function(v) { var $x = ["SReturn",2,v]; $x.__enum__ = hscript._Interp.Stop; $x.toString = $estr; return $x; };
hscript.Token = $hxClasses["hscript.Token"] = { __ename__ : true, __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot"] };
hscript.Token.TEof = ["TEof",0];
hscript.Token.TEof.toString = $estr;
hscript.Token.TEof.__enum__ = hscript.Token;
hscript.Token.TConst = function(c) { var $x = ["TConst",1,c]; $x.__enum__ = hscript.Token; $x.toString = $estr; return $x; };
hscript.Token.TId = function(s) { var $x = ["TId",2,s]; $x.__enum__ = hscript.Token; $x.toString = $estr; return $x; };
hscript.Token.TOp = function(s) { var $x = ["TOp",3,s]; $x.__enum__ = hscript.Token; $x.toString = $estr; return $x; };
hscript.Token.TPOpen = ["TPOpen",4];
hscript.Token.TPOpen.toString = $estr;
hscript.Token.TPOpen.__enum__ = hscript.Token;
hscript.Token.TPClose = ["TPClose",5];
hscript.Token.TPClose.toString = $estr;
hscript.Token.TPClose.__enum__ = hscript.Token;
hscript.Token.TBrOpen = ["TBrOpen",6];
hscript.Token.TBrOpen.toString = $estr;
hscript.Token.TBrOpen.__enum__ = hscript.Token;
hscript.Token.TBrClose = ["TBrClose",7];
hscript.Token.TBrClose.toString = $estr;
hscript.Token.TBrClose.__enum__ = hscript.Token;
hscript.Token.TDot = ["TDot",8];
hscript.Token.TDot.toString = $estr;
hscript.Token.TDot.__enum__ = hscript.Token;
hscript.Token.TComma = ["TComma",9];
hscript.Token.TComma.toString = $estr;
hscript.Token.TComma.__enum__ = hscript.Token;
hscript.Token.TSemicolon = ["TSemicolon",10];
hscript.Token.TSemicolon.toString = $estr;
hscript.Token.TSemicolon.__enum__ = hscript.Token;
hscript.Token.TBkOpen = ["TBkOpen",11];
hscript.Token.TBkOpen.toString = $estr;
hscript.Token.TBkOpen.__enum__ = hscript.Token;
hscript.Token.TBkClose = ["TBkClose",12];
hscript.Token.TBkClose.toString = $estr;
hscript.Token.TBkClose.__enum__ = hscript.Token;
hscript.Token.TQuestion = ["TQuestion",13];
hscript.Token.TQuestion.toString = $estr;
hscript.Token.TQuestion.__enum__ = hscript.Token;
hscript.Token.TDoubleDot = ["TDoubleDot",14];
hscript.Token.TDoubleDot.toString = $estr;
hscript.Token.TDoubleDot.__enum__ = hscript.Token;
hscript.Parser = function() {
	this.uid = 0;
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^="]];
	this.opPriority = new haxe.ds.StringMap();
	this.opRightAssoc = new haxe.ds.StringMap();
	this.unops = new haxe.ds.StringMap();
	var _g1 = 0;
	var _g = priorities.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			this.opPriority.set(x,i);
			if(i == 9) this.opRightAssoc.set(x,true);
		}
	}
	var _g4 = 0;
	var _g11 = ["!","++","--","-","~"];
	while(_g4 < _g11.length) {
		var x1 = _g11[_g4];
		++_g4;
		this.unops.set(x1,x1 == "++" || x1 == "--");
	}
};
$hxClasses["hscript.Parser"] = hscript.Parser;
hscript.Parser.__name__ = ["hscript","Parser"];
hscript.Parser.prototype = {
	error: function(err,pmin,pmax) {
		throw err;
	}
	,invalidChar: function(c) {
		this.error(hscript.Error.EInvalidChar(c),0,0);
	}
	,parseString: function(s) {
		this.line = 1;
		this.uid = 0;
		return this.parse(new haxe.io.StringInput(s));
	}
	,parse: function(s) {
		this.tokens = new haxe.ds.GenericStack();
		this["char"] = -1;
		this.input = s;
		this.ops = new Array();
		this.idents = new Array();
		var _g1 = 0;
		var _g = this.opChars.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g11 = 0;
		var _g2 = this.identChars.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.idents[HxOverrides.cca(this.identChars,i1)] = true;
		}
		var a = new Array();
		while(true) {
			var tk = this.token();
			if(tk == hscript.Token.TEof) break;
			this.tokens.add(tk);
			a.push(this.parseFullExpr());
		}
		if(a.length == 1) return a[0]; else return this.mk(hscript.Expr.EBlock(a),0,null);
	}
	,unexpected: function(tk) {
		this.error(hscript.Error.EUnexpected(this.tokenString(tk)),0,0);
		return null;
	}
	,push: function(tk) {
		this.tokens.add(tk);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) this.unexpected(t);
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		switch(e[1]) {
		case 4:case 21:case 23:
			return true;
		case 14:
			var e1 = e[3];
			return this.isBlock(e1);
		case 2:
			var e2 = e[4];
			return e2 != null && this.isBlock(e2);
		case 9:
			var e21 = e[4];
			var e11 = e[3];
			if(e21 != null) return this.isBlock(e21); else return this.isBlock(e11);
			break;
		case 6:
			var e3 = e[4];
			return this.isBlock(e3);
		case 7:
			var e4 = e[4];
			var prefix = e[3];
			return !prefix && this.isBlock(e4);
		case 10:
			var e5 = e[3];
			return this.isBlock(e5);
		case 11:
			var e6 = e[4];
			return this.isBlock(e6);
		case 15:
			var e7 = e[2];
			return e7 != null && this.isBlock(e7);
		default:
			return false;
		}
	}
	,parseFullExpr: function() {
		var e = this.parseExpr();
		var tk = this.token();
		if(tk != hscript.Token.TSemicolon && tk != hscript.Token.TEof) {
			if(this.isBlock(e)) this.tokens.add(tk); else this.unexpected(tk);
		}
		return e;
	}
	,parseObject: function(p1) {
		var fl = new Array();
		try {
			while(true) {
				var tk = this.token();
				var id = null;
				switch(tk[1]) {
				case 2:
					var i = tk[2];
					id = i;
					break;
				case 1:
					var c = tk[2];
					if(!this.allowJSON) this.unexpected(tk);
					switch(c[1]) {
					case 2:
						var s = c[2];
						id = s;
						break;
					default:
						this.unexpected(tk);
					}
					break;
				case 7:
					throw "__break__";
					break;
				default:
					this.unexpected(tk);
				}
				this.ensure(hscript.Token.TDoubleDot);
				fl.push({ name : id, e : this.parseExpr()});
				tk = this.token();
				switch(tk[1]) {
				case 7:
					throw "__break__";
					break;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return this.parseExprNext(this.mk(hscript.Expr.EObject(fl),p1,null));
	}
	,parseExpr: function() {
		var tk = this.token();
		switch(tk[1]) {
		case 2:
			var id = tk[2];
			var e = this.parseStructure(id);
			if(e == null) e = this.mk(hscript.Expr.EIdent(id),null,null);
			return this.parseExprNext(e);
		case 1:
			var c = tk[2];
			return this.parseExprNext(this.mk(hscript.Expr.EConst(c),null,null));
		case 4:
			var e1 = this.parseExpr();
			this.ensure(hscript.Token.TPClose);
			return this.parseExprNext(this.mk(hscript.Expr.EParent(e1),0,0));
		case 6:
			tk = this.token();
			switch(tk[1]) {
			case 7:
				return this.parseExprNext(this.mk(hscript.Expr.EObject([]),0,null));
			case 2:
				var tk2 = this.token();
				this.tokens.add(tk2);
				this.tokens.add(tk);
				switch(tk2[1]) {
				case 14:
					return this.parseExprNext(this.parseObject(0));
				default:
				}
				break;
			case 1:
				var c1 = tk[2];
				if(this.allowJSON) switch(c1[1]) {
				case 2:
					var tk21 = this.token();
					this.tokens.add(tk21);
					this.tokens.add(tk);
					switch(tk21[1]) {
					case 14:
						return this.parseExprNext(this.parseObject(0));
					default:
					}
					break;
				default:
					this.tokens.add(tk);
				} else this.tokens.add(tk);
				break;
			default:
				this.tokens.add(tk);
			}
			var a = new Array();
			while(true) {
				a.push(this.parseFullExpr());
				tk = this.token();
				if(tk == hscript.Token.TBrClose) break;
				this.tokens.add(tk);
			}
			return this.mk(hscript.Expr.EBlock(a),0,null);
		case 3:
			var op = tk[2];
			if(this.unops.exists(op)) return this.makeUnop(op,this.parseExpr());
			return this.unexpected(tk);
		case 11:
			var a1 = new Array();
			tk = this.token();
			while(tk != hscript.Token.TBkClose) {
				this.tokens.add(tk);
				a1.push(this.parseExpr());
				tk = this.token();
				if(tk == hscript.Token.TComma) tk = this.token();
			}
			if(a1.length == 1) {
				var _g = a1[0];
				switch(_g[1]) {
				case 11:case 10:
					var tmp = "__a_" + this.uid++;
					var e2 = this.mk(hscript.Expr.EBlock([this.mk(hscript.Expr.EVar(tmp,null,this.mk(hscript.Expr.EArrayDecl([]),0,null)),0,null),this.mapCompr(tmp,a1[0]),this.mk(hscript.Expr.EIdent(tmp),0,null)]),0,null);
					return this.parseExprNext(e2);
				default:
				}
			}
			return this.parseExprNext(this.mk(hscript.Expr.EArrayDecl(a1),0,null));
		default:
			return this.unexpected(tk);
		}
	}
	,mapCompr: function(tmp,e) {
		var edef;
		switch(e[1]) {
		case 11:
			var e2 = e[4];
			var it = e[3];
			var v = e[2];
			edef = hscript.Expr.EFor(v,it,this.mapCompr(tmp,e2));
			break;
		case 10:
			var e21 = e[3];
			var cond = e[2];
			edef = hscript.Expr.EWhile(cond,this.mapCompr(tmp,e21));
			break;
		case 9:
			var e22 = e[4];
			var e1 = e[3];
			var cond1 = e[2];
			if(e22 == null) edef = hscript.Expr.EIf(cond1,this.mapCompr(tmp,e1),null); else edef = hscript.Expr.ECall(this.mk(hscript.Expr.EField(this.mk(hscript.Expr.EIdent(tmp),0,0),"push"),0,0),[e]);
			break;
		case 4:
			switch(e[2].length) {
			case 1:
				var e3 = e[2][0];
				edef = hscript.Expr.EBlock([this.mapCompr(tmp,e3)]);
				break;
			default:
				edef = hscript.Expr.ECall(this.mk(hscript.Expr.EField(this.mk(hscript.Expr.EIdent(tmp),0,0),"push"),0,0),[e]);
			}
			break;
		case 3:
			var e23 = e[2];
			edef = hscript.Expr.EParent(this.mapCompr(tmp,e23));
			break;
		default:
			edef = hscript.Expr.ECall(this.mk(hscript.Expr.EField(this.mk(hscript.Expr.EIdent(tmp),0,0),"push"),0,0),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		switch(e[1]) {
		case 6:
			var e2 = e[4];
			var e1 = e[3];
			var bop = e[2];
			return this.mk(hscript.Expr.EBinop(bop,this.makeUnop(op,e1),e2),0,0);
		case 22:
			var e3 = e[4];
			var e21 = e[3];
			var e11 = e[2];
			return this.mk(hscript.Expr.ETernary(this.makeUnop(op,e11),e21,e3),0,0);
		default:
			return this.mk(hscript.Expr.EUnop(op,true,e),0,0);
		}
	}
	,makeBinop: function(op,e1,e) {
		switch(e[1]) {
		case 6:
			var e3 = e[4];
			var e2 = e[3];
			var op2 = e[2];
			if(this.opPriority.get(op) <= this.opPriority.get(op2) && !this.opRightAssoc.exists(op)) return this.mk(hscript.Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3),0,0); else return this.mk(hscript.Expr.EBinop(op,e1,e),0,0);
			break;
		case 22:
			var e4 = e[4];
			var e31 = e[3];
			var e21 = e[2];
			if(this.opRightAssoc.exists(op)) return this.mk(hscript.Expr.EBinop(op,e1,e),0,0); else return this.mk(hscript.Expr.ETernary(this.makeBinop(op,e1,e21),e31,e4),0,0);
			break;
		default:
			return this.mk(hscript.Expr.EBinop(op,e1,e),0,0);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "if":
			var cond = this.parseExpr();
			var e1 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk = this.token();
			if(tk == hscript.Token.TSemicolon) {
				semic = true;
				tk = this.token();
			}
			if(Type.enumEq(tk,hscript.Token.TId("else"))) e2 = this.parseExpr(); else {
				this.tokens.add(tk);
				if(semic) this.tokens.add(hscript.Token.TSemicolon);
			}
			return this.mk(hscript.Expr.EIf(cond,e1,e2),0,e2 == null?0:0);
		case "var":
			var tk1 = this.token();
			var ident = null;
			switch(tk1[1]) {
			case 2:
				var id1 = tk1[2];
				ident = id1;
				break;
			default:
				this.unexpected(tk1);
			}
			tk1 = this.token();
			var t = null;
			if(tk1 == hscript.Token.TDoubleDot && this.allowTypes) {
				t = this.parseType();
				tk1 = this.token();
			}
			var e = null;
			if(Type.enumEq(tk1,hscript.Token.TOp("="))) e = this.parseExpr(); else this.tokens.add(tk1);
			return this.mk(hscript.Expr.EVar(ident,t,e),0,e == null?0:0);
		case "while":
			var econd = this.parseExpr();
			var e3 = this.parseExpr();
			return this.mk(hscript.Expr.EWhile(econd,e3),0,0);
		case "for":
			this.ensure(hscript.Token.TPOpen);
			var tk2 = this.token();
			var vname = null;
			switch(tk2[1]) {
			case 2:
				var id2 = tk2[2];
				vname = id2;
				break;
			default:
				this.unexpected(tk2);
			}
			tk2 = this.token();
			if(!Type.enumEq(tk2,hscript.Token.TId("in"))) this.unexpected(tk2);
			var eiter = this.parseExpr();
			this.ensure(hscript.Token.TPClose);
			var e4 = this.parseExpr();
			return this.mk(hscript.Expr.EFor(vname,eiter,e4),0,0);
		case "break":
			return hscript.Expr.EBreak;
		case "continue":
			return hscript.Expr.EContinue;
		case "else":
			return this.unexpected(hscript.Token.TId(id));
		case "function":
			var tk3 = this.token();
			var name = null;
			switch(tk3[1]) {
			case 2:
				var id3 = tk3[2];
				name = id3;
				break;
			default:
				this.tokens.add(tk3);
			}
			this.ensure(hscript.Token.TPOpen);
			var args = new Array();
			tk3 = this.token();
			if(tk3 != hscript.Token.TPClose) {
				var done = false;
				while(!done) {
					var name1 = null;
					var opt = false;
					switch(tk3[1]) {
					case 13:
						opt = true;
						tk3 = this.token();
						break;
					default:
					}
					switch(tk3[1]) {
					case 2:
						var id4 = tk3[2];
						name1 = id4;
						break;
					default:
						this.unexpected(tk3);
					}
					tk3 = this.token();
					var arg = { name : name1};
					args.push(arg);
					if(opt) arg.opt = true;
					if(tk3 == hscript.Token.TDoubleDot && this.allowTypes) {
						arg.t = this.parseType();
						tk3 = this.token();
					}
					switch(tk3[1]) {
					case 9:
						tk3 = this.token();
						break;
					case 5:
						done = true;
						break;
					default:
						this.unexpected(tk3);
					}
				}
			}
			var ret = null;
			if(this.allowTypes) {
				tk3 = this.token();
				if(tk3 != hscript.Token.TDoubleDot) this.tokens.add(tk3); else ret = this.parseType();
			}
			var body = this.parseExpr();
			return this.mk(hscript.Expr.EFunction(args,body,name,ret),0,0);
		case "return":
			var tk4 = this.token();
			this.tokens.add(tk4);
			var e5;
			if(tk4 == hscript.Token.TSemicolon) e5 = null; else e5 = this.parseExpr();
			return this.mk(hscript.Expr.EReturn(e5),0,e5 == null?0:0);
		case "new":
			var a = new Array();
			var tk5 = this.token();
			switch(tk5[1]) {
			case 2:
				var id5 = tk5[2];
				a.push(id5);
				break;
			default:
				this.unexpected(tk5);
			}
			var next = true;
			while(next) {
				tk5 = this.token();
				switch(tk5[1]) {
				case 8:
					tk5 = this.token();
					switch(tk5[1]) {
					case 2:
						var id6 = tk5[2];
						a.push(id6);
						break;
					default:
						this.unexpected(tk5);
					}
					break;
				case 4:
					next = false;
					break;
				default:
					this.unexpected(tk5);
				}
			}
			var args1 = this.parseExprList(hscript.Token.TPClose);
			return this.mk(hscript.Expr.ENew(a.join("."),args1),0,null);
		case "throw":
			var e6 = this.parseExpr();
			return this.mk(hscript.Expr.EThrow(e6),0,0);
		case "try":
			var e7 = this.parseExpr();
			var tk6 = this.token();
			if(!Type.enumEq(tk6,hscript.Token.TId("catch"))) this.unexpected(tk6);
			this.ensure(hscript.Token.TPOpen);
			tk6 = this.token();
			var vname1;
			switch(tk6[1]) {
			case 2:
				var id7 = tk6[2];
				vname1 = id7;
				break;
			default:
				vname1 = this.unexpected(tk6);
			}
			this.ensure(hscript.Token.TDoubleDot);
			var t1 = null;
			if(this.allowTypes) t1 = this.parseType(); else {
				tk6 = this.token();
				if(!Type.enumEq(tk6,hscript.Token.TId("Dynamic"))) this.unexpected(tk6);
			}
			this.ensure(hscript.Token.TPClose);
			var ec = this.parseExpr();
			return this.mk(hscript.Expr.ETry(e7,vname1,t1,ec),0,0);
		case "switch":
			var e8 = this.parseExpr();
			var def = null;
			var cases = [];
			this.ensure(hscript.Token.TBrOpen);
			try {
				while(true) {
					var tk7 = this.token();
					switch(tk7[1]) {
					case 2:
						switch(tk7[2]) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							try {
								while(true) {
									var e9 = this.parseExpr();
									c.values.push(e9);
									tk7 = this.token();
									switch(tk7[1]) {
									case 9:
										break;
									case 14:
										throw "__break__";
										break;
									default:
										this.unexpected(tk7);
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							var exprs = [];
							try {
								while(true) {
									tk7 = this.token();
									this.tokens.add(tk7);
									switch(tk7[1]) {
									case 2:
										switch(tk7[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											exprs.push(this.parseFullExpr());
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										exprs.push(this.parseFullExpr());
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							if(exprs.length == 1) c.expr = exprs[0]; else if(exprs.length == 0) c.expr = this.mk(hscript.Expr.EBlock([]),0,0); else c.expr = this.mk(hscript.Expr.EBlock(exprs),0,0);
							break;
						case "default":
							if(def != null) this.unexpected(tk7);
							this.ensure(hscript.Token.TDoubleDot);
							var exprs1 = [];
							try {
								while(true) {
									tk7 = this.token();
									this.tokens.add(tk7);
									switch(tk7[1]) {
									case 2:
										switch(tk7[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											exprs1.push(this.parseFullExpr());
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										exprs1.push(this.parseFullExpr());
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							if(exprs1.length == 1) def = exprs1[0]; else if(exprs1.length == 0) def = this.mk(hscript.Expr.EBlock([]),0,0); else def = this.mk(hscript.Expr.EBlock(exprs1),0,0);
							break;
						default:
							this.unexpected(tk7);
						}
						break;
					case 7:
						throw "__break__";
						break;
					default:
						this.unexpected(tk7);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return this.mk(hscript.Expr.ESwitch(e8,cases,def),0,0);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		switch(tk[1]) {
		case 3:
			var op = tk[2];
			if(this.unops.get(op)) {
				if(this.isBlock(e1) || (function($this) {
					var $r;
					switch(e1[1]) {
					case 3:
						$r = true;
						break;
					default:
						$r = false;
					}
					return $r;
				}(this))) {
					this.tokens.add(tk);
					return e1;
				}
				return this.parseExprNext(this.mk(hscript.Expr.EUnop(op,false,e1),0,null));
			}
			return this.makeBinop(op,e1,this.parseExpr());
		case 8:
			tk = this.token();
			var field = null;
			switch(tk[1]) {
			case 2:
				var id = tk[2];
				field = id;
				break;
			default:
				this.unexpected(tk);
			}
			return this.parseExprNext(this.mk(hscript.Expr.EField(e1,field),0,null));
		case 4:
			return this.parseExprNext(this.mk(hscript.Expr.ECall(e1,this.parseExprList(hscript.Token.TPClose)),0,null));
		case 11:
			var e2 = this.parseExpr();
			this.ensure(hscript.Token.TBkClose);
			return this.parseExprNext(this.mk(hscript.Expr.EArray(e1,e2),0,null));
		case 13:
			var e21 = this.parseExpr();
			this.ensure(hscript.Token.TDoubleDot);
			var e3 = this.parseExpr();
			return this.mk(hscript.Expr.ETernary(e1,e21,e3),0,0);
		default:
			this.tokens.add(tk);
			return e1;
		}
	}
	,parseType: function() {
		var t = this.token();
		switch(t[1]) {
		case 2:
			var v = t[2];
			var path = [v];
			while(true) {
				t = this.token();
				if(t != hscript.Token.TDot) break;
				t = this.token();
				switch(t[1]) {
				case 2:
					var v1 = t[2];
					path.push(v1);
					break;
				default:
					this.unexpected(t);
				}
			}
			var params = null;
			switch(t[1]) {
			case 3:
				var op = t[2];
				if(op == "<") {
					params = [];
					try {
						while(true) {
							params.push(this.parseType());
							t = this.token();
							switch(t[1]) {
							case 9:
								continue;
								break;
							case 3:
								var op1 = t[2];
								if(op1 == ">") throw "__break__";
								break;
							default:
							}
							this.unexpected(t);
						}
					} catch( e ) { if( e != "__break__" ) throw e; }
				}
				break;
			default:
				this.tokens.add(t);
			}
			return this.parseTypeNext(hscript.CType.CTPath(path,params));
		case 4:
			var t1 = this.parseType();
			this.ensure(hscript.Token.TPClose);
			return this.parseTypeNext(hscript.CType.CTParent(t1));
		case 6:
			var fields = [];
			try {
				while(true) {
					t = this.token();
					switch(t[1]) {
					case 7:
						throw "__break__";
						break;
					case 2:
						var name = t[2];
						this.ensure(hscript.Token.TDoubleDot);
						fields.push({ name : name, t : this.parseType()});
						t = this.token();
						switch(t[1]) {
						case 9:
							break;
						case 7:
							throw "__break__";
							break;
						default:
							this.unexpected(t);
						}
						break;
					default:
						this.unexpected(t);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return this.parseTypeNext(hscript.CType.CTAnon(fields));
		default:
			return this.unexpected(t);
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		switch(tk[1]) {
		case 3:
			var op = tk[2];
			if(op != "->") {
				this.tokens.add(tk);
				return t;
			}
			break;
		default:
			this.tokens.add(tk);
			return t;
		}
		var t2 = this.parseType();
		switch(t2[1]) {
		case 1:
			var args = t2[2];
			args.unshift(t);
			return t2;
		default:
			return hscript.CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = new Array();
		var tk = this.token();
		if(tk == etk) return args;
		this.tokens.add(tk);
		try {
			while(true) {
				args.push(this.parseExpr());
				tk = this.token();
				switch(tk[1]) {
				case 9:
					break;
				default:
					if(tk == etk) throw "__break__";
					this.unexpected(tk);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return args;
	}
	,incPos: function() {
	}
	,readChar: function() {
		try {
			return this.input.readByte();
		} catch( e ) {
			return 0;
		}
	}
	,readString: function(until) {
		var c = 0;
		var b = new haxe.io.BytesOutput();
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			try {
				c = s.readByte();
			} catch( e ) {
				this.line = old;
				throw hscript.Error.EUnterminatedString;
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 110:
					b.writeByte(10);
					break;
				case 114:
					b.writeByte(13);
					break;
				case 116:
					b.writeByte(9);
					break;
				case 39:case 34:case 92:
					b.writeByte(c);
					break;
				case 47:
					if(this.allowJSON) b.writeByte(c); else this.invalidChar(c);
					break;
				case 117:
					if(!this.allowJSON) throw this.invalidChar(c);
					var code = null;
					try {
						code = s.readString(4);
					} catch( e1 ) {
						this.line = old;
						throw hscript.Error.EUnterminatedString;
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var $char = HxOverrides.cca(code,i);
						switch($char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += $char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += $char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += $char - 87;
							break;
						default:
							this.invalidChar($char);
						}
					}
					if(k <= 127) b.writeByte(k); else if(k <= 2047) {
						b.writeByte(192 | k >> 6);
						b.writeByte(128 | k & 63);
					} else {
						b.writeByte(224 | k >> 12);
						b.writeByte(128 | k >> 6 & 63);
						b.writeByte(128 | k & 63);
					}
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) esc = true; else if(c == until) break; else {
				if(c == 10) this.line++;
				b.writeByte(c);
			}
		}
		return b.getBytes().toString();
	}
	,token: function() {
		if(!(this.tokens.head == null)) return this.tokens.pop();
		var $char;
		if(this["char"] < 0) $char = this.readChar(); else {
			$char = this["char"];
			this["char"] = -1;
		}
		while(true) {
			switch($char) {
			case 0:
				return hscript.Token.TEof;
			case 32:case 9:case 13:
				break;
			case 10:
				this.line++;
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n = ($char - 48) * 1.0;
				var exp = 0.;
				while(true) {
					$char = this.readChar();
					exp *= 10;
					switch($char) {
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n = n * 10 + ($char - 48);
						break;
					case 46:
						if(exp > 0) {
							if(exp == 10 && this.readChar() == 46) {
								this.push(hscript.Token.TOp("..."));
								var i = n | 0;
								return hscript.Token.TConst(i == n?hscript.Const.CInt(i):hscript.Const.CFloat(n));
							}
							this.invalidChar($char);
						}
						exp = 1.;
						break;
					case 120:
						if(n > 0 || exp > 0) this.invalidChar($char);
						var n1 = 0;
						while(true) {
							$char = this.readChar();
							switch($char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n1 = (n1 << 4) + $char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n1 = (n1 << 4) + ($char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n1 = (n1 << 4) + ($char - 87);
								break;
							default:
								this["char"] = $char;
								return hscript.Token.TConst(hscript.Const.CInt(n1));
							}
						}
						break;
					default:
						this["char"] = $char;
						var i1 = n | 0;
						return hscript.Token.TConst(exp > 0?hscript.Const.CFloat(n * 10 / exp):i1 == n?hscript.Const.CInt(i1):hscript.Const.CFloat(n));
					}
				}
				break;
			case 59:
				return hscript.Token.TSemicolon;
			case 40:
				return hscript.Token.TPOpen;
			case 41:
				return hscript.Token.TPClose;
			case 44:
				return hscript.Token.TComma;
			case 46:
				$char = this.readChar();
				switch($char) {
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n2 = $char - 48;
					var exp1 = 1;
					while(true) {
						$char = this.readChar();
						exp1 *= 10;
						switch($char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n2 = n2 * 10 + ($char - 48);
							break;
						default:
							this["char"] = $char;
							return hscript.Token.TConst(hscript.Const.CFloat(n2 / exp1));
						}
					}
					break;
				case 46:
					$char = this.readChar();
					if($char != 46) this.invalidChar($char);
					return hscript.Token.TOp("...");
				default:
					this["char"] = $char;
					return hscript.Token.TDot;
				}
				break;
			case 123:
				return hscript.Token.TBrOpen;
			case 125:
				return hscript.Token.TBrClose;
			case 91:
				return hscript.Token.TBkOpen;
			case 93:
				return hscript.Token.TBkClose;
			case 39:
				return hscript.Token.TConst(hscript.Const.CString(this.readString(39)));
			case 34:
				return hscript.Token.TConst(hscript.Const.CString(this.readString(34)));
			case 63:
				return hscript.Token.TQuestion;
			case 58:
				return hscript.Token.TDoubleDot;
			default:
				if(this.ops[$char]) {
					var op = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.ops[$char]) {
							if(HxOverrides.cca(op,0) == 47) return this.tokenComment(op,$char);
							this["char"] = $char;
							return hscript.Token.TOp(op);
						}
						op += String.fromCharCode($char);
					}
				}
				if(this.idents[$char]) {
					var id = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.idents[$char]) {
							this["char"] = $char;
							return hscript.Token.TId(id);
						}
						id += String.fromCharCode($char);
					}
				}
				this.invalidChar($char);
			}
			$char = this.readChar();
		}
		return null;
	}
	,tokenComment: function(op,$char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			try {
				while($char != 10 && $char != 13) $char = s.readByte();
				this["char"] = $char;
			} catch( e ) {
			}
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			try {
				while(true) {
					while($char != 42) {
						if($char == 10) this.line++;
						$char = s.readByte();
					}
					$char = s.readByte();
					if($char == 47) break;
				}
			} catch( e1 ) {
				this.line = old;
				throw hscript.Error.EUnterminatedComment;
			}
			return this.token();
		}
		this["char"] = $char;
		return hscript.Token.TOp(op);
	}
	,constString: function(c) {
		switch(c[1]) {
		case 0:
			var v = c[2];
			if(v == null) return "null"; else return "" + v;
			break;
		case 1:
			var f = c[2];
			if(f == null) return "null"; else return "" + f;
			break;
		case 2:
			var s = c[2];
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t[1]) {
		case 0:
			return "<eof>";
		case 1:
			var c = t[2];
			return this.constString(c);
		case 2:
			var s = t[2];
			return s;
		case 3:
			var s1 = t[2];
			return s1;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		}
	}
	,__class__: hscript.Parser
};
var js = {};
js.Boot = function() { };
$hxClasses["js.Boot"] = js.Boot;
js.Boot.__name__ = ["js","Boot"];
js.Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js.Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js.Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js.Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js.Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js.Boot.__clear_trace = function() {
	var d = document.getElementById("haxe:trace");
	if(d != null) d.innerHTML = "";
};
js.Boot.isClass = function(o) {
	return o.__name__;
};
js.Boot.isEnum = function(e) {
	return e.__ename__;
};
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js.Boot.__nativeClassName(o);
		if(name != null) return js.Boot.__resolveNativeClass(name);
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) str2 += ", \n";
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) return o; else throw "Cannot cast " + Std.string(o) + " to " + Std.string(t);
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	if(typeof window != "undefined") return window[name]; else return global[name];
};
lime.AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.image = new haxe.ds.StringMap();
};
$hxClasses["lime.AssetCache"] = lime.AssetCache;
lime.AssetCache.__name__ = ["lime","AssetCache"];
lime.AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.image = new haxe.ds.StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime.AssetCache
};
lime.Assets = function() { };
$hxClasses["lime.Assets"] = lime.Assets;
lime.Assets.__name__ = ["lime","Assets"];
lime.Assets.exists = function(id,type) {
	lime.Assets.initialize();
	if(type == null) type = "BINARY";
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.exists(symbolName,type);
	return false;
};
lime.Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) return audio;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.audio.set(id,audio1);
				return audio1;
			} else haxe.Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 115, className : "lime.Assets", methodName : "getAudioBuffer"});
		} else haxe.Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 121, className : "lime.Assets", methodName : "getAudioBuffer"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 127, className : "lime.Assets", methodName : "getAudioBuffer"});
	return null;
};
lime.Assets.getBytes = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) return library.getBytes(symbolName); else haxe.Log.trace("[Assets] String or ByteArray asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 164, className : "lime.Assets", methodName : "getBytes"});
		} else haxe.Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 170, className : "lime.Assets", methodName : "getBytes"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 176, className : "lime.Assets", methodName : "getBytes"});
	return null;
};
lime.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.font.exists(id)) return lime.Assets.cache.font.get(id);
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.font.set(id,font);
				return font;
			} else haxe.Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 227, className : "lime.Assets", methodName : "getFont"});
		} else haxe.Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 233, className : "lime.Assets", methodName : "getFont"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 239, className : "lime.Assets", methodName : "getFont"});
	return null;
};
lime.Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) return image;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime.Assets.cache.enabled) lime.Assets.cache.image.set(id,image1);
				return image1;
			} else haxe.Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 297, className : "lime.Assets", methodName : "getImage"});
		} else haxe.Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 303, className : "lime.Assets", methodName : "getImage"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 309, className : "lime.Assets", methodName : "getImage"});
	return null;
};
lime.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
lime.Assets.getPath = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) return library.getPath(symbolName); else haxe.Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 426, className : "lime.Assets", methodName : "getPath"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 432, className : "lime.Assets", methodName : "getPath"});
	return null;
};
lime.Assets.getText = function(id) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) return library.getText(symbolName); else haxe.Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 469, className : "lime.Assets", methodName : "getText"});
		} else haxe.Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 475, className : "lime.Assets", methodName : "getText"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 481, className : "lime.Assets", methodName : "getText"});
	return null;
};
lime.Assets.initialize = function() {
	if(!lime.Assets.initialized) {
		lime.Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime.Assets.initialized = true;
	}
};
lime.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			if(lime.Assets.cache.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(lime.Assets.cache.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(lime.Assets.cache.audio.exists(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
lime.Assets.isValidAudio = function(buffer) {
	return buffer != null;
	return true;
};
lime.Assets.isValidImage = function(buffer) {
	return true;
};
lime.Assets.list = function(type) {
	lime.Assets.initialize();
	var items = [];
	var $it0 = lime.Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime.Assets.loadAudioBuffer = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.audio.exists(id)) {
		var audio = lime.Assets.cache.audio.get(id);
		if(lime.Assets.isValidAudio(audio)) {
			handler(audio);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(useCache && lime.Assets.cache.enabled) library.loadAudioBuffer(symbolName,function(audio1) {
				var value = audio1;
				lime.Assets.cache.audio.set(id,value);
				handler(audio1);
			}); else library.loadAudioBuffer(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 666, className : "lime.Assets", methodName : "loadAudioBuffer"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 672, className : "lime.Assets", methodName : "loadAudioBuffer"});
	handler(null);
};
lime.Assets.loadBytes = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 702, className : "lime.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 708, className : "lime.Assets", methodName : "loadBytes"});
	handler(null);
};
lime.Assets.loadImage = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	lime.Assets.initialize();
	if(useCache && lime.Assets.cache.enabled && lime.Assets.cache.image.exists(id)) {
		var image = lime.Assets.cache.image.get(id);
		if(lime.Assets.isValidImage(image)) {
			handler(image);
			return;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(useCache && lime.Assets.cache.enabled) library.loadImage(symbolName,function(image1) {
				lime.Assets.cache.image.set(id,image1);
				handler(image1);
			}); else library.loadImage(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 765, className : "lime.Assets", methodName : "loadImage"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 771, className : "lime.Assets", methodName : "loadImage"});
	handler(null);
};
lime.Assets.loadLibrary = function(name,handler) {
	lime.Assets.initialize();
	var data = lime.Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		lime.Assets.libraries.set(name,library);
		library.eventCallback = lime.Assets.library_onEvent;
		library.load(handler);
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + name + "\"",{ fileName : "Assets.hx", lineNumber : 800, className : "lime.Assets", methodName : "loadLibrary"});
};
lime.Assets.loadText = function(id,handler) {
	lime.Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = lime.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			library.loadText(symbolName,handler);
			return;
		} else haxe.Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 891, className : "lime.Assets", methodName : "loadText"});
	} else haxe.Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 897, className : "lime.Assets", methodName : "loadText"});
	handler(null);
};
lime.Assets.registerLibrary = function(name,library) {
	if(lime.Assets.libraries.exists(name)) lime.Assets.unloadLibrary(name);
	if(library != null) library.eventCallback = lime.Assets.library_onEvent;
	lime.Assets.libraries.set(name,library);
};
lime.Assets.unloadLibrary = function(name) {
	lime.Assets.initialize();
	var library = lime.Assets.libraries.get(name);
	if(library != null) {
		lime.Assets.cache.clear(name + ":");
		library.eventCallback = null;
	}
	lime.Assets.libraries.remove(name);
};
lime.Assets.library_onEvent = function(library,type) {
	if(type == "change") lime.Assets.cache.clear();
};
lime._Assets = {};
lime._Assets.AssetType_Impl_ = function() { };
$hxClasses["lime._Assets.AssetType_Impl_"] = lime._Assets.AssetType_Impl_;
lime._Assets.AssetType_Impl_.__name__ = ["lime","_Assets","AssetType_Impl_"];
lime._backend = {};
lime._backend.html5 = {};
lime._backend.html5.HTML5Application = function(parent) {
	this.parent = parent;
	lime.app.Application.__instance = parent;
	lime.audio.AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime._backend.html5.HTML5Application;
lime._backend.html5.HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime._backend.html5.HTML5Application.handleUpdateEvent = function(__) {
	lime.app.Application.__instance.update(16);
	var listeners = lime.app.Application.onUpdate.listeners;
	var repeat = lime.app.Application.onUpdate.repeat;
	var length = listeners.length;
	var i = 0;
	while(i < length) {
		listeners[i](16);
		if(!repeat[i]) {
			lime.app.Application.onUpdate.remove(listeners[i]);
			length--;
		} else i++;
	}
	lime.graphics.Renderer.render();
	window.requestAnimationFrame(lime._backend.html5.HTML5Application.handleUpdateEvent);
};
lime._backend.html5.HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 144:
			return 1073741907;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 36:
			return 1073741898;
		case 35:
			return 1073741901;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		}
		return keyCode;
	}
	,create: function(config) {
		this.parent.config = config;
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		lime.ui.KeyEventManager.onKeyDown.add(($_=this.parent,$bind($_,$_.onKeyDown)));
		lime.ui.KeyEventManager.onKeyUp.add(($_=this.parent,$bind($_,$_.onKeyUp)));
		lime.ui.MouseEventManager.onMouseDown.add(($_=this.parent,$bind($_,$_.onMouseDown)));
		lime.ui.MouseEventManager.onMouseMove.add(($_=this.parent,$bind($_,$_.onMouseMove)));
		lime.ui.MouseEventManager.onMouseUp.add(($_=this.parent,$bind($_,$_.onMouseUp)));
		lime.ui.MouseEventManager.onMouseWheel.add(($_=this.parent,$bind($_,$_.onMouseWheel)));
		lime.ui.TouchEventManager.onTouchStart.add(($_=this.parent,$bind($_,$_.onTouchStart)));
		lime.ui.TouchEventManager.onTouchMove.add(($_=this.parent,$bind($_,$_.onTouchMove)));
		lime.ui.TouchEventManager.onTouchEnd.add(($_=this.parent,$bind($_,$_.onTouchEnd)));
		lime.graphics.Renderer.onRenderContextLost.add(($_=this.parent,$bind($_,$_.onRenderContextLost)));
		lime.graphics.Renderer.onRenderContextRestored.add(($_=this.parent,$bind($_,$_.onRenderContextRestored)));
		lime.ui.Window.onWindowActivate.add(($_=this.parent,$bind($_,$_.onWindowActivate)));
		lime.ui.Window.onWindowClose.add(($_=this.parent,$bind($_,$_.onWindowClose)));
		lime.ui.Window.onWindowDeactivate.add(($_=this.parent,$bind($_,$_.onWindowDeactivate)));
		lime.ui.Window.onWindowFocusIn.add(($_=this.parent,$bind($_,$_.onWindowFocusIn)));
		lime.ui.Window.onWindowFocusOut.add(($_=this.parent,$bind($_,$_.onWindowFocusOut)));
		lime.ui.Window.onWindowMove.add(($_=this.parent,$bind($_,$_.onWindowMove)));
		lime.ui.Window.onWindowResize.add(($_=this.parent,$bind($_,$_.onWindowResize)));
		var $window = new lime.ui.Window(config);
		var renderer = new lime.graphics.Renderer($window);
		$window.width = config.width;
		$window.height = config.height;
		$window.backend.element = config.element;
		this.parent.addWindow($window);
	}
	,exec: function() {
		
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
										   || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		lime._backend.html5.HTML5Application.handleUpdateEvent();
		return 0;
	}
	,handleKeyEvent: function(event) {
		var _g = event.keyCode;
		switch(_g) {
		case 32:case 37:case 38:case 39:case 40:
			event.preventDefault();
			break;
		}
		var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
		var modifier = 0;
		if(event.type == "keydown") {
			var listeners = lime.ui.KeyEventManager.onKeyDown.listeners;
			var repeat = lime.ui.KeyEventManager.onKeyDown.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](keyCode,modifier);
				if(!repeat[i]) {
					lime.ui.KeyEventManager.onKeyDown.remove(listeners[i]);
					length--;
				} else i++;
			}
		} else {
			var listeners1 = lime.ui.KeyEventManager.onKeyUp.listeners;
			var repeat1 = lime.ui.KeyEventManager.onKeyUp.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](keyCode,modifier);
				if(!repeat1[i1]) {
					lime.ui.KeyEventManager.onKeyUp.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
		}
	}
	,__class__: lime._backend.html5.HTML5Application
};
lime._backend.html5.HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime._backend.html5.HTML5Mouse;
lime._backend.html5.HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime._backend.html5.HTML5Mouse.__cursor = null;
lime._backend.html5.HTML5Mouse.__hidden = null;
lime._backend.html5.HTML5Mouse.hide = function() {
	if(!lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime.app.Application.__instance.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime._backend.html5.HTML5Mouse.show = function() {
	if(lime._backend.html5.HTML5Mouse.__hidden) {
		lime._backend.html5.HTML5Mouse.__hidden = false;
		var cacheValue = lime._backend.html5.HTML5Mouse.__cursor;
		lime._backend.html5.HTML5Mouse.__cursor = null;
		lime._backend.html5.HTML5Mouse.set_cursor(cacheValue);
	}
};
lime._backend.html5.HTML5Mouse.get_cursor = function() {
	if(lime._backend.html5.HTML5Mouse.__cursor == null) return lime.ui.MouseCursor.DEFAULT;
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Mouse.set_cursor = function(value) {
	if(lime._backend.html5.HTML5Mouse.__cursor != value) {
		if(!lime._backend.html5.HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime.app.Application.__instance.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime._backend.html5.HTML5Mouse.__cursor = value;
	}
	return lime._backend.html5.HTML5Mouse.__cursor;
};
lime._backend.html5.HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime._backend.html5.HTML5Renderer;
lime._backend.html5.HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime._backend.html5.HTML5Renderer.render = function() {
	var _g = 0;
	var _g1 = lime.app.Application.__instance.windows;
	while(_g < _g1.length) {
		var $window = _g1[_g];
		++_g;
		if($window.currentRenderer != null) $window.currentRenderer.backend.renderEvent();
	}
};
lime._backend.html5.HTML5Renderer.prototype = {
	create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) this.parent.context = lime.graphics.RenderContext.DOM(this.parent.window.backend.div); else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) this.parent.context = lime.graphics.RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d")); else {
				webgl = WebGLDebugUtils.makeDebugContext(webgl);
				lime.graphics.opengl.GL.context = webgl;
				this.parent.context = lime.graphics.RenderContext.OPENGL(lime.graphics.opengl.GL.context);
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			var listeners = lime.graphics.Renderer.onRenderContextLost.listeners;
			var repeat = lime.graphics.Renderer.onRenderContextLost.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i]();
				if(!repeat[i]) {
					lime.graphics.Renderer.onRenderContextLost.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "webglcontextrestored":
			this.createContext();
			var listeners1 = lime.graphics.Renderer.onRenderContextRestored.listeners;
			var repeat1 = lime.graphics.Renderer.onRenderContextRestored.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](this.parent.context);
				if(!repeat1[i1]) {
					lime.graphics.Renderer.onRenderContextRestored.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		default:
		}
	}
	,renderEvent: function() {
		if(!lime.app.Application.__initialized) {
			lime.app.Application.__initialized = true;
			lime.app.Application.__instance.init(this.parent.context);
		}
		lime.app.Application.__instance.render(this.parent.context);
		var listeners = lime.graphics.Renderer.onRender.listeners;
		var repeat = lime.graphics.Renderer.onRender.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this.parent.context);
			if(!repeat[i]) {
				lime.graphics.Renderer.onRender.remove(listeners[i]);
				length--;
			} else i++;
		}
		this.flip();
	}
	,__class__: lime._backend.html5.HTML5Renderer
};
lime._backend.html5.HTML5Window = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime._backend.html5.HTML5Window;
lime._backend.html5.HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime._backend.html5.HTML5Window.prototype = {
	create: function(application) {
		this.setWidth = this.parent.width;
		this.setHeight = this.parent.height;
		if(js.Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.width == 0 && this.parent.height == 0) {
			if(this.element != null) {
				this.parent.width = this.element.clientWidth;
				this.parent.height = this.element.clientHeight;
			} else {
				this.parent.width = window.innerWidth;
				this.parent.height = window.innerHeight;
			}
			this.parent.fullscreen = true;
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.width;
			this.canvas.height = this.parent.height;
		} else {
			this.div.style.width = this.parent.width + "px";
			this.div.style.height = this.parent.height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		}
		window.addEventListener("focus",$bind(this,this.handleEvent),false);
		window.addEventListener("blur",$bind(this,this.handleEvent),false);
		window.addEventListener("resize",$bind(this,this.handleEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleEvent),false);
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "focus":
			var listeners = lime.ui.Window.onWindowFocusIn.listeners;
			var repeat = lime.ui.Window.onWindowFocusIn.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i]();
				if(!repeat[i]) {
					lime.ui.Window.onWindowFocusIn.remove(listeners[i]);
					length--;
				} else i++;
			}
			var listeners1 = lime.ui.Window.onWindowActivate.listeners;
			var repeat1 = lime.ui.Window.onWindowActivate.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1]();
				if(!repeat1[i1]) {
					lime.ui.Window.onWindowActivate.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		case "blur":
			var listeners2 = lime.ui.Window.onWindowFocusOut.listeners;
			var repeat2 = lime.ui.Window.onWindowFocusOut.repeat;
			var length2 = listeners2.length;
			var i2 = 0;
			while(i2 < length2) {
				listeners2[i2]();
				if(!repeat2[i2]) {
					lime.ui.Window.onWindowFocusOut.remove(listeners2[i2]);
					length2--;
				} else i2++;
			}
			var listeners3 = lime.ui.Window.onWindowDeactivate.listeners;
			var repeat3 = lime.ui.Window.onWindowDeactivate.repeat;
			var length3 = listeners3.length;
			var i3 = 0;
			while(i3 < length3) {
				listeners3[i3]();
				if(!repeat3[i3]) {
					lime.ui.Window.onWindowDeactivate.remove(listeners3[i3]);
					length3--;
				} else i3++;
			}
			break;
		case "resize":
			var cacheWidth = this.parent.width;
			var cacheHeight = this.parent.height;
			this.handleResize();
			if(this.parent.width != cacheWidth || this.parent.height != cacheHeight) {
				var listeners4 = lime.ui.Window.onWindowResize.listeners;
				var repeat4 = lime.ui.Window.onWindowResize.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](this.parent.width,this.parent.height);
					if(!repeat4[i4]) {
						lime.ui.Window.onWindowResize.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
			}
			break;
		case "beforeunload":
			var listeners5 = lime.ui.Window.onWindowClose.listeners;
			var repeat5 = lime.ui.Window.onWindowClose.repeat;
			var length5 = listeners5.length;
			var i5 = 0;
			while(i5 < length5) {
				listeners5[i5]();
				if(!repeat5[i5]) {
					lime.ui.Window.onWindowClose.remove(listeners5[i5]);
					length5--;
				} else i5++;
			}
			break;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				var listeners = lime.ui.MouseEventManager.onMouseDown.listeners;
				var repeat = lime.ui.MouseEventManager.onMouseDown.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](x,y,event.button);
					if(!repeat[i]) {
						lime.ui.MouseEventManager.onMouseDown.remove(listeners[i]);
						length--;
					} else i++;
				}
				break;
			case "mouseup":
				var listeners1 = lime.ui.MouseEventManager.onMouseUp.listeners;
				var repeat1 = lime.ui.MouseEventManager.onMouseUp.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](x,y,event.button);
					if(!repeat1[i1]) {
						lime.ui.MouseEventManager.onMouseUp.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
				break;
			case "mousemove":
				var listeners2 = lime.ui.MouseEventManager.onMouseMove.listeners;
				var repeat2 = lime.ui.MouseEventManager.onMouseMove.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](x,y,event.button);
					if(!repeat2[i2]) {
						lime.ui.MouseEventManager.onMouseMove.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
				break;
			default:
			}
		} else {
			var listeners3 = lime.ui.MouseEventManager.onMouseWheel.listeners;
			var repeat3 = lime.ui.MouseEventManager.onMouseWheel.repeat;
			var length3 = listeners3.length;
			var i3 = 0;
			while(i3 < length3) {
				listeners3[i3](event.deltaX,event.deltaY);
				if(!repeat3[i3]) {
					lime.ui.MouseEventManager.onMouseWheel.remove(listeners3[i3]);
					length3--;
				} else i3++;
			}
		}
	}
	,handleResize: function() {
		var stretch = this.parent.fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.width != this.element.clientWidth || this.parent.height != this.element.clientHeight) {
					this.parent.width = this.element.clientWidth;
					this.parent.height = this.element.clientHeight;
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var currentRatio = scaleX / scaleY;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var touch = event.changedTouches[0];
		var id = touch.identifier;
		var x = 0.0;
		var y = 0.0;
		if(this.element != null) {
			if(this.canvas != null) {
				var rect = this.canvas.getBoundingClientRect();
				x = (touch.clientX - rect.left) * (this.parent.width / rect.width);
				y = (touch.clientY - rect.top) * (this.parent.height / rect.height);
			} else if(this.div != null) {
				var rect1 = this.div.getBoundingClientRect();
				x = touch.clientX - rect1.left;
				y = touch.clientY - rect1.top;
			} else {
				var rect2 = this.element.getBoundingClientRect();
				x = (touch.clientX - rect2.left) * (this.parent.width / rect2.width);
				y = (touch.clientY - rect2.top) * (this.parent.height / rect2.height);
			}
		} else {
			x = touch.clientX;
			y = touch.clientY;
		}
		var _g = event.type;
		switch(_g) {
		case "touchstart":
			var listeners = lime.ui.TouchEventManager.onTouchStart.listeners;
			var repeat = lime.ui.TouchEventManager.onTouchStart.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](x,y,id);
				if(!repeat[i]) {
					lime.ui.TouchEventManager.onTouchStart.remove(listeners[i]);
					length--;
				} else i++;
			}
			break;
		case "touchmove":
			var listeners1 = lime.ui.TouchEventManager.onTouchMove.listeners;
			var repeat1 = lime.ui.TouchEventManager.onTouchMove.repeat;
			var length1 = listeners1.length;
			var i1 = 0;
			while(i1 < length1) {
				listeners1[i1](x,y,id);
				if(!repeat1[i1]) {
					lime.ui.TouchEventManager.onTouchMove.remove(listeners1[i1]);
					length1--;
				} else i1++;
			}
			break;
		case "touchend":
			var listeners2 = lime.ui.TouchEventManager.onTouchEnd.listeners;
			var repeat2 = lime.ui.TouchEventManager.onTouchEnd.repeat;
			var length2 = listeners2.length;
			var i2 = 0;
			while(i2 < length2) {
				listeners2[i2](x,y,id);
				if(!repeat2[i2]) {
					lime.ui.TouchEventManager.onTouchEnd.remove(listeners2[i2]);
					length2--;
				} else i2++;
			}
			break;
		default:
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setIcon: function(image) {
	}
	,__class__: lime._backend.html5.HTML5Window
};
lime.app = {};
lime.app.Module = function() {
};
$hxClasses["lime.app.Module"] = lime.app.Module;
lime.app.Module.__name__ = ["lime","app","Module"];
lime.app.Module.prototype = {
	__class__: lime.app.Module
};
lime.app.Event = function() {
	this.listeners = new Array();
	this.priorities = new Array();
	this.repeat = new Array();
};
$hxClasses["lime.app.Event"] = lime.app.Event;
lime.app.Event.__name__ = ["lime","app","Event"];
lime.app.Event.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.priorities[i]) {
				this.listeners.splice(i,0,listener);
				this.priorities.splice(i,0,priority);
				this.repeat.splice(i,0,!once);
				return;
			}
		}
		this.listeners.push(listener);
		this.priorities.push(priority);
		this.repeat.push(!once);
	}
	,remove: function(listener) {
		var index = HxOverrides.indexOf(this.listeners,listener,0);
		if(index > -1) {
			this.listeners.splice(index,1);
			this.priorities.splice(index,1);
			this.repeat.splice(index,1);
		}
	}
	,__class__: lime.app.Event
};
lime.app.Application = function() {
	lime.app.Module.call(this);
	this.windows = new Array();
	this.backend = new lime._backend.html5.HTML5Application(this);
};
$hxClasses["lime.app.Application"] = lime.app.Application;
lime.app.Application.__name__ = ["lime","app","Application"];
lime.app.Application.__initialized = null;
lime.app.Application.__instance = null;
lime.app.Application.__super__ = lime.app.Module;
lime.app.Application.prototype = $extend(lime.app.Module.prototype,{
	addWindow: function(window) {
		this.windows.push(window);
		window.create(this);
	}
	,create: function(config) {
		this.backend.create(config);
	}
	,exec: function() {
		return this.backend.exec();
	}
	,init: function(context) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y,button) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTouchEnd: function(x,y,id) {
	}
	,onTouchMove: function(x,y,id) {
	}
	,onTouchStart: function(x,y,id) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowResize: function(width,height) {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime.app.Application
	,__properties__: {get_window:"get_window"}
});
lime.app.Preloader = function() {
	this.total = 0;
	this.loaded = 0;
};
$hxClasses["lime.app.Preloader"] = lime.app.Preloader;
lime.app.Preloader.__name__ = ["lime","app","Preloader"];
lime.app.Preloader.prototype = {
	create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "IMAGE":
				var image = new Image();
				lime.app.Preloader.images.set(url,image);
				image.onload = $bind(this,this.image_onLoad);
				image.src = url;
				this.total++;
				break;
			case "BINARY":
				var loader = new lime.net.URLLoader();
				loader.set_dataFormat(lime.net.URLLoaderDataFormat.BINARY);
				lime.app.Preloader.loaders.set(url,loader);
				this.total++;
				break;
			case "TEXT":
				var loader1 = new lime.net.URLLoader();
				lime.app.Preloader.loaders.set(url,loader1);
				this.total++;
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			default:
			}
		}
		var $it0 = lime.app.Preloader.loaders.keys();
		while( $it0.hasNext() ) {
			var url1 = $it0.next();
			var loader2 = lime.app.Preloader.loaders.get(url1);
			loader2.onComplete.add($bind(this,this.loader_onComplete));
			loader2.load(new lime.net.URLRequest(url1));
		}
		if(this.total == 0) this.start();
	}
	,loadFont: function(font) {
		var _g = this;
		var node = window.document.createElement("span");
		node.innerHTML = "giItT1WQy@!-/#";
		var style = node.style;
		style.position = "absolute";
		style.left = "-10000px";
		style.top = "-10000px";
		style.fontSize = "300px";
		style.fontFamily = "sans-serif";
		style.fontVariant = "normal";
		style.fontStyle = "normal";
		style.fontWeight = "normal";
		style.letterSpacing = "0";
		window.document.body.appendChild(node);
		var width = node.offsetWidth;
		style.fontFamily = "'" + font + "', sans-serif";
		var interval = null;
		var found = false;
		var checkFont = function() {
			if(node.offsetWidth != width) {
				if(!found) {
					found = true;
					return false;
				}
				_g.loaded++;
				if(interval != null) window.clearInterval(interval);
				node.parentNode.removeChild(node);
				node = null;
				_g.update(_g.loaded,_g.total);
				if(_g.loaded == _g.total) _g.start();
				return true;
			}
			return false;
		};
		if(!checkFont()) interval = window.setInterval(checkFont,50);
	}
	,start: function() {
		if(this.onComplete != null) this.onComplete();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,loader_onComplete: function(loader) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: lime.app.Preloader
};
lime.audio = {};
lime.audio.ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime.audio.ALAudioContext;
lime.audio.ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime.audio.ALAudioContext.prototype = {
	bufferData: function(buffer,format,data,size,freq) {
		lime.audio.openal.AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime.audio.openal.AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime.audio.openal.AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime.audio.openal.AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime.audio.openal.AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime.audio.openal.AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime.audio.openal.AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime.audio.openal.AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime.audio.openal.AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime.audio.openal.AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime.audio.openal.AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime.audio.openal.AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime.audio.openal.AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime.audio.openal.AL.enable(capability);
	}
	,genSource: function() {
		return lime.audio.openal.AL.genSource();
	}
	,genSources: function(n) {
		return lime.audio.openal.AL.genSources(n);
	}
	,genBuffer: function() {
		return lime.audio.openal.AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime.audio.openal.AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime.audio.openal.AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime.audio.openal.AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime.audio.openal.AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime.audio.openal.AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime.audio.openal.AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime.audio.openal.AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime.audio.openal.AL.getError();
	}
	,getErrorString: function() {
		return lime.audio.openal.AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime.audio.openal.AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime.audio.openal.AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime.audio.openal.AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime.audio.openal.AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime.audio.openal.AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime.audio.openal.AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime.audio.openal.AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime.audio.openal.AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime.audio.openal.AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime.audio.openal.AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param) {
		return lime.audio.openal.AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime.audio.openal.AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime.audio.openal.AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime.audio.openal.AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime.audio.openal.AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime.audio.openal.AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime.audio.openal.AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime.audio.openal.AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime.audio.openal.AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime.audio.openal.AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime.audio.openal.AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime.audio.openal.AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime.audio.openal.AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime.audio.openal.AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime.audio.openal.AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime.audio.openal.AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime.audio.openal.AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime.audio.openal.AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime.audio.openal.AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime.audio.openal.AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime.audio.openal.AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime.audio.openal.AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime.audio.openal.AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime.audio.openal.AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime.audio.openal.AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime.audio.openal.AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime.audio.openal.AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime.audio.openal.AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime.audio.openal.AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime.audio.openal.AL.speedOfSound(value);
	}
	,__class__: lime.audio.ALAudioContext
};
lime.audio.ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime.audio.ALCAudioContext;
lime.audio.ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime.audio.ALCAudioContext.prototype = {
	closeDevice: function(device) {
		return lime.audio.openal.ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime.audio.openal.ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime.audio.openal.ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime.audio.openal.ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime.audio.openal.ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime.audio.openal.ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime.audio.openal.ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime.audio.openal.ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime.audio.openal.ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime.audio.openal.ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime.audio.openal.ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime.audio.openal.ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime.audio.openal.ALC.suspendContext(context);
	}
	,__class__: lime.audio.ALCAudioContext
};
lime.audio.AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime.audio.AudioBuffer;
lime.audio.AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime.audio.AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime.audio.AudioBuffer.fromFile = function(path) {
	return null;
};
lime.audio.AudioBuffer.fromURL = function(url,handler) {
};
lime.audio.AudioBuffer.prototype = {
	dispose: function() {
	}
	,__class__: lime.audio.AudioBuffer
};
lime.audio.AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : true, __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime.audio.AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime.audio.AudioContext; $x.toString = $estr; return $x; };
lime.audio.AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime.audio.AudioManager;
lime.audio.AudioManager.__name__ = ["lime","audio","AudioManager"];
lime.audio.AudioManager.context = null;
lime.audio.AudioManager.init = function(context) {
	if(lime.audio.AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime.audio.AudioManager.context = lime.audio.AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			lime.audio.AudioManager.context = lime.audio.AudioContext.HTML5(new lime.audio.HTML5AudioContext());
		} else lime.audio.AudioManager.context = context;
	}
};
lime.audio.AudioManager.resume = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioManager.shutdown = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime.audio.AudioManager.suspend = function() {
	if(lime.audio.AudioManager.context != null) {
		var _g = lime.audio.AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
			break;
		default:
		}
	}
};
lime.audio.AudioSource = function(buffer) {
	this.onComplete = new lime.app.Event();
	this.buffer = buffer;
	this.id = 0;
	this.pauseTime = 0;
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime.audio.AudioSource;
lime.audio.AudioSource.__name__ = ["lime","audio","AudioSource"];
lime.audio.AudioSource.prototype = {
	init: function() {
		{
			var _g = lime.audio.AudioManager.context;
			switch(_g[1]) {
			case 0:
				var al = _g[3];
				var alc = _g[2];
				if((function($this) {
					var $r;
					var $int = $this.buffer.id;
					$r = $int < 0?4294967296.0 + $int:$int + 0.0;
					return $r;
				}(this)) == 0) {
					this.buffer.id = al.genBuffer();
					var format = 0;
					if(this.buffer.channels == 1) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
					} else if(this.buffer.channels == 2) {
						if(this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8; else if(this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
					}
					al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
				}
				this.id = al.genSource();
				al.sourcei(this.id,al.BUFFER,this.buffer.id);
				break;
			default:
			}
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return value;
	}
	,get_timeOffset: function() {
		return 0;
	}
	,set_timeOffset: function(value) {
		return value;
	}
	,__class__: lime.audio.AudioSource
	,__properties__: {set_timeOffset:"set_timeOffset",get_timeOffset:"get_timeOffset",set_gain:"set_gain",get_gain:"get_gain"}
};
lime.audio.FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime.audio.FlashAudioContext;
lime.audio.FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime.audio.FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime.audio.FlashAudioContext
};
lime.audio.HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime.audio.HTML5AudioContext;
lime.audio.HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime.audio.HTML5AudioContext.prototype = {
	canPlayType: function(buffer,type) {
		if(buffer.src != null) return buffer.src.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime.audio.AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAudioDecodedByteCount: function(buffer) {
		if(buffer.src != null) return buffer.src.audioDecodedByteCount;
		return 0;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) return buffer.src.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) return buffer.src.buffered;
		return null;
	}
	,getController: function(buffer) {
		if(buffer.src != null) return buffer.src.controller;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) return buffer.src.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) return buffer.src.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) return buffer.src.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) return buffer.src.error;
		return null;
	}
	,getInitialTime: function(buffer) {
		if(buffer.src != null) return buffer.src.initialTime;
		return 0;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) return buffer.src.loop;
		return false;
	}
	,getMediaGroup: function(buffer) {
		if(buffer.src != null) return buffer.src.mediaGroup;
		return null;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) return buffer.src.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) return buffer.src.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) return buffer.src.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) return buffer.src.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) return buffer.src.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) return buffer.src.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) return buffer.src.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) return buffer.src.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) return buffer.src.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) return buffer.src.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) return buffer.src.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) return buffer.src.load();
	}
	,pause: function(buffer) {
		if(buffer.src != null) return buffer.src.pause();
	}
	,play: function(buffer) {
		if(buffer.src != null) return buffer.src.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) buffer.src.autoplay = value;
	}
	,setController: function(buffer,value) {
		if(buffer.src != null) buffer.src.controller = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) buffer.src.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) buffer.src.loop = value;
	}
	,setMediaGroup: function(buffer,value) {
		if(buffer.src != null) buffer.src.mediaGroup = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) buffer.src.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) buffer.src.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) buffer.src.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) buffer.src.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) buffer.src.volume = value;
	}
	,__class__: lime.audio.HTML5AudioContext
};
lime.audio.openal = {};
lime.audio.openal.AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime.audio.openal.AL;
lime.audio.openal.AL.__name__ = ["lime","audio","openal","AL"];
lime.audio.openal.AL.bufferData = function(buffer,format,data,size,freq) {
};
lime.audio.openal.AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime.audio.openal.AL.bufferf = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferfv = function(buffer,param,values) {
};
lime.audio.openal.AL.bufferi = function(buffer,param,value) {
};
lime.audio.openal.AL.bufferiv = function(buffer,param,values) {
};
lime.audio.openal.AL.deleteBuffer = function(buffer) {
};
lime.audio.openal.AL.deleteBuffers = function(buffers) {
};
lime.audio.openal.AL.deleteSource = function(source) {
};
lime.audio.openal.AL.deleteSources = function(sources) {
};
lime.audio.openal.AL.disable = function(capability) {
};
lime.audio.openal.AL.distanceModel = function(distanceModel) {
};
lime.audio.openal.AL.dopplerFactor = function(value) {
};
lime.audio.openal.AL.dopplerVelocity = function(value) {
};
lime.audio.openal.AL.enable = function(capability) {
};
lime.audio.openal.AL.genSource = function() {
	return 0;
};
lime.audio.openal.AL.genSources = function(n) {
	return null;
};
lime.audio.openal.AL.genBuffer = function() {
	return 0;
};
lime.audio.openal.AL.genBuffers = function(n) {
	return null;
};
lime.audio.openal.AL.getBoolean = function(param) {
	return false;
};
lime.audio.openal.AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime.audio.openal.AL.getBufferf = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getBufferi = function(buffer,param) {
	return 0;
};
lime.audio.openal.AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getDouble = function(param) {
	return 0;
};
lime.audio.openal.AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getEnumValue = function(ename) {
	return 0;
};
lime.audio.openal.AL.getError = function() {
	return 0;
};
lime.audio.openal.AL.getErrorString = function() {
	var _g = lime.audio.openal.AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.AL.getFloat = function(param) {
	return 0;
};
lime.audio.openal.AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getInteger = function(param) {
	return 0;
};
lime.audio.openal.AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListener3f = function(param) {
	return null;
};
lime.audio.openal.AL.getListener3i = function(param) {
	return null;
};
lime.audio.openal.AL.getListenerf = function(param) {
	return 0;
};
lime.audio.openal.AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getListeneri = function(param) {
	return 0;
};
lime.audio.openal.AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getProcAddress = function(fname) {
	return null;
};
lime.audio.openal.AL.getSource3f = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcef = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSource3i = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcefv = function(source,param) {
	return null;
};
lime.audio.openal.AL.getSourcei = function(source,param) {
	return 0;
};
lime.audio.openal.AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime.audio.openal.AL.getString = function(param) {
	return null;
};
lime.audio.openal.AL.isBuffer = function(buffer) {
	return false;
};
lime.audio.openal.AL.isEnabled = function(capability) {
	return false;
};
lime.audio.openal.AL.isExtensionPresent = function(extname) {
	return false;
};
lime.audio.openal.AL.isSource = function(source) {
	return false;
};
lime.audio.openal.AL.listener3f = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listener3i = function(param,value1,value2,value3) {
};
lime.audio.openal.AL.listenerf = function(param,value) {
};
lime.audio.openal.AL.listenerfv = function(param,values) {
};
lime.audio.openal.AL.listeneri = function(param,value) {
};
lime.audio.openal.AL.listeneriv = function(param,values) {
};
lime.audio.openal.AL.source3f = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.source3i = function(source,param,value1,value2,value3) {
};
lime.audio.openal.AL.sourcef = function(source,param,value) {
};
lime.audio.openal.AL.sourcefv = function(source,param,values) {
};
lime.audio.openal.AL.sourcei = function(source,param,value) {
};
lime.audio.openal.AL.sourceiv = function(source,param,values) {
};
lime.audio.openal.AL.sourcePlay = function(source) {
};
lime.audio.openal.AL.sourcePlayv = function(sources) {
};
lime.audio.openal.AL.sourceStop = function(source) {
};
lime.audio.openal.AL.sourceStopv = function(sources) {
};
lime.audio.openal.AL.sourceRewind = function(source) {
};
lime.audio.openal.AL.sourceRewindv = function(sources) {
};
lime.audio.openal.AL.sourcePause = function(source) {
};
lime.audio.openal.AL.sourcePausev = function(sources) {
};
lime.audio.openal.AL.sourceQueueBuffer = function(source,buffer) {
};
lime.audio.openal.AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime.audio.openal.AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime.audio.openal.AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime.audio.openal.AL.speedOfSound = function(value) {
};
lime.audio.openal.ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime.audio.openal.ALC;
lime.audio.openal.ALC.__name__ = ["lime","audio","openal","ALC"];
lime.audio.openal.ALC.closeDevice = function(device) {
	return false;
};
lime.audio.openal.ALC.createContext = function(device,attrlist) {
	return null;
};
lime.audio.openal.ALC.destroyContext = function(context) {
};
lime.audio.openal.ALC.getContextsDevice = function(context) {
	return null;
};
lime.audio.openal.ALC.getCurrentContext = function() {
	return null;
};
lime.audio.openal.ALC.getError = function(device) {
	return 0;
};
lime.audio.openal.ALC.getErrorString = function(device) {
	var _g = lime.audio.openal.ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime.audio.openal.ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime.audio.openal.ALC.getString = function(device,param) {
	return null;
};
lime.audio.openal.ALC.makeContextCurrent = function(context) {
	return false;
};
lime.audio.openal.ALC.openDevice = function(deviceName) {
	return null;
};
lime.audio.openal.ALC.processContext = function(context) {
};
lime.audio.openal.ALC.suspendContext = function(context) {
};
lime.audio.openal._ALContext = {};
lime.audio.openal._ALContext.ALContext_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime.audio.openal._ALContext.ALContext_Impl_;
lime.audio.openal._ALContext.ALContext_Impl_.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime.audio.openal._ALContext.ALContext_Impl_._new = function(handle) {
	return handle;
};
lime.audio.openal._ALDevice = {};
lime.audio.openal._ALDevice.ALDevice_Impl_ = function() { };
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime.audio.openal._ALDevice.ALDevice_Impl_;
lime.audio.openal._ALDevice.ALDevice_Impl_.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime.audio.openal._ALDevice.ALDevice_Impl_._new = function(handle) {
	return handle;
};
lime.graphics.ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime.graphics.ConsoleRenderContext;
lime.graphics.ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime.graphics.ConsoleRenderContext.prototype = {
	clear: function() {
	}
	,clearColor: function(r,g,b,a) {
	}
	,clearDepth: function(depth) {
	}
	,clearStencil: function(stencil) {
	}
	,__class__: lime.graphics.ConsoleRenderContext
};
lime.graphics.FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime.graphics.FlashRenderContext;
lime.graphics.FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime.graphics.FlashRenderContext.prototype = {
	addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime.graphics.FlashRenderContext
};
lime.graphics.GlyphRect = function(x,y,width,height,xOffset,yOffset) {
	if(yOffset == null) yOffset = 0;
	if(xOffset == null) xOffset = 0;
	this.x = x;
	this.y = y;
	this.xOffset = xOffset;
	this.yOffset = yOffset;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.graphics.GlyphRect"] = lime.graphics.GlyphRect;
lime.graphics.GlyphRect.__name__ = ["lime","graphics","GlyphRect"];
lime.graphics.GlyphRect.prototype = {
	__class__: lime.graphics.GlyphRect
};
lime.graphics.Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime.app.Application.__instance != null && lime.app.Application.__instance.windows[0] != null && lime.app.Application.__instance.windows[0].currentRenderer != null) {
			var _g = lime.app.Application.__instance.windows[0].currentRenderer.context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime.graphics.ImageType.CANVAS;
				break;
			case 3:
				this.type = lime.graphics.ImageType.FLASH;
				break;
			default:
				this.type = lime.graphics.ImageType.DATA;
			}
		} else this.type = lime.graphics.ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime.graphics.ImageBuffer(null,width,height);
				lime.graphics.utils.ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime.graphics.ImageBuffer(new Uint8Array(width * height * 4),width,height);
				if(color != null) this.fillRect(new lime.math.Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime.graphics.Image;
lime.graphics.Image.__name__ = ["lime","graphics","Image"];
lime.graphics.Image.__base64Encoder = null;
lime.graphics.Image.fromBase64 = function(base64,type,onload) {
	var image = new lime.graphics.Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime.graphics.Image.fromBitmapData = function(bitmapData) {
	var buffer = new lime.graphics.ImageBuffer(null,bitmapData.width,bitmapData.height);
	buffer.__srcBitmapData = bitmapData;
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromBytes = function(bytes,onload) {
	var image = new lime.graphics.Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime.graphics.Image.fromCanvas = function(canvas) {
	var buffer = new lime.graphics.ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.fromFile = function(path,onload,onerror) {
	var image = new lime.graphics.Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime.graphics.Image.fromImageElement = function(image) {
	var buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime.graphics.Image(buffer);
};
lime.graphics.Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime.graphics.Image.__base64Encoder == null) lime.graphics.Image.__base64Encoder = new haxe.crypto.BaseCode(haxe.io.Bytes.ofString(lime.graphics.Image.__base64Chars));
	return lime.graphics.Image.__base64Encoder.encodeBytes(haxe.io.Bytes.ofData(bytes.byteView)).toString() + extension;
};
lime.graphics.Image.__isJPG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 255 && bytes.readUnsignedByte() == 216;
};
lime.graphics.Image.__isPNG = function(bytes) {
	bytes.position = 0;
	return bytes.readUnsignedByte() == 137 && bytes.readUnsignedByte() == 80 && bytes.readUnsignedByte() == 78 && bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 13 && bytes.readUnsignedByte() == 10 && bytes.readUnsignedByte() == 26 && bytes.readUnsignedByte() == 10;
};
lime.graphics.Image.__isGIF = function(bytes) {
	bytes.position = 0;
	if(bytes.readUnsignedByte() == 71 && bytes.readUnsignedByte() == 73 && bytes.readUnsignedByte() == 70 && bytes.readUnsignedByte() == 56) {
		var b = bytes.readUnsignedByte();
		return (b == 55 || b == 57) && bytes.readUnsignedByte() == 97;
	}
	return false;
};
lime.graphics.Image.prototype = {
	clone: function() {
		lime.graphics.utils.ImageCanvasUtil.sync(this);
		var image = new lime.graphics.Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		return image;
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime.graphics.ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		return null;
	}
	,fillRect: function(rect,color) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.fillRect(this,rect,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.fillRect(this,rect,color);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),color);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.floodFill(this,x,y,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.floodFill(this,x,y,color);
			break;
		case 2:
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,getPixel: function(x,y) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel(this,x,y);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel(this,x,y);
		case 2:
			return this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixel32(this,x,y);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixel32(this,x,y);
		case 2:
			return this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
		default:
			return 0;
		}
	}
	,getPixels: function(rect) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime.graphics.utils.ImageCanvasUtil.getPixels(this,rect);
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			return lime.graphics.utils.ImageDataUtil.getPixels(this,rect);
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.getPixels(rect.__toFlashRectangle());
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageCanvasUtil.convertToData(sourceImage);
			lime.graphics.utils.ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return null;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime.graphics.utils.ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,setPixel: function(x,y,color) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel(this,x,y,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel(this,x,y,color);
			break;
		case 2:
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,color);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixel32(this,x,y,color);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixel32(this,x,y,color);
			break;
		case 2:
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,color);
			break;
		default:
		}
	}
	,setPixels: function(rect,byteArray) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.setPixels(this,rect,byteArray);
			break;
		case 1:
			lime.graphics.utils.ImageCanvasUtil.convertToData(this);
			lime.graphics.utils.ImageDataUtil.setPixels(this,rect,byteArray);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.setPixels(rect.__toFlashRectangle(),byteArray);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime.graphics.Image.__isPNG(bytes)) type = "image/png"; else if(lime.graphics.Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime.graphics.Image.__isGIF(bytes)) type = "image/gif"; else throw "Image tried to read a PNG/JPG ByteArray, but found an invalid header.";
		this.__fromBase64(lime.graphics.Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.onload = function(_) {
			_g.buffer = new lime.graphics.ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == 0) this.width = buffer.width;
			if(this.height == 0) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this);
			lime.graphics.utils.ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime.graphics.utils.ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime.graphics.utils.ImageCanvasUtil.convertToData(this);
				lime.graphics.utils.ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime.math.Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		return this.buffer.transparent = value;
	}
	,__class__: lime.graphics.Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_data:"set_data",get_data:"get_data"}
};
lime.graphics.ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : true, __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime.graphics.ImageChannel.RED = ["RED",0];
lime.graphics.ImageChannel.RED.toString = $estr;
lime.graphics.ImageChannel.RED.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.GREEN = ["GREEN",1];
lime.graphics.ImageChannel.GREEN.toString = $estr;
lime.graphics.ImageChannel.GREEN.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.BLUE = ["BLUE",2];
lime.graphics.ImageChannel.BLUE.toString = $estr;
lime.graphics.ImageChannel.BLUE.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageChannel.ALPHA = ["ALPHA",3];
lime.graphics.ImageChannel.ALPHA.toString = $estr;
lime.graphics.ImageChannel.ALPHA.__enum__ = lime.graphics.ImageChannel;
lime.graphics.ImageBuffer = function(data,width,height,bitsPerPixel) {
	if(bitsPerPixel == null) bitsPerPixel = 4;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime.graphics.ImageBuffer;
lime.graphics.ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime.graphics.ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime.graphics.ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		buffer.set_src(this.get_src());
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js.Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js.Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,__class__: lime.graphics.ImageBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
lime.graphics.ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : true, __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime.graphics.ImageType.CANVAS = ["CANVAS",0];
lime.graphics.ImageType.CANVAS.toString = $estr;
lime.graphics.ImageType.CANVAS.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.DATA = ["DATA",1];
lime.graphics.ImageType.DATA.toString = $estr;
lime.graphics.ImageType.DATA.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.FLASH = ["FLASH",2];
lime.graphics.ImageType.FLASH.toString = $estr;
lime.graphics.ImageType.FLASH.__enum__ = lime.graphics.ImageType;
lime.graphics.ImageType.CUSTOM = ["CUSTOM",3];
lime.graphics.ImageType.CUSTOM.toString = $estr;
lime.graphics.ImageType.CUSTOM.__enum__ = lime.graphics.ImageType;
lime.graphics.RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : true, __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CONSOLE","CUSTOM"] };
lime.graphics.RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",4,context]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",5,data]; $x.__enum__ = lime.graphics.RenderContext; $x.toString = $estr; return $x; };
lime.graphics.Renderer = function(window) {
	this.window = window;
	this.backend = new lime._backend.html5.HTML5Renderer(this);
	this.window.currentRenderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime.graphics.Renderer;
lime.graphics.Renderer.__name__ = ["lime","graphics","Renderer"];
lime.graphics.Renderer.render = function() {
	lime._backend.html5.HTML5Renderer.render();
};
lime.graphics.Renderer.prototype = {
	create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,__class__: lime.graphics.Renderer
};
lime.graphics.format = {};
lime.graphics.format.BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime.graphics.format.BMP;
lime.graphics.format.BMP.__name__ = ["lime","graphics","format","BMP"];
lime.graphics.format.BMP.encode = function(image,type) {
	if(type == null) type = lime.graphics.format.BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	default:
	}
	var data = new lime.utils.ByteArray(fileHeaderLength + infoHeaderLength + pixelValuesLength);
	if(fileHeaderLength > 0) {
		data.writeByte(66);
		data.writeByte(77);
		data.writeInt(data.length);
		data.writeInt(0);
		data.writeInt(fileHeaderLength + infoHeaderLength);
	}
	data.writeInt(infoHeaderLength);
	data.writeInt(image.width);
	if(type == lime.graphics.format.BMPType.ICO) data.writeInt(image.height * 2); else data.writeInt(image.height);
	data.writeShort(1);
	data.writeShort(32);
	switch(type[1]) {
	case 1:
		data.writeInt(3);
		break;
	default:
		data.writeInt(0);
	}
	data.writeInt(pixelValuesLength);
	data.writeInt(11824);
	data.writeInt(11824);
	data.writeInt(0);
	data.writeInt(0);
	if(type == lime.graphics.format.BMPType.BITFIELD) {
		data.writeInt(16711680);
		data.writeInt(65280);
		data.writeInt(255);
		data.writeInt(-16777216);
		data.writeByte(32);
		data.writeByte(110);
		data.writeByte(105);
		data.writeByte(87);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
		data.writeInt(0);
	}
	var pixels = image.getPixels(new lime.math.Rectangle(0,0,image.width,image.height));
	var a;
	var r;
	var g;
	var b;
	if(type != lime.graphics.format.BMPType.ICO) {
		var _g1 = 0;
		var _g = image.height;
		while(_g1 < _g) {
			var y = _g1++;
			pixels.position = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g2 = image.width;
			while(_g3 < _g2) {
				var x = _g3++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
			}
		}
	} else {
		var andMask = new lime.utils.ByteArray(image.width * image.height);
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			pixels.position = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g21 = image.width;
			while(_g31 < _g21) {
				var x1 = _g31++;
				a = pixels.readByte();
				r = pixels.readByte();
				g = pixels.readByte();
				b = pixels.readByte();
				data.writeByte(b);
				data.writeByte(g);
				data.writeByte(r);
				data.writeByte(a);
				andMask.writeByte(0);
			}
		}
		data.writeBytes(andMask);
	}
	return data;
};
lime.graphics.format.BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : true, __constructs__ : ["RGB","BITFIELD","ICO"] };
lime.graphics.format.BMPType.RGB = ["RGB",0];
lime.graphics.format.BMPType.RGB.toString = $estr;
lime.graphics.format.BMPType.RGB.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.BITFIELD = ["BITFIELD",1];
lime.graphics.format.BMPType.BITFIELD.toString = $estr;
lime.graphics.format.BMPType.BITFIELD.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.BMPType.ICO = ["ICO",2];
lime.graphics.format.BMPType.ICO.toString = $estr;
lime.graphics.format.BMPType.ICO.__enum__ = lime.graphics.format.BMPType;
lime.graphics.format.JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime.graphics.format.JPEG;
lime.graphics.format.JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime.graphics.format.JPEG.encode = function(image,quality) {
	return null;
};
lime.graphics.format.PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime.graphics.format.PNG;
lime.graphics.format.PNG.__name__ = ["lime","graphics","format","PNG"];
lime.graphics.format.PNG.encode = function(image) {
	return null;
};
lime.graphics.opengl = {};
lime.graphics.opengl.GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime.graphics.opengl.GL;
lime.graphics.opengl.GL.__name__ = ["lime","graphics","opengl","GL"];
lime.graphics.opengl.GL.__properties__ = {get_version:"get_version"}
lime.graphics.opengl.GL.version = null;
lime.graphics.opengl.GL.context = null;
lime.graphics.opengl.GL.activeTexture = function(texture) {
	lime.graphics.opengl.GL.context.activeTexture(texture);
};
lime.graphics.opengl.GL.attachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.attachShader(program,shader);
};
lime.graphics.opengl.GL.bindAttribLocation = function(program,index,name) {
	lime.graphics.opengl.GL.context.bindAttribLocation(program,index,name);
};
lime.graphics.opengl.GL.bindBuffer = function(target,buffer) {
	lime.graphics.opengl.GL.context.bindBuffer(target,buffer);
};
lime.graphics.opengl.GL.bindFramebuffer = function(target,framebuffer) {
	lime.graphics.opengl.GL.context.bindFramebuffer(target,framebuffer);
};
lime.graphics.opengl.GL.bindRenderbuffer = function(target,renderbuffer) {
	lime.graphics.opengl.GL.context.bindRenderbuffer(target,renderbuffer);
};
lime.graphics.opengl.GL.bindTexture = function(target,texture) {
	lime.graphics.opengl.GL.context.bindTexture(target,texture);
};
lime.graphics.opengl.GL.blendColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.blendColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.blendEquation = function(mode) {
	lime.graphics.opengl.GL.context.blendEquation(mode);
};
lime.graphics.opengl.GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime.graphics.opengl.GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime.graphics.opengl.GL.blendFunc = function(sfactor,dfactor) {
	lime.graphics.opengl.GL.context.blendFunc(sfactor,dfactor);
};
lime.graphics.opengl.GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime.graphics.opengl.GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime.graphics.opengl.GL.bufferData = function(target,data,usage) {
	lime.graphics.opengl.GL.context.bufferData(target,data,usage);
};
lime.graphics.opengl.GL.bufferSubData = function(target,offset,data) {
	lime.graphics.opengl.GL.context.bufferSubData(target,offset,data);
};
lime.graphics.opengl.GL.checkFramebufferStatus = function(target) {
	return lime.graphics.opengl.GL.context.checkFramebufferStatus(target);
};
lime.graphics.opengl.GL.clear = function(mask) {
	lime.graphics.opengl.GL.context.clear(mask);
};
lime.graphics.opengl.GL.clearColor = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
};
lime.graphics.opengl.GL.clearDepth = function(depth) {
	lime.graphics.opengl.GL.context.clearDepth(depth);
};
lime.graphics.opengl.GL.clearStencil = function(s) {
	lime.graphics.opengl.GL.context.clearStencil(s);
};
lime.graphics.opengl.GL.colorMask = function(red,green,blue,alpha) {
	lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
};
lime.graphics.opengl.GL.compileShader = function(shader) {
	lime.graphics.opengl.GL.context.compileShader(shader);
};
lime.graphics.opengl.GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime.graphics.opengl.GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime.graphics.opengl.GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime.graphics.opengl.GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime.graphics.opengl.GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime.graphics.opengl.GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime.graphics.opengl.GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime.graphics.opengl.GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime.graphics.opengl.GL.createBuffer = function() {
	return lime.graphics.opengl.GL.context.createBuffer();
};
lime.graphics.opengl.GL.createFramebuffer = function() {
	return lime.graphics.opengl.GL.context.createFramebuffer();
};
lime.graphics.opengl.GL.createProgram = function() {
	return lime.graphics.opengl.GL.context.createProgram();
};
lime.graphics.opengl.GL.createRenderbuffer = function() {
	return lime.graphics.opengl.GL.context.createRenderbuffer();
};
lime.graphics.opengl.GL.createShader = function(type) {
	return lime.graphics.opengl.GL.context.createShader(type);
};
lime.graphics.opengl.GL.createTexture = function() {
	return lime.graphics.opengl.GL.context.createTexture();
};
lime.graphics.opengl.GL.cullFace = function(mode) {
	lime.graphics.opengl.GL.context.cullFace(mode);
};
lime.graphics.opengl.GL.deleteBuffer = function(buffer) {
	lime.graphics.opengl.GL.context.deleteBuffer(buffer);
};
lime.graphics.opengl.GL.deleteFramebuffer = function(framebuffer) {
	lime.graphics.opengl.GL.context.deleteFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.deleteProgram = function(program) {
	lime.graphics.opengl.GL.context.deleteProgram(program);
};
lime.graphics.opengl.GL.deleteRenderbuffer = function(renderbuffer) {
	lime.graphics.opengl.GL.context.deleteRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.deleteShader = function(shader) {
	lime.graphics.opengl.GL.context.deleteShader(shader);
};
lime.graphics.opengl.GL.deleteTexture = function(texture) {
	lime.graphics.opengl.GL.context.deleteTexture(texture);
};
lime.graphics.opengl.GL.depthFunc = function(func) {
	lime.graphics.opengl.GL.context.depthFunc(func);
};
lime.graphics.opengl.GL.depthMask = function(flag) {
	lime.graphics.opengl.GL.context.depthMask(flag);
};
lime.graphics.opengl.GL.depthRange = function(zNear,zFar) {
	lime.graphics.opengl.GL.context.depthRange(zNear,zFar);
};
lime.graphics.opengl.GL.detachShader = function(program,shader) {
	lime.graphics.opengl.GL.context.detachShader(program,shader);
};
lime.graphics.opengl.GL.disable = function(cap) {
	lime.graphics.opengl.GL.context.disable(cap);
};
lime.graphics.opengl.GL.disableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.disableVertexAttribArray(index);
};
lime.graphics.opengl.GL.drawArrays = function(mode,first,count) {
	lime.graphics.opengl.GL.context.drawArrays(mode,first,count);
};
lime.graphics.opengl.GL.drawElements = function(mode,count,type,offset) {
	lime.graphics.opengl.GL.context.drawElements(mode,count,type,offset);
};
lime.graphics.opengl.GL.enable = function(cap) {
	lime.graphics.opengl.GL.context.enable(cap);
};
lime.graphics.opengl.GL.enableVertexAttribArray = function(index) {
	lime.graphics.opengl.GL.context.enableVertexAttribArray(index);
};
lime.graphics.opengl.GL.finish = function() {
	lime.graphics.opengl.GL.context.finish();
};
lime.graphics.opengl.GL.flush = function() {
	lime.graphics.opengl.GL.context.flush();
};
lime.graphics.opengl.GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime.graphics.opengl.GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime.graphics.opengl.GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime.graphics.opengl.GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime.graphics.opengl.GL.frontFace = function(mode) {
	lime.graphics.opengl.GL.context.frontFace(mode);
};
lime.graphics.opengl.GL.generateMipmap = function(target) {
	lime.graphics.opengl.GL.context.generateMipmap(target);
};
lime.graphics.opengl.GL.getActiveAttrib = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveAttrib(program,index);
};
lime.graphics.opengl.GL.getActiveUniform = function(program,index) {
	return lime.graphics.opengl.GL.context.getActiveUniform(program,index);
};
lime.graphics.opengl.GL.getAttachedShaders = function(program) {
	return lime.graphics.opengl.GL.context.getAttachedShaders(program);
};
lime.graphics.opengl.GL.getAttribLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getAttribLocation(program,name);
};
lime.graphics.opengl.GL.getBufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getBufferParameter(target,pname);
};
lime.graphics.opengl.GL.getContextAttributes = function() {
	return lime.graphics.opengl.GL.context.getContextAttributes();
};
lime.graphics.opengl.GL.getError = function() {
	return lime.graphics.opengl.GL.context.getError();
};
lime.graphics.opengl.GL.getExtension = function(name) {
	return lime.graphics.opengl.GL.context.getExtension(name);
};
lime.graphics.opengl.GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime.graphics.opengl.GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime.graphics.opengl.GL.getParameter = function(pname) {
	return lime.graphics.opengl.GL.context.getParameter(pname);
};
lime.graphics.opengl.GL.getProgramInfoLog = function(program) {
	return lime.graphics.opengl.GL.context.getProgramInfoLog(program);
};
lime.graphics.opengl.GL.getProgramParameter = function(program,pname) {
	return lime.graphics.opengl.GL.context.getProgramParameter(program,pname);
};
lime.graphics.opengl.GL.getRenderbufferParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getRenderbufferParameter(target,pname);
};
lime.graphics.opengl.GL.getShaderInfoLog = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderInfoLog(shader);
};
lime.graphics.opengl.GL.getShaderParameter = function(shader,pname) {
	return lime.graphics.opengl.GL.context.getShaderParameter(shader,pname);
};
lime.graphics.opengl.GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime.graphics.opengl.GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime.graphics.opengl.GL.getShaderSource = function(shader) {
	return lime.graphics.opengl.GL.context.getShaderSource(shader);
};
lime.graphics.opengl.GL.getSupportedExtensions = function() {
	return lime.graphics.opengl.GL.context.getSupportedExtensions();
};
lime.graphics.opengl.GL.getTexParameter = function(target,pname) {
	return lime.graphics.opengl.GL.context.getTexParameter(target,pname);
};
lime.graphics.opengl.GL.getUniform = function(program,location) {
	return lime.graphics.opengl.GL.context.getUniform(program,location);
};
lime.graphics.opengl.GL.getUniformLocation = function(program,name) {
	return lime.graphics.opengl.GL.context.getUniformLocation(program,name);
};
lime.graphics.opengl.GL.getVertexAttrib = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttrib(index,pname);
};
lime.graphics.opengl.GL.getVertexAttribOffset = function(index,pname) {
	return lime.graphics.opengl.GL.context.getVertexAttribOffset(index,pname);
};
lime.graphics.opengl.GL.hint = function(target,mode) {
	lime.graphics.opengl.GL.context.hint(target,mode);
};
lime.graphics.opengl.GL.isBuffer = function(buffer) {
	return lime.graphics.opengl.GL.context.isBuffer(buffer);
};
lime.graphics.opengl.GL.isContextLost = function() {
	return lime.graphics.opengl.GL.context.isContextLost();
};
lime.graphics.opengl.GL.isEnabled = function(cap) {
	return lime.graphics.opengl.GL.context.isEnabled(cap);
};
lime.graphics.opengl.GL.isFramebuffer = function(framebuffer) {
	return lime.graphics.opengl.GL.context.isFramebuffer(framebuffer);
};
lime.graphics.opengl.GL.isProgram = function(program) {
	return lime.graphics.opengl.GL.context.isProgram(program);
};
lime.graphics.opengl.GL.isRenderbuffer = function(renderbuffer) {
	return lime.graphics.opengl.GL.context.isRenderbuffer(renderbuffer);
};
lime.graphics.opengl.GL.isShader = function(shader) {
	return lime.graphics.opengl.GL.context.isShader(shader);
};
lime.graphics.opengl.GL.isTexture = function(texture) {
	return lime.graphics.opengl.GL.context.isTexture(texture);
};
lime.graphics.opengl.GL.lineWidth = function(width) {
	lime.graphics.opengl.GL.context.lineWidth(width);
};
lime.graphics.opengl.GL.linkProgram = function(program) {
	lime.graphics.opengl.GL.context.linkProgram(program);
};
lime.graphics.opengl.GL.pixelStorei = function(pname,param) {
	lime.graphics.opengl.GL.context.pixelStorei(pname,param);
};
lime.graphics.opengl.GL.polygonOffset = function(factor,units) {
	lime.graphics.opengl.GL.context.polygonOffset(factor,units);
};
lime.graphics.opengl.GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime.graphics.opengl.GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime.graphics.opengl.GL.sampleCoverage = function(value,invert) {
	lime.graphics.opengl.GL.context.sampleCoverage(value,invert);
};
lime.graphics.opengl.GL.scissor = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.scissor(x,y,width,height);
};
lime.graphics.opengl.GL.shaderSource = function(shader,source) {
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
};
lime.graphics.opengl.GL.stencilFunc = function(func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFunc(func,ref,mask);
};
lime.graphics.opengl.GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime.graphics.opengl.GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime.graphics.opengl.GL.stencilMask = function(mask) {
	lime.graphics.opengl.GL.context.stencilMask(mask);
};
lime.graphics.opengl.GL.stencilMaskSeparate = function(face,mask) {
	lime.graphics.opengl.GL.context.stencilMaskSeparate(face,mask);
};
lime.graphics.opengl.GL.stencilOp = function(fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOp(fail,zfail,zpass);
};
lime.graphics.opengl.GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime.graphics.opengl.GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime.graphics.opengl.GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime.graphics.opengl.GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime.graphics.opengl.GL.texParameterf = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameterf(target,pname,param);
};
lime.graphics.opengl.GL.texParameteri = function(target,pname,param) {
	lime.graphics.opengl.GL.context.texParameteri(target,pname,param);
};
lime.graphics.opengl.GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime.graphics.opengl.GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime.graphics.opengl.GL.uniform1f = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1f(location,x);
};
lime.graphics.opengl.GL.uniform1fv = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1fv(location,x);
};
lime.graphics.opengl.GL.uniform1i = function(location,x) {
	lime.graphics.opengl.GL.context.uniform1i(location,x);
};
lime.graphics.opengl.GL.uniform1iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform1iv(location,v);
};
lime.graphics.opengl.GL.uniform2f = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2f(location,x,y);
};
lime.graphics.opengl.GL.uniform2fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2fv(location,v);
};
lime.graphics.opengl.GL.uniform2i = function(location,x,y) {
	lime.graphics.opengl.GL.context.uniform2i(location,x,y);
};
lime.graphics.opengl.GL.uniform2iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform2iv(location,v);
};
lime.graphics.opengl.GL.uniform3f = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3f(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3fv(location,v);
};
lime.graphics.opengl.GL.uniform3i = function(location,x,y,z) {
	lime.graphics.opengl.GL.context.uniform3i(location,x,y,z);
};
lime.graphics.opengl.GL.uniform3iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform3iv(location,v);
};
lime.graphics.opengl.GL.uniform4f = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4f(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4fv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4fv(location,v);
};
lime.graphics.opengl.GL.uniform4i = function(location,x,y,z,w) {
	lime.graphics.opengl.GL.context.uniform4i(location,x,y,z,w);
};
lime.graphics.opengl.GL.uniform4iv = function(location,v) {
	lime.graphics.opengl.GL.context.uniform4iv(location,v);
};
lime.graphics.opengl.GL.uniformMatrix2fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix2fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix3fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix3fv(location,transpose,v);
};
lime.graphics.opengl.GL.uniformMatrix4fv = function(location,transpose,v) {
	lime.graphics.opengl.GL.context.uniformMatrix4fv(location,transpose,v);
};
lime.graphics.opengl.GL.useProgram = function(program) {
	lime.graphics.opengl.GL.context.useProgram(program);
};
lime.graphics.opengl.GL.validateProgram = function(program) {
	lime.graphics.opengl.GL.context.validateProgram(program);
};
lime.graphics.opengl.GL.vertexAttrib1f = function(indx,x) {
	lime.graphics.opengl.GL.context.vertexAttrib1f(indx,x);
};
lime.graphics.opengl.GL.vertexAttrib1fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib1fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib2f = function(indx,x,y) {
	lime.graphics.opengl.GL.context.vertexAttrib2f(indx,x,y);
};
lime.graphics.opengl.GL.vertexAttrib2fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib2fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib3f = function(indx,x,y,z) {
	lime.graphics.opengl.GL.context.vertexAttrib3f(indx,x,y,z);
};
lime.graphics.opengl.GL.vertexAttrib3fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib3fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime.graphics.opengl.GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime.graphics.opengl.GL.vertexAttrib4fv = function(indx,values) {
	lime.graphics.opengl.GL.context.vertexAttrib4fv(indx,values);
};
lime.graphics.opengl.GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime.graphics.opengl.GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime.graphics.opengl.GL.viewport = function(x,y,width,height) {
	lime.graphics.opengl.GL.context.viewport(x,y,width,height);
};
lime.graphics.opengl.GL.get_version = function() {
	return 2;
};
lime.graphics.utils = {};
lime.graphics.utils.ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime.graphics.utils.ImageCanvasUtil;
lime.graphics.utils.ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime.graphics.utils.ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime.graphics.utils.ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime.graphics.utils.ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime.graphics.utils.ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime.graphics.utils.ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime.graphics.utils.ImageCanvasUtil.sync(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
};
lime.graphics.utils.ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.webkitImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime.graphics.utils.ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.data == null) {
		buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		buffer.data = buffer.__srcImageData.data;
	}
};
lime.graphics.utils.ImageCanvasUtil.fillRect = function(image,rect,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.sync(image);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & -16777216) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime.graphics.utils.ImageCanvasUtil.floodFill = function(image,x,y,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.floodFill(image,x,y,color);
};
lime.graphics.utils.ImageCanvasUtil.getPixel = function(image,x,y) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel(image,x,y);
};
lime.graphics.utils.ImageCanvasUtil.getPixel32 = function(image,x,y) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixel32(image,x,y);
};
lime.graphics.utils.ImageCanvasUtil.getPixels = function(image,rect) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	return lime.graphics.utils.ImageDataUtil.getPixels(image,rect);
};
lime.graphics.utils.ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.createImageData(sourceImage);
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime.graphics.utils.ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime.graphics.utils.ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime.graphics.utils.ImageCanvasUtil.setPixel = function(image,x,y,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel(image,x,y,color);
};
lime.graphics.utils.ImageCanvasUtil.setPixel32 = function(image,x,y,color) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixel32(image,x,y,color);
};
lime.graphics.utils.ImageCanvasUtil.setPixels = function(image,rect,byteArray) {
	lime.graphics.utils.ImageCanvasUtil.convertToCanvas(image);
	lime.graphics.utils.ImageCanvasUtil.createImageData(image);
	lime.graphics.utils.ImageDataUtil.setPixels(image,rect,byteArray);
};
lime.graphics.utils.ImageCanvasUtil.sync = function(image) {
	if(image.dirty && image.type != lime.graphics.ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
};
lime.graphics.utils.ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime.graphics.utils.ImageDataUtil;
lime.graphics.utils.ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime.graphics.utils.ImageDataUtil.__alpha16 = null;
lime.graphics.utils.ImageDataUtil.__clamp = null;
lime.graphics.utils.ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset;
	var rowStart = Std["int"](rect.get_top() + image.offsetY);
	var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
	var columnStart = Std["int"](rect.get_left() + image.offsetX);
	var columnEnd = Std["int"](rect.get_right() + image.offsetX);
	var r;
	var g;
	var b;
	var a;
	var ex = 0;
	var _g = rowStart;
	while(_g < rowEnd) {
		var row = _g++;
		var _g1 = columnStart;
		while(_g1 < columnEnd) {
			var column = _g1++;
			offset = row * stride + column * 4;
			a = data[offset + 3] * colorMatrix[18] + colorMatrix[19] * 255 | 0;
			if(a > 255) ex = a - 255; else ex = 0;
			b = data[offset + 2] * colorMatrix[12] + colorMatrix[14] * 255 + ex | 0;
			if(b > 255) ex = b - 255; else ex = 0;
			g = data[offset + 1] * colorMatrix[6] + colorMatrix[9] * 255 + ex | 0;
			if(g > 255) ex = g - 255; else ex = 0;
			r = data[offset] * colorMatrix[0] + colorMatrix[4] * 255 + ex | 0;
			if(r > 255) data[offset] = 255; else data[offset] = r;
			if(g > 255) data[offset + 1] = 255; else data[offset + 1] = g;
			if(b > 255) data[offset + 2] = 255; else data[offset + 2] = b;
			if(a > 255) data[offset + 3] = 255; else data[offset + 3] = a;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcStride = sourceImage.buffer.width * 4 | 0;
	var srcPosition = (sourceRect.x + sourceImage.offsetX) * 4 + srcStride * (sourceRect.y + sourceImage.offsetY) + srcIdx | 0;
	var srcRowOffset = srcStride - (4 * (sourceRect.width + sourceImage.offsetX) | 0);
	var srcRowEnd = 4 * (sourceRect.x + sourceImage.offsetX + sourceRect.width) | 0;
	var srcData = sourceImage.buffer.data;
	var destStride = image.buffer.width * 4 | 0;
	var destPosition = (destPoint.x + image.offsetX) * 4 + destStride * (destPoint.y + image.offsetY) + destIdx | 0;
	var destRowOffset = destStride - (4 * (sourceRect.width + image.offsetX) | 0);
	var destRowEnd = 4 * (destPoint.x + image.offsetX + sourceRect.width) | 0;
	var destData = image.buffer.data;
	var length = sourceRect.width * sourceRect.height | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		destData[destPosition] = srcData[srcPosition];
		srcPosition += 4;
		destPosition += 4;
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
		if(destPosition % destStride > destRowEnd) destPosition += destRowOffset;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime.math.Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime.math.Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime.math.Vector2(sourceRect.x,sourceRect.y),lime.graphics.ImageChannel.ALPHA,lime.graphics.ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
				data[offset] = sourceData[sourceOffset];
				data[offset + 1] = sourceData[sourceOffset + 1];
				data[offset + 2] = sourceData[sourceOffset + 2];
				data[offset + 3] = sourceData[sourceOffset + 3];
			}
		}
	} else {
		var sourceAlpha;
		var oneMinusSourceAlpha;
		var _g11 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
		var _g4 = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
		while(_g11 < _g4) {
			var row1 = _g11++;
			var _g31 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
			var _g21 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
			while(_g31 < _g21) {
				var column1 = _g31++;
				sourceOffset = row1 * sourceStride + column1 * 4;
				offset = (row1 + rowOffset) * stride + (column1 + columnOffset) * 4;
				sourceAlpha = sourceData[sourceOffset + 3] / 255;
				oneMinusSourceAlpha = 1 - sourceAlpha;
				data[offset] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset] + data[offset] * oneMinusSourceAlpha | 0];
				data[offset + 1] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 1] + data[offset + 1] * oneMinusSourceAlpha | 0];
				data[offset + 2] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 2] + data[offset + 2] * oneMinusSourceAlpha | 0];
				data[offset + 3] = lime.graphics.utils.ImageDataUtil.__clamp[sourceData[sourceOffset + 3] + data[offset + 3] * oneMinusSourceAlpha | 0];
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.fillRect = function(image,rect,color) {
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	var rgba = r | g << 8 | b << 16 | a << 24;
	var data = image.buffer.data;
	if(rect.width == image.buffer.width && rect.height == image.buffer.height && rect.x == 0 && rect.y == 0 && image.offsetX == 0 && image.offsetY == 0) {
		var length = image.buffer.width * image.buffer.height;
		var j = 0;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			j = i * 4;
			data[j] = r;
			data[j + 1] = g;
			data[j + 2] = b;
			data[j + 3] = a;
		}
	} else {
		var stride = image.buffer.width * 4;
		var offset;
		var rowStart = rect.y + image.offsetY | 0;
		var rowEnd = Std["int"](rect.get_bottom() + image.offsetY);
		var columnStart = rect.x + image.offsetX | 0;
		var columnEnd = Std["int"](rect.get_right() + image.offsetX);
		var _g1 = rowStart;
		while(_g1 < rowEnd) {
			var row = _g1++;
			var _g11 = columnStart;
			while(_g11 < columnEnd) {
				var column = _g11++;
				offset = row * stride + column * 4;
				data[offset] = r;
				data[offset + 1] = g;
				data[offset + 2] = b;
				data[offset + 3] = a;
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.floodFill = function(image,x,y,color) {
	var data = image.buffer.data;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	var hitColorR = data[offset];
	var hitColorG = data[offset + 1];
	var hitColorB = data[offset + 2];
	var hitColorA;
	if(image.get_transparent()) hitColorA = data[offset + 3]; else hitColorA = 255;
	var r = (color & 16711680) >>> 16;
	var g = (color & 65280) >>> 8;
	var b = color & 255;
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	if(hitColorR == r && hitColorG == g && hitColorB == b && hitColorA == a) return;
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = new Array();
	queue.push(x);
	queue.push(y);
	while(queue.length > 0) {
		var curPointY = queue.pop();
		var curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var nextPointX = curPointX + dx[i];
			var nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			var nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			if(data[nextPointOffset] == hitColorR && data[nextPointOffset + 1] == hitColorG && data[nextPointOffset + 2] == hitColorB && data[nextPointOffset + 3] == hitColorA) {
				data[nextPointOffset] = r;
				data[nextPointOffset + 1] = g;
				data[nextPointOffset + 2] = b;
				data[nextPointOffset + 3] = a;
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.getPixel = function(image,x,y) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.get_premultiplied()) {
		var unmultiply = 255.0 / data[offset + 3];
		haxe.Log.trace(unmultiply,{ fileName : "ImageDataUtil.hx", lineNumber : 364, className : "lime.graphics.utils.ImageDataUtil", methodName : "getPixel"});
		return lime.graphics.utils.ImageDataUtil.__clamp[data[offset] * unmultiply | 0] << 16 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 1] * unmultiply | 0] << 8 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 2] * unmultiply | 0];
	} else return data[offset] << 16 | data[offset + 1] << 8 | data[offset + 2];
};
lime.graphics.utils.ImageDataUtil.getPixel32 = function(image,x,y) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	if(image.get_transparent()) a = data[offset + 3]; else a = 255;
	if(image.get_premultiplied() && a != 0) {
		var unmultiply = 255.0 / a;
		return a << 24 | (function($this) {
			var $r;
			var index = Math.round(data[offset] * unmultiply);
			$r = lime.graphics.utils.ImageDataUtil.__clamp[index];
			return $r;
		}(this)) << 16 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 1] * unmultiply | 0] << 8 | lime.graphics.utils.ImageDataUtil.__clamp[data[offset + 2] * unmultiply | 0];
	} else return a << 24 | data[offset] << 16 | data[offset + 1] << 8 | data[offset + 2];
};
lime.graphics.utils.ImageDataUtil.getPixels = function(image,rect) {
	var byteArray = new lime.utils.ByteArray(image.width * image.height * 4);
	var srcData = image.buffer.data;
	var srcStride = image.buffer.width * 4 | 0;
	var srcPosition = rect.x * 4 + srcStride * rect.y | 0;
	var srcRowOffset = srcStride - (4 * rect.width | 0);
	var srcRowEnd = 4 * (rect.x + rect.width) | 0;
	var length = rect.width * rect.height | 0;
	byteArray.set_length(length * 4);
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		byteArray.__set(i * 4 + 1,srcData[srcPosition++]);
		byteArray.__set(i * 4 + 2,srcData[srcPosition++]);
		byteArray.__set(i * 4 + 3,srcData[srcPosition++]);
		byteArray.__set(i * 4,srcData[srcPosition++]);
		if(srcPosition % srcStride > srcRowEnd) srcPosition += srcRowOffset;
	}
	byteArray.position = 0;
	return byteArray;
};
lime.graphics.utils.ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	var rowOffset = destPoint.y + image.offsetY - sourceRect.y - sourceImage.offsetY | 0;
	var columnOffset = destPoint.x + image.offsetX - sourceRect.x - sourceImage.offsetY | 0;
	var sourceData = sourceImage.buffer.data;
	var sourceStride = sourceImage.buffer.width * 4;
	var sourceOffset = 0;
	var data = image.buffer.data;
	var stride = image.buffer.width * 4;
	var offset = 0;
	var _g1 = Std["int"](sourceRect.get_top() + sourceImage.offsetY);
	var _g = Std["int"](sourceRect.get_bottom() + sourceImage.offsetY);
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = Std["int"](sourceRect.get_left() + sourceImage.offsetX);
		var _g2 = Std["int"](sourceRect.get_right() + sourceImage.offsetX);
		while(_g3 < _g2) {
			var column = _g3++;
			sourceOffset = row * sourceStride + column * 4;
			offset = (row + rowOffset) * stride + (column + columnOffset) * 4;
			data[offset] = (sourceData[offset] * redMultiplier + data[offset] * (256 - redMultiplier)) / 256 | 0;
			data[offset + 1] = (sourceData[offset + 1] * greenMultiplier + data[offset + 1] * (256 - greenMultiplier)) / 256 | 0;
			data[offset + 2] = (sourceData[offset + 2] * blueMultiplier + data[offset + 2] * (256 - blueMultiplier)) / 256 | 0;
			data[offset + 3] = (sourceData[offset + 3] * alphaMultiplier + data[offset + 3] * (256 - alphaMultiplier)) / 256 | 0;
		}
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		var a161 = lime.graphics.utils.ImageDataUtil.__alpha16[data[index + 3]];
		data[index] = data[index] * a161 >> 16;
		data[index + 1] = data[index + 1] * a161 >> 16;
		data[index + 2] = data[index + 2] * a161 >> 16;
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var newBuffer = new lime.graphics.ImageBuffer(new Uint8Array(newWidth * newHeight * 4),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (data[sourceIndex] * uOpposite + data[sourceIndexX] * uRatio) * vOpposite + (data[sourceIndexY] * uOpposite + data[sourceIndexXY] * uRatio) * vRatio | 0;
			newData[index + 1] = (data[sourceIndex + 1] * uOpposite + data[sourceIndexX + 1] * uRatio) * vOpposite + (data[sourceIndexY + 1] * uOpposite + data[sourceIndexXY + 1] * uRatio) * vRatio | 0;
			newData[index + 2] = (data[sourceIndex + 2] * uOpposite + data[sourceIndexX + 2] * uRatio) * vOpposite + (data[sourceIndexY + 2] * uOpposite + data[sourceIndexXY + 2] * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData = new Uint8Array(newWidth * newHeight * 4);
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime.graphics.utils.ImageDataUtil.setPixel = function(image,x,y,color) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	data[offset] = (color & 16711680) >>> 16;
	data[offset + 1] = (color & 65280) >>> 8;
	data[offset + 2] = color & 255;
	if(image.get_transparent()) data[offset + 3] = 255;
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixel32 = function(image,x,y,color) {
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var a;
	if(image.get_transparent()) a = (color & -16777216) >>> 24; else a = 255;
	if(image.get_transparent() && image.get_premultiplied()) {
		var a16 = lime.graphics.utils.ImageDataUtil.__alpha16[a];
		data[offset] = ((color & 16711680) >>> 16) * a16 >> 16;
		data[offset + 1] = ((color & 65280) >>> 8) * a16 >> 16;
		data[offset + 2] = (color & 255) * a16 >> 16;
		data[offset + 3] = a;
	} else {
		data[offset] = (color & 16711680) >>> 16;
		data[offset + 1] = (color & 65280) >>> 8;
		data[offset + 2] = color & 255;
		data[offset + 3] = a;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.setPixels = function(image,rect,byteArray) {
	var len = Math.round(rect.width * rect.height);
	var data = image.buffer.data;
	var offset = Math.round(image.buffer.width * (rect.y + image.offsetX) + (rect.x + image.offsetY));
	var pos = offset * 4;
	var boundR = Math.round(rect.x + rect.width + image.offsetX);
	var width = image.buffer.width;
	var color;
	var _g = 0;
	while(_g < len) {
		var i = _g++;
		if(pos % (width * 4) >= boundR * 4) pos += (width - boundR) * 4;
		color = byteArray.readUnsignedInt();
		data[pos++] = (color & 16711680) >>> 16;
		data[pos++] = (color & 65280) >>> 8;
		data[pos++] = color & 255;
		data[pos++] = (color & -16777216) >>> 24;
	}
	image.dirty = true;
};
lime.graphics.utils.ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	var index;
	var a;
	var unmultiply;
	var length = data.length / 4 | 0;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		index = i * 4;
		a = data[index + 3];
		if(a != 0) {
			unmultiply = 255.0 / a;
			data[index] = lime.graphics.utils.ImageDataUtil.__clamp[data[index] * unmultiply | 0];
			data[index + 1] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 1] * unmultiply | 0];
			data[index + 2] = lime.graphics.utils.ImageDataUtil.__clamp[data[index + 2] * unmultiply | 0];
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
lime.math = {};
lime.math._ColorMatrix = {};
lime.math._ColorMatrix.ColorMatrix_Impl_ = function() { };
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime.math._ColorMatrix.ColorMatrix_Impl_;
lime.math._ColorMatrix.ColorMatrix_Impl_.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime.math._ColorMatrix.ColorMatrix_Impl_.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime.math._ColorMatrix.ColorMatrix_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else this1 = new Float32Array(lime.math._ColorMatrix.ColorMatrix_Impl_.__identity);
	return this1;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.clone = function(this1) {
	return lime.math._ColorMatrix.ColorMatrix_Impl_._new(new Float32Array(this1));
};
lime.math._ColorMatrix.ColorMatrix_Impl_.concat = function(this1,second) {
	var _g = this1;
	var value = _g[0] + second[0];
	_g[0] = value;
	value;
	var _g1 = this1;
	var value1 = _g1[6] + second[6];
	_g1[6] = value1;
	value1;
	var _g2 = this1;
	var value2 = _g2[12] + second[12];
	_g2[12] = value2;
	value2;
	var _g3 = this1;
	var value3 = _g3[18] + second[18];
	_g3[18] = value3;
	value3;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform = function(this1) {
	return null;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaMultiplier = function(this1,value) {
	this1[18] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaOffset = function(this1,value) {
	this1[19] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueMultiplier = function(this1,value) {
	this1[12] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueOffset = function(this1,value) {
	this1[14] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_color = function(this1,value) {
	var value1 = value >> 16 & 255;
	this1[4] = value1 / 255;
	value1;
	var value2 = value >> 8 & 255;
	this1[9] = value2 / 255;
	value2;
	var value3 = value & 255;
	this1[14] = value3 / 255;
	value3;
	this1[0] = 0;
	0;
	this1[6] = 0;
	0;
	this1[12] = 0;
	0;
	return lime.math._ColorMatrix.ColorMatrix_Impl_.get_color(this1);
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenMultiplier = function(this1,value) {
	this1[6] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenOffset = function(this1,value) {
	this1[9] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redMultiplier = function(this1) {
	return this1[0];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redMultiplier = function(this1,value) {
	this1[0] = value;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set_redOffset = function(this1,value) {
	this1[4] = value / 255;
	return value;
};
lime.math._ColorMatrix.ColorMatrix_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._ColorMatrix.ColorMatrix_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime.math.Matrix3;
lime.math.Matrix3.__name__ = ["lime","math","Matrix3"];
lime.math.Matrix3.prototype = {
	clone: function() {
		return new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime.math.Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime.math.Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime.math.Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new lime.math.Matrix3();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime.math.Matrix3
};
lime.math._Matrix4 = {};
lime.math._Matrix4.Matrix4_Impl_ = function() { };
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime.math._Matrix4.Matrix4_Impl_;
lime.math._Matrix4.Matrix4_Impl_.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime.math._Matrix4.Matrix4_Impl_.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime.math._Matrix4.Matrix4_Impl_._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else this1 = new Float32Array(lime.math._Matrix4.Matrix4_Impl_.__identity);
	return this1;
};
lime.math._Matrix4.Matrix4_Impl_.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,0);
	var m221 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,4);
	var m231 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,8);
	var m241 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,12);
	var m212 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,1);
	var m222 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,5);
	var m232 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,9);
	var m242 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,13);
	var m213 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,2);
	var m223 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,6);
	var m233 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,10);
	var m243 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,14);
	var m214 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,3);
	var m224 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,7);
	var m234 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,11);
	var m244 = lime.math._Matrix4.Matrix4_Impl_.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.append(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.appendScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.append(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime.math._Matrix4.Matrix4_Impl_.clone = function(this1) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array(this1));
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Column " + column + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyFrom = function(this1,other) {
	this1.set(other);
};
lime.math._Matrix4.Matrix4_Impl_.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime.math._Matrix4.Matrix4_Impl_.transpose(this1);
};
lime.math._Matrix4.Matrix4_Impl_.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw "Error, Row " + Std.string((function($this) {
			var $r;
			var $int = row;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this))) + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createABCD = function(a,b,c,d,tx,ty) {
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1]));
};
lime.math._Matrix4.Matrix4_Impl_.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1]));
};
lime.math._Matrix4.Matrix4_Impl_.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw "Error, Row " + row + " out of bounds [0, ..., 3]";
	}
};
lime.math._Matrix4.Matrix4_Impl_.copyToMatrix4 = function(this1,other) {
	(js.Boot.__cast(other , Float32Array)).set(this1);
};
lime.math._Matrix4.Matrix4_Impl_.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime.math._Matrix4.Matrix4_Impl_.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime.math._Matrix4.Matrix4_Impl_.interpolate = function(thisMat,toMat,percent) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime.math._Matrix4.Matrix4_Impl_.set(m,i,lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i) + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - lime.math._Matrix4.Matrix4_Impl_.get(thisMat,i)) * percent);
	}
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] = this1[i] + (lime.math._Matrix4.Matrix4_Impl_.get(toMat,i) - this1[i]) * percent;
	}
};
lime.math._Matrix4.Matrix4_Impl_.invert = function(this1) {
	var d = lime.math._Matrix4.Matrix4_Impl_.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime.math._Matrix4.Matrix4_Impl_.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime.math.Vector4(0,0,-1);
	if(up == null) up = new lime.math.Vector4(0,-1,0);
	var dir = new lime.math.Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime.math.Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime.math.Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime.math.Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime.math.Vector4(-dir.y,dir.x,0); else vup = new lime.math.Vector4(1,0,0);
	right = new lime.math.Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime.math._Matrix4.Matrix4_Impl_.prepend = function(this1,rhs) {
	var m111 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,0);
	var m121 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,4);
	var m131 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,8);
	var m141 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,12);
	var m112 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,1);
	var m122 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,5);
	var m132 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,9);
	var m142 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,13);
	var m113 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,2);
	var m123 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,6);
	var m133 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,10);
	var m143 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,14);
	var m114 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,3);
	var m124 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,7);
	var m134 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,11);
	var m144 = lime.math._Matrix4.Matrix4_Impl_.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime.math._Matrix4.Matrix4_Impl_.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime.math._Matrix4.Matrix4_Impl_.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime.math._Matrix4.Matrix4_Impl_.appendTranslation(m,p.x,p.y,p.z);
	}
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.prependScale = function(this1,xScale,yScale,zScale) {
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,lime.math._Matrix4.Matrix4_Impl_._new(new Float32Array([xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0])));
};
lime.math._Matrix4.Matrix4_Impl_.prependTranslation = function(this1,x,y,z) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	lime.math._Matrix4.Matrix4_Impl_.set_position(m,new lime.math.Vector4(x,y,z));
	lime.math._Matrix4.Matrix4_Impl_.prepend(this1,m);
};
lime.math._Matrix4.Matrix4_Impl_.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime.math.Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime.math._Matrix4.Matrix4_Impl_.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime.math._Matrix4.Matrix4_Impl_.transpose = function(this1) {
	var othis = new Float32Array(this1);
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime.math._Matrix4.Matrix4_Impl_.getAxisRotation = function(x,y,z,degrees) {
	var m = lime.math._Matrix4.Matrix4_Impl_._new();
	var a1 = new lime.math.Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime.math._Matrix4.Matrix4_Impl_.set(m,0,c + a1.x * a1.x * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,5,c + a1.y * a1.y * t);
	lime.math._Matrix4.Matrix4_Impl_.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,4,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,8,tmp1 - tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime.math._Matrix4.Matrix4_Impl_.set(m,9,tmp1 + tmp2);
	lime.math._Matrix4.Matrix4_Impl_.set(m,6,tmp1 - tmp2);
	return m;
};
lime.math._Matrix4.Matrix4_Impl_.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime.math._Matrix4.Matrix4_Impl_.get_position = function(this1) {
	return new lime.math.Vector4(this1[12],this1[13],this1[14]);
};
lime.math._Matrix4.Matrix4_Impl_.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime.math._Matrix4.Matrix4_Impl_.get = function(this1,index) {
	return this1[index];
};
lime.math._Matrix4.Matrix4_Impl_.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
lime.math.Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime.math.Rectangle;
lime.math.Rectangle.__name__ = ["lime","math","Rectangle"];
lime.math.Rectangle.prototype = {
	clone: function() {
		return new lime.math.Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime.math.Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime.math.Rectangle();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = tx0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime.math.Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime.math.Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime.math.Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime.math.Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime.math.Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
lime.math.Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime.math.Vector2;
lime.math.Vector2.__name__ = ["lime","math","Vector2"];
lime.math.Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime.math.Vector2.interpolate = function(pt1,pt2,f) {
	return new lime.math.Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime.math.Vector2.polar = function(len,angle) {
	return new lime.math.Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime.math.Vector2.prototype = {
	add: function(v) {
		return new lime.math.Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime.math.Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime.math.Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime.math.Vector2
	,__properties__: {get_length:"get_length"}
};
lime.math.Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime.math.Vector4;
lime.math.Vector4.__name__ = ["lime","math","Vector4"];
lime.math.Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime.math.Vector4.X_AXIS = null;
lime.math.Vector4.Y_AXIS = null;
lime.math.Vector4.Z_AXIS = null;
lime.math.Vector4.angleBetween = function(a,b) {
	var a0 = new lime.math.Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime.math.Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime.math.Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime.math.Vector4.get_X_AXIS = function() {
	return new lime.math.Vector4(1,0,0);
};
lime.math.Vector4.get_Y_AXIS = function() {
	return new lime.math.Vector4(0,1,0);
};
lime.math.Vector4.get_Z_AXIS = function() {
	return new lime.math.Vector4(0,0,1);
};
lime.math.Vector4.prototype = {
	add: function(a) {
		return new lime.math.Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime.math.Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime.math.Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime.math.Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime.math.Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
lime.net = {};
lime.net.URLLoader = function(request) {
	this.onSecurityError = new lime.app.Event();
	this.onProgress = new lime.app.Event();
	this.onOpen = new lime.app.Event();
	this.onIOError = new lime.app.Event();
	this.onHTTPStatus = new lime.app.Event();
	this.onComplete = new lime.app.Event();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(lime.net.URLLoaderDataFormat.TEXT);
	this.__data = "";
	this.__curl = lime.net.curl.CURLEasy.init();
	if(request != null) this.load(request);
};
$hxClasses["lime.net.URLLoader"] = lime.net.URLLoader;
lime.net.URLLoader.__name__ = ["lime","net","URLLoader"];
lime.net.URLLoader.prototype = {
	close: function() {
		lime.net.curl.CURLEasy.cleanup(this.__curl);
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var _g = this;
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.__onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) {
				var listeners = self.onHTTPStatus.listeners;
				var repeat = self.onHTTPStatus.repeat;
				var length = listeners.length;
				var i = 0;
				while(i < length) {
					listeners[i](_g,s);
					if(!repeat[i]) {
						self.onHTTPStatus.remove(listeners[i]);
						length--;
					} else i++;
				}
			}
			if(s != null && s >= 200 && s < 400) self.__onData(subject.response); else if(s == null) {
				var listeners1 = self.onIOError.listeners;
				var repeat1 = self.onIOError.repeat;
				var length1 = listeners1.length;
				var i1 = 0;
				while(i1 < length1) {
					listeners1[i1](_g,"Failed to connect or resolve host");
					if(!repeat1[i1]) {
						self.onIOError.remove(listeners1[i1]);
						length1--;
					} else i1++;
				}
			} else if(s == 12029) {
				var listeners2 = self.onIOError.listeners;
				var repeat2 = self.onIOError.repeat;
				var length2 = listeners2.length;
				var i2 = 0;
				while(i2 < length2) {
					listeners2[i2](_g,"Failed to connect to host");
					if(!repeat2[i2]) {
						self.onIOError.remove(listeners2[i2]);
						length2--;
					} else i2++;
				}
			} else if(s == 12007) {
				var listeners3 = self.onIOError.listeners;
				var repeat3 = self.onIOError.repeat;
				var length3 = listeners3.length;
				var i3 = 0;
				while(i3 < length3) {
					listeners3[i3](_g,"Unknown host");
					if(!repeat3[i3]) {
						self.onIOError.remove(listeners3[i3]);
						length3--;
					} else i3++;
				}
			} else if(s == 0) {
				var listeners4 = self.onIOError.listeners;
				var repeat4 = self.onIOError.repeat;
				var length4 = listeners4.length;
				var i4 = 0;
				while(i4 < length4) {
					listeners4[i4](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat4[i4]) {
						self.onIOError.remove(listeners4[i4]);
						length4--;
					} else i4++;
				}
				var listeners5 = self.onSecurityError.listeners;
				var repeat5 = self.onSecurityError.repeat;
				var length5 = listeners5.length;
				var i5 = 0;
				while(i5 < length5) {
					listeners5[i5](_g,"Unable to make request (may be blocked due to cross-domain permissions)");
					if(!repeat5[i5]) {
						self.onSecurityError.remove(listeners5[i5]);
						length5--;
					} else i5++;
				}
			} else {
				var listeners6 = self.onIOError.listeners;
				var repeat6 = self.onIOError.repeat;
				var length6 = listeners6.length;
				var i6 = 0;
				while(i6 < length6) {
					listeners6[i6](_g,"Http Error #" + subject.status);
					if(!repeat6[i6]) {
						self.onIOError.remove(listeners6[i6]);
						length6--;
					} else i6++;
				}
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,lime.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open("GET",url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(js.Boot.__cast(method , String),url,true);
		} catch( e ) {
			var listeners = this.onIOError.listeners;
			var repeat = this.onIOError.repeat;
			var length = listeners.length;
			var i = 0;
			while(i < length) {
				listeners[i](this,e.toString());
				if(!repeat[i]) {
					this.onIOError.remove(listeners[i]);
					length--;
				} else i++;
			}
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		var listeners1 = this.onOpen.listeners;
		var repeat1 = this.onOpen.repeat;
		var length1 = listeners1.length;
		var i1 = 0;
		while(i1 < length1) {
			listeners1[i1](this);
			if(!repeat1[i1]) {
				this.onOpen.remove(listeners1[i1]);
				length1--;
			} else i1++;
		}
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,__onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var listeners = this.onComplete.listeners;
		var repeat = this.onComplete.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this);
			if(!repeat[i]) {
				this.onComplete.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,__onProgress: function(event) {
		this.bytesLoaded = event.loaded;
		this.bytesTotal = event.total;
		var listeners = this.onProgress.listeners;
		var repeat = this.onProgress.repeat;
		var length = listeners.length;
		var i = 0;
		while(i < length) {
			listeners[i](this,this.bytesLoaded,this.bytesTotal);
			if(!repeat[i]) {
				this.onProgress.remove(listeners[i]);
				length--;
			} else i++;
		}
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == lime.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = lime.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: lime.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
};
lime.net.URLLoaderDataFormat = $hxClasses["lime.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
lime.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
lime.net.URLLoaderDataFormat.BINARY.toString = $estr;
lime.net.URLLoaderDataFormat.BINARY.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
lime.net.URLLoaderDataFormat.TEXT.toString = $estr;
lime.net.URLLoaderDataFormat.TEXT.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
lime.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
lime.net.URLLoaderDataFormat.VARIABLES.__enum__ = lime.net.URLLoaderDataFormat;
lime.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["lime.net.URLRequest"] = lime.net.URLRequest;
lime.net.URLRequest.__name__ = ["lime","net","URLRequest"];
lime.net.URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == "GET" || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new lime.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: lime.net.URLRequest
};
lime.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.URLRequestHeader"] = lime.net.URLRequestHeader;
lime.net.URLRequestHeader.__name__ = ["lime","net","URLRequestHeader"];
lime.net.URLRequestHeader.prototype = {
	__class__: lime.net.URLRequestHeader
};
lime.net._URLRequestMethod = {};
lime.net._URLRequestMethod.URLRequestMethod_Impl_ = function() { };
$hxClasses["lime.net._URLRequestMethod.URLRequestMethod_Impl_"] = lime.net._URLRequestMethod.URLRequestMethod_Impl_;
lime.net._URLRequestMethod.URLRequestMethod_Impl_.__name__ = ["lime","net","_URLRequestMethod","URLRequestMethod_Impl_"];
lime.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["lime.net.URLVariables"] = lime.net.URLVariables;
lime.net.URLVariables.__name__ = ["lime","net","URLVariables"];
lime.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: lime.net.URLVariables
};
lime.net.curl = {};
lime.net.curl._CURL = {};
lime.net.curl._CURL.CURL_Impl_ = function() { };
$hxClasses["lime.net.curl._CURL.CURL_Impl_"] = lime.net.curl._CURL.CURL_Impl_;
lime.net.curl._CURL.CURL_Impl_.__name__ = ["lime","net","curl","_CURL","CURL_Impl_"];
lime.net.curl._CURL.CURL_Impl_.getDate = function(date,now) {
	return 0;
};
lime.net.curl._CURL.CURL_Impl_.globalCleanup = function() {
};
lime.net.curl._CURL.CURL_Impl_.globalInit = function(flags) {
	return 0;
};
lime.net.curl._CURL.CURL_Impl_.version = function() {
	return null;
};
lime.net.curl._CURL.CURL_Impl_.versionInfo = function(type) {
	return null;
};
lime.net.curl._CURL.CURL_Impl_.intGt = function(a,b) {
	return a > b;
};
lime.net.curl._CURLCode = {};
lime.net.curl._CURLCode.CURLCode_Impl_ = function() { };
$hxClasses["lime.net.curl._CURLCode.CURLCode_Impl_"] = lime.net.curl._CURLCode.CURLCode_Impl_;
lime.net.curl._CURLCode.CURLCode_Impl_.__name__ = ["lime","net","curl","_CURLCode","CURLCode_Impl_"];
lime.net.curl.CURLEasy = function() { };
$hxClasses["lime.net.curl.CURLEasy"] = lime.net.curl.CURLEasy;
lime.net.curl.CURLEasy.__name__ = ["lime","net","curl","CURLEasy"];
lime.net.curl.CURLEasy.cleanup = function(handle) {
};
lime.net.curl.CURLEasy.duphandle = function(handle) {
	return 0;
};
lime.net.curl.CURLEasy.escape = function(handle,url,length) {
	return null;
};
lime.net.curl.CURLEasy.getinfo = function(handle,info) {
	return null;
};
lime.net.curl.CURLEasy.init = function() {
	return 0;
};
lime.net.curl.CURLEasy.pause = function(handle,bitMask) {
	return 0;
};
lime.net.curl.CURLEasy.perform = function(handle) {
	return 0;
};
lime.net.curl.CURLEasy.reset = function(handle) {
	return 0;
};
lime.net.curl.CURLEasy.setopt = function(handle,option,parameter) {
	return 0;
};
lime.net.curl.CURLEasy.strerror = function(code) {
	return null;
};
lime.net.curl.CURLEasy.unescape = function(handle,url,inLength,outLength) {
	return null;
};
lime.net.curl._CURLInfo = {};
lime.net.curl._CURLInfo.CURLInfo_Impl_ = function() { };
$hxClasses["lime.net.curl._CURLInfo.CURLInfo_Impl_"] = lime.net.curl._CURLInfo.CURLInfo_Impl_;
lime.net.curl._CURLInfo.CURLInfo_Impl_.__name__ = ["lime","net","curl","_CURLInfo","CURLInfo_Impl_"];
lime.net.curl._CURLOption = {};
lime.net.curl._CURLOption.CURLOption_Impl_ = function() { };
$hxClasses["lime.net.curl._CURLOption.CURLOption_Impl_"] = lime.net.curl._CURLOption.CURLOption_Impl_;
lime.net.curl._CURLOption.CURLOption_Impl_.__name__ = ["lime","net","curl","_CURLOption","CURLOption_Impl_"];
lime.net.curl._CURLVersion = {};
lime.net.curl._CURLVersion.CURLVersion_Impl_ = function() { };
$hxClasses["lime.net.curl._CURLVersion.CURLVersion_Impl_"] = lime.net.curl._CURLVersion.CURLVersion_Impl_;
lime.net.curl._CURLVersion.CURLVersion_Impl_.__name__ = ["lime","net","curl","_CURLVersion","CURLVersion_Impl_"];
lime.system = {};
lime.system.System = function() { };
$hxClasses["lime.system.System"] = lime.system.System;
lime.system.System.__name__ = ["lime","system","System"];
lime.system.System.disableCFFI = null;
lime.system.System.embed = $hx_exports.lime.embed = function(element,width,height,background) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js.Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.background = color;
	ApplicationMain.config.element = htmlElement;
	ApplicationMain.config.width = width;
	ApplicationMain.config.height = height;
	ApplicationMain.create();
};
lime.system.System.findHaxeLib = function(library) {
	return "";
};
lime.system.System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(lime.system.System.disableCFFI) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	if(lazy) {
	}
	var result = null;
	return result;
};
lime.system.System.sysName = function() {
	return null;
};
lime.system.System.tryLoad = function(name,library,func,args) {
	return null;
};
lime.system.System.loaderTrace = function(message) {
};
lime.ui = {};
lime.ui._KeyCode = {};
lime.ui._KeyCode.KeyCode_Impl_ = function() { };
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime.ui._KeyCode.KeyCode_Impl_;
lime.ui._KeyCode.KeyCode_Impl_.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime.ui.KeyEventManager = function() { };
$hxClasses["lime.ui.KeyEventManager"] = lime.ui.KeyEventManager;
lime.ui.KeyEventManager.__name__ = ["lime","ui","KeyEventManager"];
lime.ui.Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime.ui.Mouse;
lime.ui.Mouse.__name__ = ["lime","ui","Mouse"];
lime.ui.Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime.ui.Mouse.hide = function() {
	lime._backend.html5.HTML5Mouse.hide();
};
lime.ui.Mouse.show = function() {
	lime._backend.html5.HTML5Mouse.show();
};
lime.ui.Mouse.get_cursor = function() {
	return lime._backend.html5.HTML5Mouse.get_cursor();
};
lime.ui.Mouse.set_cursor = function(value) {
	return lime._backend.html5.HTML5Mouse.set_cursor(value);
};
lime.ui.MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : true, __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime.ui.MouseCursor.ARROW = ["ARROW",0];
lime.ui.MouseCursor.ARROW.toString = $estr;
lime.ui.MouseCursor.ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime.ui.MouseCursor.CROSSHAIR.toString = $estr;
lime.ui.MouseCursor.CROSSHAIR.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.DEFAULT = ["DEFAULT",2];
lime.ui.MouseCursor.DEFAULT.toString = $estr;
lime.ui.MouseCursor.DEFAULT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.MOVE = ["MOVE",3];
lime.ui.MouseCursor.MOVE.toString = $estr;
lime.ui.MouseCursor.MOVE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.POINTER = ["POINTER",4];
lime.ui.MouseCursor.POINTER.toString = $estr;
lime.ui.MouseCursor.POINTER.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime.ui.MouseCursor.RESIZE_NESW.toString = $estr;
lime.ui.MouseCursor.RESIZE_NESW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime.ui.MouseCursor.RESIZE_NS.toString = $estr;
lime.ui.MouseCursor.RESIZE_NS.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime.ui.MouseCursor.RESIZE_NWSE.toString = $estr;
lime.ui.MouseCursor.RESIZE_NWSE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime.ui.MouseCursor.RESIZE_WE.toString = $estr;
lime.ui.MouseCursor.RESIZE_WE.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.TEXT = ["TEXT",9];
lime.ui.MouseCursor.TEXT.toString = $estr;
lime.ui.MouseCursor.TEXT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT = ["WAIT",10];
lime.ui.MouseCursor.WAIT.toString = $estr;
lime.ui.MouseCursor.WAIT.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime.ui.MouseCursor.WAIT_ARROW.toString = $estr;
lime.ui.MouseCursor.WAIT_ARROW.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseCursor.CUSTOM = ["CUSTOM",12];
lime.ui.MouseCursor.CUSTOM.toString = $estr;
lime.ui.MouseCursor.CUSTOM.__enum__ = lime.ui.MouseCursor;
lime.ui.MouseEventManager = function() { };
$hxClasses["lime.ui.MouseEventManager"] = lime.ui.MouseEventManager;
lime.ui.MouseEventManager.__name__ = ["lime","ui","MouseEventManager"];
lime.ui.TouchEventManager = function() { };
$hxClasses["lime.ui.TouchEventManager"] = lime.ui.TouchEventManager;
lime.ui.TouchEventManager.__name__ = ["lime","ui","TouchEventManager"];
lime.ui.Window = function(config) {
	this.config = config;
	this.backend = new lime._backend.html5.HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime.ui.Window;
lime.ui.Window.__name__ = ["lime","ui","Window"];
lime.ui.Window.prototype = {
	create: function(application) {
		this.backend.create(application);
		if(this.currentRenderer != null) this.currentRenderer.create();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.x = x;
		this.y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.width = width;
		this.height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,__class__: lime.ui.Window
};
lime.utils = {};
lime.utils.ByteArray = function(size) {
	if(size == null) size = 0;
	this.littleEndian = false;
	this.allocated = 0;
	this.position = 0;
	this.length = 0;
	if(size > 0) this.allocated = size;
	this.___resizeBuffer(this.allocated);
	this.set_length(this.allocated);
};
$hxClasses["lime.utils.ByteArray"] = lime.utils.ByteArray;
lime.utils.ByteArray.__name__ = ["lime","utils","ByteArray"];
lime.utils.ByteArray.fromBytes = function(bytes) {
	var result = new lime.utils.ByteArray();
	result.byteView = new Uint8Array(bytes.b);
	result.set_length(result.byteView.length);
	result.allocated = result.length;
	return result;
};
lime.utils.ByteArray.readFile = function(path) {
	return null;
};
lime.utils.ByteArray.__ofBuffer = function(buffer) {
	var bytes = new lime.utils.ByteArray();
	bytes.set_length(bytes.allocated = buffer.byteLength);
	bytes.data = new DataView(buffer);
	bytes.byteView = new Uint8Array(buffer);
	return bytes;
};
lime.utils.ByteArray.prototype = {
	clear: function() {
		if(this.allocated < 0) this.___resizeBuffer(this.allocated = Std["int"](Math.max(0,this.allocated * 2))); else if(this.allocated > 0) this.___resizeBuffer(this.allocated = 0);
		this.length = 0;
		0;
		this.position = 0;
	}
	,compress: function(algorithm) {
	}
	,deflate: function() {
		this.compress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,inflate: function() {
		this.uncompress(lime.utils.CompressionAlgorithm.DEFLATE);
	}
	,readBoolean: function() {
		return this.readByte() != 0;
	}
	,readByte: function() {
		var data = this.data;
		return data.getInt8(this.position++);
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(offset < 0 || length < 0) throw "Read error - Out of bounds";
		if(length == 0) length = this.length - this.position;
		var lengthToEnsure = offset + length;
		if(bytes.length < lengthToEnsure) {
			if(bytes.allocated < lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = Std["int"](Math.max(lengthToEnsure,bytes.allocated * 2))); else if(bytes.allocated > lengthToEnsure) bytes.___resizeBuffer(bytes.allocated = lengthToEnsure);
			bytes.length = lengthToEnsure;
			lengthToEnsure;
		}
		bytes.byteView.set(this.byteView.subarray(this.position,this.position + length),offset);
		bytes.position = offset;
		this.position += length;
		if(bytes.position + length > bytes.length) bytes.set_length(bytes.position + length);
	}
	,readDouble: function() {
		var $double = this.data.getFloat64(this.position,this.littleEndian);
		this.position += 8;
		return $double;
	}
	,readFloat: function() {
		var $float = this.data.getFloat32(this.position,this.littleEndian);
		this.position += 4;
		return $float;
	}
	,readInt: function() {
		var $int = this.data.getInt32(this.position,this.littleEndian);
		this.position += 4;
		return $int;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var $short = this.data.getInt16(this.position,this.littleEndian);
		this.position += 2;
		return $short;
	}
	,readUnsignedByte: function() {
		var data = this.data;
		return data.getUint8(this.position++);
	}
	,readUnsignedInt: function() {
		var uInt = this.data.getUint32(this.position,this.littleEndian);
		this.position += 4;
		return uInt;
	}
	,readUnsignedShort: function() {
		var uShort = this.data.getUint16(this.position,this.littleEndian);
		this.position += 2;
		return uShort;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(len) {
		var value = "";
		var max = this.position + len;
		while(this.position < max) {
			var data = this.data;
			var c = data.getUint8(this.position++);
			if(c < 128) {
				if(c == 0) break;
				value += String.fromCharCode(c);
			} else if(c < 224) value += String.fromCharCode((c & 63) << 6 | data.getUint8(this.position++) & 127); else if(c < 240) {
				var c2 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 31) << 12 | (c2 & 127) << 6 | data.getUint8(this.position++) & 127);
			} else {
				var c21 = data.getUint8(this.position++);
				var c3 = data.getUint8(this.position++);
				value += String.fromCharCode((c & 15) << 18 | (c21 & 127) << 12 | c3 << 6 & 127 | data.getUint8(this.position++) & 127);
			}
		}
		return value;
	}
	,toString: function() {
		var cachePosition = this.position;
		this.position = 0;
		var value = this.readUTFBytes(this.length);
		this.position = cachePosition;
		return value;
	}
	,uncompress: function(algorithm) {
		haxe.Log.trace("Warning: ByteArray.uncompress on JS target requires the 'format' haxelib",{ fileName : "ByteArray.hx", lineNumber : 659, className : "lime.utils.ByteArray", methodName : "uncompress"});
	}
	,write_uncheck: function($byte) {
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		var lengthToEnsure = this.position + 1;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		var data = this.data;
		data.setInt8(this.position,value);
		this.position += 1;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(bytes.length == 0) return;
		if((function($this) {
			var $r;
			var aNeg = 0 < 0;
			var bNeg = offset < 0;
			$r = aNeg != bNeg?aNeg:0 > offset;
			return $r;
		}(this)) || (function($this) {
			var $r;
			var aNeg1 = 0 < 0;
			var bNeg1 = length < 0;
			$r = aNeg1 != bNeg1?aNeg1:0 > length;
			return $r;
		}(this))) throw "Write error - Out of bounds";
		if((function($this) {
			var $r;
			var $int = length;
			$r = $int < 0?4294967296.0 + $int:$int + 0.0;
			return $r;
		}(this)) == 0) length = bytes.length;
		var lengthToEnsure = this.position + length;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.byteView.set(bytes.byteView.subarray(offset,offset + length),this.position);
		this.position = this.position + length;
	}
	,writeDouble: function(x) {
		var lengthToEnsure = this.position + 8;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat64(this.position,x,this.littleEndian);
		this.position += 8;
	}
	,writeFile: function(path) {
	}
	,writeFloat: function(x) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setFloat32(this.position,x,this.littleEndian);
		this.position += 4;
	}
	,writeInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setInt16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUnsignedInt: function(value) {
		var lengthToEnsure = this.position + 4;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint32(this.position,value,this.littleEndian);
		this.position += 4;
	}
	,writeUnsignedShort: function(value) {
		var lengthToEnsure = this.position + 2;
		if(this.length < lengthToEnsure) {
			if(this.allocated < lengthToEnsure) this.___resizeBuffer(this.allocated = Std["int"](Math.max(lengthToEnsure,this.allocated * 2))); else if(this.allocated > lengthToEnsure) this.___resizeBuffer(this.allocated = lengthToEnsure);
			this.length = lengthToEnsure;
			lengthToEnsure;
		}
		this.data.setUint16(this.position,value,this.littleEndian);
		this.position += 2;
	}
	,writeUTF: function(value) {
		this.writeUnsignedShort(this.__getUTFBytesCount(value));
		this.writeUTFBytes(value);
	}
	,writeUTFBytes: function(value) {
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) this.writeByte(c); else if(c <= 2047) {
				this.writeByte(192 | c >> 6);
				this.writeByte(128 | c & 63);
			} else if(c <= 65535) {
				this.writeByte(224 | c >> 12);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			} else {
				this.writeByte(240 | c >> 18);
				this.writeByte(128 | c >> 12 & 63);
				this.writeByte(128 | c >> 6 & 63);
				this.writeByte(128 | c & 63);
			}
		}
	}
	,__fromBytes: function(bytes) {
		this.byteView = new Uint8Array(bytes.b);
		this.set_length(this.byteView.length);
		this.allocated = this.length;
	}
	,__get: function(pos) {
		return this.data.getInt8(pos);
	}
	,__getBuffer: function() {
		return this.data.buffer;
	}
	,__getUTFBytesCount: function(value) {
		var count = 0;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = value.charCodeAt(i);
			if(c <= 127) count += 1; else if(c <= 2047) count += 2; else if(c <= 65535) count += 3; else count += 4;
		}
		return count;
	}
	,___resizeBuffer: function(len) {
		var oldByteView = this.byteView;
		var newByteView = new Uint8Array(len);
		if(oldByteView != null) {
			if(oldByteView.length <= len) newByteView.set(oldByteView); else newByteView.set(oldByteView.subarray(0,len));
		}
		this.byteView = newByteView;
		this.data = new DataView(newByteView.buffer);
	}
	,__set: function(pos,v) {
		this.data.setUint8(pos,v);
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		if(this.littleEndian) return "littleEndian"; else return "bigEndian";
	}
	,set_endian: function(endian) {
		this.littleEndian = endian == "littleEndian";
		return endian;
	}
	,set_length: function(value) {
		if(this.allocated < value) this.___resizeBuffer(this.allocated = Std["int"](Math.max(value,this.allocated * 2))); else if(this.allocated > value) this.___resizeBuffer(this.allocated = value);
		this.length = value;
		return value;
	}
	,__class__: lime.utils.ByteArray
	,__properties__: {set_length:"set_length",set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.CompressionAlgorithm = $hxClasses["lime.utils.CompressionAlgorithm"] = { __ename__ : true, __constructs__ : ["DEFLATE","ZLIB","LZMA","GZIP"] };
lime.utils.CompressionAlgorithm.DEFLATE = ["DEFLATE",0];
lime.utils.CompressionAlgorithm.DEFLATE.toString = $estr;
lime.utils.CompressionAlgorithm.DEFLATE.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.ZLIB = ["ZLIB",1];
lime.utils.CompressionAlgorithm.ZLIB.toString = $estr;
lime.utils.CompressionAlgorithm.ZLIB.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.LZMA = ["LZMA",2];
lime.utils.CompressionAlgorithm.LZMA.toString = $estr;
lime.utils.CompressionAlgorithm.LZMA.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.CompressionAlgorithm.GZIP = ["GZIP",3];
lime.utils.CompressionAlgorithm.GZIP.toString = $estr;
lime.utils.CompressionAlgorithm.GZIP.__enum__ = lime.utils.CompressionAlgorithm;
lime.utils.GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime.utils.GLUtils;
lime.utils.GLUtils.__name__ = ["lime","utils","GLUtils"];
lime.utils.GLUtils.compileShader = function(source,type) {
	var shader = lime.graphics.opengl.GL.context.createShader(type);
	lime.graphics.opengl.GL.context.shaderSource(shader,source);
	lime.graphics.opengl.GL.context.compileShader(shader);
	if(lime.graphics.opengl.GL.context.getShaderParameter(shader,35713) == 0) switch(type) {
	case 35633:
		throw "Error compiling vertex shader";
		break;
	case 35632:
		throw "Error compiling fragment shader";
		break;
	default:
		throw "Error compiling unknown shader type";
	}
	return shader;
};
lime.utils.GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime.utils.GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime.utils.GLUtils.compileShader(fragmentSource,35632);
	var program = lime.graphics.opengl.GL.context.createProgram();
	lime.graphics.opengl.GL.context.attachShader(program,vertexShader);
	lime.graphics.opengl.GL.context.attachShader(program,fragmentShader);
	lime.graphics.opengl.GL.context.linkProgram(program);
	if(lime.graphics.opengl.GL.context.getProgramParameter(program,35714) == 0) throw "Unable to initialize the shader program.";
	return program;
};
lime.utils.IDataInput = function() { };
$hxClasses["lime.utils.IDataInput"] = lime.utils.IDataInput;
lime.utils.IDataInput.__name__ = ["lime","utils","IDataInput"];
lime.utils.IDataInput.prototype = {
	__class__: lime.utils.IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
lime.utils.IMemoryRange = function() { };
$hxClasses["lime.utils.IMemoryRange"] = lime.utils.IMemoryRange;
lime.utils.IMemoryRange.__name__ = ["lime","utils","IMemoryRange"];
lime.utils.IMemoryRange.prototype = {
	__class__: lime.utils.IMemoryRange
};
var motion = {};
motion.actuators = {};
motion.actuators.IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion.actuators.IGenericActuator;
motion.actuators.IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion.actuators.IGenericActuator.prototype = {
	__class__: motion.actuators.IGenericActuator
};
motion.actuators.GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion.Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion.actuators.GenericActuator;
motion.actuators.GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion.actuators.GenericActuator.__interfaces__ = [motion.actuators.IGenericActuator];
motion.actuators.GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) Reflect.setField(this.target,i,Reflect.field(this.properties,i)); else Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
		}
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) params = [];
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) this.callMethod(this._onUpdate,this._onUpdateParams);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) this.callMethod(this._onComplete,this._onCompleteParams);
		}
		motion.Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) this._onCompleteParams = []; else this._onCompleteParams = parameters;
		if(this.duration == 0) this.complete();
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) this._onRepeatParams = []; else this._onRepeatParams = parameters;
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) this._onPauseParams = []; else this._onPauseParams = parameters;
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) this._onResumeParams = []; else this._onResumeParams = parameters;
		return this;
	}
	,pause: function() {
		if(this._onPause != null) this.callMethod(this._onPause,this._onPauseParams);
	}
	,reflect: function(value) {
		if(value == null) value = true;
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) times = -1;
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) this.callMethod(this._onResume,this._onResumeParams);
	}
	,reverse: function(value) {
		if(value == null) value = true;
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) value = true;
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) value = true;
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion.actuators.GenericActuator
};
motion.actuators.SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = new Array();
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl.Lib.getTimer() / 1000;
	motion.actuators.GenericActuator.call(this,target,duration,properties);
	if(!motion.actuators.SimpleActuator.addedEvent) {
		motion.actuators.SimpleActuator.addedEvent = true;
		openfl.Lib.current.stage.addEventListener(openfl.events.Event.ENTER_FRAME,motion.actuators.SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion.actuators.SimpleActuator;
motion.actuators.SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion.actuators.SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl.Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion.actuators.SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion.actuators.SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime > actuator.timeOffset) actuator.update(currentTime);
			j++;
		} else {
			motion.actuators.SimpleActuator.actuators.splice(j,1);
			--motion.actuators.SimpleActuator.actuatorsLength;
		}
	}
};
motion.actuators.SimpleActuator.__super__ = motion.actuators.GenericActuator;
motion.actuators.SimpleActuator.prototype = $extend(motion.actuators.GenericActuator.prototype,{
	setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,autoVisible: function(value) {
		if(value == null) value = true;
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",this.cacheVisible);
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) value = Reflect.field(target,propertyName); else value = Reflect.getProperty(target,propertyName);
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) start = Reflect.field(this.target,i); else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				details = new motion.actuators.PropertyDetails(this.target,i,start,this.getField(this.properties,i) - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js.Boot.__instanceof(this.target,openfl.display.DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		motion.actuators.SimpleActuator.actuators.push(this);
		++motion.actuators.SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) this._onUpdateParams = []; else this._onUpdateParams = parameters;
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion.actuators.GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl.Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl.Lib.getTimer() - this.pauseTime) / 1000;
			motion.actuators.GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) details.target[details.propertyName] = value; else Reflect.setProperty(details.target,details.propertyName,value);
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) this.apply();
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) this.apply();
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) rotation -= 360; else if(rotation < -180) rotation += 360;
						endValue = details.start + rotation * easing;
					} else endValue = details.start + details.change * easing;
					if(!this._snapping) {
						if(details.isField) details.target[details.propertyName] = endValue; else Reflect.setProperty(details.target,details.propertyName,endValue);
					} else this.setProperty(details,Math.round(endValue));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_SimpleActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion.actuators.SimpleActuator
});
motion.easing = {};
motion.easing.Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion.easing.Expo;
motion.easing.Expo.__name__ = ["motion","easing","Expo"];
motion.easing.Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion.easing.Expo.get_easeIn = function() {
	return new motion.easing.ExpoEaseIn();
};
motion.easing.Expo.get_easeInOut = function() {
	return new motion.easing.ExpoEaseInOut();
};
motion.easing.Expo.get_easeOut = function() {
	return new motion.easing.ExpoEaseOut();
};
motion.easing.IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion.easing.IEasing;
motion.easing.IEasing.__name__ = ["motion","easing","IEasing"];
motion.easing.IEasing.prototype = {
	__class__: motion.easing.IEasing
};
motion.easing.ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion.easing.ExpoEaseOut;
motion.easing.ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion.easing.ExpoEaseOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) return 1; else return 1 - Math.pow(2,-10 * k);
	}
	,ease: function(t,b,c,d) {
		if(t == d) return b + c; else return c * (1 - Math.pow(2,-10 * t / d)) + b;
	}
	,__class__: motion.easing.ExpoEaseOut
};
motion.Actuate = function() { };
$hxClasses["motion.Actuate"] = motion.Actuate;
motion.Actuate.__name__ = ["motion","Actuate"];
motion.Actuate.apply = function(target,properties,customActuator) {
	motion.Actuate.stop(target,properties);
	if(customActuator == null) customActuator = motion.Actuate.defaultActuator;
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion.Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	return new motion._Actuate.EffectsOptions(target,duration,overwrite);
};
motion.Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) allowCreation = true;
	if(!(motion.Actuate.targetLibraries.h.__keys__[target.__id__] != null) && allowCreation) motion.Actuate.targetLibraries.set(target,new Array());
	return motion.Actuate.targetLibraries.h[target.__id__];
};
motion.Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) overwrite = true;
	return motion.Actuate.tween(target,duration,properties,overwrite,motion.actuators.MotionPathActuator);
};
motion.Actuate.pause = function(target) {
	if(js.Boot.__instanceof(target,motion.actuators.IGenericActuator)) {
		var actuator = target;
		actuator.pause();
	} else {
		var library = motion.Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.pause();
			}
		}
	}
};
motion.Actuate.pauseAll = function() {
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion.Actuate.reset = function() {
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			i--;
		}
	}
	motion.Actuate.targetLibraries = new haxe.ds.ObjectMap();
};
motion.Actuate.resume = function(target) {
	if(js.Boot.__instanceof(target,motion.actuators.IGenericActuator)) {
		var actuator = target;
		actuator.resume();
	} else {
		var library = motion.Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator1 = library[_g];
				++_g;
				actuator1.resume();
			}
		}
	}
};
motion.Actuate.resumeAll = function() {
	var $it0 = motion.Actuate.targetLibraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion.Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) sendEvent = true;
	if(complete == null) complete = false;
	if(target != null) {
		if(js.Boot.__instanceof(target,motion.actuators.IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion.Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1;
					_g1 = js.Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					i--;
				}
			}
		}
	}
};
motion.Actuate.timer = function(duration,customActuator) {
	return motion.Actuate.tween(new motion._Actuate.TweenTimer(0),duration,new motion._Actuate.TweenTimer(1),false,customActuator);
};
motion.Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) overwrite = true;
	if(duration == null) duration = 0;
	return new motion._Actuate.TransformOptions(target,duration,overwrite);
};
motion.Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) overwrite = true;
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) customActuator = motion.Actuate.defaultActuator;
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion.Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					i--;
				}
				library = motion.Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else return motion.Actuate.apply(target,properties,customActuator);
	}
	return null;
};
motion.Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion.Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion.Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion.Actuate.targetLibraries.h[target.__id__].length == 0) motion.Actuate.targetLibraries.remove(target);
	}
};
motion.Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) overwrite = true;
	var properties = { start : start, end : end};
	return motion.Actuate.tween(target,duration,properties,overwrite,motion.actuators.MethodActuator);
};
motion._Actuate = {};
motion._Actuate.EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion._Actuate.EffectsOptions;
motion._Actuate.EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion._Actuate.EffectsOptions.prototype = {
	filter: function(reference,properties) {
		properties.filter = reference;
		return motion.Actuate.tween(this.target,this.duration,properties,this.overwrite,motion.actuators.FilterActuator);
	}
	,__class__: motion._Actuate.EffectsOptions
};
motion._Actuate.TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion._Actuate.TransformOptions;
motion._Actuate.TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion._Actuate.TransformOptions.prototype = {
	color: function(value,strength,alpha) {
		if(strength == null) strength = 1;
		if(value == null) value = 0;
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) properties.colorAlpha = alpha;
		return motion.Actuate.tween(this.target,this.duration,properties,this.overwrite,motion.actuators.TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) properties.soundVolume = volume;
		if(pan != null) properties.soundPan = pan;
		return motion.Actuate.tween(this.target,this.duration,properties,this.overwrite,motion.actuators.TransformActuator);
	}
	,__class__: motion._Actuate.TransformOptions
};
motion._Actuate.TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion._Actuate.TweenTimer;
motion._Actuate.TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion._Actuate.TweenTimer.prototype = {
	__class__: motion._Actuate.TweenTimer
};
motion.MotionPath = function() {
	this._x = new motion.ComponentPath();
	this._y = new motion.ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion.MotionPath;
motion.MotionPath.__name__ = ["motion","MotionPath"];
motion.MotionPath.prototype = {
	bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion.BezierPath(x,controlX,strength));
		this._y.addPath(new motion.BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) strength = 1;
		this._x.addPath(new motion.LinearPath(x,strength));
		this._y.addPath(new motion.LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) this._rotation = new motion.RotationPath(this._x,this._y);
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion.MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
motion.IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion.IComponentPath;
motion.IComponentPath.__name__ = ["motion","IComponentPath"];
motion.IComponentPath.prototype = {
	__class__: motion.IComponentPath
};
motion.ComponentPath = function() {
	this.paths = new Array();
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion.ComponentPath;
motion.ComponentPath.__name__ = ["motion","ComponentPath"];
motion.ComponentPath.__interfaces__ = [motion.IComponentPath];
motion.ComponentPath.prototype = {
	addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) return this.paths[0].calculate(this.start,k); else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else return path.calculate(lastEnd,ratio / path.strength);
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.end;
		} else return this.start;
	}
	,__class__: motion.ComponentPath
	,__properties__: {get_end:"get_end"}
};
motion.BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion.BezierPath;
motion.BezierPath.__name__ = ["motion","BezierPath"];
motion.BezierPath.prototype = {
	calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion.BezierPath
};
motion.LinearPath = function(end,strength) {
	motion.BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion.LinearPath;
motion.LinearPath.__name__ = ["motion","LinearPath"];
motion.LinearPath.__super__ = motion.BezierPath;
motion.LinearPath.prototype = $extend(motion.BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion.LinearPath
});
motion.RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion.RotationPath;
motion.RotationPath.__name__ = ["motion","RotationPath"];
motion.RotationPath.__interfaces__ = [motion.IComponentPath];
motion.RotationPath.prototype = {
	calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion.RotationPath
	,__properties__: {get_end:"get_end"}
};
motion.actuators.FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
	if(js.Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) target.set_filters([Type.createInstance(this.filterClass,[])]);
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(filter,this.filterClass)) this.filter = filter;
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion.actuators.FilterActuator;
motion.actuators.FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion.actuators.FilterActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.FilterActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") Reflect.setField(this.filter,propertyName,Reflect.field(this.properties,propertyName));
		}
		var filters = this.getField(this.target,"filters");
		Reflect.setField(filters,this.properties.filter,this.filter);
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion.actuators.PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion.actuators.SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) Reflect.setField(filters,this.properties.filter,this.filter); else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js.Boot.__instanceof(filters[i],this.filterClass)) filters[i] = this.filter;
			}
		}
		this.setField_openfl_display_DisplayObject(this.target,"filters",filters);
	}
	,__class__: motion.actuators.FilterActuator
});
motion.actuators.MethodActuator = function(target,duration,properties) {
	this.currentParameters = new Array();
	this.tweenProperties = { };
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) this.properties.start = new Array();
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) this.properties.end = this.properties.start;
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion.actuators.MethodActuator;
motion.actuators.MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion.actuators.MethodActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.MethodActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) sendEvent = true;
		if(this.initialized) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
		motion.actuators.SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || ((start | 0) === start)) {
				details = new motion.actuators.PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion.actuators.SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion.actuators.MethodActuator
});
motion.actuators.MotionPathActuator = function(target,duration,properties) {
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion.actuators.MotionPathActuator;
motion.actuators.MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion.actuators.MotionPathActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.MotionPathActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) Reflect.setField(this.target,propertyName,(js.Boot.__cast(Reflect.field(this.properties,propertyName) , motion.IComponentPath)).get_end()); else Reflect.setProperty(this.target,propertyName,(js.Boot.__cast(Reflect.field(this.properties,propertyName) , motion.IComponentPath)).get_end());
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js.Boot.__cast(Reflect.field(this.properties,propertyName) , motion.IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) path.start = Reflect.field(this.target,propertyName); else {
					isField = false;
					path.start = Reflect.getProperty(this.target,propertyName);
				}
				details = new motion.actuators.PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) tweenPosition = 1;
			if(!this.initialized) this.initialize();
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) Reflect.setField(details1.target,details1.propertyName,(js.Boot.__cast(details1 , motion.actuators.PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details1.target,details1.propertyName,(js.Boot.__cast(details1 , motion.actuators.PropertyPathDetails)).path.calculate(easing));
				}
			} else {
				if(!this._reverse) easing = this._ease.calculate(tweenPosition); else easing = this._ease.calculate(1 - tweenPosition);
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) Reflect.setField(details2.target,details2.propertyName,(js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing)); else Reflect.setProperty(details2.target,details2.propertyName,(js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing));
					} else if(details2.isField) Reflect.setField(details2.target,details2.propertyName,Math.round((js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing))); else Reflect.setProperty(details2.target,details2.propertyName,Math.round((js.Boot.__cast(details2 , motion.actuators.PropertyPathDetails)).path.calculate(easing)));
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) this.setField_motion_actuators_MotionPathActuator_T(this.target,"visible",false);
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) this.callMethod(this._onRepeat,this._onRepeatParams);
					if(this._reflect) this._reverse = !this._reverse;
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) this._repeat--;
				}
			}
			if(this.sendChange) this.change();
		}
	}
	,__class__: motion.actuators.MotionPathActuator
});
motion.actuators.PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) isField = true;
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion.actuators.PropertyDetails;
motion.actuators.PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion.actuators.PropertyDetails.prototype = {
	__class__: motion.actuators.PropertyDetails
};
motion.actuators.PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) isField = true;
	motion.actuators.PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion.actuators.PropertyPathDetails;
motion.actuators.PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion.actuators.PropertyPathDetails.__super__ = motion.actuators.PropertyDetails;
motion.actuators.PropertyPathDetails.prototype = $extend(motion.actuators.PropertyDetails.prototype,{
	__class__: motion.actuators.PropertyPathDetails
});
motion.actuators.TransformActuator = function(target,duration,properties) {
	motion.actuators.SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion.actuators.TransformActuator;
motion.actuators.TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion.actuators.TransformActuator.__super__ = motion.actuators.SimpleActuator;
motion.actuators.TransformActuator.prototype = $extend(motion.actuators.SimpleActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) target[propertyName] = value; else Reflect.setProperty(target,propertyName,value);
	}
	,apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.endSoundTransform);
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js.Boot.__instanceof(this.target,openfl.display.DisplayObject)) this.initializeColor();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) this.initializeSound();
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl.geom.ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl.geom.ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion.actuators.PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",new openfl.media.SoundTransform());
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl.media.SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion.actuators.PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion.actuators.PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion.actuators.SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField_openfl_geom_Transform(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) this.setField_motion_actuators_TransformActuator_T(this.target,"soundTransform",this.tweenSoundTransform);
	}
	,__class__: motion.actuators.TransformActuator
});
motion.easing.ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion.easing.ExpoEaseIn;
motion.easing.ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion.easing.ExpoEaseIn.__interfaces__ = [motion.easing.IEasing];
motion.easing.ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) return 0; else return Math.pow(2,10 * (k - 1));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b; else return c * Math.pow(2,10 * (t / d - 1)) + b;
	}
	,__class__: motion.easing.ExpoEaseIn
};
motion.easing.ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion.easing.ExpoEaseInOut;
motion.easing.ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion.easing.ExpoEaseInOut.__interfaces__ = [motion.easing.IEasing];
motion.easing.ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) return 0;
		if(k == 1) return 1;
		if((k /= 0.5) < 1.0) return 0.5 * Math.pow(2,10 * (k - 1));
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) return b;
		if(t == d) return b + c;
		if((t /= d / 2.0) < 1.0) return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion.easing.ExpoEaseInOut
};
motion.easing.Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion.easing.Linear;
motion.easing.Linear.__name__ = ["motion","easing","Linear"];
motion.easing.Linear.__properties__ = {get_easeNone:"get_easeNone"}
motion.easing.Linear.get_easeNone = function() {
	return new motion.easing.LinearEaseNone();
};
motion.easing.LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion.easing.LinearEaseNone;
motion.easing.LinearEaseNone.__name__ = ["motion","easing","LinearEaseNone"];
motion.easing.LinearEaseNone.__interfaces__ = [motion.easing.IEasing];
motion.easing.LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,ease: function(t,b,c,d) {
		return c * t / d + b;
	}
	,__class__: motion.easing.LinearEaseNone
};
openfl.IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl.IAssetCache;
openfl.IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl.IAssetCache.prototype = {
	__class__: openfl.IAssetCache
};
openfl.AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe.ds.StringMap();
	this.font = new haxe.ds.StringMap();
	this.sound = new haxe.ds.StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl.AssetCache;
openfl.AssetCache.__name__ = ["openfl","AssetCache"];
openfl.AssetCache.__interfaces__ = [openfl.IAssetCache];
openfl.AssetCache.prototype = {
	clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe.ds.StringMap();
			this.font = new haxe.ds.StringMap();
			this.sound = new haxe.ds.StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.bitmapData.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.sound.remove(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl.AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
openfl.Assets = function() { };
$hxClasses["openfl.Assets"] = openfl.Assets;
openfl.Assets.__name__ = ["openfl","Assets"];
openfl.Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	openfl.Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl.Assets.dispatchEvent = function(event) {
	return openfl.Assets.dispatcher.dispatchEvent(event);
};
openfl.Assets.exists = function(id,type) {
	return lime.Assets.exists(id,type);
};
openfl.Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime.Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl.display.BitmapData.fromImage(image);
		if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl.Assets.getBytes = function(id) {
	return lime.Assets.getBytes(id);
};
openfl.Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) return openfl.Assets.cache.getFont(id);
	var font = lime.Assets.getFont(id,false);
	if(font != null) return font;
	return new openfl.text.Font();
};
openfl.Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime.Assets.libraries.get(name);
};
openfl.Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else haxe.Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 207, className : "openfl.Assets", methodName : "getMovieClip"});
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 213, className : "openfl.Assets", methodName : "getMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 219, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl.Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getPath = function(id) {
	return lime.Assets.getPath(id);
};
openfl.Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasSound(id)) {
		var sound = openfl.Assets.cache.getSound(id);
		if(openfl.Assets.isValidSound(sound)) return sound;
	}
	var path = lime.Assets.getPath(id);
	if(path != null) return new openfl.media.Sound(new openfl.net.URLRequest(path));
	return null;
};
openfl.Assets.getText = function(id) {
	return lime.Assets.getText(id);
};
openfl.Assets.hasEventListener = function(type) {
	return openfl.Assets.dispatcher.hasEventListener(type);
};
openfl.Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl.Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl.Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl.Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl.Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null;
	return true;
};
openfl.Assets.isValidSound = function(sound) {
	return true;
};
openfl.Assets.list = function(type) {
	return lime.Assets.list(type);
};
openfl.Assets.loadBitmapData = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl.Assets.cache.getBitmapData(id);
		if(openfl.Assets.isValidBitmapData(bitmapData)) {
			handler(bitmapData);
			return;
		}
	}
	lime.Assets.loadImage(id,function(image) {
		if(image != null) {
			var bitmapData1 = openfl.display.BitmapData.fromImage(image);
			if(useCache && openfl.Assets.cache.get_enabled()) openfl.Assets.cache.setBitmapData(id,bitmapData1);
			handler(bitmapData1);
		}
	},false);
};
openfl.Assets.loadBytes = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			library.loadBytes(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no String or ByteArray asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 532, className : "openfl.Assets", methodName : "loadBytes"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 538, className : "openfl.Assets", methodName : "loadBytes"});
	handler(null);
};
openfl.Assets.loadFont = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl.Assets.cache.get_enabled() && openfl.Assets.cache.hasFont(id)) {
		handler(openfl.Assets.cache.getFont(id));
		return;
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(useCache && openfl.Assets.cache.get_enabled()) library.loadFont(symbolName,function(font) {
				openfl.Assets.cache.setFont(id,font);
				handler(font);
			}); else library.loadFont(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 594, className : "openfl.Assets", methodName : "loadFont"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 600, className : "openfl.Assets", methodName : "loadFont"});
	handler(null);
};
openfl.Assets.loadLibrary = function(name,handler) {
	lime.Assets.loadLibrary(name,handler);
};
openfl.Assets.loadMusic = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getMusic(id,useCache));
};
openfl.Assets.loadMovieClip = function(id,handler) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl.Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			library.loadMovieClip(symbolName,handler);
			return;
		} else haxe.Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 678, className : "openfl.Assets", methodName : "loadMovieClip"});
	} else haxe.Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 684, className : "openfl.Assets", methodName : "loadMovieClip"});
	handler(null);
};
openfl.Assets.loadSound = function(id,handler,useCache) {
	if(useCache == null) useCache = true;
	handler(openfl.Assets.getSound(id,useCache));
};
openfl.Assets.loadText = function(id,handler) {
	lime.Assets.loadText(id,handler);
};
openfl.Assets.registerLibrary = function(name,library) {
	lime.Assets.registerLibrary(name,library);
};
openfl.Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl.Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl.Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl.Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl.Assets.unloadLibrary = function(name) {
	lime.Assets.unloadLibrary(name);
};
openfl.Assets.library_onEvent = function(library,type) {
	if(type == "change") {
		openfl.Assets.cache.clear();
		openfl.Assets.dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
};
openfl.AssetLibrary = function() {
	lime.AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl.AssetLibrary;
openfl.AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl.AssetLibrary.__super__ = lime.AssetLibrary;
openfl.AssetLibrary.prototype = $extend(lime.AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,getMusic: function(id) {
		return this.getSound(id);
	}
	,getSound: function(id) {
		return null;
	}
	,loadMovieClip: function(id,handler) {
		handler(this.getMovieClip(id));
	}
	,loadMusic: function(id,handler) {
		handler(this.getMusic(id));
	}
	,loadSound: function(id,handler) {
		handler(this.getSound(id));
	}
	,__class__: openfl.AssetLibrary
});
openfl._Assets = {};
openfl._Assets.AssetType_Impl_ = function() { };
$hxClasses["openfl._Assets.AssetType_Impl_"] = openfl._Assets.AssetType_Impl_;
openfl._Assets.AssetType_Impl_.__name__ = ["openfl","_Assets","AssetType_Impl_"];
openfl.display.MovieClip = function() {
	openfl.display.Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	this.loaderInfo = openfl.display.LoaderInfo.create(null);
};
$hxClasses["openfl.display.MovieClip"] = openfl.display.MovieClip;
openfl.display.MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl.display.MovieClip.__super__ = openfl.display.Sprite;
openfl.display.MovieClip.prototype = $extend(openfl.display.Sprite.prototype,{
	gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl.display.MovieClip
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
openfl.display.LoaderInfo = function() {
	openfl.events.EventDispatcher.call(this);
	this.applicationDomain = openfl.system.ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl.display.LoaderInfo;
openfl.display.LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl.display.LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl.display.LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl.events.UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = "";
	return loaderInfo;
};
openfl.display.LoaderInfo.__super__ = openfl.events.EventDispatcher;
openfl.display.LoaderInfo.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.display.LoaderInfo
});
openfl.system = {};
openfl.system.ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl.system.ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl.system.ApplicationDomain;
openfl.system.ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl.system.ApplicationDomain.prototype = {
	getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl.system.ApplicationDomain
};
openfl.events.UncaughtErrorEvents = function(target) {
	openfl.events.EventDispatcher.call(this,target);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl.events.UncaughtErrorEvents;
openfl.events.UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl.events.UncaughtErrorEvents.__super__ = openfl.events.EventDispatcher;
openfl.events.UncaughtErrorEvents.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	__class__: openfl.events.UncaughtErrorEvents
});
openfl.geom.Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
	this.__array = new Float32Array([a,b,c,d,tx,ty,0,0,1]);
};
$hxClasses["openfl.geom.Matrix"] = openfl.geom.Matrix;
openfl.geom.Matrix.__name__ = ["openfl","geom","Matrix"];
openfl.geom.Matrix.prototype = {
	clone: function() {
		return new openfl.geom.Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw "Column " + column + " out of bounds (2)"; else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw "Row " + row + " out of bounds (2)"; else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.x = 0;
			vector3D.y = 0;
			vector3D.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl.geom.Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new openfl.geom.Matrix();
		result.a = this.a * m.a + this.b * m.c;
		result.b = this.a * m.b + this.b * m.d;
		result.c = this.c * m.a + this.d * m.c;
		result.d = this.c * m.b + this.d * m.d;
		result.tx = this.tx * m.a + this.ty * m.c + m.tx;
		result.ty = this.tx * m.b + this.ty * m.d + m.ty;
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl.geom.Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		var m = new openfl.geom.Matrix();
		m.tx = dx;
		m.ty = dy;
		this.concat(m);
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = 0;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = this.tx;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: openfl.geom.Matrix
};
openfl.Lib = function() { };
$hxClasses["openfl.Lib"] = openfl.Lib;
openfl.Lib.__name__ = ["openfl","Lib"];
openfl.Lib.application = null;
openfl.Lib["as"] = function(v,c) {
	if(js.Boot.__instanceof(v,c)) return v; else return null;
};
openfl.Lib.attach = function(name) {
	return new openfl.display.MovieClip();
};
openfl.Lib.embed = $hx_exports.openfl.embed = function(elementName,width,height,background) {
	lime.system.System.embed(elementName,width,height,background);
};
openfl.Lib.getTimer = function() {
	return Std["int"]((haxe.Timer.stamp() - openfl.Lib.__startTime) * 1000);
};
openfl.Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	window.open(request.url,target);
};
openfl.Lib.notImplemented = function(api) {
	if(!openfl.Lib.__sentWarnings.exists(api)) {
		openfl.Lib.__sentWarnings.set(api,true);
		haxe.Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 117, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl.Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl.Lib.trace = function(arg) {
	haxe.Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 148, className : "openfl.Lib", methodName : "trace"});
};
openfl.Memory = function() { };
$hxClasses["openfl.Memory"] = openfl.Memory;
openfl.Memory.__name__ = ["openfl","Memory"];
openfl.Memory.gcRef = null;
openfl.Memory.len = null;
openfl.Memory._setPositionTemporarily = function(position,action) {
	var oldPosition = openfl.Memory.gcRef.position;
	openfl.Memory.gcRef.position = position;
	var value = action();
	openfl.Memory.gcRef.position = oldPosition;
	return value;
};
openfl.Memory.getByte = function(addr) {
	if(addr < 0 || addr + 1 > openfl.Memory.len) throw "Bad address";
	return openfl.Memory.gcRef.data.getInt8(addr);
};
openfl.Memory.getDouble = function(addr) {
	if(addr < 0 || addr + 8 > openfl.Memory.len) throw "Bad address";
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readDouble();
	});
};
openfl.Memory.getFloat = function(addr) {
	if(addr < 0 || addr + 4 > openfl.Memory.len) throw "Bad address";
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readFloat();
	});
};
openfl.Memory.getI32 = function(addr) {
	if(addr < 0 || addr + 4 > openfl.Memory.len) throw "Bad address";
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readInt();
	});
};
openfl.Memory.getUI16 = function(addr) {
	if(addr < 0 || addr + 2 > openfl.Memory.len) throw "Bad address";
	return openfl.Memory._setPositionTemporarily(addr,function() {
		return openfl.Memory.gcRef.readUnsignedShort();
	});
};
openfl.Memory.select = function(inBytes) {
	openfl.Memory.gcRef = inBytes;
	if(inBytes != null) openfl.Memory.len = inBytes.length; else openfl.Memory.len = 0;
};
openfl.Memory.setByte = function(addr,v) {
	if(addr < 0 || addr + 1 > openfl.Memory.len) throw "Bad address";
	openfl.Memory.gcRef.data.setUint8(addr,v);
};
openfl.Memory.setDouble = function(addr,v) {
	if(addr < 0 || addr + 8 > openfl.Memory.len) throw "Bad address";
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeDouble(v);
	});
};
openfl.Memory.setFloat = function(addr,v) {
	if(addr < 0 || addr + 4 > openfl.Memory.len) throw "Bad address";
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeFloat(v);
	});
};
openfl.Memory.setI16 = function(addr,v) {
	if(addr < 0 || addr + 2 > openfl.Memory.len) throw "Bad address";
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeUnsignedShort(v);
	});
};
openfl.Memory.setI32 = function(addr,v) {
	if(addr < 0 || addr + 4 > openfl.Memory.len) throw "Bad address";
	openfl.Memory._setPositionTemporarily(addr,function() {
		openfl.Memory.gcRef.writeInt(v);
	});
};
openfl._Vector = {};
openfl._Vector.Vector_Impl_ = function() { };
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl._Vector.Vector_Impl_;
openfl._Vector.Vector_Impl_.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl._Vector.Vector_Impl_.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl._Vector.Vector_Impl_._new = function(length,fixed) {
	if(fixed == null) fixed = false;
	if(length == null) length = 0;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(length);
	this1.data = this2;
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl._Vector.Vector_Impl_.concat = function(this1,a) {
	var vectorData = new openfl.VectorData();
	if(a != null) vectorData.length = this1.length + a.length; else vectorData.length = this1.length;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(vectorData.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) haxe.ds._Vector.Vector_Impl_.blit(a.data,0,vectorData.data,this1.length,a.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.copy = function(this1) {
	var vectorData = new openfl.VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var this2;
	this2 = new Array(this1.length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.iterator = function(this1) {
	return new openfl.VectorDataIterator(this1);
};
openfl._Vector.Vector_Impl_.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) output += sep;
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl._Vector.Vector_Impl_.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl._Vector.Vector_Impl_.reverse = function(this1) {
	var data;
	var this2;
	this2 = new Array(this1.length);
	data = this2;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl._Vector.Vector_Impl_.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl._Vector.Vector_Impl_.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,this1.data,1,this1.length - 1);
		this1.data[0] = x;
	}
};
openfl._Vector.Vector_Impl_.slice = function(this1,pos,end) {
	if(end == null) end = 0;
	if(pos == null) pos = 0;
	if(pos < 0) pos += this1.length;
	if(end <= 0) end += this1.length;
	if(end > this1.length) end = this1.length;
	var length = end - pos;
	if(length <= 0 || length > this1.length) length = this1.length;
	var vectorData = new openfl.VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	var this2;
	this2 = new Array(length);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl._Vector.Vector_Impl_.sort = function(this1,f) {
	var array = haxe.ds._Vector.Vector_Impl_.toArray(this1.data);
	array.sort(f);
	var vec;
	var this2;
	this2 = new Array(array.length);
	vec = this2;
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl._Vector.Vector_Impl_.splice = function(this1,pos,len) {
	if(pos < 0) pos += this1.length;
	if(pos + len > this1.length) len = this1.length - pos;
	if(len < 0) len = 0;
	var vectorData = new openfl.VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	var this2;
	this2 = new Array(len);
	vectorData.data = this2;
	haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl._Vector.Vector_Impl_.toString = function(this1) {
	return haxe.ds._Vector.Vector_Impl_.toArray(this1.data).toString();
};
openfl._Vector.Vector_Impl_.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl._Vector.Vector_Impl_.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		i--;
	}
	return value;
};
openfl._Vector.Vector_Impl_.ofArray = function(a) {
	var vectorData = new openfl.VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(a.length);
	vec = this1;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.convert = function(v) {
	return v;
};
openfl._Vector.Vector_Impl_.get = function(this1,index) {
	return this1.data[index];
};
openfl._Vector.Vector_Impl_.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) this1.length = key + 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl._Vector.Vector_Impl_.fromArray = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var vec;
	var this1;
	this1 = new Array(value.length);
	vec = this1;
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toArray = function(this1) {
	var value = new Array();
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) {
		var i = _g1++;
		value.push(this1.data[i]);
	}
	return value;
};
openfl._Vector.Vector_Impl_.fromHaxeVector = function(value) {
	var vectorData = new openfl.VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl._Vector.Vector_Impl_.toHaxeVector = function(this1) {
	return this1.data;
};
openfl._Vector.Vector_Impl_.fromVectorData = function(value) {
	return value;
};
openfl._Vector.Vector_Impl_.toVectorData = function(this1) {
	return this1;
};
openfl._Vector.Vector_Impl_.get_length = function(this1) {
	return this1.length;
};
openfl._Vector.Vector_Impl_.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data;
			var this2;
			this2 = new Array(value);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,Std["int"](Math.min(this1.data.length,value)));
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl._Vector.Vector_Impl_.get_fixed = function(this1) {
	return this1.fixed;
};
openfl._Vector.Vector_Impl_.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl.VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl.VectorData;
openfl.VectorData.__name__ = ["openfl","VectorData"];
openfl.VectorData.prototype = {
	__class__: openfl.VectorData
};
openfl.VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl.VectorDataIterator;
openfl.VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl.VectorDataIterator.prototype = {
	hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		var index = this.index++;
		return this.vectorData.data[index];
	}
	,__class__: openfl.VectorDataIterator
};
openfl._internal = {};
openfl._internal.renderer = {};
openfl._internal.renderer.AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl._internal.renderer.AbstractRenderer.prototype = {
	render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl._internal.renderer.AbstractRenderer
};
openfl._internal.renderer.RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl._internal.renderer.RenderSession;
openfl._internal.renderer.RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl._internal.renderer.RenderSession.prototype = {
	__class__: openfl._internal.renderer.RenderSession
};
openfl._internal.renderer.canvas = {};
openfl._internal.renderer.canvas.CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl._internal.renderer.canvas.CanvasBitmap;
openfl._internal.renderer.canvas.CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl._internal.renderer.canvas.CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__worldTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.webkitImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.__image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.__image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.webkitImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) renderSession.maskManager.popMask();
	}
};
openfl._internal.renderer.canvas.CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl._internal.renderer.canvas.CanvasGraphics;
openfl._internal.renderer.canvas.CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl._internal.renderer.canvas.CanvasGraphics.bounds = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = null;
openfl._internal.renderer.canvas.CanvasGraphics.inPath = null;
openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
openfl._internal.renderer.canvas.CanvasGraphics.positionX = null;
openfl._internal.renderer.canvas.CanvasGraphics.positionY = null;
openfl._internal.renderer.canvas.CanvasGraphics.setFill = null;
openfl._internal.renderer.canvas.CanvasGraphics.context = null;
openfl._internal.renderer.canvas.CanvasGraphics.pattern = null;
openfl._internal.renderer.canvas.CanvasGraphics.beginPath = function() {
	if(!openfl._internal.renderer.canvas.CanvasGraphics.inPath) {
		openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
		openfl._internal.renderer.canvas.CanvasGraphics.inPath = true;
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill = function(bitmapFill,bitmapRepeat) {
	if(openfl._internal.renderer.canvas.CanvasGraphics.setFill || bitmapFill == null) return;
	if(openfl._internal.renderer.canvas.CanvasGraphics.pattern == null) openfl._internal.renderer.canvas.CanvasGraphics.pattern = openfl._internal.renderer.canvas.CanvasGraphics.context.createPattern(bitmapFill.__image.get_src(),bitmapRepeat?"repeat":"no-repeat");
	openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = openfl._internal.renderer.canvas.CanvasGraphics.pattern;
	openfl._internal.renderer.canvas.CanvasGraphics.setFill = true;
};
openfl._internal.renderer.canvas.CanvasGraphics.closePath = function(closeFill) {
	if(openfl._internal.renderer.canvas.CanvasGraphics.inPath) {
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasFill) {
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(-openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,-openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
			if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.ty);
				openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
				openfl._internal.renderer.canvas.CanvasGraphics.context.transform(openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.a,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.b,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.c,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.d,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.tx,openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.ty);
			} else openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
			openfl._internal.renderer.canvas.CanvasGraphics.context.translate(openfl._internal.renderer.canvas.CanvasGraphics.bounds.x,openfl._internal.renderer.canvas.CanvasGraphics.bounds.y);
		}
		openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
		if(openfl._internal.renderer.canvas.CanvasGraphics.hasStroke) openfl._internal.renderer.canvas.CanvasGraphics.context.stroke();
	}
	openfl._internal.renderer.canvas.CanvasGraphics.inPath = false;
	if(closeFill) {
		openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
		openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false;
		openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
		openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect = function(x,y,width,height,rx,ry) {
	if(ry == -1) ry = rx;
	rx *= 0.5;
	ry *= 0.5;
	if(rx > width / 2) rx = width / 2;
	if(ry > height / 2) ry = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cx2 = -rx + rx * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	var cy1 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.SIN45;
	var cy2 = -ry + ry * openfl._internal.renderer.canvas.CanvasGraphics.TAN22;
	openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(xe,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x + rx,ye);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe - rx,y);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ry);
	openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(xe,ye - ry);
};
openfl._internal.renderer.canvas.CanvasGraphics.render = function(graphics,renderSession) {
	if(graphics.__dirty) {
		openfl._internal.renderer.canvas.CanvasGraphics.bounds = graphics.__bounds;
		openfl._internal.renderer.canvas.CanvasGraphics.hasFill = false;
		openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false;
		openfl._internal.renderer.canvas.CanvasGraphics.inPath = false;
		openfl._internal.renderer.canvas.CanvasGraphics.positionX = 0;
		openfl._internal.renderer.canvas.CanvasGraphics.positionY = 0;
		if(!graphics.__visible || graphics.__commands.length == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds == null || openfl._internal.renderer.canvas.CanvasGraphics.bounds.width == 0 || openfl._internal.renderer.canvas.CanvasGraphics.bounds.height == 0) {
			graphics.__canvas = null;
			graphics.__context = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.width);
			graphics.__canvas.height = Math.ceil(openfl._internal.renderer.canvas.CanvasGraphics.bounds.height);
			var offsetX = openfl._internal.renderer.canvas.CanvasGraphics.bounds.x;
			var offsetY = openfl._internal.renderer.canvas.CanvasGraphics.bounds.y;
			var bitmapFill = null;
			var bitmapRepeat = false;
			var _g = 0;
			var _g1 = graphics.__commands;
			try {
				while(_g < _g1.length) {
					var command = _g1[_g];
					++_g;
					switch(command[1]) {
					case 0:
						var smooth = command[5];
						var repeat = command[4];
						var matrix = command[3];
						var bitmap = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						if(bitmap != bitmapFill || repeat != bitmapRepeat) {
							bitmapFill = bitmap;
							bitmapRepeat = repeat;
							openfl._internal.renderer.canvas.CanvasGraphics.pattern = null;
							openfl._internal.renderer.canvas.CanvasGraphics.setFill = false;
							bitmap.__sync();
						}
						if(matrix != null) {
							openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = matrix;
							openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
							openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.invert();
						} else {
							openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix = null;
							openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix = null;
						}
						openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
						break;
					case 1:
						var alpha = command[3];
						var rgb = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						if(alpha == 1) openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "#" + StringTools.hex(rgb,6); else {
							var r = (rgb & 16711680) >>> 16;
							var g = (rgb & 65280) >>> 8;
							var b = rgb & 255;
							openfl._internal.renderer.canvas.CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
						}
						bitmapFill = null;
						openfl._internal.renderer.canvas.CanvasGraphics.setFill = true;
						openfl._internal.renderer.canvas.CanvasGraphics.hasFill = true;
						break;
					case 2:
						var y = command[7];
						var x = command[6];
						var cy2 = command[5];
						var cx2 = command[4];
						var cy1 = command[3];
						var cx1 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y;
						break;
					case 3:
						var y1 = command[5];
						var x1 = command[4];
						var cy = command[3];
						var cx = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x1;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y1;
						break;
					case 4:
						var radius = command[4];
						var y2 = command[3];
						var x2 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x2 - offsetX + radius,y2 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
						break;
					case 5:
						var height = command[5];
						var width = command[4];
						var y3 = command[3];
						var x3 = command[2];
						x3 -= offsetX;
						y3 -= offsetY;
						var kappa = .5522848;
						var ox = width / 2 * kappa;
						var oy = height / 2 * kappa;
						var xe = x3 + width;
						var ye = y3 + height;
						var xm = x3 + width / 2;
						var ym = y3 + height / 2;
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x3,ym);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
						openfl._internal.renderer.canvas.CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
						break;
					case 6:
						var height1 = command[5];
						var width1 = command[4];
						var y4 = command[3];
						var x4 = command[2];
						var optimizationUsed = false;
						if(bitmapFill != null) {
							var st = 0;
							var sr = 0;
							var sb = 0;
							var sl = 0;
							var canOptimizeMatrix = true;
							if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix != null) {
								if(openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.b != 0 || openfl._internal.renderer.canvas.CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
									var stl = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x4,y4));
									var sbr = openfl._internal.renderer.canvas.CanvasGraphics.inversePendingMatrix.transformPoint(new openfl.geom.Point(x4 + width1,y4 + height1));
									st = stl.y;
									sl = stl.x;
									sb = sbr.y;
									sr = sbr.x;
								}
							} else {
								st = y4;
								sl = x4;
								sb = y4 + height1;
								sr = x4 + width1;
							}
							if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= bitmapFill.width && sb <= bitmapFill.height) {
								optimizationUsed = true;
								openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(bitmapFill.__image.get_src(),sl,st,sr - sl,sb - st,x4 - offsetX,y4 - offsetY,width1,height1);
							}
						}
						if(!optimizationUsed) {
							openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
							openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
						}
						break;
					case 7:
						var ry = command[7];
						var rx = command[6];
						var height2 = command[5];
						var width2 = command[4];
						var y5 = command[3];
						var x5 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
						break;
					case 8:
						var count = command[6];
						var flags = command[5];
						var smooth1 = command[4];
						var tileData = command[3];
						var sheet = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						var useScale = (flags & 1) > 0;
						var useRotation = (flags & 2) > 0;
						var useTransform = (flags & 16) > 0;
						var useRGB = (flags & 4) > 0;
						var useAlpha = (flags & 8) > 0;
						var useRect = (flags & 32) > 0;
						var useOrigin = (flags & 64) > 0;
						var useBlendAdd = (flags & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
						if(useScale) {
							scaleIndex = numValues;
							numValues++;
						}
						if(useRotation) {
							rotationIndex = numValues;
							numValues++;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							numValues++;
						}
						var totalCount = tileData.length;
						if(count >= 0 && totalCount > count) totalCount = count;
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						sheet.__bitmap.__sync();
						surface = sheet.__bitmap.__image.get_src();
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "lighter";
						while(index < totalCount) {
							var tileID;
							if(!useRect) tileID = tileData[index + 2] | 0; else tileID = -1;
							if(!useRect && tileID != previousTileID) {
								rect = sheet.__tileRects[tileID];
								center = sheet.__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = sheet.__rectTile;
								rect.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
								center = sheet.__point;
								if(useOrigin) {
									center.x = tileData[index + 6];
									center.y = tileData[index + 7];
								} else {
									center.x = 0;
									center.y = 0;
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.save();
								openfl._internal.renderer.canvas.CanvasGraphics.context.translate(tileData[index],tileData[index + 1]);
								if(useRotation) openfl._internal.renderer.canvas.CanvasGraphics.context.rotate(tileData[index + rotationIndex]);
								var scale = 1.0;
								if(useScale) scale = tileData[index + scaleIndex];
								if(useTransform) openfl._internal.renderer.canvas.CanvasGraphics.context.transform(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
								if(useAlpha) openfl._internal.renderer.canvas.CanvasGraphics.context.globalAlpha = tileData[index + alphaIndex];
								openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) openfl._internal.renderer.canvas.CanvasGraphics.context.globalCompositeOperation = "source-over";
						break;
					case 10:
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(true);
						break;
					case 11:
						var miterLimit = command[9];
						var joints = command[8];
						var caps = command[7];
						var scaleMode = command[6];
						var pixelHinting = command[5];
						var alpha1 = command[4];
						var color = command[3];
						var thickness = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						if(thickness == null) openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = false; else {
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineWidth = thickness;
							if(joints == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = "round"; else openfl._internal.renderer.canvas.CanvasGraphics.context.lineJoin = Std.string(joints).toLowerCase();
							if(caps == null) openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "round"; else switch(caps[1]) {
							case 0:
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = "butt";
								break;
							default:
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineCap = Std.string(caps).toLowerCase();
							}
							if(miterLimit == null) openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = 3; else openfl._internal.renderer.canvas.CanvasGraphics.context.miterLimit = miterLimit;
							if(alpha1 == 1) if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(color & 16777215,6); else {
								var r1 = (color & 16711680) >>> 16;
								var g1 = (color & 65280) >>> 8;
								var b1 = color & 255;
								if(color == null) openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "#000000"; else openfl._internal.renderer.canvas.CanvasGraphics.context.strokeStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + alpha1 + ")";
							}
							openfl._internal.renderer.canvas.CanvasGraphics.hasStroke = true;
						}
						break;
					case 12:
						var y6 = command[3];
						var x6 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPatternFill(bitmapFill,bitmapRepeat);
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x6 - offsetX,y6 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x6;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y6;
						break;
					case 13:
						var y7 = command[3];
						var x7 = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.beginPath();
						openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x7 - offsetX,y7 - offsetY);
						openfl._internal.renderer.canvas.CanvasGraphics.positionX = x7;
						openfl._internal.renderer.canvas.CanvasGraphics.positionY = y7;
						break;
					case 9:
						var culling = command[5];
						var uvtData = command[4];
						var indices = command[3];
						var vertices = command[2];
						openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
						var v = vertices;
						var ind = indices;
						var uvt = uvtData;
						var pattern = null;
						var colorFill = bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvtData == null) {
								var this1;
								this1 = new openfl.VectorData();
								var this2;
								this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvtData = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data;
											var this3;
											this3 = new Array(uvtData.data.length + 10);
											data = this3;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
											uvtData.data = data;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2] / bitmapFill.width;
									}
									uvtData.length;
									if(!uvtData.fixed) {
										uvtData.length++;
										if(uvtData.data.length < uvtData.length) {
											var data1;
											var this4;
											this4 = new Array(uvtData.data.length + 10);
											data1 = this4;
											haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
											uvtData.data = data1;
										}
										uvtData.data[uvtData.length - 1] = v.data[i * 2 + 1] / bitmapFill.height;
									}
									uvtData.length;
								}
							}
							var skipT = uvtData.length != v.length;
							var normalizedUvt = openfl._internal.renderer.canvas.CanvasGraphics.normalizeUvt(uvtData,skipT);
							var maxUvt = normalizedUvt.max;
							uvt = normalizedUvt.uvt;
							if(maxUvt > 1) pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(bitmapFill,bitmapRepeat,openfl._internal.renderer.canvas.CanvasGraphics.bounds.width,openfl._internal.renderer.canvas.CanvasGraphics.bounds.height); else pattern = openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas(bitmapFill,bitmapRepeat,bitmapFill.width,bitmapFill.height);
						}
						var i1 = 0;
						var l = ind.length;
						var a;
						var b2;
						var c;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x11;
						var y11;
						var x21;
						var y21;
						var x31;
						var y31;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a = i1;
							b2 = i1 + 1;
							c = i1 + 2;
							iax = ind.data[a] * 2;
							iay = ind.data[a] * 2 + 1;
							ibx = ind.data[b2] * 2;
							iby = ind.data[b2] * 2 + 1;
							icx = ind.data[c] * 2;
							icy = ind.data[c] * 2 + 1;
							x11 = v.data[iax];
							y11 = v.data[iay];
							x21 = v.data[ibx];
							y21 = v.data[iby];
							x31 = v.data[icx];
							y31 = v.data[icy];
							switch(culling[1]) {
							case 2:
								if(!((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							case 0:
								if((x21 - x11) * (y31 - y11) - (y21 - y11) * (x31 - x11) < 0) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x11,y11);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x21,y21);
								openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x31,y31);
								openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
								openfl._internal.renderer.canvas.CanvasGraphics.context.fill();
								i1 += 3;
								continue;
							}
							openfl._internal.renderer.canvas.CanvasGraphics.context.save();
							openfl._internal.renderer.canvas.CanvasGraphics.context.beginPath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.moveTo(x11,y11);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x21,y21);
							openfl._internal.renderer.canvas.CanvasGraphics.context.lineTo(x31,y31);
							openfl._internal.renderer.canvas.CanvasGraphics.context.closePath();
							openfl._internal.renderer.canvas.CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x31 - x21) - uvy2 * x31 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
							t2 = (uvy2 * y31 + uvy1 * (y21 - y31) - uvy3 * y21 + (uvy3 - uvy2) * y11) / denom;
							t3 = (uvx1 * (x31 - x21) - uvx2 * x31 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
							t4 = -(uvx2 * y31 + uvx1 * (y21 - y31) - uvx3 * y21 + (uvx3 - uvx2) * y11) / denom;
							dx = (uvx1 * (uvy3 * x21 - uvy2 * x31) + uvy1 * (uvx2 * x31 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
							dy = (uvx1 * (uvy3 * y21 - uvy2 * y31) + uvy1 * (uvx2 * y31 - uvx3 * y21) + (uvx3 * uvy2 - uvx2 * uvy3) * y11) / denom;
							openfl._internal.renderer.canvas.CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl._internal.renderer.canvas.CanvasGraphics.context.drawImage(pattern,0,0);
							openfl._internal.renderer.canvas.CanvasGraphics.context.restore();
							i1 += 3;
						}
						break;
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
		}
		graphics.__dirty = false;
		openfl._internal.renderer.canvas.CanvasGraphics.closePath(false);
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.length != 0) {
		var context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 2:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cy1 = command[4];
				var cx2 = command[3];
				var cx1 = command[2];
				context.bezierCurveTo(cx1 - offsetX,cy1 - offsetY,cx2 - offsetX,cy2 - offsetY,x - offsetX,y - offsetY);
				positionX = x;
				positionY = y;
				break;
			case 3:
				var y1 = command[5];
				var x1 = command[4];
				var cy = command[3];
				var cx = command[2];
				context.quadraticCurveTo(cx - offsetX,cy - offsetY,x1 - offsetX,y1 - offsetY);
				positionX = x1;
				positionY = y1;
				break;
			case 4:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				context.arc(x2 - offsetX,y2 - offsetY,radius,0,Math.PI * 2,true);
				break;
			case 5:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				x3 -= offsetX;
				y3 -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x3 + width;
				var ye = y3 + height;
				var xm = x3 + width / 2;
				var ym = y3 + height / 2;
				context.moveTo(x3,ym);
				context.bezierCurveTo(x3,ym - oy,xm - ox,y3,xm,y3);
				context.bezierCurveTo(xm + ox,y3,xe,ym - oy,xe,ym);
				context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				context.bezierCurveTo(xm - ox,ye,x3,ym + oy,x3,ym);
				break;
			case 6:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				context.rect(x4 - offsetX,y4 - offsetY,width1,height1);
				break;
			case 7:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				openfl._internal.renderer.canvas.CanvasGraphics.drawRoundRect(x5 - offsetX,y5 - offsetY,width2,height2,rx,ry);
				break;
			case 12:
				var y6 = command[3];
				var x6 = command[2];
				context.lineTo(x6 - offsetX,y6 - offsetY);
				positionX = x6;
				positionY = y6;
				break;
			case 13:
				var y7 = command[3];
				var x7 = command[2];
				context.moveTo(x7 - offsetX,y7 - offsetY);
				positionX = x7;
				positionY = y7;
				break;
			default:
			}
		}
	}
};
openfl._internal.renderer.canvas.CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = Math.ceil(width);
	canvas.height = Math.ceil(height);
	context.fillStyle = context.createPattern(bitmap.__image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	context.fill();
	return canvas;
};
openfl._internal.renderer.canvas.CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.canvas.CanvasGraphics.normalizeUvt = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = Math.NEGATIVE_INFINITY;
	var tmp = Math.NEGATIVE_INFINITY;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.data[t - 1];
		if(max < tmp) max = tmp;
	}
	var result;
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var data;
				var this3;
				this3 = new Array(result.data.length + 10);
				data = this3;
				haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
		result.length;
	}
	return { max : max, uvt : result};
};
openfl._internal.renderer.canvas.CanvasRenderer = function(width,height,context) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl._internal.renderer.canvas.MaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl._internal.renderer.canvas.CanvasRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl._internal.renderer.canvas.CanvasRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.canvas.CanvasRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl._internal.renderer.canvas.CanvasRenderer
});
openfl._internal.renderer.canvas.CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl._internal.renderer.canvas.CanvasShape;
openfl._internal.renderer.canvas.CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl._internal.renderer.canvas.CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			context.globalAlpha = shape.__worldAlpha;
			var transform = shape.__worldTransform;
			if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			if(scrollRect == null) context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y); else context.drawImage(graphics.__canvas,scrollRect.x - graphics.__bounds.x,scrollRect.y - graphics.__bounds.y,scrollRect.width,scrollRect.height,graphics.__bounds.x + scrollRect.x,graphics.__bounds.y + scrollRect.y,scrollRect.width,scrollRect.height);
		}
	}
};
openfl._internal.renderer.canvas.CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl._internal.renderer.canvas.CanvasTextField;
openfl._internal.renderer.canvas.CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl._internal.renderer.canvas.CanvasTextField.context = null;
openfl._internal.renderer.canvas.CanvasTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	openfl._internal.renderer.canvas.CanvasTextField.update(textField);
	if(textField.__canvas != null) {
		var context = renderSession.context;
		context.globalAlpha = textField.__worldAlpha;
		var transform = textField.__worldTransform;
		var scrollRect = textField.get_scrollRect();
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(scrollRect == null) context.drawImage(textField.__canvas,0,0); else context.drawImage(textField.__canvas,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
	}
};
openfl._internal.renderer.canvas.CanvasTextField.renderText = function(textField,text,format,offsetX) {
	openfl._internal.renderer.canvas.CanvasTextField.context.font = textField.__getFont(format);
	openfl._internal.renderer.canvas.CanvasTextField.context.textBaseline = "top";
	openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(format.color,6);
	var lines = text.split("\n");
	var yOffset = 0;
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		var _g1 = format.align;
		switch(_g1[1]) {
		case 3:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "center";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line,textField.__width / 2,2 + yOffset,textField.__width - 4);
			break;
		case 1:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "end";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line,textField.__width - 2,2 + yOffset,textField.__width - 4);
			break;
		default:
			openfl._internal.renderer.canvas.CanvasTextField.context.textAlign = "start";
			openfl._internal.renderer.canvas.CanvasTextField.context.fillText(line,2 + offsetX,2 + yOffset,textField.__width - 4);
		}
		yOffset += textField.get_textHeight();
	}
};
openfl._internal.renderer.canvas.CanvasTextField.update = function(textField) {
	if(textField.__dirty) {
		if((textField.__text == null || textField.__text == "") && !textField.background && !textField.border || (textField.get_width() <= 0 || textField.get_height() <= 0) && textField.autoSize != openfl.text.TextFieldAutoSize.LEFT) {
			textField.__canvas = null;
			textField.__context = null;
			textField.__dirty = false;
		} else {
			if(textField.__canvas == null) {
				textField.__canvas = window.document.createElement("canvas");
				textField.__context = textField.__canvas.getContext("2d");
			}
			openfl._internal.renderer.canvas.CanvasTextField.context = textField.__context;
			if(textField.__text != null && textField.__text != "") {
				var measurements = textField.__measureText();
				var textWidth = 0.0;
				var _g = 0;
				while(_g < measurements.length) {
					var measurement = measurements[_g];
					++_g;
					textWidth += measurement;
				}
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = textWidth + 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					textField.__context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
				if(textField.__ranges == null) openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,textField.get_text(),textField.__textFormat,0); else {
					var currentIndex = 0;
					var range;
					var offsetX = 0.0;
					var _g1 = 0;
					var _g2 = textField.__ranges.length;
					while(_g1 < _g2) {
						var i = _g1++;
						range = textField.__ranges[i];
						openfl._internal.renderer.canvas.CanvasTextField.renderText(textField,textField.get_text().substring(range.start,range.end),range.format,offsetX);
						offsetX += measurements[i];
					}
				}
			} else {
				if(textField.autoSize == openfl.text.TextFieldAutoSize.LEFT) textField.__width = 4;
				textField.__canvas.width = Math.ceil(textField.__width);
				textField.__canvas.height = Math.ceil(textField.__height);
				if(textField.border || textField.background) {
					if(textField.border) openfl._internal.renderer.canvas.CanvasTextField.context.rect(0.5,0.5,textField.__width - 1,textField.__height - 1); else textField.__context.rect(0,0,textField.__width,textField.__height);
					if(textField.background) {
						openfl._internal.renderer.canvas.CanvasTextField.context.fillStyle = "#" + StringTools.hex(textField.backgroundColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.fill();
					}
					if(textField.border) {
						openfl._internal.renderer.canvas.CanvasTextField.context.lineWidth = 1;
						openfl._internal.renderer.canvas.CanvasTextField.context.lineCap = "square";
						openfl._internal.renderer.canvas.CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.borderColor,6);
						openfl._internal.renderer.canvas.CanvasTextField.context.stroke();
					}
				}
			}
			textField.__dirty = false;
			return true;
		}
	}
	return false;
};
openfl._internal.renderer.canvas.MaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.canvas.MaskManager"] = openfl._internal.renderer.canvas.MaskManager;
openfl._internal.renderer.canvas.MaskManager.__name__ = ["openfl","_internal","renderer","canvas","MaskManager"];
openfl._internal.renderer.canvas.MaskManager.prototype = {
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__worldTransform;
		if(transform == null) transform = new openfl.geom.Matrix();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl._internal.renderer.canvas.MaskManager
};
openfl._internal.renderer.dom = {};
openfl._internal.renderer.dom.DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl._internal.renderer.dom.DOMBitmap;
openfl._internal.renderer.dom.DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl._internal.renderer.dom.DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.__image.buffer.__srcImage != null) openfl._internal.renderer.dom.DOMBitmap.renderImage(bitmap,renderSession); else openfl._internal.renderer.dom.DOMBitmap.renderCanvas(bitmap,renderSession);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl._internal.renderer.dom.DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.webkitImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.__image.buffer.__srcCanvas,0,0);
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl._internal.renderer.dom.DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.__image.buffer.__srcImage.src;
		openfl._internal.renderer.dom.DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl._internal.renderer.dom.DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl._internal.renderer.dom.DOMRenderer = function(width,height,element) {
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl._internal.renderer.dom.DOMRenderer;
openfl._internal.renderer.dom.DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl._internal.renderer.dom.DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__worldTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip.transform(displayObject.__worldTransform.clone().invert());
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl._internal.renderer.dom.DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl._internal.renderer.dom.DOMRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.dom.DOMRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl._internal.renderer.dom.DOMRenderer
});
openfl._internal.renderer.dom.DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl._internal.renderer.dom.DOMShape;
openfl._internal.renderer.dom.DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl._internal.renderer.dom.DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl._internal.renderer.canvas.CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = new openfl.geom.Matrix();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform = transform.mult(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", " + "0, 0, " + transform.c + ", " + transform.d + ", " + "0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl._internal.renderer.dom.DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl._internal.renderer.dom.DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl._internal.renderer.dom.DOMTextField;
openfl._internal.renderer.dom.DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl._internal.renderer.dom.DOMTextField.render = function(textField,renderSession) {
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textField.__text != "" || textField.background || textField.border) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl._internal.renderer.dom.DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("cursor","inherit",null);
				}
				var style = textField.__style;
				textField.__div.innerHTML = textField.__text;
				if(textField.background) style.setProperty("background-color","#" + StringTools.hex(textField.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textField.border) style.setProperty("border","solid 1px #" + StringTools.hex(textField.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",textField.__getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textField.autoSize != openfl.text.TextFieldAutoSize.NONE) style.setProperty("width","auto",null); else style.setProperty("width",textField.__width + "px",null);
				style.setProperty("height",textField.__height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g[1]) {
				case 3:
					style.setProperty("text-align","center",null);
					break;
				case 1:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) openfl._internal.renderer.dom.DOMRenderer.applyStyle(textField,renderSession,true,true,false);
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl._internal.renderer.opengl = {};
openfl._internal.renderer.opengl.GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl._internal.renderer.opengl.GLBitmap;
openfl._internal.renderer.opengl.GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl._internal.renderer.opengl.GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var i;
	var j;
	renderSession.spriteBatch.render(bitmap);
};
openfl._internal.renderer.opengl.GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) preserveDrawingBuffer = false;
	if(antialias == null) antialias = false;
	if(transparent == null) transparent = false;
	if(height == null) height = 600;
	if(width == null) width = 800;
	openfl._internal.renderer.AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl._internal.renderer.opengl.GLRenderer.glContextId++;
	this.gl = gl;
	openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = gl;
	if(openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL == null) {
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = new haxe.ds.EnumValueMap();
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.NORMAL,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ADD,[gl.SRC_ALPHA,gl.DST_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.MULTIPLY,[gl.DST_COLOR,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SCREEN,[gl.SRC_ALPHA,gl.ONE]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ALPHA,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DARKEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.DIFFERENCE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.ERASE,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.HARDLIGHT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.INVERT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LAYER,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.LIGHTEN,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.OVERLAY,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
		openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.set(openfl.display.BlendMode.SUBTRACT,[gl.ONE,gl.ONE_MINUS_SRC_ALPHA]);
	}
	this.projection = new openfl.geom.Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl.geom.Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl._internal.renderer.opengl.utils.ShaderManager(gl);
	this.spriteBatch = new openfl._internal.renderer.opengl.utils.SpriteBatch(gl);
	this.maskManager = new openfl._internal.renderer.opengl.utils.MaskManager(gl);
	this.filterManager = new openfl._internal.renderer.opengl.utils.FilterManager(gl,this.transparent);
	this.stencilManager = new openfl._internal.renderer.opengl.utils.StencilManager(gl);
	this.blendModeManager = new openfl._internal.renderer.opengl.utils.BlendModeManager(gl);
	this.renderSession = new openfl._internal.renderer.RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.maskManager = this.maskManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	gl.useProgram(this.shaderManager.defaultShader.program);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl._internal.renderer.opengl.GLRenderer;
openfl._internal.renderer.opengl.GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl._internal.renderer.opengl.GLRenderer.__super__ = openfl._internal.renderer.AbstractRenderer;
openfl._internal.renderer.opengl.GLRenderer.prototype = $extend(openfl._internal.renderer.AbstractRenderer.prototype,{
	destroy: function() {
		openfl._internal.renderer.opengl.GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl._internal.renderer.opengl.GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		gl.viewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) return;
		var gl = this.gl;
		gl.viewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,null);
		if(this.transparent) gl.clearColor(0,0,0,0); else gl.clearColor(stage.__colorSplit[0] | 0,stage.__colorSplit[1] | 0,stage.__colorSplit[2] | 0,1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(openfl.display.BlendMode.NORMAL);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.renderSession.projection = projection;
		this.renderSession.offset = this.offset;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.end();
	}
	,resize: function(width,height) {
		openfl._internal.renderer.AbstractRenderer.prototype.resize.call(this,width,height);
		this.gl.viewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl._internal.renderer.opengl.GLRenderer
});
openfl._internal.renderer.opengl.GLTextField = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLTextField"] = openfl._internal.renderer.opengl.GLTextField;
openfl._internal.renderer.opengl.GLTextField.__name__ = ["openfl","_internal","renderer","opengl","GLTextField"];
openfl._internal.renderer.opengl.GLTextField.render = function(textField,renderSession) {
	if(!textField.__renderable || textField.__worldAlpha <= 0) return;
	var gl = renderSession.gl;
	var changed = openfl._internal.renderer.canvas.CanvasTextField.update(textField);
	if(textField.__texture == null) {
		textField.__texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D,textField.__texture);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
		changed = true;
	}
	if(changed) {
		gl.bindTexture(gl.TEXTURE_2D,textField.__texture);
		gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,textField.__canvas);
		gl.bindTexture(gl.TEXTURE_2D,null);
	}
};
openfl._internal.renderer.opengl.shaders = {};
openfl._internal.renderer.opengl.shaders.AbstractShader = function(gl) {
	this._UID = openfl._internal.renderer.opengl.shaders.AbstractShader.__UID++;
	this.gl = gl;
	this.program = null;
	this.attributes = [];
};
$hxClasses["openfl._internal.renderer.opengl.shaders.AbstractShader"] = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.AbstractShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","AbstractShader"];
openfl._internal.renderer.opengl.shaders.AbstractShader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var fragmentShader = openfl._internal.renderer.opengl.shaders.AbstractShader.CompileFragmentShader(gl,fragmentSrc);
	var vertexShader = openfl._internal.renderer.opengl.shaders.AbstractShader.CompileVertexShader(gl,vertexSrc);
	var shaderProgram = gl.createProgram();
	if(fragmentShader != null && vertexShader != null) {
		gl.attachShader(shaderProgram,vertexShader);
		gl.attachShader(shaderProgram,fragmentShader);
		gl.linkProgram(shaderProgram);
		if(gl.getProgramParameter(shaderProgram,gl.LINK_STATUS) == 0) haxe.Log.trace("Could not initialize shaders",{ fileName : "AbstractShader.hx", lineNumber : 80, className : "openfl._internal.renderer.opengl.shaders.AbstractShader", methodName : "compileProgram"});
	}
	return shaderProgram;
};
openfl._internal.renderer.opengl.shaders.AbstractShader.CompileVertexShader = function(gl,shaderSrc) {
	return openfl._internal.renderer.opengl.shaders.AbstractShader._CompileShader(gl,shaderSrc,gl.VERTEX_SHADER);
};
openfl._internal.renderer.opengl.shaders.AbstractShader.CompileFragmentShader = function(gl,shaderSrc) {
	return openfl._internal.renderer.opengl.shaders.AbstractShader._CompileShader(gl,shaderSrc,gl.FRAGMENT_SHADER);
};
openfl._internal.renderer.opengl.shaders.AbstractShader._CompileShader = function(gl,shaderSrc,shaderType) {
	var src = shaderSrc.join("\n");
	var shader = gl.createShader(shaderType);
	gl.shaderSource(shader,src);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe.Log.trace(gl.getShaderInfoLog(shader),{ fileName : "AbstractShader.hx", lineNumber : 115, className : "openfl._internal.renderer.opengl.shaders.AbstractShader", methodName : "_CompileShader"});
		return null;
	}
	return shader;
};
openfl._internal.renderer.opengl.shaders.AbstractShader.prototype = {
	destroy: function() {
		if(this.program != null) this.gl.deleteProgram(this.program);
		this.uniforms = null;
		this.gl = null;
		this.attributes = null;
	}
	,init: function() {
		var gl = this.gl;
		var program = openfl._internal.renderer.opengl.shaders.AbstractShader.compileProgram(gl,this.vertexSrc,this.fragmentSrc);
		gl.useProgram(program);
		this.program = program;
	}
	,__class__: openfl._internal.renderer.opengl.shaders.AbstractShader
};
openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision mediump float;","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.vertexSrc = ["attribute vec2 aVertexPosition;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform vec3 tint;","uniform float alpha;","uniform vec3 color;","varying vec4 vColor;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vColor = vec4(color * alpha * tint, alpha);","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader"] = openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader;
openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","ComplexPrimitiveShader"];
openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.tintColor = gl.getUniformLocation(this.program,"tint");
		this.color = gl.getUniformLocation(this.program,"color");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.attributes = [this.aVertexPosition];
		this.translationMatrix = gl.getUniformLocation(this.program,"translationMatrix");
		this.alpha = gl.getUniformLocation(this.program,"alpha");
	}
	,__class__: openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader
});
openfl._internal.renderer.opengl.shaders.DefaultShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision lowp float;","varying vec2 vTextureCoord;","varying vec4 vColor;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;","}"];
	this.textureCount = 0;
	this.attributes = [];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.DefaultShader"] = openfl._internal.renderer.opengl.shaders.DefaultShader;
openfl._internal.renderer.opengl.shaders.DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","DefaultShader"];
openfl._internal.renderer.opengl.shaders.DefaultShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.DefaultShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		if(this.vertexSrc == null) this.vertexSrc = openfl._internal.renderer.opengl.shaders.DefaultShader.defaultVertexSrc;
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.uSampler = gl.getUniformLocation(this.program,"uSampler");
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.dimensions = gl.getUniformLocation(this.program,"dimensions");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.aTextureCoord = gl.getAttribLocation(this.program,"aTextureCoord");
		this.colorAttribute = gl.getAttribLocation(this.program,"aColor");
		if(this.colorAttribute == -1) this.colorAttribute = 2;
		this.attributes = [this.aVertexPosition,this.aTextureCoord,this.colorAttribute];
		if(this.uniforms != null) {
			var $it0 = this.uniforms.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				this.uniforms.get(key).uniformLocation = gl.getUniformLocation(this.program,key);
			}
		}
		this.initUniforms();
	}
	,initSampler2D: function(uniform) {
		if(uniform.value == null || uniform.value.baseTexture == null || uniform.value.baseTexture.hasLoaded == null) return;
		var gl = this.gl;
		gl.activeTexture(Reflect.field(gl,"TEXTURE" + this.textureCount));
		gl.bindTexture(gl.TEXTURE_2D,uniform.value.baseTexture._glTextures[openfl._internal.renderer.opengl.GLRenderer.glContextId]);
		if(uniform.textureData != null) {
			var data = uniform.textureData;
			var magFilter;
			if(data.magFilter != 0) magFilter = data.magFilter; else magFilter = gl.LINEAR;
			var minFilter;
			if(data.minFilter != 0) minFilter = data.minFilter; else minFilter = gl.LINEAR;
			var wrapS;
			if(data.wrapS != 0) wrapS = data.wrapS; else wrapS = gl.CLAMP_TO_EDGE;
			var wrapT;
			if(data.wrapT != 0) wrapT = data.wrapT; else wrapT = gl.CLAMP_TO_EDGE;
			var format;
			if(data.luminance != 0) format = gl.LUMINANCE; else format = gl.RGBA;
			if(data.repeat) {
				wrapS = gl.REPEAT;
				wrapT = gl.REPEAT;
			}
			gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,data.flip);
			if(data.width != 0) {
				var width;
				if(data.width != 0) width = data.width; else width = 512;
				var height;
				if(data.height != 0) height = data.height; else height = 2;
				var border;
				if(data.border != 0) border = data.border; else border = 0;
				gl.texImage2D(gl.TEXTURE_2D,0,format,width,height,border,format,gl.UNSIGNED_BYTE,null);
			} else gl.texImage2D(gl.TEXTURE_2D,0,format,gl.RGBA,gl.UNSIGNED_BYTE,uniform.value.baseTexture.source);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,magFilter);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,minFilter);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,wrapS);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,wrapT);
		}
		gl.uniform1i(uniform.uniformLocation,this.textureCount);
		uniform._init = true;
		this.textureCount++;
	}
	,initUniforms: function() {
		this.textureCount = 1;
		var gl = this.gl;
		var uniform;
		if(this.uniforms == null) return;
		var $it0 = this.uniforms.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			uniform = this.uniforms.get(key);
			var type = uniform.type;
			if(type == "sampler2D") {
				uniform._init = false;
				if(uniform.value != null) this.initSampler2D(uniform);
			} else if(type == "mat2" || type == "mat3" || type == "mat4") {
				uniform.glMatrix = true;
				uniform.glValueLength = 1;
				if(type == "mat2") uniform.glFunc = $bind(gl,gl.uniformMatrix2fv); else if(type == "mat3") uniform.glFunc = $bind(gl,gl.uniformMatrix3fv); else if(type == "mat4") uniform.glFunc = $bind(gl,gl.uniformMatrix4fv);
			} else {
				uniform.glFunc = Reflect.field(gl,"uniform" + type);
				if(type == "2f" || type == "2i") uniform.glValueLength = 2; else if(type == "3f" || type == "3i") uniform.glValueLength = 3; else if(type == "4f" || type == "4i") uniform.glValueLength = 4; else uniform.glValueLength = 1;
			}
		}
	}
	,syncUniforms: function() {
		this.textureCount = 1;
		var uniform;
		var gl = this.gl;
		if(this.uniforms == null) return;
		var $it0 = this.uniforms.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			uniform = this.uniforms.get(key);
			if(uniform.glValueLength == 1) {
				if(uniform.glMatrix == true) uniform.glFunc.call(gl,uniform.uniformLocation,uniform.transpose,uniform.value); else uniform.glFunc.call(gl,uniform.uniformLocation,uniform.value);
			} else if(uniform.glValueLength == 2) uniform.glFunc.call(gl,uniform.uniformLocation,uniform.value.x,uniform.value.y); else if(uniform.glValueLength == 3) uniform.glFunc.call(gl,uniform.uniformLocation,uniform.value.x,uniform.value.y,uniform.value.z); else if(uniform.glValueLength == 4) uniform.glFunc.call(gl,uniform.uniformLocation,uniform.value.x,uniform.value.y,uniform.value.z,uniform.value.w); else if(uniform.type == "sampler2D") {
				if(uniform._init) {
					gl.activeTexture(Reflect.field(gl,"TEXTURE" + this.textureCount));
					var tex = uniform.value.getTexture();
					gl.bindTexture(gl.TEXTURE_2D,tex);
					gl.uniform1i(uniform.uniformLocation,this.textureCount);
					this.textureCount++;
				} else this.initSampler2D(uniform);
			}
		}
	}
	,__class__: openfl._internal.renderer.opengl.shaders.DefaultShader
});
openfl._internal.renderer.opengl.shaders.DrawTrianglesShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.vertexSrc = ["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute vec4 aColor;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","varying vec2 vPos;","varying vec4 vColor;","void main(void) {","   vec3 v = vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vPos = aTextureCoord;","   vColor = aColor;","}"];
	this.fragmentSrc = ["precision mediump float;","uniform sampler2D sampler;","uniform vec3 color;","uniform bool useTexture;","uniform float alpha;","varying vec2 vPos;","varying vec4 vColor;","vec4 tmp;","void main(void) {","   if(useTexture) {","       tmp = texture2D(sampler, vPos);","   } else {","       tmp = vec4(color, 1.);","   }","   float a = tmp.a * vColor.a * alpha;","   gl_FragColor = vec4(vec3((tmp.rgb * vColor.rgb) * a), a);","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.DrawTrianglesShader"] = openfl._internal.renderer.opengl.shaders.DrawTrianglesShader;
openfl._internal.renderer.opengl.shaders.DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","DrawTrianglesShader"];
openfl._internal.renderer.opengl.shaders.DrawTrianglesShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.DrawTrianglesShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		this.translationMatrix = this.gl.getUniformLocation(this.program,"translationMatrix");
		this.projectionVector = this.gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = this.gl.getUniformLocation(this.program,"offsetVector");
		this.sampler = this.gl.getUniformLocation(this.program,"sampler");
		this.alpha = this.gl.getUniformLocation(this.program,"alpha");
		this.color = this.gl.getUniformLocation(this.program,"color");
		this.useTexture = this.gl.getUniformLocation(this.program,"useTexture");
		this.aVertexPosition = this.gl.getAttribLocation(this.program,"aVertexPosition");
		this.aTextureCoord = this.gl.getAttribLocation(this.program,"aTextureCoord");
		this.colorAttribute = this.gl.getAttribLocation(this.program,"aColor");
		this.attributes = [this.aVertexPosition,this.aTextureCoord,this.colorAttribute];
	}
	,__class__: openfl._internal.renderer.opengl.shaders.DrawTrianglesShader
});
openfl._internal.renderer.opengl.shaders.FastShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision lowp float;","varying vec2 vTextureCoord;","varying float vColor;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor ;","}"];
	this.vertexSrc = ["attribute vec2 aVertexPosition;","attribute vec2 aPositionCoord;","attribute vec2 aScale;","attribute float aRotation;","attribute vec2 aTextureCoord;","attribute float aColor;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform mat3 uMatrix;","varying vec2 vTextureCoord;","varying float vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   vec2 v;","   vec2 sv = aVertexPosition * aScale;","   v.x = (sv.x) * cos(aRotation) - (sv.y) * sin(aRotation);","   v.y = (sv.x) * sin(aRotation) + (sv.y) * cos(aRotation);","   v = ( uMatrix * vec3(v + aPositionCoord , 1.0) ).xy ;","   gl_Position = vec4( ( v / projectionVector) + center , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vColor = aColor;","}"];
	this.textureCount = 0;
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.FastShader"] = openfl._internal.renderer.opengl.shaders.FastShader;
openfl._internal.renderer.opengl.shaders.FastShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","FastShader"];
openfl._internal.renderer.opengl.shaders.FastShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.FastShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.uSampler = gl.getUniformLocation(this.program,"uSampler");
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.dimensions = gl.getUniformLocation(this.program,"dimensions");
		this.uMatrix = gl.getUniformLocation(this.program,"uMatrix");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.aPositionCoord = gl.getAttribLocation(this.program,"aPositionCoord");
		this.aScale = gl.getAttribLocation(this.program,"aScale");
		this.aRotation = gl.getAttribLocation(this.program,"aRotation");
		this.aTextureCoord = gl.getAttribLocation(this.program,"aTextureCoord");
		this.colorAttribute = gl.getAttribLocation(this.program,"aColor");
		if(this.colorAttribute == -1) this.colorAttribute = 2;
		this.attributes = [this.aVertexPosition,this.aPositionCoord,this.aScale,this.aRotation,this.aTextureCoord,this.colorAttribute];
	}
	,__class__: openfl._internal.renderer.opengl.shaders.FastShader
});
openfl._internal.renderer.opengl.shaders.FillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.vertexSrc = ["attribute vec2 aVertexPosition;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","}"];
	this.fragmentSrc = ["precision mediump float;","uniform vec3 color;","uniform float alpha;","void main(void) {","   gl_FragColor = vec4((color * alpha), alpha);","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.FillShader"] = openfl._internal.renderer.opengl.shaders.FillShader;
openfl._internal.renderer.opengl.shaders.FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","FillShader"];
openfl._internal.renderer.opengl.shaders.FillShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.FillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		this.translationMatrix = this.gl.getUniformLocation(this.program,"translationMatrix");
		this.projectionVector = this.gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = this.gl.getUniformLocation(this.program,"offsetVector");
		this.color = this.gl.getUniformLocation(this.program,"color");
		this.alpha = this.gl.getUniformLocation(this.program,"alpha");
		this.aVertexPosition = this.gl.getAttribLocation(this.program,"aVertexPosition");
		this.attributes = [this.aVertexPosition];
	}
	,__class__: openfl._internal.renderer.opengl.shaders.FillShader
});
openfl._internal.renderer.opengl.shaders.PatternFillShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.vertexSrc = ["attribute vec2 aVertexPosition;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform mat3 patternMatrix;","varying vec2 vPos;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vPos = (patternMatrix * vec3(aVertexPosition, 1)).xy;","}"];
	this.fragmentSrc = ["precision mediump float;","uniform float alpha;","uniform vec2 patternTL;","uniform vec2 patternBR;","uniform sampler2D sampler;","varying vec2 vPos;","void main(void) {","   vec2 pos = mix(patternTL, patternBR, vPos);","   vec4 tcol = texture2D(sampler, pos);","   gl_FragColor = vec4(tcol.rgb * alpha, tcol.a * alpha);","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.PatternFillShader"] = openfl._internal.renderer.opengl.shaders.PatternFillShader;
openfl._internal.renderer.opengl.shaders.PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","PatternFillShader"];
openfl._internal.renderer.opengl.shaders.PatternFillShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.PatternFillShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		this.translationMatrix = this.gl.getUniformLocation(this.program,"translationMatrix");
		this.projectionVector = this.gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = this.gl.getUniformLocation(this.program,"offsetVector");
		this.patternMatrix = this.gl.getUniformLocation(this.program,"patternMatrix");
		this.patternTL = this.gl.getUniformLocation(this.program,"patternTL");
		this.patternBR = this.gl.getUniformLocation(this.program,"patternBR");
		this.sampler = this.gl.getUniformLocation(this.program,"sampler");
		this.alpha = this.gl.getUniformLocation(this.program,"alpha");
		this.aVertexPosition = this.gl.getAttribLocation(this.program,"aVertexPosition");
		this.attributes = [this.aVertexPosition];
	}
	,__class__: openfl._internal.renderer.opengl.shaders.PatternFillShader
});
openfl._internal.renderer.opengl.shaders.PrimitiveShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision mediump float;","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.vertexSrc = ["attribute vec2 aVertexPosition;","attribute vec4 aColor;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","uniform float alpha;","uniform vec3 tint;","varying vec4 vColor;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vColor = aColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.PrimitiveShader"] = openfl._internal.renderer.opengl.shaders.PrimitiveShader;
openfl._internal.renderer.opengl.shaders.PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","PrimitiveShader"];
openfl._internal.renderer.opengl.shaders.PrimitiveShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.PrimitiveShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.tintColor = gl.getUniformLocation(this.program,"tint");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.colorAttribute = gl.getAttribLocation(this.program,"aColor");
		this.attributes = [this.aVertexPosition,this.colorAttribute];
		this.translationMatrix = gl.getUniformLocation(this.program,"translationMatrix");
		this.alpha = gl.getUniformLocation(this.program,"alpha");
	}
	,__class__: openfl._internal.renderer.opengl.shaders.PrimitiveShader
});
openfl._internal.renderer.opengl.shaders.StripShader = function(gl) {
	openfl._internal.renderer.opengl.shaders.AbstractShader.call(this,gl);
	this.fragmentSrc = ["precision mediump float;","varying vec2 vTextureCoord;","uniform float alpha;","uniform sampler2D uSampler;","void main(void) {","   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y));","}"];
	this.vertexSrc = ["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","uniform mat3 translationMatrix;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","varying vec2 vTextureCoord;","void main(void) {","   vec3 v = translationMatrix * vec3(aVertexPosition , 1.0);","   v -= offsetVector.xyx;","   gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders.StripShader"] = openfl._internal.renderer.opengl.shaders.StripShader;
openfl._internal.renderer.opengl.shaders.StripShader.__name__ = ["openfl","_internal","renderer","opengl","shaders","StripShader"];
openfl._internal.renderer.opengl.shaders.StripShader.__super__ = openfl._internal.renderer.opengl.shaders.AbstractShader;
openfl._internal.renderer.opengl.shaders.StripShader.prototype = $extend(openfl._internal.renderer.opengl.shaders.AbstractShader.prototype,{
	init: function() {
		openfl._internal.renderer.opengl.shaders.AbstractShader.prototype.init.call(this);
		var gl = this.gl;
		this.uSampler = gl.getUniformLocation(this.program,"uSampler");
		this.projectionVector = gl.getUniformLocation(this.program,"projectionVector");
		this.offsetVector = gl.getUniformLocation(this.program,"offsetVector");
		this.colorAttribute = gl.getAttribLocation(this.program,"aColor");
		this.aVertexPosition = gl.getAttribLocation(this.program,"aVertexPosition");
		this.aTextureCoord = gl.getAttribLocation(this.program,"aTextureCoord");
		this.attributes = [this.aVertexPosition,this.aTextureCoord];
		this.translationMatrix = gl.getUniformLocation(this.program,"translationMatrix");
		this.alpha = gl.getUniformLocation(this.program,"alpha");
	}
	,__class__: openfl._internal.renderer.opengl.shaders.StripShader
});
openfl._internal.renderer.opengl.utils = {};
openfl._internal.renderer.opengl.utils.BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl._internal.renderer.opengl.utils.BlendModeManager;
openfl._internal.renderer.opengl.utils.BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl._internal.renderer.opengl.utils.BlendModeManager.prototype = {
	destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode) {
		if(blendMode == null) blendMode = openfl.display.BlendMode.NORMAL;
		if(this.currentBlendMode == blendMode) return false;
		this.currentBlendMode = blendMode;
		var blendModeWebGL = openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL.get(this.currentBlendMode);
		this.gl.blendFunc(blendModeWebGL[0],blendModeWebGL[1]);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.BlendModeManager
};
openfl._internal.renderer.opengl.utils.DrawPath = function() {
	this.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	this.points = [];
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl._internal.renderer.opengl.utils.LineStyle();
	this.fill = openfl._internal.renderer.opengl.utils.FillType.None;
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl._internal.renderer.opengl.utils.DrawPath;
openfl._internal.renderer.opengl.utils.DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl._internal.renderer.opengl.utils.DrawPath.getStack = function(graphics,gl) {
	return openfl._internal.renderer.opengl.utils.PathBuiler.build(graphics,gl);
};
openfl._internal.renderer.opengl.utils.DrawPath.prototype = {
	update: function(line,fill,fillIndex) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color & 16777215;
		if(line.alpha == null) this.line.alpha = 1; else this.line.alpha = line.alpha;
		if(line.scaleMode == null) this.line.scaleMode = openfl.display.LineScaleMode.NORMAL; else this.line.scaleMode = line.scaleMode;
		if(line.caps == null) this.line.caps = openfl.display.CapsStyle.ROUND; else this.line.caps = line.caps;
		if(line.joints == null) this.line.joints = openfl.display.JointStyle.ROUND; else this.line.joints = line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl._internal.renderer.opengl.utils.DrawPath
};
openfl._internal.renderer.opengl.utils.PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl._internal.renderer.opengl.utils.PathBuiler;
openfl._internal.renderer.opengl.utils.PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__line = null;
openfl._internal.renderer.opengl.utils.PathBuiler.__fill = null;
openfl._internal.renderer.opengl.utils.PathBuiler.closePath = function() {
	var l = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length;
	if(l <= 0) return;
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type == openfl._internal.renderer.opengl.utils.GraphicType.Polygon && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.fill != openfl._internal.renderer.opengl.utils.FillType.None) {
		var sx = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[0];
		var sy = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[1];
		var ex = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 2];
		var ey = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) {
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sx);
			openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(sy);
		}
	}
};
openfl._internal.renderer.opengl.utils.PathBuiler.endFill = function() {
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
};
openfl._internal.renderer.opengl.utils.PathBuiler.moveTo = function(x,y) {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x);
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y);
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
};
openfl._internal.renderer.opengl.utils.PathBuiler.graphicDataPop = function() {
	if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
};
openfl._internal.renderer.opengl.utils.PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths = new Array();
	openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
	openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
	openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
	openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	if(glStack == null) glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId] = new openfl._internal.renderer.opengl.utils.GLStack(gl);
	if(!graphics.__visible || graphics.__commands.length == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
	} else {
		var _g = 0;
		var _g1 = graphics.__commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmap = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(bitmap != null) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Texture(bitmap,matrix,repeat,smooth); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 1:
				var alpha = command[3];
				var rgb = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				if(alpha > 0) openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.Color(rgb & 16777215,alpha); else openfl._internal.renderer.opengl.utils.PathBuiler.__fill = openfl._internal.renderer.opengl.utils.FillType.None;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) {
					if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
					openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
					openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				}
				break;
			case 2:
				var y = command[7];
				var x = command[6];
				var cy2 = command[5];
				var cx2 = command[4];
				var cy = command[3];
				var cx = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.moveTo(0,0);
				var n = 20;
				var dt = 0;
				var dt2 = 0;
				var dt3 = 0;
				var t2 = 0;
				var t3 = 0;
				var points = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
				var fromX = points[points.length - 2];
				var fromY = points[points.length - 1];
				var px = 0;
				var py = 0;
				var tmp = 0;
				var _g3 = 1;
				var _g2 = n + 1;
				while(_g3 < _g2) {
					var i = _g3++;
					tmp = i / n;
					dt = 1 - tmp;
					dt2 = dt * dt;
					dt3 = dt2 * dt;
					t2 = tmp * tmp;
					t3 = t2 * tmp;
					px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
					py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
					points.push(px);
					points.push(py);
				}
				break;
			case 3:
				var y1 = command[5];
				var x1 = command[4];
				var cy1 = command[3];
				var cx1 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.moveTo(0,0);
				var xa = 0;
				var ya = 0;
				var n1 = 20;
				var points1 = openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points;
				var fromX1 = points1[points1.length - 2];
				var fromY1 = points1[points1.length - 1];
				var px1 = 0;
				var py1 = 0;
				var tmp1 = 0;
				var _g31 = 1;
				var _g21 = n1 + 1;
				while(_g31 < _g21) {
					var i1 = _g31++;
					tmp1 = i1 / n1;
					xa = fromX1 + (cx1 - fromX1) * tmp1;
					ya = fromY1 + (cy1 - fromY1) * tmp1;
					px1 = xa + (cx1 + (x1 - cx1) * tmp1 - xa) * tmp1;
					py1 = ya + (cy1 + (y1 - cy1) * tmp1 - ya) * tmp1;
					points1.push(px1);
					points1.push(py1);
				}
				break;
			case 4:
				var radius = command[4];
				var y2 = command[3];
				var x2 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Circle;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x2,y2,radius];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 5:
				var height = command[5];
				var width = command[4];
				var y3 = command[3];
				var x3 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Ellipse;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x3,y3,width,height];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 6:
				var height1 = command[5];
				var width1 = command[4];
				var y4 = command[3];
				var x4 = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(false);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x4,y4,width1,height1];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 7:
				var ry = command[7];
				var rx = command[6];
				var height2 = command[5];
				var width2 = command[4];
				var y5 = command[3];
				var x5 = command[2];
				if(ry == -1) ry = rx;
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width2 / 2) rx = width2 / 2;
				if(ry > height2 / 2) ry = height2 / 2;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Rectangle(true);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [x5,y5,width2,height2,rx,ry];
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 10:
				openfl._internal.renderer.opengl.utils.PathBuiler.endFill();
				break;
			case 11:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color = command[3];
				var thickness = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__line = new openfl._internal.renderer.opengl.utils.LineStyle();
				if(thickness == null || thickness == Math.NaN || thickness < 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 0; else if(thickness == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = 1; else openfl._internal.renderer.opengl.utils.PathBuiler.__line.width = thickness;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.color = color;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.alpha = alpha1;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.scaleMode = scaleMode;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.caps = caps;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.joints = joints;
				openfl._internal.renderer.opengl.utils.PathBuiler.__line.miterLimit = miterLimit;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points = [];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 12:
				var y6 = command[3];
				var x6 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(x6);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.push(y6);
				break;
			case 13:
				var y7 = command[3];
				var x7 = command[2];
				openfl._internal.renderer.opengl.utils.PathBuiler.moveTo(x7,y7);
				break;
			case 9:
				var blendMode = command[7];
				var colors = command[6];
				var culling = command[5];
				var uvtData = command[4];
				var indices = command[3];
				var vertices = command[2];
				var isColor;
				{
					var _g22 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
					switch(_g22[1]) {
					case 1:
						isColor = true;
						break;
					default:
						isColor = false;
					}
				}
				if(isColor && uvtData != null) continue;
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				if(uvtData == null) {
					var this1;
					this1 = new openfl.VectorData();
					var this2;
					this2 = new Array(0);
					this1.data = this2;
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					{
						var _g23 = openfl._internal.renderer.opengl.utils.PathBuiler.__fill;
						switch(_g23[1]) {
						case 2:
							var b = _g23[2];
							var _g4 = 0;
							var _g32 = vertices.length / 2 | 0;
							while(_g4 < _g32) {
								var i2 = _g4++;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data;
										var this3;
										this3 = new Array(uvtData.data.length + 10);
										data = this3;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data,0,uvtData.data.length);
										uvtData.data = data;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i2 * 2] / b.width;
								}
								uvtData.length;
								if(!uvtData.fixed) {
									uvtData.length++;
									if(uvtData.data.length < uvtData.length) {
										var data1;
										var this4;
										this4 = new Array(uvtData.data.length + 10);
										data1 = this4;
										haxe.ds._Vector.Vector_Impl_.blit(uvtData.data,0,data1,0,uvtData.data.length);
										uvtData.data = data1;
									}
									uvtData.data[uvtData.length - 1] = vertices.data[i2 * 2 + 1] / b.height;
								}
								uvtData.length;
							}
							break;
						default:
						}
					}
				}
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			case 8:
				var count = command[6];
				var flags = command[5];
				var smooth1 = command[4];
				var tileData = command[3];
				var sheet = command[2];
				if(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable && openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.points.length == 0) openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.pop(); else openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex++;
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath = new openfl._internal.renderer.opengl.utils.DrawPath();
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.update(openfl._internal.renderer.opengl.utils.PathBuiler.__line,openfl._internal.renderer.opengl.utils.PathBuiler.__fill,openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.type = openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles(sheet,tileData,smooth1,flags,count);
				openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath.isRemovable = false;
				openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths.push(openfl._internal.renderer.opengl.utils.PathBuiler.__currentPath);
				break;
			}
		}
		openfl._internal.renderer.opengl.utils.PathBuiler.closePath();
	}
	graphics.__drawPaths = openfl._internal.renderer.opengl.utils.PathBuiler.__drawPaths;
	return glStack;
};
openfl._internal.renderer.opengl.utils.LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = openfl.display.LineScaleMode.NORMAL;
	this.caps = openfl.display.CapsStyle.ROUND;
	this.joints = openfl.display.JointStyle.ROUND;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl._internal.renderer.opengl.utils.LineStyle;
openfl._internal.renderer.opengl.utils.LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl._internal.renderer.opengl.utils.LineStyle.prototype = {
	__class__: openfl._internal.renderer.opengl.utils.LineStyle
};
openfl._internal.renderer.opengl.utils.FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : true, __constructs__ : ["None","Color","Texture","Gradient"] };
openfl._internal.renderer.opengl.utils.FillType.None = ["None",0];
openfl._internal.renderer.opengl.utils.FillType.None.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.None.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl._internal.renderer.opengl.utils.FillType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.FillType.Gradient = ["Gradient",3];
openfl._internal.renderer.opengl.utils.FillType.Gradient.toString = $estr;
openfl._internal.renderer.opengl.utils.FillType.Gradient.__enum__ = openfl._internal.renderer.opengl.utils.FillType;
openfl._internal.renderer.opengl.utils.FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl._internal.renderer.opengl.utils.FilterManager;
openfl._internal.renderer.opengl.utils.FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl._internal.renderer.opengl.utils.FilterManager.prototype = {
	applyFilterPass: function(filter,filterArea,width,height) {
		var gl = this.gl;
		var shader = filter.shaders[openfl._internal.renderer.opengl.GLRenderer.glContextId];
		if(shader == null) {
			shader = new openfl._internal.renderer.opengl.shaders.DefaultShader(gl);
			shader.fragmentSrc = filter.fragmentSrc;
			shader.uniforms = filter.uniforms;
			shader.init();
			filter.shaders[openfl._internal.renderer.opengl.GLRenderer.glContextId] = shader;
		}
		this.renderSession.shaderManager.setShader(shader);
		gl.uniform2f(shader.projectionVector,width / 2,-height / 2);
		gl.uniform2f(shader.offsetVector,0,0);
		if(filter.uniforms.dimensions != null) {
			filter.uniforms.dimensions.value[0] = this.width + 0.0;
			filter.uniforms.dimensions.value[1] = this.height + 0.0;
			filter.uniforms.dimensions.value[2] = this.vertexArray[0];
			filter.uniforms.dimensions.value[3] = this.vertexArray[5];
		}
		shader.syncUniforms();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.vertexAttribPointer(shader.aVertexPosition,2,gl.FLOAT,false,0,0);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.vertexAttribPointer(shader.aTextureCoord,2,gl.FLOAT,false,0,0);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.vertexAttribPointer(shader.colorAttribute,2,gl.FLOAT,false,0,0);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0);
		this.renderSession.drawCount++;
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		var projection = renderSession.projection;
		this.width = projection.x * 2 | 0;
		this.height = -projection.y * 2 | 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		this.vertexArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		this.uvArray = new Float32Array([0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		this.colorArray = new Float32Array([1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215]);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,1,3,2]),gl.STATIC_DRAW);
	}
	,popFilter: function() {
		var gl = this.gl;
		var filterBlock = this.filterStack.pop();
		var filterArea = filterBlock._filterArea;
		var texture = filterBlock._glFilterTexture;
		var projection = this.renderSession.projection;
		var offset = this.renderSession.offset;
		if(filterBlock.filterPasses.length > 1) {
			gl.viewport(0,0,filterArea.width | 0,filterArea.height | 0);
			gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
			this.vertexArray[0] = 0;
			this.vertexArray[1] = filterArea.height;
			this.vertexArray[2] = filterArea.width;
			this.vertexArray[3] = filterArea.height;
			this.vertexArray[4] = 0;
			this.vertexArray[5] = 0;
			this.vertexArray[6] = filterArea.width;
			this.vertexArray[7] = 0;
			gl.bufferSubData(gl.ARRAY_BUFFER,0,this.vertexArray);
			gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
			this.uvArray[2] = filterArea.width / this.width;
			this.uvArray[5] = filterArea.height / this.height;
			this.uvArray[6] = filterArea.width / this.width;
			this.uvArray[7] = filterArea.height / this.height;
			gl.bufferSubData(gl.ARRAY_BUFFER,0,this.uvArray);
			var inputTexture = texture;
			var outputTexture = this.texturePool.pop();
			if(outputTexture == null) outputTexture = new openfl._internal.renderer.opengl.utils.FilterTexture(gl,this.width,this.height);
			outputTexture.resize(this.width,this.height);
			gl.bindFramebuffer(gl.FRAMEBUFFER,outputTexture.frameBuffer);
			gl.clear(gl.COLOR_BUFFER_BIT);
			gl.disable(gl.BLEND);
			var _g1 = 0;
			var _g = filterBlock.filterPasses.length - 1 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				var filterPass = filterBlock.filterPasses[i];
				gl.bindFramebuffer(gl.FRAMEBUFFER,outputTexture.frameBuffer);
				gl.activeTexture(gl.TEXTURE0);
				gl.bindTexture(gl.TEXTURE_2D,inputTexture.texture);
				this.applyFilterPass(filterPass,filterArea,filterArea.width | 0,filterArea.height | 0);
				var temp = inputTexture;
				inputTexture = outputTexture;
				outputTexture = temp;
			}
			gl.enable(gl.BLEND);
			texture = inputTexture;
			this.texturePool.push(outputTexture);
		}
		var filter = filterBlock.filterPasses[filterBlock.filterPasses.length - 1 | 0];
		this.offsetX -= filterArea.x;
		this.offsetY -= filterArea.y;
		var sizeX = this.width;
		var sizeY = this.height;
		var offsetX = 0.0;
		var offsetY = 0.0;
		var buffer = this.buffer;
		if(this.filterStack.length == 0) gl.colorMask(true,true,true,true); else {
			var currentFilter = this.filterStack[this.filterStack.length - 1];
			filterArea = currentFilter._filterArea;
			sizeX = filterArea.width | 0;
			sizeY = filterArea.height | 0;
			offsetX = filterArea.x;
			offsetY = filterArea.y;
			buffer = currentFilter._glFilterTexture.frameBuffer;
		}
		projection.x = sizeX / 2;
		projection.y = -sizeY / 2;
		offset.x = offsetX;
		offset.y = offsetY;
		filterArea = filterBlock._filterArea;
		var x = filterArea.x - offsetX;
		var y = filterArea.y - offsetY;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		this.vertexArray[0] = x;
		this.vertexArray[1] = y + filterArea.height;
		this.vertexArray[2] = x + filterArea.width;
		this.vertexArray[3] = y + filterArea.height;
		this.vertexArray[4] = x;
		this.vertexArray[5] = y;
		this.vertexArray[6] = x + filterArea.width;
		this.vertexArray[7] = y;
		gl.bufferSubData(gl.ARRAY_BUFFER,0,this.vertexArray);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		this.uvArray[2] = filterArea.width / this.width;
		this.uvArray[5] = filterArea.height / this.height;
		this.uvArray[6] = filterArea.width / this.width;
		this.uvArray[7] = filterArea.height / this.height;
		gl.bufferSubData(gl.ARRAY_BUFFER,0,this.uvArray);
		gl.viewport(0,0,sizeX,sizeY);
		gl.bindFramebuffer(gl.FRAMEBUFFER,buffer);
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D,texture.texture);
		this.applyFilterPass(filter,filterArea,sizeX,sizeY);
		this.renderSession.shaderManager.setShader(this.defaultShader);
		gl.uniform2f(this.defaultShader.projectionVector,sizeX / 2,-sizeY / 2);
		gl.uniform2f(this.defaultShader.offsetVector,-offsetX,-offsetY);
		this.texturePool.push(texture);
		filterBlock._glFilterTexture = null;
	}
	,pushFilter: function(filterBlock) {
		var gl = this.gl;
		var projection = this.renderSession.projection;
		var offset = this.renderSession.offset;
		if(filterBlock.target.filterArea != null) filterBlock._filterArea = filterBlock.target.filterArea; else filterBlock._filterArea = filterBlock.target.getBounds();
		this.filterStack.push(filterBlock);
		var filter = filterBlock.filterPasses[0];
		this.offsetX += filterBlock._filterArea.x;
		this.offsetY += filterBlock._filterArea.y;
		var texture = this.texturePool.pop();
		if(texture == null) texture = new openfl._internal.renderer.opengl.utils.FilterTexture(gl,this.width,this.height); else texture.resize(this.width,this.height);
		gl.bindTexture(gl.TEXTURE_2D,texture.texture);
		var filterArea = filterBlock._filterArea;
		var padding = filter.padding;
		filterArea.x -= padding;
		filterArea.y -= padding;
		filterArea.width += padding * 2;
		filterArea.height += padding * 2;
		if(filterArea.x < 0) filterArea.x = 0;
		if(filterArea.width > this.width) filterArea.width = this.width;
		if(filterArea.y < 0) filterArea.y = 0;
		if(filterArea.height > this.height) filterArea.height = this.height;
		gl.bindFramebuffer(gl.FRAMEBUFFER,texture.frameBuffer);
		gl.viewport(0,0,filterArea.width | 0,filterArea.height | 0);
		projection.x = filterArea.width / 2;
		projection.y = -filterArea.height / 2;
		offset.x = -filterArea.x;
		offset.y = -filterArea.y;
		this.renderSession.shaderManager.setShader(this.defaultShader);
		gl.uniform2f(this.defaultShader.projectionVector,filterArea.width / 2,-filterArea.height / 2);
		gl.uniform2f(this.defaultShader.offsetVector,-filterArea.x,-filterArea.y);
		gl.colorMask(true,true,true,true);
		gl.clearColor(0,0,0,0);
		gl.clear(gl.COLOR_BUFFER_BIT);
		filterBlock._glFilterTexture = texture;
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterManager
};
openfl._internal.renderer.opengl.utils.FilterTexture = function(gl,width,height,smoothing) {
	if(smoothing == null) smoothing = true;
	this.gl = gl;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterTexture"] = openfl._internal.renderer.opengl.utils.FilterTexture;
openfl._internal.renderer.opengl.utils.FilterTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterTexture"];
openfl._internal.renderer.opengl.utils.FilterTexture.prototype = {
	clear: function() {
		var gl = this.gl;
		gl.clearColor(0,0,0,0);
		gl.clear(gl.COLOR_BUFFER_BIT);
	}
	,destroy: function() {
		var gl = this.gl;
		gl.deleteFramebuffer(this.frameBuffer);
		gl.deleteTexture(this.texture);
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) return;
		this.width = width;
		this.height = height;
		var gl = this.gl;
		gl.bindTexture(gl.TEXTURE_2D,this.texture);
		gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,width,height,0,gl.RGBA,gl.UNSIGNED_BYTE,null);
		gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
		gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_STENCIL,width,height);
	}
	,__class__: openfl._internal.renderer.opengl.utils.FilterTexture
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl._internal.renderer.opengl.utils.GraphicsRenderer;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastVertsBuffer = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastBucketMode = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTexture = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureRepeat = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.lastTextureSmooth = null;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height;
	if(rectData.length == 3) height = width; else height = rectData[3];
	if(path.type == openfl._internal.renderer.opengl.utils.GraphicType.Ellipse) {
		width /= 2;
		height /= 2;
		x += width;
		y += height;
	}
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var totalSegs = 40;
	var seg = Math.PI * 2 / totalSegs;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	if(bucket != null) {
		var verts = bucket.verts;
		var indices = bucket.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		var _g = totalSegs + 1;
		while(_g1 < _g) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * width);
			verts.push(y + Math.cos(seg * i) * height);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		var _g11 = 0;
		var _g2 = totalSegs + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			path.points.push(x + Math.sin(seg * i1) * width);
			path.points.push(y + Math.cos(seg * i1) * height);
		}
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	if(path.points.length < 6) return;
	var points = path.points.slice();
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
	}
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	bucket.drawMode = glStack.gl.TRIANGLE_FAN;
	bucket.verts = points;
	var indices = bucket.indices;
	var length = points.length / 2 | 0;
	var _g2 = 0;
	while(_g2 < length) {
		var i1 = _g2++;
		indices.push(i1);
	}
	if(path.line.width > 0) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line,localCoords);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points;
	if(points.length == 0) return;
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
	}
	if(path.line.width % 2 > 0) {
		var _g11 = 0;
		var _g2 = points.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			points[i1] += 0.5;
		}
	}
	var firstPoint = new openfl.geom.Point(points[0],points[1]);
	var lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl.geom.Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = bucket.verts;
	var indices = bucket.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var color = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb(path.line.color);
	var alpha = path.line.alpha;
	var r = color[0] * alpha;
	var g = color[1] * alpha;
	var b = color[2] * alpha;
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g12 = 1;
	var _g3 = length - 1;
	while(_g12 < _g3) {
		var i2 = _g12++;
		p1x = points[(i2 - 1) * 2];
		p1y = points[(i2 - 1) * 2 + 1];
		p2x = points[i2 * 2];
		p2y = points[i2 * 2 + 1];
		p3x = points[(i2 + 1) * 2];
		p3y = points[(i2 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx = perpx / dist;
		perpy = perpy / dist;
		perpx = perpx * width;
		perpy = perpy * width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x = perp2x / dist;
		perp2y = perp2y / dist;
		perp2x = perp2x * width;
		perp2y = perp2y * width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x = perp3x / dist;
			perp3y = perp3y / dist;
			perp3x = perp3x * width;
			perp3y = perp3y * width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			indexCount++;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!Math.isFinite(dist)) haxe.Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 372, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	perpx = perpx / dist;
	perpy = perpy / dist;
	perpx = perpx * width;
	perpy = perpy * width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g4 = 0;
	while(_g4 < indexCount) {
		var i3 = _g4++;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) return;
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	var verts = bucket.verts;
	var indices = bucket.indices;
	if(bucket != null) {
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g = 0;
		while(_g < length) {
			var i1 = _g++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	if(bucket != null) {
		var verts = bucket.verts;
		var indices = bucket.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var radius = points[4];
	if(localCoords) {
		x -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
		y -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
	}
	var recPoints = [];
	recPoints.push(x);
	recPoints.push(y + radius);
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x,y + height - radius,x,y + height,x + radius,y + height));
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x + width - radius,y + height,x + width,y + height,x + width,y + height - radius));
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x + width,y + radius,x + width,y,x + width - radius,y));
	recPoints = recPoints.concat(openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve(x + radius,y,x,y,x,y + radius));
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	if(bucket != null) {
		var verts = bucket.verts;
		var indices = bucket.indices;
		var vecPos = verts.length / 2;
		var triangles = openfl._internal.renderer.opengl.utils.PolyK.triangulate(recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			i++;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine(path,bucket.line);
		path.points = tempPoints;
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) localCoords = false;
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var blendMode = args[5];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
	bucket.rawVerts = true;
	bucket.glLength = indices.length;
	bucket.stride = 8;
	var vertsLength = bucket.glLength * bucket.stride;
	var verts;
	if(bucket.glVerts == null || bucket.glVerts.length < vertsLength) {
		verts = new Float32Array(vertsLength);
		bucket.glVerts = verts;
	} else verts = bucket.glVerts;
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var color = [1.,1.,1.,1.];
	var ctmp = color;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y0 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y1 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
			x2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.x;
			y2 -= openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.y;
		}
		switch(culling[1]) {
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
			break;
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
			break;
		default:
		}
		verts[idx++] = a * x0 + c * y0 + tx;
		verts[idx++] = b * x0 + d * y0 + ty;
		verts[idx++] = uvtData.data[v0];
		verts[idx++] = uvtData.data[v0 + 1];
		if(hasColors) {
			ctmp = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba(colors.data[i0]);
			verts[idx++] = ctmp[0];
			verts[idx++] = ctmp[1];
			verts[idx++] = ctmp[2];
			verts[idx++] = ctmp[3];
		} else {
			verts[idx++] = color[0];
			verts[idx++] = color[1];
			verts[idx++] = color[2];
			verts[idx++] = color[3];
		}
		verts[idx++] = a * x1 + c * y1 + tx;
		verts[idx++] = b * x1 + d * y1 + ty;
		verts[idx++] = uvtData.data[v1];
		verts[idx++] = uvtData.data[v1 + 1];
		if(hasColors) {
			ctmp = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba(colors.data[i1]);
			verts[idx++] = ctmp[0];
			verts[idx++] = ctmp[1];
			verts[idx++] = ctmp[2];
			verts[idx++] = ctmp[3];
		} else {
			verts[idx++] = color[0];
			verts[idx++] = color[1];
			verts[idx++] = color[2];
			verts[idx++] = color[3];
		}
		verts[idx++] = a * x2 + c * y2 + tx;
		verts[idx++] = b * x2 + d * y2 + ty;
		verts[idx++] = uvtData.data[v2];
		verts[idx++] = uvtData.data[v2 + 1];
		if(hasColors) {
			ctmp = openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba(colors.data[i2]);
			verts[idx++] = ctmp[0];
			verts[idx++] = ctmp[1];
			verts[idx++] = ctmp[2];
			verts[idx++] = ctmp[3];
		} else {
			verts[idx++] = color[0];
			verts[idx++] = color[1];
			verts[idx++] = color[2];
			verts[idx++] = color[3];
		}
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var n = 20;
	var points = [];
	var getPt = function(n1,n2,perc) {
		var diff = n2 - n1;
		return n1 + diff * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	var _g = n + 1;
	while(_g1 < _g) {
		var i = _g1++;
		j = i / n;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var spritebatch = renderSession.spriteBatch;
	var dirty = graphics.__dirty;
	if(graphics.__commands.length <= 0) return;
	if(dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(object,renderSession.gl,object.cacheAsBitmap);
	if(object.cacheAsBitmap) {
		if(dirty) {
			var gl = renderSession.gl;
			var bounds = graphics.__bounds;
			var texture = graphics.__cachedTexture;
			var w = Math.floor(bounds.width + 0.5);
			var h = Math.floor(bounds.height + 0.5);
			if(texture == null) {
				texture = new openfl._internal.renderer.opengl.utils.FilterTexture(gl,w,h,false);
				graphics.__cachedTexture = texture;
			}
			texture.resize(w,h);
			gl.bindFramebuffer(gl.FRAMEBUFFER,texture.frameBuffer);
			gl.viewport(0,0,w,h);
			texture.clear();
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics(object,renderSession,new openfl.geom.Point(w / 2,-h / 2),true);
			gl.bindFramebuffer(gl.FRAMEBUFFER,null);
			gl.viewport(0,0,renderSession.renderer.width,renderSession.renderer.height);
		}
		if(!spritebatch.drawing) spritebatch.begin(renderSession);
		spritebatch.renderCachedGraphics(object);
	} else openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics(object,renderSession,renderSession.projection,false);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics = function(object,renderSession,projection,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var offset = renderSession.offset;
	var glStack = graphics.__glStack[openfl._internal.renderer.opengl.GLRenderer.glContextId];
	var bucket;
	var translationMatrix;
	if(localCoords) translationMatrix = openfl.geom.Matrix.__identity; else translationMatrix = object.__worldTransform;
	var batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		bucket = glStack.buckets[i];
		var _g2 = bucket.mode;
		switch(_g2[1]) {
		case 1:case 2:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.end();
			renderSession.stencilManager.pushBucket(bucket,renderSession,projection,translationMatrix.toArray(true));
			var shader = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,projection,translationMatrix.toArray(false));
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill(bucket,shader,renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			if(batchDrawing && !localCoords) renderSession.spriteBatch.end();
			var shader1 = openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader(bucket,renderSession,object,projection,null);
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles(bucket,shader1,renderSession);
			break;
		case 6:
			if(!batchDrawing) renderSession.spriteBatch.begin(renderSession);
			openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTiles(object,bucket,renderSession);
			break;
		default:
		}
		var _g21 = 0;
		var _g3 = bucket.data;
		while(_g21 < _g3.length) {
			var data = _g3[_g21];
			++_g21;
			if(data.line != null && data.line.verts.length > 0) {
				batchDrawing = renderSession.spriteBatch.drawing;
				if(batchDrawing && !localCoords) renderSession.spriteBatch.end();
				var shader2 = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader2);
				gl.uniformMatrix3fv(shader2.translationMatrix,false,translationMatrix.toArray(true));
				gl.uniform2f(shader2.projectionVector,projection.x,-projection.y);
				gl.uniform2f(shader2.offsetVector,-offset.x,-offset.y);
				gl.uniform1f(shader2.alpha,object.__worldAlpha);
				gl.bindBuffer(gl.ARRAY_BUFFER,data.line.vertsBuffer);
				gl.vertexAttribPointer(shader2.aVertexPosition,2,gl.FLOAT,false,24,0);
				gl.vertexAttribPointer(shader2.colorAttribute,4,gl.FLOAT,false,24,8);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,data.line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,data.line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics = function(object,gl,localCoords) {
	if(localCoords == null) localCoords = false;
	var graphics = object.__graphics;
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	var glStack = null;
	if(graphics.__dirty) glStack = openfl._internal.renderer.opengl.utils.DrawPath.getStack(graphics,gl);
	graphics.__dirty = false;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var path = graphics.__drawPaths[i];
		{
			var _g21 = path.type;
			switch(_g21[1]) {
			case 0:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
				break;
			case 1:
				var rounded = _g21[2];
				if(rounded) openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords); else openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle(path,glStack,localCoords);
				break;
			case 2:case 3:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle(path,glStack,localCoords);
				break;
			case 4:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
				break;
			case 5:
				openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket(path,glStack);
				break;
			}
		}
		glStack.lastIndex++;
	}
	glStack.upload();
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	{
		var _g = path.fill;
		switch(_g[1]) {
		case 1:
			var a = _g[3];
			var c = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Fill);
			if(c == null) bucket.color = [0,0,0]; else bucket.color = [(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
			bucket.alpha = a;
			bucket.uploadTileBuffer = true;
			break;
		case 2:
			var s = _g[5];
			var r = _g[4];
			var m = _g[3];
			var b = _g[2];
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.PatternFill);
			bucket.bitmap = b;
			bucket.textureRepeat = r;
			bucket.textureSmooth = s;
			bucket.texture = b.getTexture(glStack.gl);
			bucket.uploadTileBuffer = true;
			var tMatrix = bucket.textureMatrix;
			tMatrix.identity();
			var pMatrix;
			if(m == null) pMatrix = new openfl.geom.Matrix(); else pMatrix = new openfl.geom.Matrix(m.a,m.b,m.c,m.d,m.tx,m.ty);
			pMatrix = pMatrix.invert();
			pMatrix.__translateTransformed(new openfl.geom.Point(-openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.x,-openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition.y));
			var tx = pMatrix.tx / b.width;
			var ty = pMatrix.ty / b.height;
			tMatrix.concat(pMatrix);
			bucket.textureTL.x = tx;
			bucket.textureTL.y = ty;
			bucket.textureBR.x = tx + 1;
			bucket.textureBR.y = ty + 1;
			tMatrix.scale(1 / b.width,1 / b.height);
			bucket.textureMatrix = tMatrix;
			break;
		default:
			bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl._internal.renderer.opengl.utils.BucketMode.Line);
			bucket.uploadTileBuffer = false;
		}
	}
	{
		var _g1 = path.type;
		switch(_g1[1]) {
		case 4:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles;
			bucket.uploadTileBuffer = false;
			break;
		case 5:
			bucket.mode = openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles;
			bucket.uploadTileBuffer = false;
			break;
		default:
		}
	}
	bucket.graphicType = path.type;
	var bucketData = bucket.getData();
	return bucketData;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool.pop();
	if(b == null) b = new openfl._internal.renderer.opengl.utils.GLBucket(glStack.gl);
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket;
	if(glStack.buckets.length == 0) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket(glStack,mode); else {
		bucket = glStack.buckets[glStack.buckets.length - 1];
		if(bucket.fillIndex != fillIndex) bucket = openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket(glStack,mode);
	}
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader = function(bucket,renderSession,object,projection,translationMatrix) {
	var gl = renderSession.gl;
	var offset = renderSession.offset;
	var shader = null;
	var _g = bucket.mode;
	switch(_g[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) return null;
	var newShader = renderSession.shaderManager.setShader(shader);
	gl.uniform2f(shader.projectionVector,projection.x,-projection.y);
	gl.uniform2f(shader.offsetVector,-offset.x,-offset.y);
	gl.uniform1f(shader.alpha,object.__worldAlpha * bucket.alpha);
	var _g1 = bucket.mode;
	switch(_g1[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.translationMatrix,false,translationMatrix);
		gl.uniform3fv(shader.color,new Float32Array(bucket.color));
		break;
	case 2:
		gl.uniformMatrix3fv(shader.translationMatrix,false,translationMatrix);
		gl.uniform1i(shader.sampler,0);
		gl.uniform2f(shader.patternTL,bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.patternBR,bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.patternMatrix,false,bucket.textureMatrix.toArray(false));
		break;
	case 5:
		if(bucket.texture != null) {
			gl.uniform1i(shader.useTexture,1);
			gl.uniform1i(shader.sampler,0);
		} else {
			gl.uniform1i(shader.useTexture,0);
			gl.uniform3fv(shader.color,new Float32Array(bucket.color));
		}
		break;
	default:
	}
	return shader;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl._internal.renderer.opengl.utils.BucketMode.PatternFill && bucket.texture != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.aVertexPosition,4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.data;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		if(data.destroyed) continue;
		if(bucket.texture == null) {
		} else openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture(gl,bucket);
		openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindDrawTrianglesBuffer(gl,shader,data);
		gl.drawArrays(gl.TRIANGLES,data.glStart,data.glLength);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTiles = function(object,bucket,renderSession) {
	var args = bucket.graphicType.slice(2);
	renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4]);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindDrawTrianglesBuffer = function(gl,shader,data) {
	gl.bindBuffer(gl.ARRAY_BUFFER,data.vertsBuffer);
	var stride = data.stride * 4;
	gl.vertexAttribPointer(shader.aVertexPosition,2,gl.FLOAT,false,stride,0);
	gl.vertexAttribPointer(shader.aTextureCoord,2,gl.FLOAT,false,stride,8);
	gl.vertexAttribPointer(shader.colorAttribute,4,gl.FLOAT,false,stride,16);
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.__image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) return [0,0,0]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) return [1,1,1,1]; else return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
};
openfl._internal.renderer.opengl.utils.GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl._internal.renderer.opengl.utils.GLStack;
openfl._internal.renderer.opengl.utils.GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl._internal.renderer.opengl.utils.GLStack.prototype = {
	reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) bucket.upload();
		}
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLStack
};
openfl._internal.renderer.opengl.utils.GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.data = [];
	this.fillIndex = 0;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl._internal.renderer.opengl.utils.BucketMode.Fill;
	this.textureMatrix = new openfl.geom.Matrix();
	this.textureTL = new openfl.geom.Point();
	this.textureBR = new openfl.geom.Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl._internal.renderer.opengl.utils.GLBucket;
openfl._internal.renderer.opengl.utils.GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl._internal.renderer.opengl.utils.GLBucket.prototype = {
	getData: function() {
		var result = null;
		var remove = false;
		var _g = 0;
		var _g1 = this.data;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d.destroyed) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) result = new openfl._internal.renderer.opengl.utils.GLBucketData(this.gl);
		result.destroyed = false;
		result.parent = this;
		if(remove) HxOverrides.remove(this.data,result);
		this.data.push(result);
		return result;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.data;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			d.destroy();
		}
		this.fillIndex = 0;
		this.uploadTileBuffer = true;
		this.graphicType = openfl._internal.renderer.opengl.utils.GraphicType.Polygon;
	}
	,upload: function() {
		if(this.uploadTileBuffer) {
			if(this.tileBuffer == null) {
				this.tileBuffer = this.gl.createBuffer();
				this.tile = [0,0,0,0,4096,0,1,0,0,4096,0,1,4096,4096,1,1];
				this.glTile = new Int16Array(this.tile);
			}
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
			this.uploadTileBuffer = false;
		}
		var _g = 0;
		var _g1 = this.data;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(!d.destroyed) d.upload();
		}
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucket
};
openfl._internal.renderer.opengl.utils.GLBucketData = function(gl,initLine) {
	if(initLine == null) initLine = true;
	this.destroyed = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.vertsBuffer = gl.createBuffer();
	this.indices = [];
	this.indexBuffer = gl.createBuffer();
	if(initLine) this.line = new openfl._internal.renderer.opengl.utils.GLBucketData(gl,false);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl._internal.renderer.opengl.utils.GLBucketData;
openfl._internal.renderer.opengl.utils.GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl._internal.renderer.opengl.utils.GLBucketData.prototype = {
	destroy: function() {
		this.destroyed = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		if(this.line != null) this.line.destroy();
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) this.glVerts = new Float32Array(this.verts);
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.vertsBuffer);
			if(this.glVerts.length <= this.lastVertsSize) {
				var end = this.glLength * 4 * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					var view = this.glVerts.subarray(0,end);
					this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
					view = null;
				} else this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,this.glVerts);
			} else {
				this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glVerts,this.gl.STREAM_DRAW);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(!this.rawIndices) this.glIndices = new Uint16Array(this.indices);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
		if(this.line != null) this.line.upload();
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLBucketData
};
openfl._internal.renderer.opengl.utils.BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : true, __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl._internal.renderer.opengl.utils.BucketMode.None = ["None",0];
openfl._internal.renderer.opengl.utils.BucketMode.None.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.None.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Fill = ["Fill",1];
openfl._internal.renderer.opengl.utils.BucketMode.Fill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Fill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill = ["PatternFill",2];
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternFill.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.Line = ["Line",3];
openfl._internal.renderer.opengl.utils.BucketMode.Line.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.Line.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine = ["PatternLine",4];
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.PatternLine.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTriangles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles = ["DrawTiles",6];
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.toString = $estr;
openfl._internal.renderer.opengl.utils.BucketMode.DrawTiles.__enum__ = openfl._internal.renderer.opengl.utils.BucketMode;
openfl._internal.renderer.opengl.utils.GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl._internal.renderer.opengl.utils.GLGraphicsData;
openfl._internal.renderer.opengl.utils.GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl._internal.renderer.opengl.utils.GLGraphicsData.prototype = {
	reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		this.glData = new Float32Array(this.data);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		this.glIndices = new Uint16Array(this.indices);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl._internal.renderer.opengl.utils.GLGraphicsData
};
openfl._internal.renderer.opengl.utils.PolyK = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PolyK"] = openfl._internal.renderer.opengl.utils.PolyK;
openfl._internal.renderer.opengl.utils.PolyK.__name__ = ["openfl","_internal","renderer","opengl","utils","PolyK"];
openfl._internal.renderer.opengl.utils.PolyK.triangulate = function(p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) return [];
	var tgs = [];
	var avl;
	var _g = [];
	var _g1 = 0;
	while(_g1 < n) {
		var i = _g1++;
		_g.push(i);
	}
	avl = _g;
	var i1 = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i1 % al];
		var i11 = avl[(i1 + 1) % al];
		var i2 = avl[(i1 + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i11];
		var by = p[2 * i11 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl._internal.renderer.opengl.utils.PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g11 = 0;
			while(_g11 < al) {
				var j = _g11++;
				var vi = avl[j];
				if(vi == i0 || vi == i11 || vi == i2) continue;
				if(openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i1 + 1) % al,1);
			al--;
			i1 = 0;
		} else if(i1++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g12 = [];
				var _g2 = 0;
				while(_g2 < n) {
					var k = _g2++;
					_g12.push(k);
				}
				avl = _g12;
				i1 = 0;
				al = n;
				sign = false;
			} else {
				haxe.Log.trace("Warning: shape too complex to fill",{ fileName : "GraphicsRenderer.hx", lineNumber : 1506, className : "openfl._internal.renderer.opengl.utils.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl._internal.renderer.opengl.utils.PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	return u >= 0 && v >= 0 && u + v < 1;
};
openfl._internal.renderer.opengl.utils.PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
openfl._internal.renderer.opengl.utils.GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : true, __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles"] };
openfl._internal.renderer.opengl.utils.GraphicType.Polygon = ["Polygon",0];
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Polygon.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.Circle = ["Circle",2];
openfl._internal.renderer.opengl.utils.GraphicType.Circle.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Circle.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse = ["Ellipse",3];
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.toString = $estr;
openfl._internal.renderer.opengl.utils.GraphicType.Ellipse.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType;
openfl._internal.renderer.opengl.utils.GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils.GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl._internal.renderer.opengl.utils.GraphicType; $x.toString = $estr; return $x; };
openfl._internal.renderer.opengl.utils._GraphicsRenderer = {};
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_ = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_"] = openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.__name__ = ["openfl","_internal","renderer","opengl","utils","_GraphicsRenderer","RenderMode_Impl_"];
openfl._internal.renderer.opengl.utils.MaskManager = function(gl) {
	this.maskStack = [];
	this.maskPosition = 0;
	this.setContext(gl);
	this.reverse = false;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.MaskManager"] = openfl._internal.renderer.opengl.utils.MaskManager;
openfl._internal.renderer.opengl.utils.MaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","MaskManager"];
openfl._internal.renderer.opengl.utils.MaskManager.prototype = {
	destroy: function() {
		this.maskStack = null;
		this.gl = null;
	}
	,popMask: function(maskData,renderSession) {
		var gl = this.gl;
		renderSession.stencilManager.popStencil(maskData,maskData._webGL[openfl._internal.renderer.opengl.GLRenderer.glContextId].data[0],renderSession);
	}
	,pushMask: function(maskData,renderSession) {
		var gl = renderSession.gl;
		if(maskData.dirty) openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics(maskData,gl);
		if(maskData._webGL[openfl._internal.renderer.opengl.GLRenderer.glContextId].data.length == 0) return;
		renderSession.stencilManager.pushStencil(maskData,maskData._webGL[openfl._internal.renderer.opengl.GLRenderer.glContextId].data[0],renderSession);
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl._internal.renderer.opengl.utils.MaskManager
};
openfl._internal.renderer.opengl.utils.ShaderManager = function(gl) {
	this.maxAttibs = 10;
	this.attribState = [];
	this.tempAttribState = [];
	this.shaderMap = [];
	var _g1 = 0;
	var _g = this.maxAttibs;
	while(_g1 < _g) {
		var i = _g1++;
		this.attribState[i] = false;
	}
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl._internal.renderer.opengl.utils.ShaderManager;
openfl._internal.renderer.opengl.utils.ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl._internal.renderer.opengl.utils.ShaderManager.prototype = {
	destroy: function() {
		this.attribState = null;
		this.tempAttribState = null;
		this.primitiveShader.destroy();
		this.defaultShader.destroy();
		this.fastShader.destroy();
		this.stripShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.gl = null;
	}
	,setAttribs: function(attribs) {
		var _g1 = 0;
		var _g = this.tempAttribState.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.tempAttribState[i] = false;
		}
		var _g11 = 0;
		var _g2 = attribs.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var attribId = attribs[i1];
			this.tempAttribState[attribId] = true;
		}
		var gl = this.gl;
		var _g12 = 0;
		var _g3 = this.attribState.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			if(this.attribState[i2] != this.tempAttribState[i2]) {
				this.attribState[i2] = this.tempAttribState[i2];
				if(this.tempAttribState[i2]) gl.enableVertexAttribArray(i2); else gl.disableVertexAttribArray(i2);
			}
		}
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.primitiveShader = new openfl._internal.renderer.opengl.shaders.PrimitiveShader(gl);
		this.complexPrimitiveShader = new openfl._internal.renderer.opengl.shaders.ComplexPrimitiveShader(gl);
		this.defaultShader = new openfl._internal.renderer.opengl.shaders.DefaultShader(gl);
		this.fastShader = new openfl._internal.renderer.opengl.shaders.FastShader(gl);
		this.stripShader = new openfl._internal.renderer.opengl.shaders.StripShader(gl);
		this.fillShader = new openfl._internal.renderer.opengl.shaders.FillShader(gl);
		this.patternFillShader = new openfl._internal.renderer.opengl.shaders.PatternFillShader(gl);
		this.drawTrianglesShader = new openfl._internal.renderer.opengl.shaders.DrawTrianglesShader(gl);
		this.setShader(this.defaultShader);
	}
	,setShader: function(shader) {
		if(this._currentId == shader._UID) return false;
		this._currentId = shader._UID;
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		this.setAttribs(shader.attributes);
		return true;
	}
	,__class__: openfl._internal.renderer.opengl.utils.ShaderManager
};
openfl._internal.renderer.opengl.utils.SpriteBatch = function(gl) {
	this.states = [];
	this.vertSize = 6;
	this.size = Math.floor(Math.pow(2,16) / this.vertSize);
	var numVerts = this.size * 4 * this.vertSize;
	var numIndices = this.size * 6;
	this.vertices = new Float32Array(numVerts);
	this.indices = new Uint16Array(numIndices);
	this.lastIndexCount = 0;
	var i = 0;
	var j = 0;
	while(i < numIndices) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.drawing = false;
	this.currentBatchSize = 0;
	this.currentBaseTexture = null;
	this.setContext(gl);
	this.dirty = true;
	this.currentState = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl._internal.renderer.opengl.utils.SpriteBatch;
openfl._internal.renderer.opengl.utils.SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl._internal.renderer.opengl.utils.SpriteBatch.prototype = {
	begin: function(renderSession) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start();
	}
	,destroy: function() {
		this.vertices = null;
		this.indices = null;
		this.gl.deleteBuffer(this.vertexBuffer);
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentBaseTexture = null;
		this.gl = null;
	}
	,end: function() {
		this.flush();
		this.drawing = false;
	}
	,flush: function() {
		if(this.currentBatchSize == 0) return;
		var gl = this.gl;
		this.renderSession.shaderManager.setShader(this.renderSession.shaderManager.defaultShader);
		if(this.dirty) {
			this.dirty = false;
			gl.activeTexture(gl.TEXTURE0);
			gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			var projection = this.renderSession.projection;
			gl.uniform2f(this.shader.projectionVector,projection.x,projection.y);
			var stride = this.vertSize * 4;
			gl.vertexAttribPointer(this.shader.aVertexPosition,2,gl.FLOAT,false,stride,0);
			gl.vertexAttribPointer(this.shader.aTextureCoord,2,gl.FLOAT,false,stride,8);
			gl.vertexAttribPointer(this.shader.colorAttribute,2,gl.FLOAT,false,stride,16);
		}
		if(this.currentBatchSize > this.size * 0.5) gl.bufferSubData(gl.ARRAY_BUFFER,0,this.vertices); else {
			var view = this.vertices.subarray(0,this.currentBatchSize * 4 * this.vertSize);
			gl.bufferSubData(gl.ARRAY_BUFFER,0,view);
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.texture = null;
		this.currentState.textureSmooth = true;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		var j = this.currentBatchSize;
		var _g = 0;
		while(_g < j) {
			var i = _g++;
			nextState = this.states[i];
			if(this.currentState.texture != nextState.texture || this.currentState.blendMode != nextState.blendMode) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.renderSession.blendModeManager.setBlendMode(this.currentState.blendMode);
			}
			batchSize++;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.currentBatchSize = 0;
	}
	,render: function(sprite) {
		var bitmapData = sprite.bitmapData;
		var texture = bitmapData.getTexture(this.gl);
		if(bitmapData == null) return;
		if(this.currentBatchSize >= this.size) {
			this.flush();
			this.currentState.texture = texture;
		}
		var uvs = bitmapData.__uvData;
		if(uvs == null) return;
		var alpha = sprite.__worldAlpha;
		var tint = 16777215;
		var aX = 0;
		var aY = 0;
		var index = this.currentBatchSize * 4 * this.vertSize;
		this.fillVertices(index,aX,aY,bitmapData.width,bitmapData.height,tint,alpha,uvs,sprite.__worldTransform);
		this.setState(this.currentBatchSize,texture,null,sprite.blendMode);
		this.currentBatchSize++;
	}
	,renderCachedGraphics: function(object) {
		var cachedTexture = object.__graphics.__cachedTexture;
		if(cachedTexture == null) return;
		if(this.currentBatchSize >= this.size) {
			this.flush();
			this.currentBaseTexture = cachedTexture.texture;
		}
		var alpha = object.__worldAlpha;
		var tint = 16777215;
		var aX = 0;
		var aY = 0;
		var uvs = new openfl.display.TextureUvs();
		uvs.x0 = 0;
		uvs.y0 = 1;
		uvs.x1 = 1;
		uvs.y1 = 1;
		uvs.x2 = 1;
		uvs.y2 = 0;
		uvs.x3 = 0;
		uvs.y3 = 0;
		var index = this.currentBatchSize * 4 * this.vertSize;
		var worldTransform = object.__worldTransform.clone();
		worldTransform.__translateTransformed(new openfl.geom.Point(object.__graphics.__bounds.x,object.__graphics.__bounds.y));
		this.fillVertices(index,aX,aY,cachedTexture.width,cachedTexture.height,tint,alpha,uvs,worldTransform);
		this.setState(this.currentBatchSize,cachedTexture.texture,null,object.blendMode);
		this.currentBatchSize++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) return;
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var blendMode;
		var _g = flags & 983040;
		switch(_g) {
		case 65536:
			blendMode = openfl.display.BlendMode.ADD;
			break;
		case 131072:
			blendMode = openfl.display.BlendMode.MULTIPLY;
			break;
		case 262144:
			blendMode = openfl.display.BlendMode.SCREEN;
			break;
		default:
			blendMode = openfl.display.BlendMode.NORMAL;
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) if(useOrigin) numValues = 8; else numValues = 6;
		if(useScale) {
			scaleIndex = numValues;
			numValues++;
		}
		if(useRotation) {
			rotationIndex = numValues;
			numValues++;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			numValues++;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) totalCount = count;
		var itemCount = totalCount / numValues | 0;
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var matrix = new openfl.geom.Matrix();
		var oMatrix = object.__worldTransform;
		var uvs = new openfl.display.TextureUvs();
		var bIndex = 0;
		while(iIndex < totalCount) {
			if(this.currentBatchSize >= this.size) {
				this.flush();
				this.currentBaseTexture = texture;
			}
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.x = 0;
					center.y = 0;
				}
				tileUV.setTo(rect.get_left() / sheet.__bitmap.width,rect.get_top() / sheet.__bitmap.height,rect.get_right() / sheet.__bitmap.width,rect.get_bottom() / sheet.__bitmap.height);
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				a = 1;
				b = 0;
				c = 0;
				d = 1;
				tx = 0;
				ty = 0;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				matrix.identity();
				if(useAlpha) alpha = tileData[iIndex + alphaIndex];
				if(useRGB) tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				if(useScale) scale = tileData[iIndex + scaleIndex];
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				matrix.a = a * oMatrix.a + b * oMatrix.c;
				matrix.b = a * oMatrix.b + b * oMatrix.d;
				matrix.c = c * oMatrix.a + d * oMatrix.c;
				matrix.d = c * oMatrix.b + d * oMatrix.d;
				matrix.tx = tx * oMatrix.a + ty * oMatrix.c;
				matrix.ty = tx * oMatrix.b + ty * oMatrix.d;
				uvs.x0 = tileUV.x;
				uvs.y0 = tileUV.y;
				uvs.x1 = tileUV.width;
				uvs.y1 = tileUV.y;
				uvs.x2 = tileUV.width;
				uvs.y2 = tileUV.height;
				uvs.x3 = tileUV.x;
				uvs.y3 = tileUV.height;
				bIndex = this.currentBatchSize * 4 * this.vertSize;
				this.fillVertices(bIndex,0,0,rect.width,rect.height,tint,alpha,uvs,matrix);
				this.setState(this.currentBatchSize,texture,smooth,blendMode);
				this.currentBatchSize++;
			}
			iIndex += numValues;
		}
	}
	,fillVertices: function(index,aX,aY,width,height,tint,alpha,uvs,matrix) {
		var w0;
		var w1;
		var h0;
		var h1;
		w0 = width * (1 - aX);
		w1 = width * -aX;
		h0 = height * (1 - aY);
		h1 = height * -aY;
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		this.vertices[index++] = a * w1 + c * h1 + tx;
		this.vertices[index++] = d * h1 + b * w1 + ty;
		this.vertices[index++] = uvs.x0;
		this.vertices[index++] = uvs.y0;
		this.vertices[index++] = alpha;
		this.vertices[index++] = tint;
		this.vertices[index++] = a * w0 + c * h1 + tx;
		this.vertices[index++] = d * h1 + b * w0 + ty;
		this.vertices[index++] = uvs.x1;
		this.vertices[index++] = uvs.y1;
		this.vertices[index++] = alpha;
		this.vertices[index++] = tint;
		this.vertices[index++] = a * w0 + c * h0 + tx;
		this.vertices[index++] = d * h0 + b * w0 + ty;
		this.vertices[index++] = uvs.x2;
		this.vertices[index++] = uvs.y2;
		this.vertices[index++] = alpha;
		this.vertices[index++] = tint;
		this.vertices[index++] = a * w1 + c * h0 + tx;
		this.vertices[index++] = d * h0 + b * w1 + ty;
		this.vertices[index++] = uvs.x3;
		this.vertices[index++] = uvs.y3;
		this.vertices[index++] = alpha;
		this.vertices[index++] = tint;
	}
	,setState: function(index,texture,smooth,blendMode) {
		if(smooth == null) smooth = true;
		var state = this.states[this.currentBatchSize];
		if(state == null) state = this.states[this.currentBatchSize] = new openfl._internal.renderer.opengl.utils._SpriteBatch.State();
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
	}
	,renderBatch: function(state,size,startIndex) {
		if(size == 0) return;
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		if(state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,startIndex * 6 * 2);
		this.renderSession.drawCount++;
	}
	,renderTilingSprite: function(tilingSprite) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertices,gl.DYNAMIC_DRAW);
		this.currentBlendMode = null;
	}
	,start: function() {
		this.dirty = true;
	}
	,stop: function() {
		this.flush();
	}
	,__class__: openfl._internal.renderer.opengl.utils.SpriteBatch
};
openfl._internal.renderer.opengl.utils._SpriteBatch = {};
openfl._internal.renderer.opengl.utils._SpriteBatch.State = function() {
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl._internal.renderer.opengl.utils._SpriteBatch.State;
openfl._internal.renderer.opengl.utils._SpriteBatch.State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl._internal.renderer.opengl.utils._SpriteBatch.State.prototype = {
	__class__: openfl._internal.renderer.opengl.utils._SpriteBatch.State
};
openfl._internal.renderer.opengl.utils.StencilManager = function(gl) {
	this.stencilStack = [];
	this.bucketStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl._internal.renderer.opengl.utils.StencilManager;
openfl._internal.renderer.opengl.utils.StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl._internal.renderer.opengl.utils.StencilManager.prototype = {
	prepareGraphics: function(bucketData,renderSession,projection,translationMatrix) {
		var offset = renderSession.offset;
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.translationMatrix,false,translationMatrix);
		this.gl.uniform2f(shader.projectionVector,projection.x,-projection.y);
		this.gl.uniform2f(shader.offsetVector,-offset.x,-offset.y);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,bucketData.vertsBuffer);
		this.gl.vertexAttribPointer(shader.aVertexPosition,2,this.gl.FLOAT,false,8,0);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,bucketData.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,projection,translationMatrix) {
		if(this.bucketStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
		}
		this.bucketStack.push(bucket);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.NEVER,1,255);
		this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
		this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		var _g = 0;
		var _g1 = bucket.data;
		while(_g < _g1.length) {
			var bucketData = _g1[_g];
			++_g;
			if(bucketData.destroyed) continue;
			this.prepareGraphics(bucketData,renderSession,projection,translationMatrix);
			this.gl.drawElements(bucketData.drawMode,bucketData.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,255,255);
	}
	,popBucket: function(object,bucket,renderSession) {
		this.bucketStack.pop();
		if(this.bucketStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST);
	}
	,bindGraphics: function(object,glData,renderSession) {
		var graphics = object.__graphics;
		var projection = renderSession.projection;
		var offset = renderSession.offset;
		if(glData.mode == 1) {
			var shader = renderSession.shaderManager.complexPrimitiveShader;
			renderSession.shaderManager.setShader(shader);
			this.gl.uniformMatrix3fv(shader.translationMatrix,false,object.__worldTransform.toArray(true));
			this.gl.uniform2f(shader.projectionVector,projection.x,-projection.y);
			this.gl.uniform2f(shader.offsetVector,-offset.x,-offset.y);
			this.gl.uniform3fv(shader.tintColor,new Float32Array([1.,1.,1.]));
			this.gl.uniform3fv(shader.color,new Float32Array(glData.tint));
			this.gl.uniform1f(shader.alpha,object.__worldAlpha * glData.alpha);
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,glData.dataBuffer);
			this.gl.vertexAttribPointer(shader.aVertexPosition,2,this.gl.FLOAT,false,8,0);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,glData.indexBuffer);
		} else {
			var shader1 = renderSession.shaderManager.primitiveShader;
			renderSession.shaderManager.setShader(shader1);
			this.gl.uniformMatrix3fv(shader1.translationMatrix,false,object.__worldTransform.toArray(true));
			this.gl.uniform2f(shader1.projectionVector,projection.x,-projection.y);
			this.gl.uniform2f(shader1.offsetVector,-offset.x,-offset.y);
			this.gl.uniform3fv(shader1.tintColor,new Float32Array([1.,1.,1.]));
			this.gl.uniform1f(shader1.alpha,object.__worldAlpha);
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,glData.dataBuffer);
			this.gl.vertexAttribPointer(shader1.aVertexPosition,2,this.gl.FLOAT,false,24,0);
			this.gl.vertexAttribPointer(shader1.colorAttribute,4,this.gl.FLOAT,false,24,8);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,glData.indexBuffer);
		}
	}
	,destroy: function() {
		this.stencilStack = null;
		this.bucketStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST); else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - level,255); else this.gl.stencilFunc(this.gl.EQUAL,level,255);
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255); else this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl._internal.renderer.opengl.utils.StencilManager
};
openfl.display.Application = function() {
	lime.app.Application.call(this);
	openfl.Lib.application = this;
};
$hxClasses["openfl.display.Application"] = openfl.display.Application;
openfl.display.Application.__name__ = ["openfl","display","Application"];
openfl.display.Application.__super__ = lime.app.Application;
openfl.display.Application.prototype = $extend(lime.app.Application.prototype,{
	convertKeyCode: function(keyCode) {
		switch(keyCode) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 39:
			return 222;
		case 44:
			return 188;
		case 45:
			return 189;
		case 46:
			return 190;
		case 47:
			return 191;
		case 48:
			return 48;
		case 49:
			return 49;
		case 50:
			return 50;
		case 51:
			return 51;
		case 52:
			return 52;
		case 53:
			return 53;
		case 54:
			return 54;
		case 55:
			return 55;
		case 56:
			return 56;
		case 57:
			return 57;
		case 59:
			return 186;
		case 61:
			return 187;
		case 91:
			return 219;
		case 92:
			return 220;
		case 93:
			return 221;
		case 96:
			return 192;
		case 97:
			return 65;
		case 98:
			return 66;
		case 99:
			return 67;
		case 100:
			return 68;
		case 101:
			return 69;
		case 102:
			return 70;
		case 103:
			return 71;
		case 104:
			return 72;
		case 105:
			return 73;
		case 106:
			return 74;
		case 107:
			return 75;
		case 108:
			return 76;
		case 109:
			return 77;
		case 110:
			return 78;
		case 111:
			return 79;
		case 112:
			return 80;
		case 113:
			return 81;
		case 114:
			return 82;
		case 115:
			return 83;
		case 116:
			return 84;
		case 117:
			return 85;
		case 118:
			return 86;
		case 119:
			return 87;
		case 120:
			return 88;
		case 121:
			return 89;
		case 122:
			return 90;
		case 127:
			return 46;
		case 1073741881:
			return 20;
		case 1073741882:
			return 112;
		case 1073741883:
			return 113;
		case 1073741884:
			return 114;
		case 1073741885:
			return 115;
		case 1073741886:
			return 116;
		case 1073741887:
			return 117;
		case 1073741888:
			return 118;
		case 1073741889:
			return 119;
		case 1073741890:
			return 120;
		case 1073741891:
			return 121;
		case 1073741892:
			return 122;
		case 1073741893:
			return 123;
		case 1073741897:
			return 45;
		case 1073741898:
			return 36;
		case 1073741899:
			return 33;
		case 1073741901:
			return 35;
		case 1073741902:
			return 34;
		case 1073741903:
			return 39;
		case 1073741904:
			return 37;
		case 1073741905:
			return 40;
		case 1073741906:
			return 38;
		case 1073741908:
			return 111;
		case 1073741909:
			return 106;
		case 1073741910:
			return 109;
		case 1073741911:
			return 107;
		case 1073741912:
			return 108;
		case 1073741913:
			return 97;
		case 1073741914:
			return 98;
		case 1073741915:
			return 99;
		case 1073741916:
			return 100;
		case 1073741917:
			return 101;
		case 1073741918:
			return 102;
		case 1073741919:
			return 103;
		case 1073741920:
			return 104;
		case 1073741921:
			return 105;
		case 1073741922:
			return 96;
		case 1073741923:
			return 110;
		case 1073741928:
			return 124;
		case 1073741929:
			return 125;
		case 1073741930:
			return 126;
		case 1073742048:
			return 17;
		case 1073742049:
			return 16;
		case 1073742050:
			return 18;
		case 1073742052:
			return 17;
		case 1073742053:
			return 16;
		case 1073742054:
			return 18;
		default:
			return keyCode;
		}
	}
	,create: function(config) {
		lime.app.Application.prototype.create.call(this,config);
		this.stage = new openfl.display.Stage(this.windows[0].width,this.windows[0].height,config.background);
		this.stage.addChild(openfl.Lib.current);
	}
	,onKey: function(event) {
		var stack = new Array();
		if(this.stage.__focus == null) this.stage.__getInteractive(stack); else this.stage.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			stack.reverse();
			this.stage.__fireEvent(event,stack);
		}
	}
	,onKeyDown: function(keyCode,modifier) {
		var keyCode1 = this.convertKeyCode(keyCode);
		var charCode = keyCode1;
		this.onKey(new openfl.events.KeyboardEvent(openfl.events.KeyboardEvent.KEY_DOWN,true,false,charCode,keyCode1));
	}
	,onKeyUp: function(keyCode,modifier) {
		var keyCode1 = this.convertKeyCode(keyCode);
		var charCode = keyCode1;
		this.onKey(new openfl.events.KeyboardEvent(openfl.events.KeyboardEvent.KEY_UP,true,false,charCode,keyCode1));
	}
	,onMouse: function(type,x,y,button) {
		if(button > 2) return;
		this.stage.__mouseX = x;
		this.stage.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl.geom.Point(x,y);
		if(this.stage.__hitTest(x,y,false,stack,true)) target = stack[stack.length - 1]; else {
			target = this.stage;
			stack = [this.stage];
		}
		this.stage.__fireEvent(openfl.events.MouseEvent.__create(type,button,target == this.stage?targetPoint:target.globalToLocal(targetPoint),target),stack);
		var clickType;
		switch(type) {
		case openfl.events.MouseEvent.MOUSE_UP:
			clickType = openfl.events.MouseEvent.CLICK;
			break;
		case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:
			clickType = openfl.events.MouseEvent.MIDDLE_CLICK;
			break;
		case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
			clickType = openfl.events.MouseEvent.RIGHT_CLICK;
			break;
		default:
			clickType = null;
		}
		if(clickType != null) {
			this.stage.__fireEvent(openfl.events.MouseEvent.__create(clickType,button,target == this.stage?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == openfl.events.MouseEvent.MOUSE_UP && (js.Boot.__cast(target , openfl.display.InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl.Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.stage.__fireEvent(openfl.events.MouseEvent.__create(openfl.events.MouseEvent.DOUBLE_CLICK,button,target == this.stage?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		if(js.Boot.__instanceof(target,openfl.display.Sprite)) {
			var targetSprite = target;
			if(targetSprite.buttonMode && targetSprite.useHandCursor) lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.POINTER); else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		} else lime.ui.Mouse.set_cursor(lime.ui.MouseCursor.ARROW);
		if(this.stage.__dragObject != null) this.stage.__drag(targetPoint);
	}
	,onMouseDown: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_DOWN;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_DOWN;
		}
		this.onMouse(type,x,y,button);
	}
	,onMouseMove: function(x,y,button) {
		this.onMouse(openfl.events.MouseEvent.MOUSE_MOVE,x,y,0);
	}
	,onMouseUp: function(x,y,button) {
		var type;
		switch(button) {
		case 1:
			type = openfl.events.MouseEvent.MIDDLE_MOUSE_UP;
			break;
		case 2:
			type = openfl.events.MouseEvent.RIGHT_MOUSE_UP;
			break;
		default:
			type = openfl.events.MouseEvent.MOUSE_UP;
		}
		this.onMouse(type,x,y,button);
	}
	,onTouch: function(type,x,y,id) {
		var point = new openfl.geom.Point(x,y);
		this.stage.__mouseX = point.x;
		this.stage.__mouseY = point.y;
		var __stack = [];
		var mouseType;
		switch(type) {
		case "touchBegin":
			mouseType = openfl.events.MouseEvent.MOUSE_DOWN;
			break;
		case "touchMove":
			mouseType = openfl.events.MouseEvent.MOUSE_MOVE;
			break;
		case "touchEnd":
			mouseType = openfl.events.MouseEvent.MOUSE_UP;
			break;
		default:
			mouseType = null;
		}
		if(this.stage.__hitTest(x,y,false,__stack,true)) {
			var target = __stack[__stack.length - 1];
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl.events.TouchEvent.__create(type,null,localPoint,target);
			touchEvent.touchPointID = id;
			touchEvent.isPrimaryTouchPoint = true;
			var mouseEvent = openfl.events.MouseEvent.__create(mouseType,0,localPoint,target);
			mouseEvent.buttonDown = type != "touchEnd";
			this.stage.__fireEvent(touchEvent,__stack);
			this.stage.__fireEvent(mouseEvent,__stack);
		} else {
			var touchEvent1 = openfl.events.TouchEvent.__create(type,null,point,this.stage);
			touchEvent1.touchPointID = id;
			touchEvent1.isPrimaryTouchPoint = true;
			var mouseEvent1 = openfl.events.MouseEvent.__create(mouseType,0,point,this.stage);
			mouseEvent1.buttonDown = type != "touchEnd";
			this.stage.__fireEvent(touchEvent1,[this.stage]);
			this.stage.__fireEvent(mouseEvent1,[this.stage]);
		}
		if(type == "touchMove" && this.stage.__dragObject != null) this.stage.__drag(point);
	}
	,onTouchMove: function(x,y,id) {
		this.onTouch("touchMove",x,y,id);
	}
	,onTouchEnd: function(x,y,id) {
		this.onTouch("touchEnd",x,y,id);
	}
	,onTouchStart: function(x,y,id) {
		this.onTouch("touchBegin",x,y,id);
	}
	,onWindowActivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.ACTIVATE);
		this.stage.__broadcast(event,true);
	}
	,onWindowDeactivate: function() {
		var event = new openfl.events.Event(openfl.events.Event.DEACTIVATE);
		this.stage.__broadcast(event,true);
	}
	,onWindowResize: function(width,height) {
		this.stage.stageWidth = width;
		this.stage.stageHeight = height;
		var event = new openfl.events.Event(openfl.events.Event.RESIZE);
		this.stage.__broadcast(event,false);
	}
	,render: function(context) {
		this.stage.__render(context);
	}
	,__class__: openfl.display.Application
});
openfl.display.BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.transparent = transparent;
	if(width > 0 && height > 0) {
		this.width = width;
		this.height = height;
		this.rect = new openfl.geom.Rectangle(0,0,width,height);
		if(transparent) {
			if((function($this) {
				var $r;
				var $int = fillColor & -16777216;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		this.__image = new lime.graphics.Image(null,0,0,width,height,fillColor);
		this.__image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
};
$hxClasses["openfl.display.BitmapData"] = openfl.display.BitmapData;
openfl.display.BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl.display.BitmapData.__interfaces__ = [openfl.display.IBitmapDrawable];
openfl.display.BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__loadFromBase64(base64,type,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__loadFromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl.display.BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__loadFromImage(lime.graphics.Image.fromCanvas(canvas));
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl.display.BitmapData(0,0,true);
	bitmapData.__loadFromFile(path,onload,onerror);
	return bitmapData;
};
openfl.display.BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	var bitmapData = new openfl.display.BitmapData(0,0,transparent);
	bitmapData.__loadFromImage(image);
	bitmapData.__image.set_transparent(transparent);
	return bitmapData;
};
openfl.display.BitmapData.__flipPixel = function(pixel) {
	return (pixel & 255) << 24 | (pixel >> 8 & 255) << 16 | (pixel >> 16 & 255) << 8 | pixel >> 24 & 255;
};
openfl.display.BitmapData.__ucompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(tmp1 > tmp2) return 1; else return -1; else return 0;
			}
		}
	}
};
openfl.display.BitmapData.prototype = {
	applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(this.__image);
		lime.graphics.utils.ImageCanvasUtil.convertToCanvas(sourceBitmapData.__image);
		lime.graphics.utils.ImageCanvasUtil.createImageData(sourceBitmapData.__image);
		filter.__applyFilter(this.__image.buffer.__srcImageData,sourceBitmapData.__image.buffer.__srcImageData,sourceRect,destPoint);
		this.__image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) return new openfl.display.BitmapData(this.width,this.height,this.transparent); else return openfl.display.BitmapData.fromImage(this.__image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		this.__image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime.graphics.ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime.graphics.ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime.graphics.ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime.graphics.ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.__image.copyChannel(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.__isValid || sourceBitmapData == null) return;
		this.__image.copyPixels(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.__image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
	}
	,dispose: function() {
		this.__image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(!this.__isValid) return;
		var _g = this.__image.type;
		switch(_g[1]) {
		case 0:
			lime.graphics.utils.ImageCanvasUtil.convertToCanvas(this.__image);
			lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
			var buffer = this.__image.buffer;
			var renderSession = new openfl._internal.renderer.RenderSession();
			renderSession.context = buffer.__srcContext;
			renderSession.roundPixels = true;
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.webkitImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			var matrixCache = source.__worldTransform;
			if(matrix != null) source.__worldTransform = matrix; else source.__worldTransform = new openfl.geom.Matrix();
			source.__updateChildren(false);
			source.__renderCanvas(renderSession);
			source.__worldTransform = matrixCache;
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.webkitImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			break;
		default:
		}
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) return byteArray = null;
		if(js.Boot.__instanceof(compressor,openfl.display.PNGEncoderOptions)) return byteArray = this.__image.encode("png"); else if(js.Boot.__instanceof(compressor,openfl.display.JPEGEncoderOptions)) return byteArray = this.__image.encode("jpg",(js.Boot.__cast(compressor , openfl.display.JPEGEncoderOptions)).quality);
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) return;
		this.__image.fillRect(rect.__toLimeRectangle(),color);
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.floodFill(x,y,color);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(data),gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		return this.__image.get_rect().__toFlashRectangle();
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel(x,y);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) return 0;
		return this.__image.getPixel32(x,y);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) return null;
		if(rect == null) rect = this.rect;
		return this.__image.getPixels(rect.__toLimeRectangle());
	}
	,getTexture: function(gl) {
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
			this.__image.dirty = true;
		}
		if(this.__image.dirty) {
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.__image.clone();
			textureImage.set_premultiplied(true);
			gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,this.width,this.height,0,gl.RGBA,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = pixels.length / 4 | 0;
		var result;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(length);
		this1.data = this2;
		this1.length = length;
		this1.fixed = true;
		result = this1;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) result.length = i + 1;
				if(result.data.length < result.length) {
					var data;
					var this3;
					this3 = new Array(result.data.length + 10);
					data = this3;
					haxe.ds._Vector.Vector_Impl_.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl.geom.Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = pixels.length;
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.__isValid) return false;
		openfl.Lib.notImplemented("BitmapData.hitTest");
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
		this.__image.merge(sourceBitmapData.__image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.__isValid) return;
		openfl.Lib.notImplemented("BitmapData.noise");
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl.geom.Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		openfl.Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		openfl.Lib.notImplemented("BitmapData.scroll");
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel(x,y,color);
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) return;
		this.__image.setPixel32(x,y,color);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) return;
		this.__image.setPixels(rect.__toLimeRectangle(),byteArray);
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new lime.utils.ByteArray();
		byteArray.set_length(inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == this && sourceRect.equals(this.rect) && destPoint.x == 0 && destPoint.y == 0) {
			var hits = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var memory = new lime.utils.ByteArray();
			memory.set_length(this.width * this.height * 4);
			memory = this.getPixels(this.rect);
			memory.position = 0;
			openfl.Memory.select(memory);
			var thresholdMask = threshold & mask;
			var width_yy;
			var position;
			var pixelMask;
			var pixelValue;
			var i;
			var test;
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var yy = _g1++;
				width_yy = this.width * yy;
				var _g3 = 0;
				var _g2 = this.width;
				while(_g3 < _g2) {
					var xx = _g3++;
					position = (width_yy + xx) * 4;
					pixelValue = openfl.Memory.getI32(position);
					pixelMask = pixelValue & mask;
					i = openfl.display.BitmapData.__ucompare(pixelMask,thresholdMask);
					test = false;
					if(operation == "==") test = i == 0; else if(operation == "<") test = i == -1; else if(operation == ">") test = i == 1; else if(operation == "!=") test = i != 0; else if(operation == "<=") test = i == 0 || i == -1; else if(operation == ">=") test = i == 0 || i == 1;
					if(test) {
						openfl.Memory.setI32(position,color);
						hits++;
					}
				}
			}
			memory.position = 0;
			this.setPixels(this.rect,memory);
			openfl.Memory.select(null);
			return hits;
		} else {
			var sx = sourceRect.x | 0;
			var sy = sourceRect.y | 0;
			var sw = sourceBitmapData.width | 0;
			var sh = sourceBitmapData.height | 0;
			var dx = destPoint.x | 0;
			var dy = destPoint.y | 0;
			var bw = this.width - sw - dx;
			var bh = this.height - sh - dy;
			var dw;
			if(bw < 0) dw = sw + (this.width - sw - dx); else dw = sw;
			var dh;
			if(bw < 0) dh = sh + (this.height - sh - dy); else dh = sh;
			var hits1 = 0;
			threshold = (threshold & 255) << 24 | (threshold >> 8 & 255) << 16 | (threshold >> 16 & 255) << 8 | threshold >> 24 & 255;
			color = (color & 255) << 24 | (color >> 8 & 255) << 16 | (color >> 16 & 255) << 8 | color >> 24 & 255;
			var canvasMemory = sw * sh * 4;
			var sourceMemory = 0;
			if(copySource) sourceMemory = sw * sh * 4;
			var totalMemory = canvasMemory + sourceMemory;
			var memory1 = new lime.utils.ByteArray();
			if(memory1.allocated < totalMemory) memory1.___resizeBuffer(memory1.allocated = Std["int"](Math.max(totalMemory,memory1.allocated * 2))); else if(memory1.allocated > totalMemory) memory1.___resizeBuffer(memory1.allocated = totalMemory);
			memory1.length = totalMemory;
			totalMemory;
			memory1.position = 0;
			var bitmapData = sourceBitmapData.clone();
			var pixels = bitmapData.getPixels(sourceRect);
			memory1.writeBytes(pixels);
			memory1.position = canvasMemory;
			if(copySource) memory1.writeBytes(pixels);
			memory1.position = 0;
			openfl.Memory.select(memory1);
			var thresholdMask1 = threshold & mask;
			var position1;
			var pixelMask1;
			var pixelValue1;
			var i1;
			var test1;
			var _g4 = 0;
			while(_g4 < dh) {
				var yy1 = _g4++;
				var _g11 = 0;
				while(_g11 < dw) {
					var xx1 = _g11++;
					position1 = (xx1 + sx + (yy1 + sy) * sw) * 4;
					pixelValue1 = openfl.Memory.getI32(position1);
					pixelMask1 = pixelValue1 & mask;
					i1 = openfl.display.BitmapData.__ucompare(pixelMask1,thresholdMask1);
					test1 = false;
					if(operation == "==") test1 = i1 == 0; else if(operation == "<") test1 = i1 == -1; else if(operation == ">") test1 = i1 == 1; else if(operation == "!=") test1 = i1 != 0; else if(operation == "<=") test1 = i1 == 0 || i1 == -1; else if(operation == ">=") test1 = i1 == 0 || i1 == 1;
					if(test1) {
						openfl.Memory.setI32(position1,color);
						hits1++;
					} else if(copySource) openfl.Memory.setI32(position1,openfl.Memory.getI32(canvasMemory + position1));
				}
			}
			memory1.position = 0;
			bitmapData.setPixels(sourceRect,memory1);
			this.copyPixels(bitmapData,bitmapData.rect,destPoint);
			openfl.Memory.select(null);
			return hits1;
		}
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function() {
		if(this.__uvData == null) this.__uvData = new openfl.display.TextureUvs();
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = 1;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = 1;
		this.__uvData.y2 = 1;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = 1;
	}
	,__loadFromBase64: function(base64,type,onload) {
		var _g = this;
		lime.graphics.Image.fromBase64(base64,type,function(image) {
			_g.__loadFromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime.graphics.Image.fromBytes(bytes,function(image) {
			_g.__loadFromImage(image);
			if(rawAlpha != null) {
				lime.graphics.utils.ImageCanvasUtil.convertToCanvas(_g.__image);
				lime.graphics.utils.ImageCanvasUtil.createImageData(_g.__image);
				var data = _g.__image.buffer.data;
				var _g2 = 0;
				var _g1 = rawAlpha.length;
				while(_g2 < _g1) {
					var i = _g2++;
					data[i * 4 + 3] = rawAlpha.readUnsignedByte();
				}
				_g.__image.dirty = true;
			}
			if(onload != null) onload(_g);
		});
	}
	,__loadFromFile: function(path,onload,onerror) {
		var _g = this;
		lime.graphics.Image.fromFile(path,function(image) {
			_g.__loadFromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__loadFromImage: function(image) {
		this.__image = image;
		this.width = image.width;
		this.height = image.height;
		this.rect = new openfl.geom.Rectangle(0,0,image.width,image.height);
		this.__isValid = true;
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) return;
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl.geom.Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.__image.buffer.get_src(),0,0);
	}
	,__renderMask: function(renderSession) {
	}
	,__sync: function() {
		lime.graphics.utils.ImageCanvasUtil.sync(this.__image);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__class__: openfl.display.BitmapData
};
openfl.display.TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl.display.TextureUvs;
openfl.display.TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl.display.TextureUvs.prototype = {
	__class__: openfl.display.TextureUvs
};
openfl.display.BlendMode = $hxClasses["openfl.display.BlendMode"] = { __ename__ : true, __constructs__ : ["ADD","ALPHA","DARKEN","DIFFERENCE","ERASE","HARDLIGHT","INVERT","LAYER","LIGHTEN","MULTIPLY","NORMAL","OVERLAY","SCREEN","SUBTRACT"] };
openfl.display.BlendMode.ADD = ["ADD",0];
openfl.display.BlendMode.ADD.toString = $estr;
openfl.display.BlendMode.ADD.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ALPHA = ["ALPHA",1];
openfl.display.BlendMode.ALPHA.toString = $estr;
openfl.display.BlendMode.ALPHA.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DARKEN = ["DARKEN",2];
openfl.display.BlendMode.DARKEN.toString = $estr;
openfl.display.BlendMode.DARKEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.DIFFERENCE = ["DIFFERENCE",3];
openfl.display.BlendMode.DIFFERENCE.toString = $estr;
openfl.display.BlendMode.DIFFERENCE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.ERASE = ["ERASE",4];
openfl.display.BlendMode.ERASE.toString = $estr;
openfl.display.BlendMode.ERASE.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.HARDLIGHT = ["HARDLIGHT",5];
openfl.display.BlendMode.HARDLIGHT.toString = $estr;
openfl.display.BlendMode.HARDLIGHT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.INVERT = ["INVERT",6];
openfl.display.BlendMode.INVERT.toString = $estr;
openfl.display.BlendMode.INVERT.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LAYER = ["LAYER",7];
openfl.display.BlendMode.LAYER.toString = $estr;
openfl.display.BlendMode.LAYER.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.LIGHTEN = ["LIGHTEN",8];
openfl.display.BlendMode.LIGHTEN.toString = $estr;
openfl.display.BlendMode.LIGHTEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.MULTIPLY = ["MULTIPLY",9];
openfl.display.BlendMode.MULTIPLY.toString = $estr;
openfl.display.BlendMode.MULTIPLY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.NORMAL = ["NORMAL",10];
openfl.display.BlendMode.NORMAL.toString = $estr;
openfl.display.BlendMode.NORMAL.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.OVERLAY = ["OVERLAY",11];
openfl.display.BlendMode.OVERLAY.toString = $estr;
openfl.display.BlendMode.OVERLAY.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SCREEN = ["SCREEN",12];
openfl.display.BlendMode.SCREEN.toString = $estr;
openfl.display.BlendMode.SCREEN.__enum__ = openfl.display.BlendMode;
openfl.display.BlendMode.SUBTRACT = ["SUBTRACT",13];
openfl.display.BlendMode.SUBTRACT.toString = $estr;
openfl.display.BlendMode.SUBTRACT.__enum__ = openfl.display.BlendMode;
openfl.display.DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl.display.DirectRenderer;
openfl.display.DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl.display.DirectRenderer.__super__ = openfl.display.DisplayObject;
openfl.display.DirectRenderer.prototype = $extend(openfl.display.DisplayObject.prototype,{
	get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl.display.DirectRenderer
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
openfl.display.FrameLabel = function(name,frame) {
	openfl.events.EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl.display.FrameLabel;
openfl.display.FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl.display.FrameLabel.__super__ = openfl.events.EventDispatcher;
openfl.display.FrameLabel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl.display.FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
openfl.display.GradientType = $hxClasses["openfl.display.GradientType"] = { __ename__ : true, __constructs__ : ["RADIAL","LINEAR"] };
openfl.display.GradientType.RADIAL = ["RADIAL",0];
openfl.display.GradientType.RADIAL.toString = $estr;
openfl.display.GradientType.RADIAL.__enum__ = openfl.display.GradientType;
openfl.display.GradientType.LINEAR = ["LINEAR",1];
openfl.display.GradientType.LINEAR.toString = $estr;
openfl.display.GradientType.LINEAR.__enum__ = openfl.display.GradientType;
openfl.display.Graphics = function() {
	this.__visible = true;
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = [];
	this.__commands = new Array();
	this.__halfStrokeWidth = 0;
	this.__positionX = 0;
	this.__positionY = 0;
};
$hxClasses["openfl.display.Graphics"] = openfl.display.Graphics;
openfl.display.Graphics.__name__ = ["openfl","display","Graphics"];
openfl.display.Graphics.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.push(openfl.display.DrawCommand.BeginBitmapFill(bitmap,matrix != null?new openfl.geom.Matrix(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty):null,repeat,smooth));
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.push(openfl.display.DrawCommand.BeginFill(color & 16777215,alpha));
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		openfl.Lib.notImplemented("Graphics.beginGradientFill");
	}
	,clear: function() {
		this.__commands = new Array();
		this.__halfStrokeWidth = 0;
		if(this.__bounds != null) {
			this.__dirty = true;
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds.clone();
		this.__commands = sourceGraphics.__commands.slice();
		this.__dirty = true;
		this.__halfStrokeWidth = sourceGraphics.__halfStrokeWidth;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__inflateBounds(controlX1,controlY1);
		this.__inflateBounds(controlX2,controlY2);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.CubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY));
		this.__dirty = true;
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__inflateBounds(controlX,controlY);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.CurveTo(controlX,controlY,anchorX,anchorY));
		this.__dirty = true;
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__halfStrokeWidth,y - radius - this.__halfStrokeWidth);
		this.__inflateBounds(x + radius + this.__halfStrokeWidth,y + radius + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawCircle(x,y,radius));
		this.__dirty = true;
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawEllipse(x,y,width,height));
		this.__dirty = true;
	}
	,drawGraphicsData: function(graphicsData) {
		openfl.Lib.notImplemented("Graphics.drawGraphicsData");
	}
	,drawPath: function(commands,data,winding) {
		var dataIndex = 0;
		var _g = 0;
		while(_g < commands.length) {
			var command = commands.data[_g];
			++_g;
			switch(command) {
			case 1:
				this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 2:
				this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
				dataIndex += 2;
				break;
			case 3:
				this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
				dataIndex += 4;
				break;
			case 6:
				this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
				dataIndex += 6;
				break;
			default:
			}
		}
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRect(x,y,width,height));
		this.__dirty = true;
	}
	,drawRoundRect: function(x,y,width,height,rx,ry) {
		if(ry == null) ry = -1;
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__halfStrokeWidth,y - this.__halfStrokeWidth);
		this.__inflateBounds(x + width + this.__halfStrokeWidth,y + height + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.DrawRoundRect(x,y,width,height,rx,ry));
		this.__dirty = true;
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl.Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		this.__inflateBounds(0,0);
		this.__inflateBounds(openfl.Lib.current.stage.stageWidth,openfl.Lib.current.stage.stageHeight);
		this.__commands.push(openfl.display.DrawCommand.DrawTiles(sheet,tileData,smooth,flags,count));
		this.__dirty = true;
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling,colors,blendMode) {
		if(blendMode == null) blendMode = 0;
		var vlen = vertices.length / 2 | 0;
		if(culling == null) culling = openfl.display.TriangleCulling.NONE;
		if(indices == null) {
			if(vlen % 3 != 0) throw new openfl.errors.ArgumentError("Not enough vertices to close a triangle.");
			var this1;
			this1 = new openfl.VectorData();
			var this2;
			this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var data;
						var this3;
						this3 = new Array(indices.data.length + 10);
						data = this3;
						haxe.ds._Vector.Vector_Impl_.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
				indices.length;
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = Math.NEGATIVE_INFINITY;
		var tmpy = Math.NEGATIVE_INFINITY;
		var maxX = Math.NEGATIVE_INFINITY;
		var maxY = Math.NEGATIVE_INFINITY;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.push(openfl.display.DrawCommand.DrawTriangles(vertices,indices,uvtData,culling,colors,blendMode));
		this.__dirty = true;
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.push(openfl.display.DrawCommand.EndFill);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		openfl.Lib.notImplemented("Graphics.lineBitmapStyle");
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		openfl.Lib.notImplemented("Graphics.lineGradientStyle");
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(thickness != null) this.__halfStrokeWidth = thickness / 2; else this.__halfStrokeWidth = 0;
		this.__commands.push(openfl.display.DrawCommand.LineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit));
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__halfStrokeWidth,this.__positionY - this.__halfStrokeWidth);
		this.__inflateBounds(this.__positionX + this.__halfStrokeWidth,this.__positionY + this.__halfStrokeWidth);
		this.__commands.push(openfl.display.DrawCommand.LineTo(x,y));
		this.__dirty = true;
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.push(openfl.display.DrawCommand.MoveTo(x,y));
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = this.__bounds.clone().transform(matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var bounds = this.__bounds.clone().transform(matrix);
		return x > bounds.x && y > bounds.y && x <= bounds.get_right() && y <= bounds.get_bottom();
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl.geom.Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,__class__: openfl.display.Graphics
};
openfl.display.DrawCommand = $hxClasses["openfl.display.DrawCommand"] = { __ename__ : true, __constructs__ : ["BeginBitmapFill","BeginFill","CubicCurveTo","CurveTo","DrawCircle","DrawEllipse","DrawRect","DrawRoundRect","DrawTiles","DrawTriangles","EndFill","LineStyle","LineTo","MoveTo"] };
openfl.display.DrawCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CubicCurveTo = function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) { var $x = ["CubicCurveTo",2,controlX1,controlY1,controlX2,controlY2,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawCircle = function(x,y,radius) { var $x = ["DrawCircle",4,x,y,radius]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawEllipse = function(x,y,width,height) { var $x = ["DrawEllipse",5,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRect = function(x,y,width,height) { var $x = ["DrawRect",6,x,y,width,height]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawRoundRect = function(x,y,width,height,rx,ry) { var $x = ["DrawRoundRect",7,x,y,width,height,rx,ry]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTiles = function(sheet,tileData,smooth,flags,count) { var $x = ["DrawTiles",8,sheet,tileData,smooth,flags,count]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",9,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.EndFill = ["EndFill",10];
openfl.display.DrawCommand.EndFill.toString = $estr;
openfl.display.DrawCommand.EndFill.__enum__ = openfl.display.DrawCommand;
openfl.display.DrawCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",11,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.LineTo = function(x,y) { var $x = ["LineTo",12,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.DrawCommand.MoveTo = function(x,y) { var $x = ["MoveTo",13,x,y]; $x.__enum__ = openfl.display.DrawCommand; $x.toString = $estr; return $x; };
openfl.display.GraphicsPathCommand = function() { };
$hxClasses["openfl.display.GraphicsPathCommand"] = openfl.display.GraphicsPathCommand;
openfl.display.GraphicsPathCommand.__name__ = ["openfl","display","GraphicsPathCommand"];
openfl.display.GraphicsPathWinding = $hxClasses["openfl.display.GraphicsPathWinding"] = { __ename__ : true, __constructs__ : ["EVEN_ODD","NON_ZERO"] };
openfl.display.GraphicsPathWinding.EVEN_ODD = ["EVEN_ODD",0];
openfl.display.GraphicsPathWinding.EVEN_ODD.toString = $estr;
openfl.display.GraphicsPathWinding.EVEN_ODD.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.GraphicsPathWinding.NON_ZERO = ["NON_ZERO",1];
openfl.display.GraphicsPathWinding.NON_ZERO.toString = $estr;
openfl.display.GraphicsPathWinding.NON_ZERO.__enum__ = openfl.display.GraphicsPathWinding;
openfl.display.IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl.display.IGraphicsData;
openfl.display.IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl.display.IGraphicsData.prototype = {
	__class__: openfl.display.IGraphicsData
};
openfl.display.GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : true, __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl.display.GraphicsDataType.STROKE = ["STROKE",0];
openfl.display.GraphicsDataType.STROKE.toString = $estr;
openfl.display.GraphicsDataType.STROKE.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.SOLID = ["SOLID",1];
openfl.display.GraphicsDataType.SOLID.toString = $estr;
openfl.display.GraphicsDataType.SOLID.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl.display.GraphicsDataType.GRADIENT.toString = $estr;
openfl.display.GraphicsDataType.GRADIENT.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.PATH = ["PATH",3];
openfl.display.GraphicsDataType.PATH.toString = $estr;
openfl.display.GraphicsDataType.PATH.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.BITMAP = ["BITMAP",4];
openfl.display.GraphicsDataType.BITMAP.toString = $estr;
openfl.display.GraphicsDataType.BITMAP.__enum__ = openfl.display.GraphicsDataType;
openfl.display.GraphicsDataType.END = ["END",5];
openfl.display.GraphicsDataType.END.toString = $estr;
openfl.display.GraphicsDataType.END.__enum__ = openfl.display.GraphicsDataType;
openfl.display.JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl.display.JPEGEncoderOptions;
openfl.display.JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl.display.JPEGEncoderOptions.prototype = {
	__class__: openfl.display.JPEGEncoderOptions
};
openfl.display.Loader = function() {
	openfl.display.Sprite.call(this);
	this.contentLoaderInfo = openfl.display.LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl.display.Loader;
openfl.display.Loader.__name__ = ["openfl","display","Loader"];
openfl.display.Loader.__super__ = openfl.display.Sprite;
openfl.display.Loader.prototype = $extend(openfl.display.Sprite.prototype,{
	close: function() {
		openfl.Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
		if(extension.indexOf("?") != -1) extension = extension.split("?")[0];
		var transparent = true;
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null && request.contentType != "") switch(extension) {
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			transparent = false;
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		openfl.display.BitmapData.fromFile(request.url,$bind(this,this.BitmapData_onLoad),$bind(this,this.BitmapData_onError));
	}
	,loadBytes: function(buffer) {
		openfl.display.BitmapData.fromBytes(buffer,null,$bind(this,this.BitmapData_onLoad));
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl.events.Event(openfl.events.Event.UNLOAD);
			event.currentTarget = this;
			this.dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl.Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl.display.Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl.events.Event(openfl.events.Event.COMPLETE);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function() {
		var event = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl.display.Loader
});
openfl.display.OpenGLView = function() {
	openfl.display.DirectRenderer.call(this,"OpenGLView");
	if(!this.__added) {
		this.__added = true;
		haxe.Log.trace("Warning: OpenGLView is not available in HTML5 canvas rendering mode",{ fileName : "OpenGLView.hx", lineNumber : 66, className : "openfl.display.OpenGLView", methodName : "new"});
		haxe.Log.trace("Please compile your project using -Ddom or -Dwebgl (beta) to enable",{ fileName : "OpenGLView.hx", lineNumber : 67, className : "openfl.display.OpenGLView", methodName : "new"});
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl.display.OpenGLView;
openfl.display.OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl.display.OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl.display.OpenGLView.isSupported = null;
openfl.display.OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	if(lime.graphics.opengl.GL.context != null) return true; else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) context = canvas.getContext("experimental-webgl");
		return context != null;
	}
	return true;
};
openfl.display.OpenGLView.__super__ = openfl.display.DirectRenderer;
openfl.display.OpenGLView.prototype = $extend(openfl.display.DirectRenderer.prototype,{
	__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl._internal.renderer.dom.DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) rect = new openfl.geom.Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl.geom.Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			if(this.__render != null) this.__render(rect);
		}
	}
	,__class__: openfl.display.OpenGLView
});
openfl.display.PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl.display.PNGEncoderOptions;
openfl.display.PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl.display.PNGEncoderOptions.prototype = {
	__class__: openfl.display.PNGEncoderOptions
};
openfl.display.PixelSnapping = $hxClasses["openfl.display.PixelSnapping"] = { __ename__ : true, __constructs__ : ["NEVER","AUTO","ALWAYS"] };
openfl.display.PixelSnapping.NEVER = ["NEVER",0];
openfl.display.PixelSnapping.NEVER.toString = $estr;
openfl.display.PixelSnapping.NEVER.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.AUTO = ["AUTO",1];
openfl.display.PixelSnapping.AUTO.toString = $estr;
openfl.display.PixelSnapping.AUTO.__enum__ = openfl.display.PixelSnapping;
openfl.display.PixelSnapping.ALWAYS = ["ALWAYS",2];
openfl.display.PixelSnapping.ALWAYS.toString = $estr;
openfl.display.PixelSnapping.ALWAYS.__enum__ = openfl.display.PixelSnapping;
openfl.display.Preloader = function(display) {
	lime.app.Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl.Lib.current.addChild(display);
		if(js.Boot.__instanceof(display,NMEPreloader)) (js.Boot.__cast(display , NMEPreloader)).onInit();
	}
};
$hxClasses["openfl.display.Preloader"] = openfl.display.Preloader;
openfl.display.Preloader.__name__ = ["openfl","display","Preloader"];
openfl.display.Preloader.__super__ = lime.app.Preloader;
openfl.display.Preloader.prototype = $extend(lime.app.Preloader.prototype,{
	load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe.io.Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) this.total++;
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl.media.Sound();
			sound1.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.sound_onComplete));
			sound1.addEventListener(openfl.events.IOErrorEvent.IO_ERROR,$bind(this,this.sound_onIOError));
			sound1.load(new openfl.net.URLRequest(soundName + ".ogg"));
		}
		lime.app.Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
			(js.Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else lime.app.Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		if(this.display != null && js.Boot.__instanceof(this.display,NMEPreloader)) (js.Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener(openfl.events.Event.COMPLETE,$bind(this,this.display_onComplete));
		openfl.Lib.current.removeChild(this.display);
		openfl.Lib.current.stage.set_focus(null);
		this.display = null;
		lime.app.Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.update(this.loaded,this.total);
		if(this.loaded == this.total) this.start();
	}
	,__class__: openfl.display.Preloader
});
openfl.display.Shape = function() {
	openfl.display.DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl.display.Shape;
openfl.display.Shape.__name__ = ["openfl","display","Shape"];
openfl.display.Shape.__super__ = openfl.display.DisplayObject;
openfl.display.Shape.prototype = $extend(openfl.display.DisplayObject.prototype,{
	__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,this.__worldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(this.get_visible() && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getTransform())) {
			if(!interactiveOnly) stack.push(this);
			return true;
		}
		return false;
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasShape.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl._internal.renderer.dom.DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		if(this.__graphics != null) openfl._internal.renderer.opengl.utils.GraphicsRenderer.render(this,renderSession);
	}
	,get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl.display.Graphics();
		return this.__graphics;
	}
	,__class__: openfl.display.Shape
	,__properties__: $extend(openfl.display.DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
openfl.display.Stage = function(width,height,color) {
	this.__mouseY = 0;
	this.__mouseX = 0;
	openfl.display.Sprite.call(this);
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.stageWidth = width;
	this.stageHeight = height;
	this.stage = this;
	this.align = openfl.display.StageAlign.TOP_LEFT;
	this.allowsFullScreen = false;
	this.set_displayState(openfl.display.StageDisplayState.NORMAL);
	this.frameRate = 60;
	this.quality = openfl.display.StageQuality.HIGH;
	this.scaleMode = openfl.display.StageScaleMode.NO_SCALE;
	this.stageFocusRect = true;
	this.__clearBeforeRender = true;
	this.__stack = [];
	var this1;
	this1 = new openfl.VectorData();
	var this2;
	this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl.display.Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var data;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	this3.length;
};
$hxClasses["openfl.display.Stage"] = openfl.display.Stage;
openfl.display.Stage.__name__ = ["openfl","display","Stage"];
openfl.display.Stage.__super__ = openfl.display.Sprite;
openfl.display.Stage.prototype = $extend(openfl.display.Sprite.prototype,{
	globalToLocal: function(pos) {
		return pos;
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) mouse = parent.globalToLocal(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = openfl.events.EventPhase.CAPTURING_PHASE;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCancelled) return;
			}
			event.eventPhase = openfl.events.EventPhase.AT_TARGET;
			event.target.__broadcast(event,false);
			if(event.__isCancelled) return;
			if(event.bubbles) {
				event.eventPhase = openfl.events.EventPhase.BUBBLING_PHASE;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCancelled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		stack.push(this);
	}
	,__render: function(context) {
		this.__broadcast(new openfl.events.Event(openfl.events.Event.ENTER_FRAME),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl.events.Event(openfl.events.Event.RENDER),true);
		}
		this.__renderable = true;
		this.__update(false,true);
		switch(context[1]) {
		case 0:
			var gl = context[2];
			if(this.__renderer == null) this.__renderer = new openfl._internal.renderer.opengl.GLRenderer(this.stageWidth,this.stageHeight,gl);
			this.__renderer.render(this);
			break;
		case 1:
			var context1 = context[2];
			if(this.__renderer == null) this.__renderer = new openfl._internal.renderer.canvas.CanvasRenderer(this.stageWidth,this.stageHeight,context1);
			this.__renderer.render(this);
			break;
		case 2:
			var element = context[2];
			if(this.__renderer == null) this.__renderer = new openfl._internal.renderer.dom.DOMRenderer(this.stageWidth,this.stageHeight,element);
			this.__renderer.render(this);
			break;
		default:
		}
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl.geom.Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) mouse = parent.globalToLocal(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren) {
		if(transformOnly) {
			if(openfl.display.DisplayObject.__worldTransformDirty > 0) {
				openfl.display.Sprite.prototype.__update.call(this,true,updateChildren);
				if(updateChildren) {
					openfl.display.DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl.display.DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl.display.DisplayObject.__worldRenderDirty > 0) {
			openfl.display.Sprite.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				openfl.display.DisplayObject.__worldTransformDirty = 0;
				openfl.display.DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			if(this.__focus != null) {
				var event = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_OUT,true,false,value,false,0);
				this.__stack = [];
				this.__focus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(value != null) {
				var event1 = new openfl.events.FocusEvent(openfl.events.FocusEvent.FOCUS_IN,true,false,this.__focus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
			this.__focus = value;
		}
		return this.__focus;
	}
	,set_displayState: function(value) {
		this.displayState = value;
		return value;
	}
	,__class__: openfl.display.Stage
	,__properties__: $extend(openfl.display.Sprite.prototype.__properties__,{set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",set_color:"set_color",get_color:"get_color"})
});
openfl.display.Stage3D = function() {
	openfl.events.EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl.display.Stage3D;
openfl.display.Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl.display.Stage3D.__super__ = openfl.events.EventDispatcher;
openfl.display.Stage3D.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) context3DRenderMode = "";
		if(openfl.display.OpenGLView.get_isSupported()) {
			this.context3D = new openfl.display3D.Context3D();
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.CONTEXT3D_CREATE));
		} else this.dispatchEvent(new openfl.events.ErrorEvent(openfl.events.ErrorEvent.ERROR));
	}
	,__class__: openfl.display.Stage3D
});
openfl.display.StageAlign = $hxClasses["openfl.display.StageAlign"] = { __ename__ : true, __constructs__ : ["TOP_RIGHT","TOP_LEFT","TOP","RIGHT","LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","BOTTOM"] };
openfl.display.StageAlign.TOP_RIGHT = ["TOP_RIGHT",0];
openfl.display.StageAlign.TOP_RIGHT.toString = $estr;
openfl.display.StageAlign.TOP_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP_LEFT = ["TOP_LEFT",1];
openfl.display.StageAlign.TOP_LEFT.toString = $estr;
openfl.display.StageAlign.TOP_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.TOP = ["TOP",2];
openfl.display.StageAlign.TOP.toString = $estr;
openfl.display.StageAlign.TOP.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.RIGHT = ["RIGHT",3];
openfl.display.StageAlign.RIGHT.toString = $estr;
openfl.display.StageAlign.RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.LEFT = ["LEFT",4];
openfl.display.StageAlign.LEFT.toString = $estr;
openfl.display.StageAlign.LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_RIGHT = ["BOTTOM_RIGHT",5];
openfl.display.StageAlign.BOTTOM_RIGHT.toString = $estr;
openfl.display.StageAlign.BOTTOM_RIGHT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM_LEFT = ["BOTTOM_LEFT",6];
openfl.display.StageAlign.BOTTOM_LEFT.toString = $estr;
openfl.display.StageAlign.BOTTOM_LEFT.__enum__ = openfl.display.StageAlign;
openfl.display.StageAlign.BOTTOM = ["BOTTOM",7];
openfl.display.StageAlign.BOTTOM.toString = $estr;
openfl.display.StageAlign.BOTTOM.__enum__ = openfl.display.StageAlign;
openfl.display.StageDisplayState = $hxClasses["openfl.display.StageDisplayState"] = { __ename__ : true, __constructs__ : ["NORMAL","FULL_SCREEN","FULL_SCREEN_INTERACTIVE"] };
openfl.display.StageDisplayState.NORMAL = ["NORMAL",0];
openfl.display.StageDisplayState.NORMAL.toString = $estr;
openfl.display.StageDisplayState.NORMAL.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN = ["FULL_SCREEN",1];
openfl.display.StageDisplayState.FULL_SCREEN.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE = ["FULL_SCREEN_INTERACTIVE",2];
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.toString = $estr;
openfl.display.StageDisplayState.FULL_SCREEN_INTERACTIVE.__enum__ = openfl.display.StageDisplayState;
openfl.display.StageQuality = $hxClasses["openfl.display.StageQuality"] = { __ename__ : true, __constructs__ : ["BEST","HIGH","MEDIUM","LOW"] };
openfl.display.StageQuality.BEST = ["BEST",0];
openfl.display.StageQuality.BEST.toString = $estr;
openfl.display.StageQuality.BEST.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.HIGH = ["HIGH",1];
openfl.display.StageQuality.HIGH.toString = $estr;
openfl.display.StageQuality.HIGH.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.MEDIUM = ["MEDIUM",2];
openfl.display.StageQuality.MEDIUM.toString = $estr;
openfl.display.StageQuality.MEDIUM.__enum__ = openfl.display.StageQuality;
openfl.display.StageQuality.LOW = ["LOW",3];
openfl.display.StageQuality.LOW.toString = $estr;
openfl.display.StageQuality.LOW.__enum__ = openfl.display.StageQuality;
openfl.display.StageScaleMode = $hxClasses["openfl.display.StageScaleMode"] = { __ename__ : true, __constructs__ : ["SHOW_ALL","NO_SCALE","NO_BORDER","EXACT_FIT"] };
openfl.display.StageScaleMode.SHOW_ALL = ["SHOW_ALL",0];
openfl.display.StageScaleMode.SHOW_ALL.toString = $estr;
openfl.display.StageScaleMode.SHOW_ALL.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_SCALE = ["NO_SCALE",1];
openfl.display.StageScaleMode.NO_SCALE.toString = $estr;
openfl.display.StageScaleMode.NO_SCALE.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.NO_BORDER = ["NO_BORDER",2];
openfl.display.StageScaleMode.NO_BORDER.toString = $estr;
openfl.display.StageScaleMode.NO_BORDER.__enum__ = openfl.display.StageScaleMode;
openfl.display.StageScaleMode.EXACT_FIT = ["EXACT_FIT",3];
openfl.display.StageScaleMode.EXACT_FIT.toString = $estr;
openfl.display.StageScaleMode.EXACT_FIT.__enum__ = openfl.display.StageScaleMode;
openfl.display.Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = new Array();
	this.__tileRects = new Array();
	this.__tileUVs = new Array();
	this.__rectTile = new openfl.geom.Rectangle();
	this.__rectUV = new openfl.geom.Rectangle();
	this.__point = new openfl.geom.Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl.display.Tilesheet;
openfl.display.Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl.display.Tilesheet.prototype = {
	addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) centerPoint = openfl.display.Tilesheet.__defaultPoint;
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl.geom.Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) count = -1;
		if(flags == null) flags = 0;
		if(smooth == null) smooth = false;
		graphics.drawTiles(this,tileData,smooth,flags,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl.display.Tilesheet
};
openfl.display.TriangleCulling = $hxClasses["openfl.display.TriangleCulling"] = { __ename__ : true, __constructs__ : ["NEGATIVE","NONE","POSITIVE"] };
openfl.display.TriangleCulling.NEGATIVE = ["NEGATIVE",0];
openfl.display.TriangleCulling.NEGATIVE.toString = $estr;
openfl.display.TriangleCulling.NEGATIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.NONE = ["NONE",1];
openfl.display.TriangleCulling.NONE.toString = $estr;
openfl.display.TriangleCulling.NONE.__enum__ = openfl.display.TriangleCulling;
openfl.display.TriangleCulling.POSITIVE = ["POSITIVE",2];
openfl.display.TriangleCulling.POSITIVE.toString = $estr;
openfl.display.TriangleCulling.POSITIVE.__enum__ = openfl.display.TriangleCulling;
openfl.display3D = {};
openfl.display3D.Context3D = function() {
	this.disposed = false;
	this._yFlip = 1;
	this.vertexBuffersCreated = new Array();
	this.indexBuffersCreated = new Array();
	this.programsCreated = new Array();
	this.texturesCreated = new Array();
	this.samplerParameters = new Array();
	var _g1 = 0;
	var _g = openfl.display3D.Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl.display3D._Context3D.SamplerState();
		this.samplerParameters[i].wrap = openfl.display3D.Context3DWrapMode.REPEAT;
		this.samplerParameters[i].filter = openfl.display3D.Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl.display3D.Context3DMipFilter.MIPNONE;
	}
	var stage = openfl.Lib.current.stage;
	this.ogl = new openfl.display.OpenGLView();
	this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
};
$hxClasses["openfl.display3D.Context3D"] = openfl.display3D.Context3D;
openfl.display3D.Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl.display3D.Context3D.prototype = {
	clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 17664;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		lime.graphics.opengl.GL.context.clearColor(red,green,blue,alpha);
		lime.graphics.opengl.GL.context.clearDepth(depth);
		lime.graphics.opengl.GL.context.clearStencil(stencil);
		lime.graphics.opengl.GL.context.clear(mask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
		}
		this.ogl.set_scrollRect(new openfl.geom.Rectangle(0,0,width,height));
		this.ogl.set_width(width);
		this.ogl.set_height(height);
		this.scrollRect = this.ogl.get_scrollRect().clone();
		lime.graphics.opengl.GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.CubeTexture(lime.graphics.opengl.GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices) {
		var indexBuffer = new openfl.display3D.IndexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numIndices);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl.display3D.Program3D(lime.graphics.opengl.GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl.display3D.textures.RectangleTexture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		var texture = new openfl.display3D.textures.Texture(lime.graphics.opengl.GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex) {
		var vertexBuffer = new openfl.display3D.VertexBuffer3D(lime.graphics.opengl.GL.context.createBuffer(),numVertices,data32PerVertex);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime.graphics.opengl.GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime.graphics.opengl.GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip");
		lime.graphics.opengl.GL.context.uniform1f(location,this._yFlip);
		if(!this.drawing) throw new openfl.errors.Error("Need to clear before drawing if the buffer has not been cleared since the last present() call.");
		var numIndices;
		if(numTriangles == -1) numIndices = indexBuffer.numIndices; else numIndices = numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime.graphics.opengl.GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime.graphics.opengl.GL.context.useProgram(null);
		lime.graphics.opengl.GL.context.bindBuffer(34962,null);
		lime.graphics.opengl.GL.context.disable(2884);
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime.graphics.opengl.GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) lime.graphics.opengl.GL.context.disable(2884); else {
			lime.graphics.opengl.GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1029:
				lime.graphics.opengl.GL.context.cullFace(1029);
				break;
			case 1028:
				lime.graphics.opengl.GL.context.cullFace(1028);
				break;
			case 1032:
				lime.graphics.opengl.GL.context.cullFace(1032);
				break;
			default:
				throw "Unknown Context3DTriangleFace type.";
			}
		}
		switch(triangleFaceToCull) {
		case 1029:
			this._yFlip = -1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		case 0:
			this._yFlip = 1;
			break;
		default:
			throw "Unknown culling mode " + triangleFaceToCull + ".";
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime.graphics.opengl.GL.context.depthFunc(passCompareMode);
		lime.graphics.opengl.GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) byteArrayOffset = 0;
		data.position = byteArrayOffset;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniform4f(location,data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.uniformMatrix4fv(location,!transposedMatrix,new Float32Array((function($this) {
			var $r;
			var this1 = matrix.rawData;
			var value = new Array();
			{
				var _g1 = 0;
				var _g = this1.data.length;
				while(_g1 < _g) {
					var i = _g1++;
					value.push(this1.data[i]);
				}
			}
			$r = value;
			return $r;
		}(this))));
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) startIndex = 0;
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		lime.graphics.opengl.GL.context.uniform4f(location,data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime.graphics.opengl.GL.context.activeTexture(33984);
			break;
		case 1:
			lime.graphics.opengl.GL.context.activeTexture(33985);
			break;
		case 2:
			lime.graphics.opengl.GL.context.activeTexture(33986);
			break;
		case 3:
			lime.graphics.opengl.GL.context.activeTexture(33987);
			break;
		case 4:
			lime.graphics.opengl.GL.context.activeTexture(33988);
			break;
		case 5:
			lime.graphics.opengl.GL.context.activeTexture(33989);
			break;
		case 6:
			lime.graphics.opengl.GL.context.activeTexture(33990);
			break;
		case 7:
			lime.graphics.opengl.GL.context.activeTexture(33991);
			break;
		default:
			throw "Does not support texture8 or more";
		}
		if(texture == null) {
			lime.graphics.opengl.GL.context.bindTexture(3553,null);
			lime.graphics.opengl.GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime.graphics.opengl.GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.Texture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(3553,(js.Boot.__cast(texture , openfl.display3D.textures.RectangleTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			lime.graphics.opengl.GL.context.bindTexture(34067,(js.Boot.__cast(texture , openfl.display3D.textures.CubeTexture)).glTexture);
			lime.graphics.opengl.GL.context.uniform1i(location,textureIndex);
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter); else this.setTextureParameters(texture,openfl.display3D.Context3DWrapMode.REPEAT,openfl.display3D.Context3DTextureFilter.NEAREST,openfl.display3D.Context3DMipFilter.MIPNONE);
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var location;
		if(this.currentProgram != null && this.currentProgram.glProgram != null) location = lime.graphics.opengl.GL.context.getAttribLocation(this.currentProgram.glProgram,locationName); else location = -1;
		if(buffer == null) {
			if(location > -1) lime.graphics.opengl.GL.context.disableVertexAttribArray(location);
			return;
		}
		lime.graphics.opengl.GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		var type = 5126;
		var numBytes = 4;
		if(format == openfl.display3D.Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
			type = 5126;
			numBytes = 4;
		} else if(format == openfl.display3D.Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
			type = 5126;
			numBytes = 4;
		} else throw "Buffer format " + Std.string(format) + " is not supported";
		lime.graphics.opengl.GL.context.enableVertexAttribArray(location);
		lime.graphics.opengl.GL.context.vertexAttribPointer(location,dimension,type,false,buffer.data32PerVertex * numBytes,bufferOffset * numBytes);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) glProgram = program3D.glProgram;
		lime.graphics.opengl.GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromByteArray(locationName,data);
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = 1;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var currentIndex = i * 4;
			var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i);
			this.setGLSLProgramConstantsFromVector4(locationName,data,currentIndex);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime.graphics.opengl.GL.context.bindFramebuffer(36160,this.defaultFrameBuffer);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		if(this.framebuffer == null) this.framebuffer = lime.graphics.opengl.GL.context.createFramebuffer();
		lime.graphics.opengl.GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) this.renderbuffer = lime.graphics.opengl.GL.context.createRenderbuffer();
		lime.graphics.opengl.GL.context.bindRenderbuffer(36161,this.renderbuffer);
		lime.graphics.opengl.GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime.graphics.opengl.GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		if(enableDepthAndStencil) {
			lime.graphics.opengl.GL.context.enable(2929);
			lime.graphics.opengl.GL.context.enable(2960);
			lime.graphics.opengl.GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		}
		lime.graphics.opengl.GL.context.bindTexture(3553,texture.glTexture);
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime.graphics.opengl.GL.context.viewport(0,0,texture.width,texture.height);
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl.display3D.Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else throw "Sampler is out of bounds.";
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle == null) {
			lime.graphics.opengl.GL.context.disable(3089);
			return;
		}
		lime.graphics.opengl.GL.context.enable(3089);
		lime.graphics.opengl.GL.context.scissor(rectangle.x | 0,this.scrollRect.height - rectangle.y - rectangle.height | 0,rectangle.width | 0,rectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime.graphics.opengl.GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime.graphics.opengl.GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime.graphics.opengl.GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		var locationName = "fs" + sampler;
		this.setGLSLTextureAt(locationName,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl.display3D.Context3D.anisotropySupportTested) {
			var ext = lime.graphics.opengl.GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			if(ext == null) ext = lime.graphics.opengl.GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			openfl.display3D.Context3D.supportsAnisotropy = ext != null;
			openfl.display3D.Context3D.anisotropySupportTested = true;
			lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
				var $r;
				var $int = openfl.display3D.Context3D.maxSupportedAnisotropy;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this)));
			openfl.display3D.Context3D.maxSupportedAnisotropy = lime.graphics.opengl.GL.context.getTexParameter(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT);
		}
		if(js.Boot.__instanceof(texture,openfl.display3D.textures.Texture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(3553,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg = 2 < 0;
						var bNeg = a < 0;
						$r = aNeg != bNeg?aNeg:2 > a;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int1 < 0?4294967296.0 + int1:int1 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a1 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg1 = 4 < 0;
						var bNeg1 = a1 < 0;
						$r = aNeg1 != bNeg1?aNeg1:4 > a1;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int2 < 0?4294967296.0 + int2:int2 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a2 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg2 = 8 < 0;
						var bNeg2 = a2 < 0;
						$r = aNeg2 != bNeg2?aNeg2:8 > a2;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int3 < 0?4294967296.0 + int3:int3 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a3 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg3 = 16 < 0;
						var bNeg3 = a3 < 0;
						$r = aNeg3 != bNeg3?aNeg3:16 > a3;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int4 < 0?4294967296.0 + int4:int4 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.generateMipmap(3553);
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
				break;
			}
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.RectangleTexture)) {
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a4 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg4 = 2 < 0;
						var bNeg4 = a4 < 0;
						$r = aNeg4 != bNeg4?aNeg4:2 > a4;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int5 < 0?4294967296.0 + int5:int5 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a5 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg5 = 4 < 0;
						var bNeg5 = a5 < 0;
						$r = aNeg5 != bNeg5?aNeg5:4 > a5;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int6 < 0?4294967296.0 + int6:int6 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a6 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg6 = 8 < 0;
						var bNeg6 = a6 < 0;
						$r = aNeg6 != bNeg6?aNeg6:8 > a6;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int7 < 0?4294967296.0 + int7:int7 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(3553,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a7 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg7 = 16 < 0;
						var bNeg7 = a7 < 0;
						$r = aNeg7 != bNeg7?aNeg7:16 > a7;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int8 < 0?4294967296.0 + int8:int8 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9729);
		} else if(js.Boot.__instanceof(texture,openfl.display3D.textures.CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,33071);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10242,10497);
				lime.graphics.opengl.GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 4:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9729);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 5:
				lime.graphics.opengl.GL.context.texParameteri(34067,10240,9728);
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				break;
			case 0:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a8 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg8 = 2 < 0;
						var bNeg8 = a8 < 0;
						$r = aNeg8 != bNeg8?aNeg8:2 > a8;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int9 < 0?4294967296.0 + int9:int9 + 0.0;
					return $r;
				}(this)):2);
				break;
			case 1:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a9 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg9 = 4 < 0;
						var bNeg9 = a9 < 0;
						$r = aNeg9 != bNeg9?aNeg9:4 > a9;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int10 < 0?4294967296.0 + int10:int10 + 0.0;
					return $r;
				}(this)):4);
				break;
			case 2:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a10 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg10 = 8 < 0;
						var bNeg10 = a10 < 0;
						$r = aNeg10 != bNeg10?aNeg10:8 > a10;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int11 < 0?4294967296.0 + int11:int11 + 0.0;
					return $r;
				}(this)):8);
				break;
			case 3:
				if(openfl.display3D.Context3D.supportsAnisotropy) lime.graphics.opengl.GL.context.texParameterf(34067,openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT,(function($this) {
					var $r;
					var a11 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = (function($this) {
						var $r;
						var aNeg11 = 16 < 0;
						var bNeg11 = a11 < 0;
						$r = aNeg11 != bNeg11?aNeg11:16 > a11;
						return $r;
					}($this));
					return $r;
				}(this))?(function($this) {
					var $r;
					var int12 = openfl.display3D.Context3D.maxSupportedAnisotropy;
					$r = int12 < 0?4294967296.0 + int12:int12 + 0.0;
					return $r;
				}(this)):16);
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime.graphics.opengl.GL.context.texParameteri(34067,10241,9729);
				break;
			}
		} else throw "Texture of type " + Type.getClassName(Type.getClass(texture)) + " not supported yet";
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) bufferOffset = 0;
		var locationName = "va" + index;
		this.setGLSLVertexBufferAt(locationName,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl.display3D.Context3DProgramType.VERTEX) return "vc" + firstRegister; else if(programType == openfl.display3D.Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
		throw "Program Type " + Std.string(programType) + " not supported";
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime.graphics.opengl.GL.context.enable(3042);
			lime.graphics.opengl.GL.context.blendEquation(32774);
			lime.graphics.opengl.GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else lime.graphics.opengl.GL.context.disable(3042);
	}
	,__class__: openfl.display3D.Context3D
};
openfl.display3D._Context3D = {};
openfl.display3D._Context3D.SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl.display3D._Context3D.SamplerState;
openfl.display3D._Context3D.SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl.display3D._Context3D.SamplerState.prototype = {
	__class__: openfl.display3D._Context3D.SamplerState
};
openfl.display3D.Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl.display3D.Context3DClearMask;
openfl.display3D.Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
openfl.display3D.Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : true, __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl.display3D.Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl.display3D.Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPLINEAR.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl.display3D.Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNEAREST.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl.display3D.Context3DMipFilter.MIPNONE.toString = $estr;
openfl.display3D.Context3DMipFilter.MIPNONE.__enum__ = openfl.display3D.Context3DMipFilter;
openfl.display3D.Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : true, __constructs__ : ["VERTEX","FRAGMENT"] };
openfl.display3D.Context3DProgramType.VERTEX = ["VERTEX",0];
openfl.display3D.Context3DProgramType.VERTEX.toString = $estr;
openfl.display3D.Context3DProgramType.VERTEX.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl.display3D.Context3DProgramType.FRAGMENT.toString = $estr;
openfl.display3D.Context3DProgramType.FRAGMENT.__enum__ = openfl.display3D.Context3DProgramType;
openfl.display3D.Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : true, __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl.display3D.Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl.display3D.Context3DTextureFilter.LINEAR.toString = $estr;
openfl.display3D.Context3DTextureFilter.LINEAR.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl.display3D.Context3DTextureFilter.NEAREST.toString = $estr;
openfl.display3D.Context3DTextureFilter.NEAREST.__enum__ = openfl.display3D.Context3DTextureFilter;
openfl.display3D.Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : true, __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl.display3D.Context3DTextureFormat.BGRA = ["BGRA",0];
openfl.display3D.Context3DTextureFormat.BGRA.toString = $estr;
openfl.display3D.Context3DTextureFormat.BGRA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl.display3D.Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl.display3D.Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl.display3D.Context3DTextureFormat;
openfl.display3D._Context3DTriangleFace = {};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_ = function() { };
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_._new = function(a) {
	return a;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.fromInt = function(s) {
	return s;
};
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.toInt = function(this1) {
	return this1;
};
openfl.display3D.Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : true, __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl.display3D.Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl.display3D.Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl.display3D.Context3DVertexBufferFormat;
openfl.display3D.Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : true, __constructs__ : ["CLAMP","REPEAT"] };
openfl.display3D.Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl.display3D.Context3DWrapMode.CLAMP.toString = $estr;
openfl.display3D.Context3DWrapMode.CLAMP.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl.display3D.Context3DWrapMode.REPEAT.toString = $estr;
openfl.display3D.Context3DWrapMode.REPEAT.__enum__ = openfl.display3D.Context3DWrapMode;
openfl.display3D.IndexBuffer3D = function(glBuffer,numIndices) {
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl.display3D.IndexBuffer3D;
openfl.display3D.IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl.display3D.IndexBuffer3D.prototype = {
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerIndex = 2;
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * bytesPerIndex;
		var offset = byteArrayOffset + startOffset * bytesPerIndex;
		var indices;
		indices = new Int16Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			indices[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime.graphics.opengl.GL.context.bindBuffer(34963,this.glBuffer);
		var indices;
		indices = new Int16Array(count);
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34963,indices,35044);
	}
	,__class__: openfl.display3D.IndexBuffer3D
};
openfl.display3D.Program3D = function(program) {
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl.display3D.Program3D;
openfl.display3D.Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl.display3D.Program3D.prototype = {
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteProgram(this.glProgram);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,vertexShader);
		lime.graphics.opengl.GL.context.attachShader(this.glProgram,fragmentShader);
		lime.graphics.opengl.GL.context.linkProgram(this.glProgram);
		if(lime.graphics.opengl.GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime.graphics.opengl.GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") throw result;
		}
	}
	,__class__: openfl.display3D.Program3D
};
openfl.display3D.VertexBuffer3D = function(glBuffer,numVertices,data32PerVertex) {
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl.display3D.VertexBuffer3D;
openfl.display3D.VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl.display3D.VertexBuffer3D.prototype = {
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteBuffer(this.glBuffer);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			float32Array[i] = byteArray.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
	}
	,uploadFromFloat32Array: function(data,startVertex,numVertices) {
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		lime.graphics.opengl.GL.context.bufferData(34962,data,35044);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime.graphics.opengl.GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var offset = startVertex;
		var float32Array;
		float32Array = new Float32Array(length);
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime.graphics.opengl.GL.context.bufferData(34962,float32Array,35044);
		float32Array = null;
	}
	,__class__: openfl.display3D.VertexBuffer3D
};
openfl.display3D.textures = {};
openfl.display3D.textures.TextureBase = function(glTexture,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	openfl.events.EventDispatcher.call(this);
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl.display3D.textures.TextureBase.__super__ = openfl.events.EventDispatcher;
openfl.display3D.textures.TextureBase.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	dispose: function() {
		lime.graphics.opengl.GL.context.deleteTexture(this.glTexture);
	}
	,__class__: openfl.display3D.textures.TextureBase
});
openfl.display3D.textures.CubeTexture = function(glTexture,size) {
	openfl.display3D.textures.TextureBase.call(this,glTexture,size,size);
	this.size = size;
	this._textures = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this._textures[i] = lime.graphics.opengl.GL.context.createTexture();
	}
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl.display3D.textures.CubeTexture;
openfl.display3D.textures.CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl.display3D.textures.CubeTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.CubeTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) miplevel = 0;
		var source = bitmapData.__image.get_data();
		lime.graphics.opengl.GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime.graphics.opengl.GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime.graphics.opengl.GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime.graphics.opengl.GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime.graphics.opengl.GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime.graphics.opengl.GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime.graphics.opengl.GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw "unknown side type";
		}
		lime.graphics.opengl.GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl.display3D.textures.CubeTexture
});
openfl.display3D.textures.RectangleTexture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl.display3D.textures.RectangleTexture;
openfl.display3D.textures.RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl.display3D.textures.RectangleTexture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.RectangleTexture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime.utils.ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) lime.graphics.opengl.GL.context.pixelStorei(37440,1);
		lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
		lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
		lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.RectangleTexture
});
openfl.display3D.textures.Texture = function(glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
	openfl.display3D.textures.TextureBase.call(this,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl.display3D.textures.Texture;
openfl.display3D.textures.Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl.display3D.textures.Texture.__super__ = openfl.display3D.textures.TextureBase;
openfl.display3D.textures.Texture.prototype = $extend(openfl.display3D.textures.TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) miplevel = 0;
		var p = lime.utils.ByteArray.__ofBuffer(bitmapData.__image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0,miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		lime.graphics.opengl.GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime.graphics.opengl.GL.context.pixelStorei(37440,1);
			lime.graphics.opengl.GL.context.texParameteri(3553,10240,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10241,9728);
			lime.graphics.opengl.GL.context.texParameteri(3553,10242,33071);
			lime.graphics.opengl.GL.context.texParameteri(3553,10243,33071);
		}
		var source = new Uint8Array(data.length);
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < data.length) {
			source[i] = data.readUnsignedByte();
			i++;
		}
		lime.graphics.opengl.GL.context.texImage2D(3553,miplevel,6408,this.width,this.height,0,6408,5121,source);
		lime.graphics.opengl.GL.context.bindTexture(3553,null);
	}
	,__class__: openfl.display3D.textures.Texture
});
openfl.errors = {};
openfl.errors.Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl.errors.Error;
openfl.errors.Error.__name__ = ["openfl","errors","Error"];
openfl.errors.Error.prototype = {
	getStackTrace: function() {
		return haxe.CallStack.toString(haxe.CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl.errors.Error
};
openfl.errors.ArgumentError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage);
};
$hxClasses["openfl.errors.ArgumentError"] = openfl.errors.ArgumentError;
openfl.errors.ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl.errors.ArgumentError.__super__ = openfl.errors.Error;
openfl.errors.ArgumentError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.ArgumentError
});
openfl.errors.IOError = function(message) {
	if(message == null) message = "";
	openfl.errors.Error.call(this,message);
};
$hxClasses["openfl.errors.IOError"] = openfl.errors.IOError;
openfl.errors.IOError.__name__ = ["openfl","errors","IOError"];
openfl.errors.IOError.__super__ = openfl.errors.Error;
openfl.errors.IOError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.IOError
});
openfl.errors.RangeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.RangeError"] = openfl.errors.RangeError;
openfl.errors.RangeError.__name__ = ["openfl","errors","RangeError"];
openfl.errors.RangeError.__super__ = openfl.errors.Error;
openfl.errors.RangeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.RangeError
});
openfl.errors.TypeError = function(inMessage) {
	if(inMessage == null) inMessage = "";
	openfl.errors.Error.call(this,inMessage,0);
};
$hxClasses["openfl.errors.TypeError"] = openfl.errors.TypeError;
openfl.errors.TypeError.__name__ = ["openfl","errors","TypeError"];
openfl.errors.TypeError.__super__ = openfl.errors.Error;
openfl.errors.TypeError.prototype = $extend(openfl.errors.Error.prototype,{
	__class__: openfl.errors.TypeError
});
openfl.events.TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl.events.TextEvent;
openfl.events.TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl.events.TextEvent.__super__ = openfl.events.Event;
openfl.events.TextEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.TextEvent(this.type,this.bubbles,this.cancelable,this.text);
	}
	,toString: function() {
		return "[TextEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + "]";
	}
	,__class__: openfl.events.TextEvent
});
openfl.events.ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl.events.ErrorEvent;
openfl.events.ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl.events.ErrorEvent.__super__ = openfl.events.TextEvent;
openfl.events.ErrorEvent.prototype = $extend(openfl.events.TextEvent.prototype,{
	clone: function() {
		return new openfl.events.ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[ErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.ErrorEvent
});
openfl.events._EventDispatcher = {};
openfl.events._EventDispatcher.Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl.events._EventDispatcher.Listener;
openfl.events._EventDispatcher.Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl.events._EventDispatcher.Listener.prototype = {
	match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl.events._EventDispatcher.Listener
};
openfl.events.EventPhase = $hxClasses["openfl.events.EventPhase"] = { __ename__ : true, __constructs__ : ["CAPTURING_PHASE","AT_TARGET","BUBBLING_PHASE"] };
openfl.events.EventPhase.CAPTURING_PHASE = ["CAPTURING_PHASE",0];
openfl.events.EventPhase.CAPTURING_PHASE.toString = $estr;
openfl.events.EventPhase.CAPTURING_PHASE.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.AT_TARGET = ["AT_TARGET",1];
openfl.events.EventPhase.AT_TARGET.toString = $estr;
openfl.events.EventPhase.AT_TARGET.__enum__ = openfl.events.EventPhase;
openfl.events.EventPhase.BUBBLING_PHASE = ["BUBBLING_PHASE",2];
openfl.events.EventPhase.BUBBLING_PHASE.toString = $estr;
openfl.events.EventPhase.BUBBLING_PHASE.__enum__ = openfl.events.EventPhase;
openfl.events.FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl.events.FocusEvent;
openfl.events.FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl.events.FocusEvent.__super__ = openfl.events.Event;
openfl.events.FocusEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		var event = new openfl.events.FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,toString: function() {
		return "[FocusEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " relatedObject=" + Std.string(this.relatedObject) + " shiftKey=" + Std.string(this.shiftKey) + " keyCode=" + this.keyCode + "]";
	}
	,__class__: openfl.events.FocusEvent
});
openfl.events.HTTPStatusEvent = function(type,bubbles,cancelable,status) {
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl.events.HTTPStatusEvent;
openfl.events.HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl.events.HTTPStatusEvent.__super__ = openfl.events.Event;
openfl.events.HTTPStatusEvent.prototype = $extend(openfl.events.Event.prototype,{
	__class__: openfl.events.HTTPStatusEvent
});
openfl.events.IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl.events.IOErrorEvent;
openfl.events.IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl.events.IOErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.IOErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[IOErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.IOErrorEvent
});
openfl.events.KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl.events.KeyboardEvent;
openfl.events.KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl.events.KeyboardEvent.__super__ = openfl.events.Event;
openfl.events.KeyboardEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
	}
	,toString: function() {
		return "[KeyboardEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " charCode=" + this.charCode + " keyCode=" + this.keyCode + " keyLocation=" + Std.string(this.keyLocation) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + "]";
	}
	,__class__: openfl.events.KeyboardEvent
});
openfl.events.MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl.events.MouseEvent;
openfl.events.MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl.events.MouseEvent.__create = function(type,button,local,target) {
	var delta = 2;
	switch(type) {
	case openfl.events.MouseEvent.MOUSE_DOWN:case openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN:case openfl.events.MouseEvent.RIGHT_MOUSE_DOWN:
		openfl.events.MouseEvent.__buttonDown[button] = true;
		break;
	case openfl.events.MouseEvent.MOUSE_UP:case openfl.events.MouseEvent.MIDDLE_MOUSE_UP:case openfl.events.MouseEvent.RIGHT_MOUSE_UP:
		openfl.events.MouseEvent.__buttonDown[button] = false;
		break;
	}
	var pseudoEvent = new openfl.events.MouseEvent(type,true,false,local.x,local.y,null,false,false,false,openfl.events.MouseEvent.__buttonDown[button],delta);
	pseudoEvent.stageX = openfl.Lib.current.stage.get_mouseX();
	pseudoEvent.stageY = openfl.Lib.current.stage.get_mouseY();
	pseudoEvent.target = target;
	return pseudoEvent;
};
openfl.events.MouseEvent.__super__ = openfl.events.Event;
openfl.events.MouseEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
	}
	,toString: function() {
		return "[MouseEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " localX=" + this.localX + " localY=" + this.localY + " relatedObject=" + Std.string(this.relatedObject) + " ctrlKey=" + Std.string(this.ctrlKey) + " altKey=" + Std.string(this.altKey) + " shiftKey=" + Std.string(this.shiftKey) + " buttonDown=" + Std.string(this.buttonDown) + " delta=" + this.delta + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.MouseEvent
});
openfl.events.ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl.events.ProgressEvent;
openfl.events.ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl.events.ProgressEvent.__super__ = openfl.events.Event;
openfl.events.ProgressEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
	}
	,toString: function() {
		return "[ProgressEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " bytesLoaded=" + this.bytesLoaded + " bytesTotal=" + this.bytesTotal + "]";
	}
	,__class__: openfl.events.ProgressEvent
});
openfl.events.SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl.events.SecurityErrorEvent;
openfl.events.SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl.events.SecurityErrorEvent.__super__ = openfl.events.ErrorEvent;
openfl.events.SecurityErrorEvent.prototype = $extend(openfl.events.ErrorEvent.prototype,{
	clone: function() {
		return new openfl.events.SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
	}
	,toString: function() {
		return "[SecurityErrorEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + " text=" + this.text + " errorID=" + this.errorID + "]";
	}
	,__class__: openfl.events.SecurityErrorEvent
});
openfl.events.TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl.events.Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl.events.TimerEvent;
openfl.events.TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl.events.TimerEvent.__super__ = openfl.events.Event;
openfl.events.TimerEvent.prototype = $extend(openfl.events.Event.prototype,{
	clone: function() {
		return new openfl.events.TimerEvent(this.type,this.bubbles,this.cancelable);
	}
	,toString: function() {
		return "[TimerEvent type=" + this.type + " bubbles=" + Std.string(this.bubbles) + " cancelable=" + Std.string(this.cancelable) + "]";
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl.events.TimerEvent
});
openfl.events.TouchEvent = function(type,bubbles,cancelable,localX,localY,sizeX,sizeY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(sizeY == null) sizeY = 1;
	if(sizeX == null) sizeX = 1;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl.events.Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.pressure = 1;
	this.touchPointID = 0;
	this.isPrimaryTouchPoint = true;
};
$hxClasses["openfl.events.TouchEvent"] = openfl.events.TouchEvent;
openfl.events.TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl.events.TouchEvent.__create = function(type,touch,local,target) {
	var evt = new openfl.events.TouchEvent(type,true,false,local.x,local.y,null,null,null,false,false,false,false,0,null,0);
	evt.stageX = openfl.Lib.current.stage.get_mouseX();
	evt.stageY = openfl.Lib.current.stage.get_mouseY();
	evt.target = target;
	return evt;
};
openfl.events.TouchEvent.__super__ = openfl.events.Event;
openfl.events.TouchEvent.prototype = $extend(openfl.events.Event.prototype,{
	updateAfterEvent: function() {
	}
	,__class__: openfl.events.TouchEvent
});
openfl.filters = {};
openfl.filters.BitmapFilter = function() {
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl.filters.BitmapFilter;
openfl.filters.BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl.filters.BitmapFilter.prototype = {
	clone: function() {
		return new openfl.filters.BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__class__: openfl.filters.BitmapFilter
};
openfl.filters.BitmapFilterQuality = function() { };
$hxClasses["openfl.filters.BitmapFilterQuality"] = openfl.filters.BitmapFilterQuality;
openfl.filters.BitmapFilterQuality.__name__ = ["openfl","filters","BitmapFilterQuality"];
openfl.filters.BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) quality = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	openfl.filters.BitmapFilter.call(this);
	this.blurX = blurX;
	this.blurY = blurY;
	this.quality = quality;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl.filters.BlurFilter;
openfl.filters.BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl.filters.BlurFilter.__super__ = openfl.filters.BitmapFilter;
openfl.filters.BlurFilter.prototype = $extend(openfl.filters.BitmapFilter.prototype,{
	clone: function() {
		return new openfl.filters.BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__class__: openfl.filters.BlurFilter
});
openfl.filters.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) hideObject = false;
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	if(angle == null) angle = 45;
	if(distance == null) distance = 4;
	openfl.filters.BitmapFilter.call(this);
	this.distance = distance;
	this.angle = angle;
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.quality = quality;
	this.inner = inner;
	this.knockout = knockout;
	this.hideObject = hideObject;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl.filters.DropShadowFilter;
openfl.filters.DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl.filters.DropShadowFilter.__super__ = openfl.filters.BitmapFilter;
openfl.filters.DropShadowFilter.prototype = $extend(openfl.filters.BitmapFilter.prototype,{
	clone: function() {
		return new openfl.filters.DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,__class__: openfl.filters.DropShadowFilter
});
openfl.filters.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 2;
	if(blurY == null) blurY = 6;
	if(blurX == null) blurX = 6;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	openfl.filters.BitmapFilter.call(this);
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.quality = quality;
	this.inner = inner;
	this.knockout = knockout;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl.filters.GlowFilter;
openfl.filters.GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl.filters.GlowFilter.__super__ = openfl.filters.BitmapFilter;
openfl.filters.GlowFilter.prototype = $extend(openfl.filters.BitmapFilter.prototype,{
	clone: function() {
		return new openfl.filters.GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__class__: openfl.filters.GlowFilter
});
openfl.geom.ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl.geom.ColorTransform;
openfl.geom.ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl.geom.ColorTransform.prototype = {
	concat: function(second) {
		this.redMultiplier += second.redMultiplier;
		this.greenMultiplier += second.greenMultiplier;
		this.blueMultiplier += second.blueMultiplier;
		this.alphaMultiplier += second.alphaMultiplier;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		return new Float32Array([this.redMultiplier,0,0,0,this.redOffset / 255,0,this.greenMultiplier,0,0,this.greenOffset / 255,0,0,this.blueMultiplier,0,this.blueOffset / 255,0,0,0,this.alphaMultiplier,this.alphaOffset / 255]);
	}
	,__class__: openfl.geom.ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
openfl.geom.Matrix3D = function(v) {
	if(v != null && v.length == 16) this.rawData = v; else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl.geom.Matrix3D;
openfl.geom.Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl.geom.Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl.geom.Matrix3D((function($this) {
		var $r;
		var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		{
			var vec;
			var this1;
			this1 = new Array(value.length);
			vec = this1;
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
		}
		$r = vectorData;
		return $r;
	}(this)));
};
openfl.geom.Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl.geom.Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) this1.length = i + 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl.geom.Matrix3D.getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl.geom.Matrix3D();
	var a1 = new openfl.geom.Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	if(!this1.fixed) {
		if(0 >= this1.length) this1.length = 1;
		if(this1.data.length < this1.length) {
			var data;
			var this2;
			this2 = new Array(this1.data.length + 10);
			data = this2;
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = c + a1.x * a1.x * t;
	var this3 = m.rawData;
	if(!this3.fixed) {
		if(5 >= this3.length) this3.length = 6;
		if(this3.data.length < this3.length) {
			var data1;
			var this4;
			this4 = new Array(this3.data.length + 10);
			data1 = this4;
			haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
			this3.data = data1;
		}
	}
	this3.data[5] = c + a1.y * a1.y * t;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(10 >= this5.length) this5.length = 11;
		if(this5.data.length < this5.length) {
			var data2;
			var this6;
			this6 = new Array(this5.data.length + 10);
			data2 = this6;
			haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
			this5.data = data2;
		}
	}
	this5.data[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(4 >= this7.length) this7.length = 5;
		if(this7.data.length < this7.length) {
			var data3;
			var this8;
			this8 = new Array(this7.data.length + 10);
			data3 = this8;
			haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
			this7.data = data3;
		}
	}
	this7.data[4] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(1 >= this9.length) this9.length = 2;
		if(this9.data.length < this9.length) {
			var data4;
			var this10;
			this10 = new Array(this9.data.length + 10);
			data4 = this10;
			haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
			this9.data = data4;
		}
	}
	this9.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this11 = m.rawData;
	if(!this11.fixed) {
		if(8 >= this11.length) this11.length = 9;
		if(this11.data.length < this11.length) {
			var data5;
			var this12;
			this12 = new Array(this11.data.length + 10);
			data5 = this12;
			haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
			this11.data = data5;
		}
	}
	this11.data[8] = tmp1 - tmp2;
	var this13 = m.rawData;
	if(!this13.fixed) {
		if(2 >= this13.length) this13.length = 3;
		if(this13.data.length < this13.length) {
			var data6;
			var this14;
			this14 = new Array(this13.data.length + 10);
			data6 = this14;
			haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
			this13.data = data6;
		}
	}
	this13.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this15 = m.rawData;
	if(!this15.fixed) {
		if(9 >= this15.length) this15.length = 10;
		if(this15.data.length < this15.length) {
			var data7;
			var this16;
			this16 = new Array(this15.data.length + 10);
			data7 = this16;
			haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
			this15.data = data7;
		}
	}
	this15.data[9] = tmp1 + tmp2;
	var this17 = m.rawData;
	if(!this17.fixed) {
		if(6 >= this17.length) this17.length = 7;
		if(this17.data.length < this17.length) {
			var data8;
			var this18;
			this18 = new Array(this17.data.length + 10);
			data8 = this18;
			haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
			this17.data = data8;
		}
	}
	this17.data[6] = tmp1 - tmp2;
	return m;
};
openfl.geom.Matrix3D.prototype = {
	append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = this.rawData.data[13] + y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		return new openfl.geom.Matrix3D((function($this) {
			var $r;
			var this1 = $this.rawData;
			var vectorData = new openfl.VectorData();
			vectorData.length = this1.length;
			vectorData.fixed = this1.fixed;
			{
				var this2;
				this2 = new Array(this1.length);
				vectorData.data = this2;
			}
			haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
			$r = vectorData;
			return $r;
		}(this)));
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Column " + column + " out of bounds [0, ..., 3]");
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = vector.length - index;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(c >= this1.length) this1.length = c + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[c] = vector.data[c + index];
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var l = this.rawData.length;
		var _g = 0;
		while(_g < l) {
			var c = _g++;
			var key = c + index;
			if(!vector.fixed) {
				if(key >= vector.length) vector.length = key + 1;
				if(vector.data.length < vector.length) {
					var data;
					var this1;
					this1 = new Array(vector.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[c];
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = vector3D.x;
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(4 >= this3.length) this3.length = 5;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[4] = vector3D.y;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(8 >= this5.length) this5.length = 9;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[8] = vector3D.z;
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(12 >= this7.length) this7.length = 13;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[12] = vector3D.w;
			break;
		case 1:
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(1 >= this9.length) this9.length = 2;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[1] = vector3D.x;
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = vector3D.y;
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(9 >= this13.length) this13.length = 10;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[9] = vector3D.z;
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(13 >= this15.length) this15.length = 14;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[13] = vector3D.w;
			break;
		case 2:
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(2 >= this17.length) this17.length = 3;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[2] = vector3D.x;
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(6 >= this19.length) this19.length = 7;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[6] = vector3D.y;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = vector3D.z;
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(14 >= this23.length) this23.length = 15;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[14] = vector3D.w;
			break;
		case 3:
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(3 >= this25.length) this25.length = 4;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[3] = vector3D.x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(7 >= this27.length) this27.length = 8;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[7] = vector3D.y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(11 >= this29.length) this29.length = 12;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[11] = vector3D.z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = vector3D.w;
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + Std.string((function($this) {
				var $r;
				var $int = row;
				$r = $int < 0?4294967296.0 + $int:$int + 0.0;
				return $r;
			}(this))) + " out of bounds [0, ..., 3]");
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
			throw new openfl.errors.Error("Error, Row " + row + " out of bounds [0, ..., 3]");
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		var vec;
		var this1;
		this1 = new openfl.VectorData();
		var this2;
		this2 = new Array(0);
		this1.data = this2;
		this1.length = 0;
		this1.fixed = false;
		vec = this1;
		var m = this.clone();
		var mr;
		var this3 = m.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this3.length;
		vectorData.fixed = this3.fixed;
		var this4;
		this4 = new Array(this3.length);
		vectorData.data = this4;
		haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,vectorData.data,0,this3.length);
		mr = vectorData;
		var pos = new openfl.geom.Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		if(!mr.fixed) {
			if(12 >= mr.length) mr.length = 13;
			if(mr.data.length < mr.length) {
				var data;
				var this5;
				this5 = new Array(mr.data.length + 10);
				data = this5;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data,0,mr.data.length);
				mr.data = data;
			}
		}
		mr.data[12] = 0;
		if(!mr.fixed) {
			if(13 >= mr.length) mr.length = 14;
			if(mr.data.length < mr.length) {
				var data1;
				var this6;
				this6 = new Array(mr.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data1,0,mr.data.length);
				mr.data = data1;
			}
		}
		mr.data[13] = 0;
		if(!mr.fixed) {
			if(14 >= mr.length) mr.length = 15;
			if(mr.data.length < mr.length) {
				var data2;
				var this7;
				this7 = new Array(mr.data.length + 10);
				data2 = this7;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data2,0,mr.data.length);
				mr.data = data2;
			}
		}
		mr.data[14] = 0;
		var scale = new openfl.geom.Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z;
		if(!mr.fixed) {
			if(0 >= mr.length) mr.length = 1;
			if(mr.data.length < mr.length) {
				var data3;
				var this8;
				this8 = new Array(mr.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data3,0,mr.data.length);
				mr.data = data3;
			}
		}
		mr.data[0] = mr.data[0] / scale.x;
		if(!mr.fixed) {
			if(1 >= mr.length) mr.length = 2;
			if(mr.data.length < mr.length) {
				var data4;
				var this9;
				this9 = new Array(mr.data.length + 10);
				data4 = this9;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data4,0,mr.data.length);
				mr.data = data4;
			}
		}
		mr.data[1] = mr.data[1] / scale.x;
		if(!mr.fixed) {
			if(2 >= mr.length) mr.length = 3;
			if(mr.data.length < mr.length) {
				var data5;
				var this10;
				this10 = new Array(mr.data.length + 10);
				data5 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data5,0,mr.data.length);
				mr.data = data5;
			}
		}
		mr.data[2] = mr.data[2] / scale.x;
		if(!mr.fixed) {
			if(4 >= mr.length) mr.length = 5;
			if(mr.data.length < mr.length) {
				var data6;
				var this11;
				this11 = new Array(mr.data.length + 10);
				data6 = this11;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data6,0,mr.data.length);
				mr.data = data6;
			}
		}
		mr.data[4] = mr.data[4] / scale.y;
		if(!mr.fixed) {
			if(5 >= mr.length) mr.length = 6;
			if(mr.data.length < mr.length) {
				var data7;
				var this12;
				this12 = new Array(mr.data.length + 10);
				data7 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data7,0,mr.data.length);
				mr.data = data7;
			}
		}
		mr.data[5] = mr.data[5] / scale.y;
		if(!mr.fixed) {
			if(6 >= mr.length) mr.length = 7;
			if(mr.data.length < mr.length) {
				var data8;
				var this13;
				this13 = new Array(mr.data.length + 10);
				data8 = this13;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data8,0,mr.data.length);
				mr.data = data8;
			}
		}
		mr.data[6] = mr.data[6] / scale.y;
		if(!mr.fixed) {
			if(8 >= mr.length) mr.length = 9;
			if(mr.data.length < mr.length) {
				var data9;
				var this14;
				this14 = new Array(mr.data.length + 10);
				data9 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data9,0,mr.data.length);
				mr.data = data9;
			}
		}
		mr.data[8] = mr.data[8] / scale.z;
		if(!mr.fixed) {
			if(9 >= mr.length) mr.length = 10;
			if(mr.data.length < mr.length) {
				var data10;
				var this15;
				this15 = new Array(mr.data.length + 10);
				data10 = this15;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data10,0,mr.data.length);
				mr.data = data10;
			}
		}
		mr.data[9] = mr.data[9] / scale.z;
		if(!mr.fixed) {
			if(10 >= mr.length) mr.length = 11;
			if(mr.data.length < mr.length) {
				var data11;
				var this16;
				this16 = new Array(mr.data.length + 10);
				data11 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(mr.data,0,data11,0,mr.data.length);
				mr.data = data11;
			}
		}
		mr.data[10] = mr.data[10] / scale.z;
		var rot = new openfl.geom.Vector3D();
		switch(orientationStyle[1]) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data12;
				var this17;
				this17 = new Array(vec.data.length + 10);
				data12 = this17;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data13;
				var this18;
				this18 = new Array(vec.data.length + 10);
				data13 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		vec.length;
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var data14;
				var this19;
				this19 = new Array(vec.data.length + 10);
				data14 = this19;
				haxe.ds._Vector.Vector_Impl_.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		vec.length;
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl.VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var vec;
		var this1;
		this1 = new Array(value.length);
		vec = this1;
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) this1.length = i + 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl.geom.Vector3D(0,0,-1);
		if(up == null) up = new openfl.geom.Vector3D(0,-1,0);
		var dir = new openfl.geom.Vector3D(at.x - pos.x,at.y - pos.y,at.z - pos.z);
		var vup = new openfl.geom.Vector3D(up.x,up.y,up.z,up.w);
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = new openfl.geom.Vector3D(dir.x,dir.y,dir.z,dir.w);
		dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
		vup = new openfl.geom.Vector3D(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
		if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl.geom.Vector3D(-dir.y,dir.x,0); else vup = new openfl.geom.Vector3D(1,0,0);
		right = new openfl.geom.Vector3D(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
		right.normalize();
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = right.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(4 >= this3.length) this3.length = 5;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[4] = right.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(8 >= this5.length) this5.length = 9;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[8] = right.z;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(12 >= this7.length) this7.length = 13;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[12] = 0.0;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(1 >= this9.length) this9.length = 2;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[1] = vup.x;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = vup.y;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(9 >= this13.length) this13.length = 10;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[9] = vup.z;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(13 >= this15.length) this15.length = 14;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[13] = 0.0;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(2 >= this17.length) this17.length = 3;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[2] = dir.x;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(6 >= this19.length) this19.length = 7;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[6] = dir.y;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = dir.z;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(14 >= this23.length) this23.length = 15;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[14] = 0.0;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(3 >= this25.length) this25.length = 4;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[3] = pos.x;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(7 >= this27.length) this27.length = 8;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[7] = pos.y;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(11 >= this29.length) this29.length = 12;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[11] = pos.z;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) this1.length = 1;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data3;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data3 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
				this7.data = data3;
			}
		}
		this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data4;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data4 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
				this9.data = data4;
			}
		}
		this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(5 >= this11.length) this11.length = 6;
			if(this11.data.length < this11.length) {
				var data5;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data5 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
				this11.data = data5;
			}
		}
		this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(6 >= this13.length) this13.length = 7;
			if(this13.data.length < this13.length) {
				var data6;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data6 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
				this13.data = data6;
			}
		}
		this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(7 >= this15.length) this15.length = 8;
			if(this15.data.length < this15.length) {
				var data7;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data7 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
				this15.data = data7;
			}
		}
		this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(8 >= this17.length) this17.length = 9;
			if(this17.data.length < this17.length) {
				var data8;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data8 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
				this17.data = data8;
			}
		}
		this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(9 >= this19.length) this19.length = 10;
			if(this19.data.length < this19.length) {
				var data9;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data9 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
				this19.data = data9;
			}
		}
		this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(10 >= this21.length) this21.length = 11;
			if(this21.data.length < this21.length) {
				var data10;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data10 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
				this21.data = data10;
			}
		}
		this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(11 >= this23.length) this23.length = 12;
			if(this23.data.length < this23.length) {
				var data11;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data11 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
				this23.data = data11;
			}
		}
		this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(12 >= this25.length) this25.length = 13;
			if(this25.data.length < this25.length) {
				var data12;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data12 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
				this25.data = data12;
			}
		}
		this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this27 = this.rawData;
		if(!this27.fixed) {
			if(13 >= this27.length) this27.length = 14;
			if(this27.data.length < this27.length) {
				var data13;
				var this28;
				this28 = new Array(this27.data.length + 10);
				data13 = this28;
				haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
				this27.data = data13;
			}
		}
		this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this29 = this.rawData;
		if(!this29.fixed) {
			if(14 >= this29.length) this29.length = 15;
			if(this29.data.length < this29.length) {
				var data14;
				var this30;
				this30 = new Array(this29.data.length + 10);
				data14 = this30;
				haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
				this29.data = data14;
			}
		}
		this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this31 = this.rawData;
		if(!this31.fixed) {
			if(15 >= this31.length) this31.length = 16;
			if(this31.data.length < this31.length) {
				var data15;
				var this32;
				this32 = new Array(this31.data.length + 10);
				data15 = this32;
				haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
				this31.data = data15;
			}
		}
		this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl.geom.Matrix3D.getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			var p = pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl.geom.Matrix3D((function($this) {
			var $r;
			var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vectorData = new openfl.VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			{
				var vec;
				var this1;
				this1 = new Array(value.length);
				vec = this1;
				var _g1 = 0;
				var _g = value.length;
				while(_g1 < _g) {
					var i = _g1++;
					vec[i] = value[i];
				}
				vectorData.data = vec;
			}
			$r = vectorData;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl.geom.Matrix3D();
		m.set_position(new openfl.geom.Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
		if(orientationStyle == null) orientationStyle = openfl.geom.Orientation3D.EULER_ANGLES;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		switch(orientationStyle[1]) {
		case 1:
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) this1.length = 1;
				if(this1.data.length < this1.length) {
					var data;
					var this2;
					this2 = new Array(this1.data.length + 10);
					data = this2;
					haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = cy * cz * scale[0];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(1 >= this3.length) this3.length = 2;
				if(this3.data.length < this3.length) {
					var data1;
					var this4;
					this4 = new Array(this3.data.length + 10);
					data1 = this4;
					haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
					this3.data = data1;
				}
			}
			this3.data[1] = cy * sz * scale[1];
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(2 >= this5.length) this5.length = 3;
				if(this5.data.length < this5.length) {
					var data2;
					var this6;
					this6 = new Array(this5.data.length + 10);
					data2 = this6;
					haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
					this5.data = data2;
				}
			}
			this5.data[2] = -sy * scale[2];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(3 >= this7.length) this7.length = 4;
				if(this7.data.length < this7.length) {
					var data3;
					var this8;
					this8 = new Array(this7.data.length + 10);
					data3 = this8;
					haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data3,0,this7.data.length);
					this7.data = data3;
				}
			}
			this7.data[3] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(4 >= this9.length) this9.length = 5;
				if(this9.data.length < this9.length) {
					var data4;
					var this10;
					this10 = new Array(this9.data.length + 10);
					data4 = this10;
					haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data4,0,this9.data.length);
					this9.data = data4;
				}
			}
			this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(5 >= this11.length) this11.length = 6;
				if(this11.data.length < this11.length) {
					var data5;
					var this12;
					this12 = new Array(this11.data.length + 10);
					data5 = this12;
					haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data5,0,this11.data.length);
					this11.data = data5;
				}
			}
			this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(6 >= this13.length) this13.length = 7;
				if(this13.data.length < this13.length) {
					var data6;
					var this14;
					this14 = new Array(this13.data.length + 10);
					data6 = this14;
					haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data6,0,this13.data.length);
					this13.data = data6;
				}
			}
			this13.data[6] = sx * cy * scale[6];
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(7 >= this15.length) this15.length = 8;
				if(this15.data.length < this15.length) {
					var data7;
					var this16;
					this16 = new Array(this15.data.length + 10);
					data7 = this16;
					haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data7,0,this15.data.length);
					this15.data = data7;
				}
			}
			this15.data[7] = 0;
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(8 >= this17.length) this17.length = 9;
				if(this17.data.length < this17.length) {
					var data8;
					var this18;
					this18 = new Array(this17.data.length + 10);
					data8 = this18;
					haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data8,0,this17.data.length);
					this17.data = data8;
				}
			}
			this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(9 >= this19.length) this19.length = 10;
				if(this19.data.length < this19.length) {
					var data9;
					var this20;
					this20 = new Array(this19.data.length + 10);
					data9 = this20;
					haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data9,0,this19.data.length);
					this19.data = data9;
				}
			}
			this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(10 >= this21.length) this21.length = 11;
				if(this21.data.length < this21.length) {
					var data10;
					var this22;
					this22 = new Array(this21.data.length + 10);
					data10 = this22;
					haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data10,0,this21.data.length);
					this21.data = data10;
				}
			}
			this21.data[10] = cx * cy * scale[10];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(11 >= this23.length) this23.length = 12;
				if(this23.data.length < this23.length) {
					var data11;
					var this24;
					this24 = new Array(this23.data.length + 10);
					data11 = this24;
					haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data11,0,this23.data.length);
					this23.data = data11;
				}
			}
			this23.data[11] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(12 >= this25.length) this25.length = 13;
				if(this25.data.length < this25.length) {
					var data12;
					var this26;
					this26 = new Array(this25.data.length + 10);
					data12 = this26;
					haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data12,0,this25.data.length);
					this25.data = data12;
				}
			}
			this25.data[12] = components.data[0].x;
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(13 >= this27.length) this27.length = 14;
				if(this27.data.length < this27.length) {
					var data13;
					var this28;
					this28 = new Array(this27.data.length + 10);
					data13 = this28;
					haxe.ds._Vector.Vector_Impl_.blit(this27.data,0,data13,0,this27.data.length);
					this27.data = data13;
				}
			}
			this27.data[13] = components.data[0].y;
			var this29 = this.rawData;
			if(!this29.fixed) {
				if(14 >= this29.length) this29.length = 15;
				if(this29.data.length < this29.length) {
					var data14;
					var this30;
					this30 = new Array(this29.data.length + 10);
					data14 = this30;
					haxe.ds._Vector.Vector_Impl_.blit(this29.data,0,data14,0,this29.data.length);
					this29.data = data14;
				}
			}
			this29.data[14] = components.data[0].z;
			var this31 = this.rawData;
			if(!this31.fixed) {
				if(15 >= this31.length) this31.length = 16;
				if(this31.data.length < this31.length) {
					var data15;
					var this32;
					this32 = new Array(this31.data.length + 10);
					data15 = this32;
					haxe.ds._Vector.Vector_Impl_.blit(this31.data,0,data15,0,this31.data.length);
					this31.data = data15;
				}
			}
			this31.data[15] = 1;
			break;
		default:
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,openfl.geom.Orientation3D.AXIS_ANGLE)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) this33.length = 1;
				if(this33.data.length < this33.length) {
					var data16;
					var this34;
					this34 = new Array(this33.data.length + 10);
					data16 = this34;
					haxe.ds._Vector.Vector_Impl_.blit(this33.data,0,data16,0,this33.data.length);
					this33.data = data16;
				}
			}
			this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(1 >= this35.length) this35.length = 2;
				if(this35.data.length < this35.length) {
					var data17;
					var this36;
					this36 = new Array(this35.data.length + 10);
					data17 = this36;
					haxe.ds._Vector.Vector_Impl_.blit(this35.data,0,data17,0,this35.data.length);
					this35.data = data17;
				}
			}
			this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(2 >= this37.length) this37.length = 3;
				if(this37.data.length < this37.length) {
					var data18;
					var this38;
					this38 = new Array(this37.data.length + 10);
					data18 = this38;
					haxe.ds._Vector.Vector_Impl_.blit(this37.data,0,data18,0,this37.data.length);
					this37.data = data18;
				}
			}
			this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(3 >= this39.length) this39.length = 4;
				if(this39.data.length < this39.length) {
					var data19;
					var this40;
					this40 = new Array(this39.data.length + 10);
					data19 = this40;
					haxe.ds._Vector.Vector_Impl_.blit(this39.data,0,data19,0,this39.data.length);
					this39.data = data19;
				}
			}
			this39.data[3] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(4 >= this41.length) this41.length = 5;
				if(this41.data.length < this41.length) {
					var data20;
					var this42;
					this42 = new Array(this41.data.length + 10);
					data20 = this42;
					haxe.ds._Vector.Vector_Impl_.blit(this41.data,0,data20,0,this41.data.length);
					this41.data = data20;
				}
			}
			this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(5 >= this43.length) this43.length = 6;
				if(this43.data.length < this43.length) {
					var data21;
					var this44;
					this44 = new Array(this43.data.length + 10);
					data21 = this44;
					haxe.ds._Vector.Vector_Impl_.blit(this43.data,0,data21,0,this43.data.length);
					this43.data = data21;
				}
			}
			this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this45 = this.rawData;
			if(!this45.fixed) {
				if(6 >= this45.length) this45.length = 7;
				if(this45.data.length < this45.length) {
					var data22;
					var this46;
					this46 = new Array(this45.data.length + 10);
					data22 = this46;
					haxe.ds._Vector.Vector_Impl_.blit(this45.data,0,data22,0,this45.data.length);
					this45.data = data22;
				}
			}
			this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this47 = this.rawData;
			if(!this47.fixed) {
				if(7 >= this47.length) this47.length = 8;
				if(this47.data.length < this47.length) {
					var data23;
					var this48;
					this48 = new Array(this47.data.length + 10);
					data23 = this48;
					haxe.ds._Vector.Vector_Impl_.blit(this47.data,0,data23,0,this47.data.length);
					this47.data = data23;
				}
			}
			this47.data[7] = 0;
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(8 >= this49.length) this49.length = 9;
				if(this49.data.length < this49.length) {
					var data24;
					var this50;
					this50 = new Array(this49.data.length + 10);
					data24 = this50;
					haxe.ds._Vector.Vector_Impl_.blit(this49.data,0,data24,0,this49.data.length);
					this49.data = data24;
				}
			}
			this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(9 >= this51.length) this51.length = 10;
				if(this51.data.length < this51.length) {
					var data25;
					var this52;
					this52 = new Array(this51.data.length + 10);
					data25 = this52;
					haxe.ds._Vector.Vector_Impl_.blit(this51.data,0,data25,0,this51.data.length);
					this51.data = data25;
				}
			}
			this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this53 = this.rawData;
			if(!this53.fixed) {
				if(10 >= this53.length) this53.length = 11;
				if(this53.data.length < this53.length) {
					var data26;
					var this54;
					this54 = new Array(this53.data.length + 10);
					data26 = this54;
					haxe.ds._Vector.Vector_Impl_.blit(this53.data,0,data26,0,this53.data.length);
					this53.data = data26;
				}
			}
			this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this55 = this.rawData;
			if(!this55.fixed) {
				if(11 >= this55.length) this55.length = 12;
				if(this55.data.length < this55.length) {
					var data27;
					var this56;
					this56 = new Array(this55.data.length + 10);
					data27 = this56;
					haxe.ds._Vector.Vector_Impl_.blit(this55.data,0,data27,0,this55.data.length);
					this55.data = data27;
				}
			}
			this55.data[11] = 0;
			var this57 = this.rawData;
			if(!this57.fixed) {
				if(12 >= this57.length) this57.length = 13;
				if(this57.data.length < this57.length) {
					var data28;
					var this58;
					this58 = new Array(this57.data.length + 10);
					data28 = this58;
					haxe.ds._Vector.Vector_Impl_.blit(this57.data,0,data28,0,this57.data.length);
					this57.data = data28;
				}
			}
			this57.data[12] = components.data[0].x;
			var this59 = this.rawData;
			if(!this59.fixed) {
				if(13 >= this59.length) this59.length = 14;
				if(this59.data.length < this59.length) {
					var data29;
					var this60;
					this60 = new Array(this59.data.length + 10);
					data29 = this60;
					haxe.ds._Vector.Vector_Impl_.blit(this59.data,0,data29,0,this59.data.length);
					this59.data = data29;
				}
			}
			this59.data[13] = components.data[0].y;
			var this61 = this.rawData;
			if(!this61.fixed) {
				if(14 >= this61.length) this61.length = 15;
				if(this61.data.length < this61.length) {
					var data30;
					var this62;
					this62 = new Array(this61.data.length + 10);
					data30 = this62;
					haxe.ds._Vector.Vector_Impl_.blit(this61.data,0,data30,0,this61.data.length);
					this61.data = data30;
				}
			}
			this61.data[14] = components.data[0].z;
			var this63 = this.rawData;
			if(!this63.fixed) {
				if(15 >= this63.length) this63.length = 16;
				if(this63.data.length < this63.length) {
					var data31;
					var this64;
					this64 = new Array(this63.data.length + 10);
					data31 = this64;
					haxe.ds._Vector.Vector_Impl_.blit(this63.data,0,data31,0,this63.data.length);
					this63.data = data31;
				}
			}
			this63.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this65 = this.rawData;
			if(!this65.fixed) {
				if(0 >= this65.length) this65.length = 1;
				if(this65.data.length < this65.length) {
					var data32;
					var this66;
					this66 = new Array(this65.data.length + 10);
					data32 = this66;
					haxe.ds._Vector.Vector_Impl_.blit(this65.data,0,data32,0,this65.data.length);
					this65.data = data32;
				}
			}
			this65.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this67 = this.rawData;
			if(!this67.fixed) {
				if(5 >= this67.length) this67.length = 6;
				if(this67.data.length < this67.length) {
					var data33;
					var this68;
					this68 = new Array(this67.data.length + 10);
					data33 = this68;
					haxe.ds._Vector.Vector_Impl_.blit(this67.data,0,data33,0,this67.data.length);
					this67.data = data33;
				}
			}
			this67.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this69 = this.rawData;
			if(!this69.fixed) {
				if(10 >= this69.length) this69.length = 11;
				if(this69.data.length < this69.length) {
					var data34;
					var this70;
					this70 = new Array(this69.data.length + 10);
					data34 = this70;
					haxe.ds._Vector.Vector_Impl_.blit(this69.data,0,data34,0,this69.data.length);
					this69.data = data34;
				}
			}
			this69.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl.geom.Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		while(i + 3 <= vin.length) {
			var x = vin.data[i];
			var y = vin.data[i + 1];
			var z = vin.data[i + 2];
			if(!vout.fixed) {
				if(i >= vout.length) vout.length = i + 1;
				if(vout.data.length < vout.length) {
					var data;
					var this1;
					this1 = new Array(vout.data.length + 10);
					data = this1;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data,0,vout.data.length);
					vout.data = data;
				}
			}
			vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) vout.length = key + 1;
				if(vout.data.length < vout.length) {
					var data1;
					var this2;
					this2 = new Array(vout.data.length + 10);
					data1 = this2;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) vout.length = key1 + 1;
				if(vout.data.length < vout.length) {
					var data2;
					var this3;
					this3 = new Array(vout.data.length + 10);
					data2 = this3;
					haxe.ds._Vector.Vector_Impl_.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData;
		var this1 = this.rawData;
		var vectorData = new openfl.VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var this2;
		this2 = new Array(this1.length);
		vectorData.data = this2;
		haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,vectorData.data,0,this1.length);
		oRawData = vectorData;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(1 >= this3.length) this3.length = 2;
			if(this3.data.length < this3.length) {
				var data;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data,0,this3.data.length);
				this3.data = data;
			}
		}
		this3.data[1] = oRawData.data[4];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(2 >= this5.length) this5.length = 3;
			if(this5.data.length < this5.length) {
				var data1;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data1 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data1,0,this5.data.length);
				this5.data = data1;
			}
		}
		this5.data[2] = oRawData.data[8];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(3 >= this7.length) this7.length = 4;
			if(this7.data.length < this7.length) {
				var data2;
				var this8;
				this8 = new Array(this7.data.length + 10);
				data2 = this8;
				haxe.ds._Vector.Vector_Impl_.blit(this7.data,0,data2,0,this7.data.length);
				this7.data = data2;
			}
		}
		this7.data[3] = oRawData.data[12];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(4 >= this9.length) this9.length = 5;
			if(this9.data.length < this9.length) {
				var data3;
				var this10;
				this10 = new Array(this9.data.length + 10);
				data3 = this10;
				haxe.ds._Vector.Vector_Impl_.blit(this9.data,0,data3,0,this9.data.length);
				this9.data = data3;
			}
		}
		this9.data[4] = oRawData.data[1];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(6 >= this11.length) this11.length = 7;
			if(this11.data.length < this11.length) {
				var data4;
				var this12;
				this12 = new Array(this11.data.length + 10);
				data4 = this12;
				haxe.ds._Vector.Vector_Impl_.blit(this11.data,0,data4,0,this11.data.length);
				this11.data = data4;
			}
		}
		this11.data[6] = oRawData.data[9];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(7 >= this13.length) this13.length = 8;
			if(this13.data.length < this13.length) {
				var data5;
				var this14;
				this14 = new Array(this13.data.length + 10);
				data5 = this14;
				haxe.ds._Vector.Vector_Impl_.blit(this13.data,0,data5,0,this13.data.length);
				this13.data = data5;
			}
		}
		this13.data[7] = oRawData.data[13];
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(8 >= this15.length) this15.length = 9;
			if(this15.data.length < this15.length) {
				var data6;
				var this16;
				this16 = new Array(this15.data.length + 10);
				data6 = this16;
				haxe.ds._Vector.Vector_Impl_.blit(this15.data,0,data6,0,this15.data.length);
				this15.data = data6;
			}
		}
		this15.data[8] = oRawData.data[2];
		var this17 = this.rawData;
		if(!this17.fixed) {
			if(9 >= this17.length) this17.length = 10;
			if(this17.data.length < this17.length) {
				var data7;
				var this18;
				this18 = new Array(this17.data.length + 10);
				data7 = this18;
				haxe.ds._Vector.Vector_Impl_.blit(this17.data,0,data7,0,this17.data.length);
				this17.data = data7;
			}
		}
		this17.data[9] = oRawData.data[6];
		var this19 = this.rawData;
		if(!this19.fixed) {
			if(11 >= this19.length) this19.length = 12;
			if(this19.data.length < this19.length) {
				var data8;
				var this20;
				this20 = new Array(this19.data.length + 10);
				data8 = this20;
				haxe.ds._Vector.Vector_Impl_.blit(this19.data,0,data8,0,this19.data.length);
				this19.data = data8;
			}
		}
		this19.data[11] = oRawData.data[14];
		var this21 = this.rawData;
		if(!this21.fixed) {
			if(12 >= this21.length) this21.length = 13;
			if(this21.data.length < this21.length) {
				var data9;
				var this22;
				this22 = new Array(this21.data.length + 10);
				data9 = this22;
				haxe.ds._Vector.Vector_Impl_.blit(this21.data,0,data9,0,this21.data.length);
				this21.data = data9;
			}
		}
		this21.data[12] = oRawData.data[3];
		var this23 = this.rawData;
		if(!this23.fixed) {
			if(13 >= this23.length) this23.length = 14;
			if(this23.data.length < this23.length) {
				var data10;
				var this24;
				this24 = new Array(this23.data.length + 10);
				data10 = this24;
				haxe.ds._Vector.Vector_Impl_.blit(this23.data,0,data10,0,this23.data.length);
				this23.data = data10;
			}
		}
		this23.data[13] = oRawData.data[7];
		var this25 = this.rawData;
		if(!this25.fixed) {
			if(14 >= this25.length) this25.length = 15;
			if(this25.data.length < this25.length) {
				var data11;
				var this26;
				this26 = new Array(this25.data.length + 10);
				data11 = this26;
				haxe.ds._Vector.Vector_Impl_.blit(this25.data,0,data11,0,this25.data.length);
				this25.data = data11;
			}
		}
		this25.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl.geom.Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) this1.length = 13;
			if(this1.data.length < this1.length) {
				var data;
				var this2;
				this2 = new Array(this1.data.length + 10);
				data = this2;
				haxe.ds._Vector.Vector_Impl_.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = val.x;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(13 >= this3.length) this3.length = 14;
			if(this3.data.length < this3.length) {
				var data1;
				var this4;
				this4 = new Array(this3.data.length + 10);
				data1 = this4;
				haxe.ds._Vector.Vector_Impl_.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[13] = val.y;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(14 >= this5.length) this5.length = 15;
			if(this5.data.length < this5.length) {
				var data2;
				var this6;
				this6 = new Array(this5.data.length + 10);
				data2 = this6;
				haxe.ds._Vector.Vector_Impl_.blit(this5.data,0,data2,0,this5.data.length);
				this5.data = data2;
			}
		}
		this5.data[14] = val.z;
		return val;
	}
	,__class__: openfl.geom.Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
openfl.geom.Orientation3D = $hxClasses["openfl.geom.Orientation3D"] = { __ename__ : true, __constructs__ : ["AXIS_ANGLE","EULER_ANGLES","QUATERNION"] };
openfl.geom.Orientation3D.AXIS_ANGLE = ["AXIS_ANGLE",0];
openfl.geom.Orientation3D.AXIS_ANGLE.toString = $estr;
openfl.geom.Orientation3D.AXIS_ANGLE.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.EULER_ANGLES = ["EULER_ANGLES",1];
openfl.geom.Orientation3D.EULER_ANGLES.toString = $estr;
openfl.geom.Orientation3D.EULER_ANGLES.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Orientation3D.QUATERNION = ["QUATERNION",2];
openfl.geom.Orientation3D.QUATERNION.toString = $estr;
openfl.geom.Orientation3D.QUATERNION.__enum__ = openfl.geom.Orientation3D;
openfl.geom.Transform = function(displayObject) {
	this.colorTransform = new openfl.geom.ColorTransform();
	this.concatenatedColorTransform = new openfl.geom.ColorTransform();
	this.concatenatedMatrix = new openfl.geom.Matrix();
	this.pixelBounds = new openfl.geom.Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl.geom.Transform;
openfl.geom.Transform.__name__ = ["openfl","geom","Transform"];
openfl.geom.Transform.prototype = {
	get_matrix: function() {
		if(this.__hasMatrix) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return matrix;
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.tx);
			this.__displayObject.set_y(value.ty);
			this.__displayObject.set_scaleX(Math.sqrt(value.a * value.a + value.b * value.b));
			this.__displayObject.set_scaleY(Math.sqrt(value.c * value.c + value.d * value.d));
			this.__displayObject.set_rotation(Math.atan2(value.b,value.a) * (180 / Math.PI));
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = new openfl.geom.Matrix();
			matrix.scale(this.__displayObject.get_scaleX(),this.__displayObject.get_scaleY());
			matrix.rotate(this.__displayObject.get_rotation() * (Math.PI / 180));
			matrix.translate(this.__displayObject.get_x(),this.__displayObject.get_y());
			return new openfl.geom.Matrix3D((function($this) {
				var $r;
				var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vectorData = new openfl.VectorData();
				vectorData.length = value.length;
				vectorData.fixed = true;
				{
					var vec;
					var this1;
					this1 = new Array(value.length);
					vec = this1;
					var _g1 = 0;
					var _g = value.length;
					while(_g1 < _g) {
						var i = _g1++;
						vec[i] = value[i];
					}
					vectorData.data = vec;
				}
				$r = vectorData;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			this.__displayObject.set_x(value.rawData.data[12]);
			this.__displayObject.set_y(value.rawData.data[13]);
			this.__displayObject.set_scaleX(Math.sqrt(value.rawData.data[0] * value.rawData.data[0] + value.rawData.data[1] * value.rawData.data[1]));
			this.__displayObject.set_scaleY(Math.sqrt(value.rawData.data[4] * value.rawData.data[4] + value.rawData.data[5] * value.rawData.data[5]));
			this.__displayObject.set_rotation(Math.atan2(value.rawData.data[1],value.rawData.data[0]) * (180 / Math.PI));
		}
		return value;
	}
	,__class__: openfl.geom.Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix"}
};
openfl.geom.Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl.geom.Vector3D;
openfl.geom.Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl.geom.Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl.geom.Vector3D.X_AXIS = null;
openfl.geom.Vector3D.Y_AXIS = null;
openfl.geom.Vector3D.Z_AXIS = null;
openfl.geom.Vector3D.angleBetween = function(a,b) {
	var a0 = new openfl.geom.Vector3D(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new openfl.geom.Vector3D(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
openfl.geom.Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl.geom.Vector3D.get_X_AXIS = function() {
	return new openfl.geom.Vector3D(1,0,0);
};
openfl.geom.Vector3D.get_Y_AXIS = function() {
	return new openfl.geom.Vector3D(0,1,0);
};
openfl.geom.Vector3D.get_Z_AXIS = function() {
	return new openfl.geom.Vector3D(0,0,1);
};
openfl.geom.Vector3D.prototype = {
	add: function(a) {
		return new openfl.geom.Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl.geom.Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl.geom.Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl.geom.Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl.geom.Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
openfl.media = {};
openfl.media.ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl.media.ID3Info;
openfl.media.ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl.media.ID3Info.prototype = {
	__class__: openfl.media.ID3Info
};
openfl.media.Sound = function(stream,context) {
	openfl.events.EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.length = 0;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl.media.Sound;
openfl.media.Sound.__name__ = ["openfl","media","Sound"];
openfl.media.Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl.media.Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl.media.Sound.__super__ = openfl.events.EventDispatcher;
openfl.media.Sound.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
		if(openfl.media.Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe.io.Path.withoutExtension(stream.url);
		if(!openfl.media.Sound.__registeredSounds.exists(this.__soundID)) {
			openfl.media.Sound.__registeredSounds.set(this.__soundID,true);
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		openfl.Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		openfl.Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(sndTransform == null) sndTransform = new openfl.media.SoundTransform(1,0);
		var instance = createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops,sndTransform.volume,sndTransform.pan);
		return new openfl.media.SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl.media.ID3Info();
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		this.__buffer = buffer;
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.Event(openfl.events.Event.COMPLETE));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR));
		}
	}
	,__class__: openfl.media.Sound
	,__properties__: {get_id3:"get_id3"}
});
openfl.media.SoundChannel = function(soundInstance) {
	openfl.events.EventDispatcher.call(this,this);
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl.media.SoundChannel;
openfl.media.SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl.media.SoundChannel.__super__ = openfl.events.EventDispatcher;
openfl.media.SoundChannel.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	stop: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__soundInstance.stop();
		this.__soundInstance = null;
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) return new openfl.media.SoundTransform();
		return new openfl.media.SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) return value;
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,source_onComplete: function() {
		this.dispatchEvent(new openfl.events.Event(openfl.events.Event.SOUND_COMPLETE));
	}
	,__class__: openfl.media.SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
openfl.media.SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 0;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl.media.SoundLoaderContext;
openfl.media.SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl.media.SoundLoaderContext.prototype = {
	__class__: openfl.media.SoundLoaderContext
};
openfl.media.SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl.media.SoundTransform;
openfl.media.SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl.media.SoundTransform.prototype = {
	clone: function() {
		return new openfl.media.SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl.media.SoundTransform
};
openfl.net = {};
openfl.net.URLLoader = function(request) {
	openfl.events.EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(openfl.net.URLLoaderDataFormat.TEXT);
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl.net.URLLoader;
openfl.net.URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl.net.URLLoader.__super__ = openfl.events.EventDispatcher;
openfl.net.URLLoader.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress",$bind(this,this.onProgress),false);
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) return;
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				s = null;
			}
			if(s == undefined) s = null;
			if(s != null) self.onStatus(s);
			if(s != null && s >= 200 && s < 400) self.onData(subject.response); else if(s == null) self.onError("Failed to connect or resolve host"); else if(s == 12029) self.onError("Failed to connect to host"); else if(s == 12007) self.onError("Unknown host"); else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else self.onError("Http Error #" + subject.status);
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js.Boot.__instanceof(data,lime.utils.ByteArray)) {
			var data1 = data;
			var _g = this.dataFormat;
			switch(_g[1]) {
			case 0:
				uri = data1.data.buffer;
				break;
			default:
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js.Boot.__instanceof(data,openfl.net.URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) uri += "&";
				uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2,p));
			}
		} else if(data != null) uri = data.toString();
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else xmlHttpRequest.open(method,url,true);
		} catch( e ) {
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		switch(_g2[1]) {
		case 0:
			xmlHttpRequest.responseType = "arraybuffer";
			break;
		default:
		}
		var _g3 = 0;
		while(_g3 < requestHeaders.length) {
			var header = requestHeaders[_g3];
			++_g3;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) return xmlHttpRequest.response; else return xmlHttpRequest.responseText;
		};
	}
	,onData: function(_) {
		var content = this.getData();
		var _g = this.dataFormat;
		switch(_g[1]) {
		case 0:
			this.data = lime.utils.ByteArray.__ofBuffer(content);
			break;
		default:
			this.data = Std.string(content);
		}
		var evt = new openfl.events.Event(openfl.events.Event.COMPLETE);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl.events.IOErrorEvent(openfl.events.IOErrorEvent.IO_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl.events.Event(openfl.events.Event.OPEN);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl.events.ProgressEvent(openfl.events.ProgressEvent.PROGRESS);
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl.events.SecurityErrorEvent(openfl.events.SecurityErrorEvent.SECURITY_ERROR);
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl.events.HTTPStatusEvent(openfl.events.HTTPStatusEvent.HTTP_STATUS,false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == openfl.net.URLLoaderDataFormat.BINARY && !Reflect.hasField(window,"ArrayBuffer")) this.dataFormat = openfl.net.URLLoaderDataFormat.TEXT; else this.dataFormat = inputVal;
		return this.dataFormat;
	}
	,__class__: openfl.net.URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
openfl.net.URLLoaderDataFormat = $hxClasses["openfl.net.URLLoaderDataFormat"] = { __ename__ : true, __constructs__ : ["BINARY","TEXT","VARIABLES"] };
openfl.net.URLLoaderDataFormat.BINARY = ["BINARY",0];
openfl.net.URLLoaderDataFormat.BINARY.toString = $estr;
openfl.net.URLLoaderDataFormat.BINARY.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.TEXT = ["TEXT",1];
openfl.net.URLLoaderDataFormat.TEXT.toString = $estr;
openfl.net.URLLoaderDataFormat.TEXT.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLLoaderDataFormat.VARIABLES = ["VARIABLES",2];
openfl.net.URLLoaderDataFormat.VARIABLES.toString = $estr;
openfl.net.URLLoaderDataFormat.VARIABLES.__enum__ = openfl.net.URLLoaderDataFormat;
openfl.net.URLRequest = function(inURL) {
	if(inURL != null) this.url = inURL;
	this.requestHeaders = [];
	this.method = openfl.net.URLRequestMethod.GET;
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl.net.URLRequest;
openfl.net.URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl.net.URLRequest.prototype = {
	formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) res = [];
		if(this.method == openfl.net.URLRequestMethod.GET || this.data == null) return res;
		if(typeof(this.data) == "string" || js.Boot.__instanceof(this.data,lime.utils.ByteArray)) {
			res = res.slice();
			res.push(new openfl.net.URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl.net.URLRequest
};
openfl.net.URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl.net.URLRequestHeader;
openfl.net.URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl.net.URLRequestHeader.prototype = {
	__class__: openfl.net.URLRequestHeader
};
openfl.net.URLRequestMethod = function() { };
$hxClasses["openfl.net.URLRequestMethod"] = openfl.net.URLRequestMethod;
openfl.net.URLRequestMethod.__name__ = ["openfl","net","URLRequestMethod"];
openfl.net.URLVariables = function(inEncoded) {
	if(inEncoded != null) this.decode(inEncoded);
};
$hxClasses["openfl.net.URLVariables"] = openfl.net.URLVariables;
openfl.net.URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl.net.URLVariables.prototype = {
	decode: function(inVars) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = inVars.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = new Array();
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl.net.URLVariables
};
openfl.system.TouchscreenType = $hxClasses["openfl.system.TouchscreenType"] = { __ename__ : true, __constructs__ : ["FINGER","NONE","STYLUS"] };
openfl.system.TouchscreenType.FINGER = ["FINGER",0];
openfl.system.TouchscreenType.FINGER.toString = $estr;
openfl.system.TouchscreenType.FINGER.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.NONE = ["NONE",1];
openfl.system.TouchscreenType.NONE.toString = $estr;
openfl.system.TouchscreenType.NONE.__enum__ = openfl.system.TouchscreenType;
openfl.system.TouchscreenType.STYLUS = ["STYLUS",2];
openfl.system.TouchscreenType.STYLUS.toString = $estr;
openfl.system.TouchscreenType.STYLUS.__enum__ = openfl.system.TouchscreenType;
openfl.system.Capabilities = function() { };
$hxClasses["openfl.system.Capabilities"] = openfl.system.Capabilities;
openfl.system.Capabilities.__name__ = ["openfl","system","Capabilities"];
openfl.system.Capabilities.__properties__ = {get_screenResolutionY:"get_screenResolutionY",get_screenResolutionX:"get_screenResolutionX",get_screenDPI:"get_screenDPI",get_pixelAspectRatio:"get_pixelAspectRatio",get_os:"get_os",get_language:"get_language"}
openfl.system.Capabilities.language = null;
openfl.system.Capabilities.os = null;
openfl.system.Capabilities.pixelAspectRatio = null;
openfl.system.Capabilities.screenDPI = null;
openfl.system.Capabilities.screenResolutionX = null;
openfl.system.Capabilities.screenResolutionY = null;
openfl.system.Capabilities.hasMultiChannelAudio = function(type) {
	return false;
};
openfl.system.Capabilities.get_os = function() {
	return "HTML5";
};
openfl.system.Capabilities.get_pixelAspectRatio = function() {
	return 1;
};
openfl.system.Capabilities.get_screenDPI = function() {
	if(openfl.system.Capabilities.screenDPI > 0) return openfl.system.Capabilities.screenDPI;
	var body = window.document.getElementsByTagName("body")[0];
	var testDiv = window.document.createElement("div");
	testDiv.style.width = testDiv.style.height = "1in";
	testDiv.style.padding = testDiv.style.margin = "0px";
	testDiv.style.position = "absolute";
	testDiv.style.top = "-100%";
	body.appendChild(testDiv);
	openfl.system.Capabilities.screenDPI = testDiv.offsetWidth;
	body.removeChild(testDiv);
	return openfl.system.Capabilities.screenDPI;
};
openfl.system.Capabilities.get_screenResolutionX = function() {
	return window.screen.width;
};
openfl.system.Capabilities.get_screenResolutionY = function() {
	return window.screen.height;
};
openfl.system.Capabilities.get_language = function() {
	return navigator.language;
};
openfl.system.LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl.system.LoaderContext;
openfl.system.LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl.system.LoaderContext.prototype = {
	__class__: openfl.system.LoaderContext
};
openfl.system.SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl.system.SecurityDomain;
openfl.system.SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl.system.SecurityDomain.prototype = {
	__class__: openfl.system.SecurityDomain
};
openfl.text.AntiAliasType = $hxClasses["openfl.text.AntiAliasType"] = { __ename__ : true, __constructs__ : ["ADVANCED","NORMAL"] };
openfl.text.AntiAliasType.ADVANCED = ["ADVANCED",0];
openfl.text.AntiAliasType.ADVANCED.toString = $estr;
openfl.text.AntiAliasType.ADVANCED.__enum__ = openfl.text.AntiAliasType;
openfl.text.AntiAliasType.NORMAL = ["NORMAL",1];
openfl.text.AntiAliasType.NORMAL.toString = $estr;
openfl.text.AntiAliasType.NORMAL.__enum__ = openfl.text.AntiAliasType;
openfl.text.FontStyle = $hxClasses["openfl.text.FontStyle"] = { __ename__ : true, __constructs__ : ["REGULAR","ITALIC","BOLD_ITALIC","BOLD"] };
openfl.text.FontStyle.REGULAR = ["REGULAR",0];
openfl.text.FontStyle.REGULAR.toString = $estr;
openfl.text.FontStyle.REGULAR.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.ITALIC = ["ITALIC",1];
openfl.text.FontStyle.ITALIC.toString = $estr;
openfl.text.FontStyle.ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD_ITALIC = ["BOLD_ITALIC",2];
openfl.text.FontStyle.BOLD_ITALIC.toString = $estr;
openfl.text.FontStyle.BOLD_ITALIC.__enum__ = openfl.text.FontStyle;
openfl.text.FontStyle.BOLD = ["BOLD",3];
openfl.text.FontStyle.BOLD.toString = $estr;
openfl.text.FontStyle.BOLD.__enum__ = openfl.text.FontStyle;
openfl.text.FontType = $hxClasses["openfl.text.FontType"] = { __ename__ : true, __constructs__ : ["DEVICE","EMBEDDED","EMBEDDED_CFF"] };
openfl.text.FontType.DEVICE = ["DEVICE",0];
openfl.text.FontType.DEVICE.toString = $estr;
openfl.text.FontType.DEVICE.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED = ["EMBEDDED",1];
openfl.text.FontType.EMBEDDED.toString = $estr;
openfl.text.FontType.EMBEDDED.__enum__ = openfl.text.FontType;
openfl.text.FontType.EMBEDDED_CFF = ["EMBEDDED_CFF",2];
openfl.text.FontType.EMBEDDED_CFF.toString = $estr;
openfl.text.FontType.EMBEDDED_CFF.__enum__ = openfl.text.FontType;
openfl.text.GridFitType = $hxClasses["openfl.text.GridFitType"] = { __ename__ : true, __constructs__ : ["NONE","PIXEL","SUBPIXEL"] };
openfl.text.GridFitType.NONE = ["NONE",0];
openfl.text.GridFitType.NONE.toString = $estr;
openfl.text.GridFitType.NONE.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.PIXEL = ["PIXEL",1];
openfl.text.GridFitType.PIXEL.toString = $estr;
openfl.text.GridFitType.PIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.GridFitType.SUBPIXEL = ["SUBPIXEL",2];
openfl.text.GridFitType.SUBPIXEL.toString = $estr;
openfl.text.GridFitType.SUBPIXEL.__enum__ = openfl.text.GridFitType;
openfl.text.TextField = function() {
	openfl.display.InteractiveObject.call(this);
	this.__width = 100;
	this.__height = 100;
	this.__text = "";
	this.set_type(openfl.text.TextFieldType.DYNAMIC);
	this.set_autoSize(openfl.text.TextFieldAutoSize.NONE);
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.set_borderColor(0);
	this.set_border(false);
	this.set_backgroundColor(16777215);
	this.set_background(false);
	this.gridFitType = openfl.text.GridFitType.PIXEL;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.set_wordWrap(false);
	if(openfl.text.TextField.__defaultTextFormat == null) {
		openfl.text.TextField.__defaultTextFormat = new openfl.text.TextFormat("Times New Roman",12,0,false,false,false,"","",openfl.text.TextFormatAlign.LEFT,0,0,0,0);
		openfl.text.TextField.__defaultTextFormat.blockIndent = 0;
		openfl.text.TextField.__defaultTextFormat.bullet = false;
		openfl.text.TextField.__defaultTextFormat.letterSpacing = 0;
		openfl.text.TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl.text.TextField.__defaultTextFormat.clone();
};
$hxClasses["openfl.text.TextField"] = openfl.text.TextField;
openfl.text.TextField.__name__ = ["openfl","text","TextField"];
openfl.text.TextField.__defaultTextFormat = null;
openfl.text.TextField.__super__ = openfl.display.InteractiveObject;
openfl.text.TextField.prototype = $extend(openfl.display.InteractiveObject.prototype,{
	appendText: function(text) {
		var _g = this;
		_g.set_text(_g.get_text() + text);
	}
	,getCharBoundaries: function(a) {
		openfl.Lib.notImplemented("TextField.getCharBoundaries");
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getCharIndexAtPoint");
		return 0;
	}
	,getLineIndexAtPoint: function(x,y) {
		openfl.Lib.notImplemented("TextField.getLineIndexAtPoint");
		return 0;
	}
	,getLineMetrics: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineMetrics");
		return new openfl.text.TextLineMetrics(0,0,0,0,0,0);
	}
	,getLineOffset: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineOffset");
		return 0;
	}
	,getLineText: function(lineIndex) {
		openfl.Lib.notImplemented("TextField.getLineText");
		return "";
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		return this.__textFormat.clone();
	}
	,setSelection: function(beginIndex,endIndex) {
		openfl.Lib.notImplemented("TextField.setSelection");
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
	}
	,__getBounds: function(rect,matrix) {
		var bounds = new openfl.geom.Rectangle(0,0,this.__width,this.__height);
		bounds.transform(this.__worldTransform);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getFont: function(format) {
		var font;
		if(format.italic) font = "italic "; else font = "normal ";
		font += "normal ";
		if(format.bold) font += "bold "; else font += "normal ";
		font += format.size + "px";
		font += "/" + (format.size + format.leading + 4) + "px ";
		font += "'" + (function($this) {
			var $r;
			var _g = format.font;
			$r = (function($this) {
				var $r;
				switch(_g) {
				case "_sans":
					$r = "sans-serif";
					break;
				case "_serif":
					$r = "serif";
					break;
				case "_typewriter":
					$r = "monospace";
					break;
				default:
					$r = format.font;
				}
				return $r;
			}($this));
			return $r;
		}(this));
		font += "'";
		return font;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly) {
		if(!this.get_visible() || interactiveOnly && !this.mouseEnabled) return false;
		var point = this.globalToLocal(new openfl.geom.Point(x,y));
		if(point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height) {
			if(stack != null) stack.push(this);
			return true;
		}
		return false;
	}
	,__measureText: function() {
		if(this.__ranges == null) {
			this.__context.font = this.__getFont(this.__textFormat);
			return [this.__context.measureText(this.__text).width];
		} else {
			var measurements = [];
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				this.__context.font = this.__getFont(range.format);
				measurements.push(this.__context.measureText(this.get_text().substring(range.start,range.end)).width);
			}
			return measurements;
		}
	}
	,__measureTextWithDOM: function() {
		var div = this.__div;
		if(this.__div == null) {
			div = window.document.createElement("div");
			div.innerHTML = this.__text;
			div.style.setProperty("font",this.__getFont(this.__textFormat),null);
			div.style.position = "absolute";
			div.style.top = "110%";
			window.document.body.appendChild(div);
		}
		this.__measuredWidth = div.clientWidth;
		if(this.__div == null) div.style.width = Std.string(this.__width) + "px";
		this.__measuredHeight = div.clientHeight;
		if(this.__div == null) window.document.body.removeChild(div);
	}
	,__renderCanvas: function(renderSession) {
		openfl._internal.renderer.canvas.CanvasTextField.render(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl._internal.renderer.dom.DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl._internal.renderer.opengl.GLTextField.render(this,renderSession);
	}
	,set_autoSize: function(value) {
		if(value != this.autoSize) this.__dirty = true;
		return this.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.background) this.__dirty = true;
		return this.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.backgroundColor) this.__dirty = true;
		return this.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.border) this.__dirty = true;
		return this.border = value;
	}
	,set_borderColor: function(value) {
		if(value != this.borderColor) this.__dirty = true;
		return this.borderColor = value;
	}
	,get_bottomScrollV: function() {
		return this.get_numLines();
	}
	,get_caretPos: function() {
		return 0;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		return value;
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = true;
		if(this.__div == null) {
			value = new EReg("<br>","g").replace(value,"\n");
			value = new EReg("<br/>","g").replace(value,"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = new EReg("<.*?>","g").replace(value,"");
				return this.__text = value;
			} else {
				value = "";
				this.__ranges = [];
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") continue;
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var end = closeFontIndex;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							var len = segment.indexOf("\"",faceIndex);
							format.font = HxOverrides.substr(segment,faceIndex + 6,len);
						}
						if(colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						if(sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
							var $r;
							var len1 = segment.indexOf("\"",sizeIndex);
							$r = HxOverrides.substr(segment,sizeIndex + 6,len1);
							return $r;
						}(this)));
						var sub = segment.substring(start,end);
						sub = new EReg("<.*?>","g").replace(sub,"");
						this.__ranges.push(new openfl.text.TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__ranges.push(new openfl.text.TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__ranges.push(new openfl.text.TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		return this.__text = value;
	}
	,get_maxScrollH: function() {
		return 0;
	}
	,get_maxScrollV: function() {
		return 1;
	}
	,get_numLines: function() {
		if(this.get_text() != "" && this.get_text() != null) {
			var count = this.get_text().split("\n").length;
			if(this.__isHTML) count += this.get_text().split("<br>").length - 1;
			return count;
		}
		return 1;
	}
	,get_text: function() {
		if(this.__isHTML) {
		}
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) this.__dirty = true;
		this.__ranges = null;
		this.__isHTML = false;
		return this.__text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		if(this.__ranges != null) {
			var _g = 0;
			var _g1 = this.__ranges;
			while(_g < _g1.length) {
				var range = _g1[_g];
				++_g;
				range.format.color = value;
			}
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		if(this.__canvas != null) {
			var sizes = this.__measureText();
			var total = 0;
			var _g = 0;
			while(_g < sizes.length) {
				var size = sizes[_g];
				++_g;
				total += size;
			}
			return total;
		} else if(this.__div != null) return this.__div.clientWidth; else {
			this.__measureTextWithDOM();
			return this.__measuredWidth;
		}
	}
	,get_textHeight: function() {
		if(this.__canvas != null) return this.__textFormat.size * 1.185; else if(this.__div != null) return this.__div.clientHeight; else {
			this.__measureTextWithDOM();
			return this.__measuredHeight + this.__textFormat.size * 0.185;
		}
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_width: function() {
		if(this.autoSize == openfl.text.TextFieldAutoSize.LEFT) return (this.get_textWidth() + 4) * this.get_scaleX(); else return this.__width * this.get_scaleX();
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl.display.DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,get_wordWrap: function() {
		return this.wordWrap;
	}
	,set_wordWrap: function(value) {
		return this.wordWrap = value;
	}
	,__class__: openfl.text.TextField
	,__properties__: $extend(openfl.display.InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",get_numLines:"get_numLines",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretPos:"get_caretPos",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize"})
});
openfl.text.TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text.TextFormatRange"] = openfl.text.TextFormatRange;
openfl.text.TextFormatRange.__name__ = ["openfl","text","TextFormatRange"];
openfl.text.TextFormatRange.prototype = {
	__class__: openfl.text.TextFormatRange
};
openfl.text.TextFieldAutoSize = $hxClasses["openfl.text.TextFieldAutoSize"] = { __ename__ : true, __constructs__ : ["CENTER","LEFT","NONE","RIGHT"] };
openfl.text.TextFieldAutoSize.CENTER = ["CENTER",0];
openfl.text.TextFieldAutoSize.CENTER.toString = $estr;
openfl.text.TextFieldAutoSize.CENTER.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.LEFT = ["LEFT",1];
openfl.text.TextFieldAutoSize.LEFT.toString = $estr;
openfl.text.TextFieldAutoSize.LEFT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.NONE = ["NONE",2];
openfl.text.TextFieldAutoSize.NONE.toString = $estr;
openfl.text.TextFieldAutoSize.NONE.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldAutoSize.RIGHT = ["RIGHT",3];
openfl.text.TextFieldAutoSize.RIGHT.toString = $estr;
openfl.text.TextFieldAutoSize.RIGHT.__enum__ = openfl.text.TextFieldAutoSize;
openfl.text.TextFieldType = $hxClasses["openfl.text.TextFieldType"] = { __ename__ : true, __constructs__ : ["DYNAMIC","INPUT"] };
openfl.text.TextFieldType.DYNAMIC = ["DYNAMIC",0];
openfl.text.TextFieldType.DYNAMIC.toString = $estr;
openfl.text.TextFieldType.DYNAMIC.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFieldType.INPUT = ["INPUT",1];
openfl.text.TextFieldType.INPUT.toString = $estr;
openfl.text.TextFieldType.INPUT.__enum__ = openfl.text.TextFieldType;
openfl.text.TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl.text.TextFormat;
openfl.text.TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl.text.TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl.text.TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl.text.TextFormat
};
openfl.text.TextFormatAlign = $hxClasses["openfl.text.TextFormatAlign"] = { __ename__ : true, __constructs__ : ["LEFT","RIGHT","JUSTIFY","CENTER"] };
openfl.text.TextFormatAlign.LEFT = ["LEFT",0];
openfl.text.TextFormatAlign.LEFT.toString = $estr;
openfl.text.TextFormatAlign.LEFT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.RIGHT = ["RIGHT",1];
openfl.text.TextFormatAlign.RIGHT.toString = $estr;
openfl.text.TextFormatAlign.RIGHT.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.JUSTIFY = ["JUSTIFY",2];
openfl.text.TextFormatAlign.JUSTIFY.toString = $estr;
openfl.text.TextFormatAlign.JUSTIFY.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextFormatAlign.CENTER = ["CENTER",3];
openfl.text.TextFormatAlign.CENTER.toString = $estr;
openfl.text.TextFormatAlign.CENTER.__enum__ = openfl.text.TextFormatAlign;
openfl.text.TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl.text.TextLineMetrics;
openfl.text.TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl.text.TextLineMetrics.prototype = {
	__class__: openfl.text.TextLineMetrics
};
openfl.ui = {};
openfl.ui._KeyLocation = {};
openfl.ui._KeyLocation.KeyLocation_Impl_ = function() { };
$hxClasses["openfl.ui._KeyLocation.KeyLocation_Impl_"] = openfl.ui._KeyLocation.KeyLocation_Impl_;
openfl.ui._KeyLocation.KeyLocation_Impl_.__name__ = ["openfl","ui","_KeyLocation","KeyLocation_Impl_"];
openfl.ui.Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl.ui.Keyboard;
openfl.ui.Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl.ui.Keyboard.capsLock = null;
openfl.ui.Keyboard.numLock = null;
openfl.ui.Keyboard.isAccessible = function() {
	return false;
};
openfl.ui.Keyboard.__convertMozillaCode = function(code) {
	switch(code) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 14:
		return 13;
	case 16:
		return 16;
	case 17:
		return 17;
	case 20:
		return 20;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 33;
	case 34:
		return 34;
	case 35:
		return 35;
	case 36:
		return 36;
	case 37:
		return 37;
	case 39:
		return 39;
	case 38:
		return 38;
	case 40:
		return 40;
	case 45:
		return 45;
	case 46:
		return 46;
	case 144:
		return 144;
	default:
		return code;
	}
};
openfl.ui.Keyboard.__convertWebkitCode = function(code) {
	var _g = code.toLowerCase();
	switch(_g) {
	case "backspace":
		return 8;
	case "tab":
		return 9;
	case "enter":
		return 13;
	case "shift":
		return 16;
	case "control":
		return 17;
	case "capslock":
		return 20;
	case "escape":
		return 27;
	case "space":
		return 32;
	case "pageup":
		return 33;
	case "pagedown":
		return 34;
	case "end":
		return 35;
	case "home":
		return 36;
	case "left":
		return 37;
	case "right":
		return 39;
	case "up":
		return 38;
	case "down":
		return 40;
	case "insert":
		return 45;
	case "delete":
		return 46;
	case "numlock":
		return 144;
	case "break":
		return 19;
	}
	if(code.indexOf("U+") == 0) return Std.parseInt("0x" + HxOverrides.substr(code,3,null));
	throw "Unrecognized key code: " + code;
	return 0;
};
openfl.utils = {};
openfl.utils.Timer = function(delay,repeatCount) {
	if(repeatCount == null) repeatCount = 0;
	if(Math.isNaN(delay) || delay < 0) throw new openfl.errors.Error("The delay specified is negative or not a finite number");
	openfl.events.EventDispatcher.call(this);
	this.__delay = delay;
	this.set_repeatCount(repeatCount);
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl.utils.Timer;
openfl.utils.Timer.__name__ = ["openfl","utils","Timer"];
openfl.utils.Timer.__super__ = openfl.events.EventDispatcher;
openfl.utils.Timer.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	reset: function() {
		if(this.running) this.stop();
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = window.setInterval($bind(this,this.timer_onTimer),this.__delay | 0);
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			window.clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,get_delay: function() {
		return this.__delay;
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,set_repeatCount: function(v) {
		if(this.running && v != 0 && v <= this.currentCount) this.stop();
		this.repeatCount = v;
		return v;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.repeatCount > 0 && this.currentCount >= this.repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl.events.TimerEvent(openfl.events.TimerEvent.TIMER));
			this.dispatchEvent(new openfl.events.TimerEvent(openfl.events.TimerEvent.TIMER_COMPLETE));
		} else this.dispatchEvent(new openfl.events.TimerEvent(openfl.events.TimerEvent.TIMER));
	}
	,__class__: openfl.utils.Timer
	,__properties__: {set_repeatCount:"set_repeatCount",set_delay:"set_delay",get_delay:"get_delay"}
});
var service = {};
service.ServiceData = function(model,action,method) {
	this.type = "";
	this.action = "";
	this.special = "";
	this.path = "";
	this.method = "";
	this.page = "";
	this.method = method;
	this.action = action;
	this.data = JSON.stringify(model);
};
$hxClasses["service.ServiceData"] = service.ServiceData;
service.ServiceData.__name__ = ["service","ServiceData"];
service.ServiceData.prototype = {
	getString: function() {
		return "special" + "=" + this.special + "&" + "action" + "=" + this.action + "&" + "method" + "=" + this.method + "&" + "path" + "=" + this.path + "&" + "page" + "=" + this.page + "&" + "data" + "=" + Std.string(this.data) + "&" + "TYPE" + "=" + this.type;
	}
	,__class__: service.ServiceData
};
src.app.chat.controller = {};
src.app.chat.controller.UIController = function() {
	haxe.ui.toolkit.core.XMLController.call(this,"ui/form.xml");
	this.formPresenter = new src.app.chat.presenter.FormPresenter(this);
	this.formPresenter.addEventListener(openfl.events.Event.COMPLETE,$bind(this,this.onForm));
};
$hxClasses["src.app.chat.controller.UIController"] = src.app.chat.controller.UIController;
src.app.chat.controller.UIController.__name__ = ["src","app","chat","controller","UIController"];
src.app.chat.controller.UIController.__super__ = haxe.ui.toolkit.core.XMLController;
src.app.chat.controller.UIController.prototype = $extend(haxe.ui.toolkit.core.XMLController.prototype,{
	onForm: function(e) {
		this.get_view().dispatchEvent(new openfl.events.Event(openfl.events.Event.CHANGE));
	}
	,__class__: src.app.chat.controller.UIController
});
src.app.chat.presenter = {};
src.app.chat.presenter.FormPresenter = function(xmlController) {
	openfl.events.EventDispatcher.call(this);
	this.xmlController = xmlController;
	this.attachElements();
	this.attachEvents();
};
$hxClasses["src.app.chat.presenter.FormPresenter"] = src.app.chat.presenter.FormPresenter;
src.app.chat.presenter.FormPresenter.__name__ = ["src","app","chat","presenter","FormPresenter"];
src.app.chat.presenter.FormPresenter.__super__ = openfl.events.EventDispatcher;
src.app.chat.presenter.FormPresenter.prototype = $extend(openfl.events.EventDispatcher.prototype,{
	attachElements: function() {
		this.registerButton = this.xmlController.getComponent("bt_register");
		this.loginButton = this.xmlController.getComponent("bt_login");
		this.passtext = this.xmlController.getComponent("senha");
		this.lognText = this.xmlController.getComponent("login");
	}
	,attachEvents: function() {
		var _g = this;
		this.registerButton.addEventListener(openfl.events.MouseEvent.CLICK,function(event) {
			_g.model = { };
			_g.updatemodel();
			var sr = src.app.chat.service.core.Service.getInstance().form.register(_g.model);
			sr.addEventListener("complete",$bind(_g,_g.onRegisterComplete));
			sr.addEventListener("error",$bind(_g,_g.onRegisterError));
		});
		this.loginButton.addEventListener(openfl.events.MouseEvent.CLICK,function(event1) {
			_g.model = { };
			_g.updatemodel();
			var sr1 = src.app.chat.service.core.Service.getInstance().form.enter(_g.model);
			sr1.addEventListener("complete",$bind(_g,_g.onEnterComplete));
			sr1.addEventListener("error",$bind(_g,_g.onEnterError));
		});
	}
	,onRegisterError: function(e) {
		haxe.Log.trace(":onRegisterError",{ fileName : "FormPresenter.hx", lineNumber : 67, className : "src.app.chat.presenter.FormPresenter", methodName : "onRegisterError"});
	}
	,onEnterError: function(e) {
		haxe.Log.trace(":onEnterError",{ fileName : "FormPresenter.hx", lineNumber : 72, className : "src.app.chat.presenter.FormPresenter", methodName : "onEnterError"});
	}
	,onRegisterComplete: function(e) {
		e.target.removeEventListener("complete",$bind(this,this.onEnterComplete));
		this.dispatchEvent(e);
	}
	,onEnterComplete: function(e) {
		var formRequest = e.serviceRequest;
		formRequest.removeEventListener("complete",$bind(this,this.onEnterComplete));
		app.utils.Session.player = formRequest.result;
		this.dispatchEvent(e);
	}
	,updatemodel: function() {
		this.model.pass = haxe.crypto.Sha256.encode(this.passtext.get_text());
		this.model.login = this.lognText.get_text();
		this.model.uid = haxe.crypto.Sha256.encode(this.lognText.get_text() + this.model.pass);
	}
	,__class__: src.app.chat.presenter.FormPresenter
});
src.app.chat.service.core.ServiceAction = function(requestClassT) {
	this.requestClassT = requestClassT;
};
$hxClasses["src.app.chat.service.core.ServiceAction"] = src.app.chat.service.core.ServiceAction;
src.app.chat.service.core.ServiceAction.__name__ = ["src","app","chat","service","core","ServiceAction"];
src.app.chat.service.core.ServiceAction.prototype = {
	execute: function(model) {
		return null;
	}
	,callMethod: function(args) {
		args.push(this.action);
		args.push(this.method);
		var classT = Type.createInstance(this.requestClassT,[]);
		Reflect.callMethod(classT,Reflect.field(classT,this.method),args);
		return classT;
	}
	,__class__: src.app.chat.service.core.ServiceAction
};
src.app.chat.service.action = {};
src.app.chat.service.action.FormAction = function() {
	src.app.chat.service.core.ServiceAction.call(this,src.app.chat.service.request.FormRequest);
	this.action = "FormAction";
};
$hxClasses["src.app.chat.service.action.FormAction"] = src.app.chat.service.action.FormAction;
src.app.chat.service.action.FormAction.__name__ = ["src","app","chat","service","action","FormAction"];
src.app.chat.service.action.FormAction.__interfaces__ = [action.IFormAction];
src.app.chat.service.action.FormAction.__super__ = src.app.chat.service.core.ServiceAction;
src.app.chat.service.action.FormAction.prototype = $extend(src.app.chat.service.core.ServiceAction.prototype,{
	enter: function(model) {
		this.method = "enter";
		return this.callMethod([model]);
	}
	,register: function(model) {
		this.method = "register";
		return this.callMethod([model]);
	}
	,__class__: src.app.chat.service.action.FormAction
});
src.app.chat.service.action.RoomAction = function() {
	src.app.chat.service.core.ServiceAction.call(this,app.chat.service.request.RoomRequest);
	this.action = "RoomAction";
};
$hxClasses["src.app.chat.service.action.RoomAction"] = src.app.chat.service.action.RoomAction;
src.app.chat.service.action.RoomAction.__name__ = ["src","app","chat","service","action","RoomAction"];
src.app.chat.service.action.RoomAction.__interfaces__ = [action.IRoomAction];
src.app.chat.service.action.RoomAction.__super__ = src.app.chat.service.core.ServiceAction;
src.app.chat.service.action.RoomAction.prototype = $extend(src.app.chat.service.core.ServiceAction.prototype,{
	create: function(model) {
		this.method = "create";
		return this.callMethod([model]);
	}
	,connect: function(model) {
		this.method = "connect";
		return this.callMethod([model]);
	}
	,update: function(roomModel,gridModel) {
		this.method = "update";
		return this.callMethod([roomModel,gridModel]);
	}
	,refresh: function(roomModel) {
		this.method = "refresh";
		return this.callMethod([roomModel]);
	}
	,__class__: src.app.chat.service.action.RoomAction
});
src.app.chat.service.core.Service = function() {
	this.room = new src.app.chat.service.action.RoomAction();
	this.form = new src.app.chat.service.action.FormAction();
	if(src.app.chat.service.core.Service.I != null) throw new openfl.errors.Error("Singleton can only be accessed through Singleton.instance");
	src.app.chat.service.core.Service.I = this;
};
$hxClasses["src.app.chat.service.core.Service"] = src.app.chat.service.core.Service;
src.app.chat.service.core.Service.__name__ = ["src","app","chat","service","core","Service"];
src.app.chat.service.core.Service.I = null;
src.app.chat.service.core.Service.getInstance = function() {
	if(src.app.chat.service.core.Service.I == null) new src.app.chat.service.core.Service();
	return src.app.chat.service.core.Service.I;
};
src.app.chat.service.core.Service.prototype = {
	__class__: src.app.chat.service.core.Service
};
src.app.chat.service.request = {};
src.app.chat.service.request.FormRequest = function() {
	src.app.chat.service.core.ServiceRequest.call(this,"http://localhost/php/firebase/index.php");
};
$hxClasses["src.app.chat.service.request.FormRequest"] = src.app.chat.service.request.FormRequest;
src.app.chat.service.request.FormRequest.__name__ = ["src","app","chat","service","request","FormRequest"];
src.app.chat.service.request.FormRequest.__super__ = src.app.chat.service.core.ServiceRequest;
src.app.chat.service.request.FormRequest.prototype = $extend(src.app.chat.service.core.ServiceRequest.prototype,{
	register: function(model,action,method) {
		if(method == null) method = "";
		if(action == null) action = "";
		var data = new service.ServiceData(model,action,method);
		data.page = model.login;
		data.path = "users";
		this.setData(data);
		this.load();
	}
	,enter: function(model,action,method) {
		if(method == null) method = "";
		if(action == null) action = "";
		var data = new service.ServiceData(model,action,method);
		data.page = model.login;
		data.path = "users";
		this.setData(data);
		this.load();
	}
	,__class__: src.app.chat.service.request.FormRequest
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
$hxClasses.Math = Math;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i1) {
	return isNaN(i1);
};
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
Xml.Element = "element";
Xml.PCData = "pcdata";
Xml.CData = "cdata";
Xml.Comment = "comment";
Xml.DocType = "doctype";
Xml.ProcessingInstruction = "processingInstruction";
Xml.Document = "document";
com.yagp.GifPlayer.rect = new openfl.geom.Rectangle();
com.yagp.GifPlayer.point = new openfl.geom.Point();
haxe.Resource.content = [];
var this1;
this1 = new Array(256);
lime.graphics.utils.ImageDataUtil.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime.graphics.utils.ImageDataUtil.__alpha16[i] = i * 65536 / 255 | 0;
}
var this2;
this2 = new Array(510);
lime.graphics.utils.ImageDataUtil.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime.graphics.utils.ImageDataUtil.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime.graphics.utils.ImageDataUtil.__clamp[i2] = 255;
}
if(window.createjs != null) createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
openfl.display.DisplayObject.__instanceCount = 0;
openfl.display.DisplayObject.__worldRenderDirty = 0;
openfl.display.DisplayObject.__worldTransformDirty = 0;
CONSTANTS.FIREBASE = "https://intense-torch-9712.firebaseio.com";
CONSTANTS.PUSH = "push";
CONSTANTS.DELETE = "delete";
CONSTANTS.UPDATE = "update";
CONSTANTS.SET = "set";
CONSTANTS.SPECIAL = "special";
CONSTANTS.GET = "GET";
CONSTANTS.METHOD = "method";
CONSTANTS.PAGE = "page";
CONSTANTS.DATA = "data";
CONSTANTS.ACTION = "action";
CONSTANTS.PROXY = "http://localhost/php/firebase/index.php";
CONSTANTS.USER = "users";
CONSTANTS.PATH = "path";
CONSTANTS.ENTER = "enter";
CONSTANTS.ERROR = "error";
CONSTANTS.REGISTER = "register";
CONSTANTS.TYPE = "TYPE";
CONSTANTS.PLAYER_1_VALUE = 1;
CONSTANTS.PLAYER_2_VALUE = 2;
CONSTANTS.ROOM_PATH = "rooms";
openfl.text.Font.__registeredFonts = new Array();
app.chat.utils.Vector2D.map = [[0,0,0],[0,0,0],[0,0,0]];
app.chat.views.InteractiveView.PLAYER_1 = 1;
app.chat.views.InteractiveView.PLAYER_2 = 1;
app.chat.views.VewAnimation.MAX = 3;
openfl.events.Event.ACTIVATE = "activate";
openfl.events.Event.ADDED = "added";
openfl.events.Event.ADDED_TO_STAGE = "addedToStage";
openfl.events.Event.CANCEL = "cancel";
openfl.events.Event.CHANGE = "change";
openfl.events.Event.CLOSE = "close";
openfl.events.Event.COMPLETE = "complete";
openfl.events.Event.CONNECT = "connect";
openfl.events.Event.CONTEXT3D_CREATE = "context3DCreate";
openfl.events.Event.DEACTIVATE = "deactivate";
openfl.events.Event.ENTER_FRAME = "enterFrame";
openfl.events.Event.ID3 = "id3";
openfl.events.Event.INIT = "init";
openfl.events.Event.MOUSE_LEAVE = "mouseLeave";
openfl.events.Event.OPEN = "open";
openfl.events.Event.REMOVED = "removed";
openfl.events.Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl.events.Event.RENDER = "render";
openfl.events.Event.RESIZE = "resize";
openfl.events.Event.SCROLL = "scroll";
openfl.events.Event.SELECT = "select";
openfl.events.Event.SOUND_COMPLETE = "soundComplete";
openfl.events.Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl.events.Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl.events.Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl.events.Event.UNLOAD = "unload";
app.events.InteractiveViewEvent.UPDATE = "update";
app.events.ServiceRequestEvent.ERROR = "error";
app.events.ServiceRequestEvent.COMPLETE = "complete";
app.events.ServiceRequestEvent.IO_ERROR = "ioError";
app.utils.Session.player = null;
com.yagp.GifPlayerWrapper.globalTimescale = 1;
format.gfx.GfxBytes.EOF = 0;
format.gfx.GfxBytes.SIZE = 1;
format.gfx.GfxBytes.BEGIN_FILL = 10;
format.gfx.GfxBytes.GRADIENT_FILL = 11;
format.gfx.GfxBytes.END_FILL = 12;
format.gfx.GfxBytes.LINE_STYLE = 20;
format.gfx.GfxBytes.END_LINE_STYLE = 21;
format.gfx.GfxBytes.MOVE = 30;
format.gfx.GfxBytes.LINE = 31;
format.gfx.GfxBytes.CURVE = 32;
format.gfx.GfxBytes.base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
format.gfx.GfxBytes.scaleModes = [openfl.display.LineScaleMode.NORMAL,openfl.display.LineScaleMode.NONE,openfl.display.LineScaleMode.VERTICAL,openfl.display.LineScaleMode.HORIZONTAL];
format.gfx.GfxBytes.capsStyles = [openfl.display.CapsStyle.ROUND,openfl.display.CapsStyle.NONE,openfl.display.CapsStyle.SQUARE];
format.gfx.GfxBytes.jointStyles = [openfl.display.JointStyle.ROUND,openfl.display.JointStyle.MITER,openfl.display.JointStyle.BEVEL];
format.gfx.GfxBytes.spreadMethods = [openfl.display.SpreadMethod.PAD,openfl.display.SpreadMethod.REPEAT,openfl.display.SpreadMethod.REFLECT];
format.gfx.GfxBytes.interpolationMethods = [openfl.display.InterpolationMethod.RGB,openfl.display.InterpolationMethod.LINEAR_RGB];
format.svg.PathParser.MOVE = 77;
format.svg.PathParser.MOVER = 109;
format.svg.PathParser.LINE = 76;
format.svg.PathParser.LINER = 108;
format.svg.PathParser.HLINE = 72;
format.svg.PathParser.HLINER = 104;
format.svg.PathParser.VLINE = 86;
format.svg.PathParser.VLINER = 118;
format.svg.PathParser.CUBIC = 67;
format.svg.PathParser.CUBICR = 99;
format.svg.PathParser.SCUBIC = 83;
format.svg.PathParser.SCUBICR = 115;
format.svg.PathParser.QUAD = 81;
format.svg.PathParser.QUADR = 113;
format.svg.PathParser.SQUAD = 84;
format.svg.PathParser.SQUADR = 116;
format.svg.PathParser.ARC = 65;
format.svg.PathParser.ARCR = 97;
format.svg.PathParser.CLOSE = 90;
format.svg.PathParser.CLOSER = 122;
format.svg.PathParser.UNKNOWN = -1;
format.svg.PathParser.SEPARATOR = -2;
format.svg.PathParser.FLOAT = -3;
format.svg.PathParser.FLOAT_SIGN = -4;
format.svg.PathParser.FLOAT_DOT = -5;
format.svg.PathParser.FLOAT_EXP = -6;
format.svg.PathSegment.MOVE = 1;
format.svg.PathSegment.DRAW = 2;
format.svg.PathSegment.CURVE = 3;
format.svg.PathSegment.CUBIC = 4;
format.svg.PathSegment.ARC = 5;
format.svg.SVGData.SIN45 = 0.70710678118654752440084436210485;
format.svg.SVGData.TAN22 = 0.4142135623730950488016887242097;
format.svg.SVGData.mStyleSplit = new EReg(";","g");
format.svg.SVGData.mStyleValue = new EReg("\\s*(.*)\\s*:\\s*(.*)\\s*","");
format.svg.SVGData.mTranslateMatch = new EReg("translate\\((.*)[, ](.*)\\)","");
format.svg.SVGData.mScaleMatch = new EReg("scale\\((.*)\\)","");
format.svg.SVGData.mMatrixMatch = new EReg("matrix\\((.*)[, ](.*)[, ](.*)[, ](.*)[, ](.*)[, ](.*)\\)","");
format.svg.SVGData.mURLMatch = new EReg("url\\(#(.*)\\)","");
format.svg.SVGData.defaultFill = format.svg.FillType.FillSolid(0);
haxe.crypto.Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe.crypto.Base64.BYTES = haxe.io.Bytes.ofString(haxe.crypto.Base64.CHARS);
haxe.ds.ObjectMap.count = 0;
haxe.ui.toolkit.core.StyleableDisplayObject.__meta__ = { fields : { baseStyle : { clonable : null}, style : { clonable : null}}};
haxe.ui.toolkit.controls.Button.STATE_NORMAL = "normal";
haxe.ui.toolkit.controls.Button.STATE_OVER = "over";
haxe.ui.toolkit.controls.Button.STATE_DOWN = "down";
haxe.ui.toolkit.controls.Button.STATE_DISABLED = "disabled";
haxe.ui.toolkit.containers.CalendarView.MONTH_NAMES = ["January","Febuary","March","April","May","June","July","August","September","October","November","December"];
haxe.ui.toolkit.containers.TableViewRow.STATE_NORMAL = "normal";
haxe.ui.toolkit.containers.TableViewRow.STATE_OVER = "over";
haxe.ui.toolkit.containers.TableViewRow.STATE_SELECTED = "selected";
haxe.ui.toolkit.controls.Link.STATE_NORMAL = "normal";
haxe.ui.toolkit.controls.Link.STATE_OVER = "over";
haxe.ui.toolkit.controls.Link.STATE_DOWN = "down";
haxe.ui.toolkit.core.Macros.componentClasses = new haxe.ds.StringMap();
haxe.ui.toolkit.core.Macros.dataSourceClasses = new haxe.ds.StringMap();
haxe.ui.toolkit.core.Macros.themeResources = new haxe.ds.StringMap();
haxe.ui.toolkit.core.PopupButton.OK = 1;
haxe.ui.toolkit.core.PopupButton.YES = 16;
haxe.ui.toolkit.core.PopupButton.NO = 256;
haxe.ui.toolkit.core.PopupButton.CANCEL = 4096;
haxe.ui.toolkit.core.PopupButton.CONFIRM = 65536;
haxe.ui.toolkit.core.PopupButton.CLOSE = 1048576;
haxe.ui.toolkit.core.PopupButton.CUSTOM = 16777216;
haxe.ui.toolkit.core.Toolkit.DPI_THRESHOLD = 120;
haxe.ui.toolkit.core.Toolkit._versionInfo = new haxe.ds.StringMap();
haxe.ui.toolkit.core.Toolkit.useDefaultTheme = true;
haxe.ui.toolkit.core.Toolkit.autoScale = true;
haxe.ui.toolkit.core.Toolkit._defaultTransition = "slide";
haxe.ui.toolkit.core.Toolkit._scaleFactor = 0;
haxe.ui.toolkit.core.base.HorizontalAlign.LEFT = "left";
haxe.ui.toolkit.core.base.HorizontalAlign.RIGHT = "right";
haxe.ui.toolkit.core.base.HorizontalAlign.CENTER = "center";
haxe.ui.toolkit.core.base.State.NORMAL = "normal";
haxe.ui.toolkit.core.base.State.OVER = "over";
haxe.ui.toolkit.core.base.State.DOWN = "down";
haxe.ui.toolkit.core.base.State.DISABLED = "disabled";
haxe.ui.toolkit.core.base.VerticalAlign.TOP = "top";
haxe.ui.toolkit.core.base.VerticalAlign.BOTTOM = "bottom";
haxe.ui.toolkit.core.base.VerticalAlign.CENTER = "center";
haxe.ui.toolkit.core.interfaces.Direction.HORIZONTAL = "horizontal";
haxe.ui.toolkit.core.interfaces.Direction.VERTICAL = "vertical";
haxe.ui.toolkit.core.interfaces.InvalidationFlag.LAYOUT = 1;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.DISPLAY = 16;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.SIZE = 256;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.STATE = 4096;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.DATA = 65536;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.STYLE = 1048576;
haxe.ui.toolkit.core.interfaces.InvalidationFlag.ALL = 1118481;
haxe.ui.toolkit.core.renderers.ItemRenderer.STATE_NORMAL = "normal";
haxe.ui.toolkit.core.renderers.ItemRenderer.STATE_OVER = "over";
haxe.ui.toolkit.core.renderers.ItemRenderer.STATE_SELECTED = "selected";
haxe.ui.toolkit.core.renderers.ItemRenderer.STATE_DISABLED = "disabled";
haxe.ui.toolkit.data.DataSource.SAFE_NUM = 2147483647;
haxe.ui.toolkit.data.DataSource.clsId = 0;
haxe.ui.toolkit.events.MenuEvent.SELECT = openfl.events.Event.SELECT;
haxe.ui.toolkit.events.MenuEvent.OPEN = openfl.events.Event.OPEN;
haxe.ui.toolkit.events.UIEvent.PREFIX = "haxeui_";
haxe.ui.toolkit.events.UIEvent.INIT = "haxeui_" + "init";
haxe.ui.toolkit.events.UIEvent.RESIZE = "haxeui_" + "resize";
haxe.ui.toolkit.events.UIEvent.READY = "haxeui_" + "ready";
haxe.ui.toolkit.events.UIEvent.CLICK = "haxeui_" + "click";
haxe.ui.toolkit.events.UIEvent.MOUSE_DOWN = "haxeui_" + "mouseDown";
haxe.ui.toolkit.events.UIEvent.MOUSE_UP = "haxeui_" + "mouseUp";
haxe.ui.toolkit.events.UIEvent.MOUSE_OVER = "haxeui_" + "mouseOver";
haxe.ui.toolkit.events.UIEvent.MOUSE_OUT = "haxeui_" + "mouseOut";
haxe.ui.toolkit.events.UIEvent.MOUSE_MOVE = "haxeui_" + "mouseMove";
haxe.ui.toolkit.events.UIEvent.DOUBLE_CLICK = "haxeui_" + "doubleClick";
haxe.ui.toolkit.events.UIEvent.ROLL_OVER = "haxeui_" + "rollOver";
haxe.ui.toolkit.events.UIEvent.ROLL_OUT = "haxeui_" + "rollOut";
haxe.ui.toolkit.events.UIEvent.CHANGE = "haxeui_" + "change";
haxe.ui.toolkit.events.UIEvent.SCROLL = "haxeui_" + "scroll";
haxe.ui.toolkit.events.UIEvent.ADDED = "haxeui_" + "added";
haxe.ui.toolkit.events.UIEvent.ADDED_TO_STAGE = "haxeui_" + "addedToStage";
haxe.ui.toolkit.events.UIEvent.REMOVED = "haxeui_" + "removed";
haxe.ui.toolkit.events.UIEvent.REMOVED_FROM_STAGE = "haxeui_" + "removedFromStage";
haxe.ui.toolkit.events.UIEvent.ACTIVATE = "haxeui_" + "activate";
haxe.ui.toolkit.events.UIEvent.DEACTIVATE = "haxeui_" + "deactivate";
haxe.ui.toolkit.events.UIEvent.GLYPH_CLICK = "haxeui_" + "glyphClick";
haxe.ui.toolkit.events.UIEvent.COMPONENT_EVENT = "haxeui_" + "componentEvent";
haxe.ui.toolkit.events.UIEvent.MENU_SELECT = "haxeui_" + "menuSelect";
haxe.ui.toolkit.events.UIEvent.MENU_OPEN = "haxeui_" + "menuOpen";
haxe.ui.toolkit.text.TextDisplay.X_PADDING = 0;
haxe.ui.toolkit.text.TextDisplay.Y_PADDING = 2;
haxe.ui.toolkit.themes.Theme.assets = new haxe.ds.StringMap();
haxe.ui.toolkit.util.FilterParser.filterParamDefaults = { blur : ["4","4","1"], dropShadow : ["4","45","0","1","4","4","1","1","false","false","false"], glow : ["16711680","1","6","6","2","1","false","false"]};
haxe.ui.toolkit.util.Identifier._objectCount = new haxe.ds.StringMap();
haxe.xml.Parser.escapes = (function($this) {
	var $r;
	var h = new haxe.ds.StringMap();
	h.set("lt","<");
	h.set("gt",">");
	h.set("amp","&");
	h.set("quot","\"");
	h.set("apos","'");
	h.set("nbsp",String.fromCharCode(160));
	$r = h;
	return $r;
}(this));
hscript.Parser.p1 = 0;
hscript.Parser.readPos = 0;
hscript.Parser.tokenMin = 0;
hscript.Parser.tokenMax = 0;
js.Boot.__toStr = {}.toString;
lime.Assets.cache = new lime.AssetCache();
lime.Assets.libraries = new haxe.ds.StringMap();
lime.Assets.initialized = false;
lime._Assets.AssetType_Impl_.BINARY = "BINARY";
lime._Assets.AssetType_Impl_.FONT = "FONT";
lime._Assets.AssetType_Impl_.IMAGE = "IMAGE";
lime._Assets.AssetType_Impl_.MUSIC = "MUSIC";
lime._Assets.AssetType_Impl_.SOUND = "SOUND";
lime._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
lime._Assets.AssetType_Impl_.TEXT = "TEXT";
lime.app.Application.onUpdate = new lime.app.Event();
lime.app.Preloader.images = new haxe.ds.StringMap();
lime.app.Preloader.loaders = new haxe.ds.StringMap();
lime.audio.openal.AL.NONE = 0;
lime.audio.openal.AL.FALSE = 0;
lime.audio.openal.AL.TRUE = 1;
lime.audio.openal.AL.SOURCE_RELATIVE = 514;
lime.audio.openal.AL.CONE_INNER_ANGLE = 4097;
lime.audio.openal.AL.CONE_OUTER_ANGLE = 4098;
lime.audio.openal.AL.PITCH = 4099;
lime.audio.openal.AL.POSITION = 4100;
lime.audio.openal.AL.DIRECTION = 4101;
lime.audio.openal.AL.VELOCITY = 4102;
lime.audio.openal.AL.LOOPING = 4103;
lime.audio.openal.AL.BUFFER = 4105;
lime.audio.openal.AL.GAIN = 4106;
lime.audio.openal.AL.MIN_GAIN = 4109;
lime.audio.openal.AL.MAX_GAIN = 4110;
lime.audio.openal.AL.ORIENTATION = 4111;
lime.audio.openal.AL.SOURCE_STATE = 4112;
lime.audio.openal.AL.INITIAL = 4113;
lime.audio.openal.AL.PLAYING = 4114;
lime.audio.openal.AL.PAUSED = 4115;
lime.audio.openal.AL.STOPPED = 4116;
lime.audio.openal.AL.BUFFERS_QUEUED = 4117;
lime.audio.openal.AL.BUFFERS_PROCESSED = 4118;
lime.audio.openal.AL.REFERENCE_DISTANCE = 4128;
lime.audio.openal.AL.ROLLOFF_FACTOR = 4129;
lime.audio.openal.AL.CONE_OUTER_GAIN = 4130;
lime.audio.openal.AL.MAX_DISTANCE = 4131;
lime.audio.openal.AL.SEC_OFFSET = 4132;
lime.audio.openal.AL.SAMPLE_OFFSET = 4133;
lime.audio.openal.AL.BYTE_OFFSET = 4134;
lime.audio.openal.AL.SOURCE_TYPE = 4135;
lime.audio.openal.AL.STATIC = 4136;
lime.audio.openal.AL.STREAMING = 4137;
lime.audio.openal.AL.UNDETERMINED = 4144;
lime.audio.openal.AL.FORMAT_MONO8 = 4352;
lime.audio.openal.AL.FORMAT_MONO16 = 4353;
lime.audio.openal.AL.FORMAT_STEREO8 = 4354;
lime.audio.openal.AL.FORMAT_STEREO16 = 4355;
lime.audio.openal.AL.FREQUENCY = 8193;
lime.audio.openal.AL.BITS = 8194;
lime.audio.openal.AL.CHANNELS = 8195;
lime.audio.openal.AL.SIZE = 8196;
lime.audio.openal.AL.NO_ERROR = 0;
lime.audio.openal.AL.INVALID_NAME = 40961;
lime.audio.openal.AL.INVALID_ENUM = 40962;
lime.audio.openal.AL.INVALID_VALUE = 40963;
lime.audio.openal.AL.INVALID_OPERATION = 40964;
lime.audio.openal.AL.OUT_OF_MEMORY = 40965;
lime.audio.openal.AL.VENDOR = 45057;
lime.audio.openal.AL.VERSION = 45058;
lime.audio.openal.AL.RENDERER = 45059;
lime.audio.openal.AL.EXTENSIONS = 45060;
lime.audio.openal.AL.DOPPLER_FACTOR = 49152;
lime.audio.openal.AL.SPEED_OF_SOUND = 49155;
lime.audio.openal.AL.DOPPLER_VELOCITY = 49153;
lime.audio.openal.AL.DISTANCE_MODEL = 53248;
lime.audio.openal.AL.INVERSE_DISTANCE = 53249;
lime.audio.openal.AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime.audio.openal.AL.LINEAR_DISTANCE = 53251;
lime.audio.openal.AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime.audio.openal.AL.EXPONENT_DISTANCE = 53253;
lime.audio.openal.AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime.audio.openal.ALC.FALSE = 0;
lime.audio.openal.ALC.TRUE = 1;
lime.audio.openal.ALC.FREQUENCY = 4103;
lime.audio.openal.ALC.REFRESH = 4104;
lime.audio.openal.ALC.SYNC = 4105;
lime.audio.openal.ALC.MONO_SOURCES = 4112;
lime.audio.openal.ALC.STEREO_SOURCES = 4113;
lime.audio.openal.ALC.NO_ERROR = 0;
lime.audio.openal.ALC.INVALID_DEVICE = 40961;
lime.audio.openal.ALC.INVALID_CONTEXT = 40962;
lime.audio.openal.ALC.INVALID_ENUM = 40963;
lime.audio.openal.ALC.INVALID_VALUE = 40964;
lime.audio.openal.ALC.OUT_OF_MEMORY = 40965;
lime.audio.openal.ALC.ATTRIBUTES_SIZE = 4098;
lime.audio.openal.ALC.ALL_ATTRIBUTES = 4099;
lime.audio.openal.ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime.audio.openal.ALC.DEVICE_SPECIFIER = 4101;
lime.audio.openal.ALC.EXTENSIONS = 4102;
lime.audio.openal.ALC.ENUMERATE_ALL_EXT = 1;
lime.audio.openal.ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime.audio.openal.ALC.ALL_DEVICES_SPECIFIER = 4115;
lime.graphics.Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime.graphics.Renderer.onRenderContextLost = new lime.app.Event();
lime.graphics.Renderer.onRenderContextRestored = new lime.app.Event();
lime.graphics.Renderer.onRender = new lime.app.Event();
lime.graphics.opengl.GL.DEPTH_BUFFER_BIT = 256;
lime.graphics.opengl.GL.STENCIL_BUFFER_BIT = 1024;
lime.graphics.opengl.GL.COLOR_BUFFER_BIT = 16384;
lime.graphics.opengl.GL.POINTS = 0;
lime.graphics.opengl.GL.LINES = 1;
lime.graphics.opengl.GL.LINE_LOOP = 2;
lime.graphics.opengl.GL.LINE_STRIP = 3;
lime.graphics.opengl.GL.TRIANGLES = 4;
lime.graphics.opengl.GL.TRIANGLE_STRIP = 5;
lime.graphics.opengl.GL.TRIANGLE_FAN = 6;
lime.graphics.opengl.GL.ZERO = 0;
lime.graphics.opengl.GL.ONE = 1;
lime.graphics.opengl.GL.SRC_COLOR = 768;
lime.graphics.opengl.GL.ONE_MINUS_SRC_COLOR = 769;
lime.graphics.opengl.GL.SRC_ALPHA = 770;
lime.graphics.opengl.GL.ONE_MINUS_SRC_ALPHA = 771;
lime.graphics.opengl.GL.DST_ALPHA = 772;
lime.graphics.opengl.GL.ONE_MINUS_DST_ALPHA = 773;
lime.graphics.opengl.GL.DST_COLOR = 774;
lime.graphics.opengl.GL.ONE_MINUS_DST_COLOR = 775;
lime.graphics.opengl.GL.SRC_ALPHA_SATURATE = 776;
lime.graphics.opengl.GL.FUNC_ADD = 32774;
lime.graphics.opengl.GL.BLEND_EQUATION = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_RGB = 32777;
lime.graphics.opengl.GL.BLEND_EQUATION_ALPHA = 34877;
lime.graphics.opengl.GL.FUNC_SUBTRACT = 32778;
lime.graphics.opengl.GL.FUNC_REVERSE_SUBTRACT = 32779;
lime.graphics.opengl.GL.BLEND_DST_RGB = 32968;
lime.graphics.opengl.GL.BLEND_SRC_RGB = 32969;
lime.graphics.opengl.GL.BLEND_DST_ALPHA = 32970;
lime.graphics.opengl.GL.BLEND_SRC_ALPHA = 32971;
lime.graphics.opengl.GL.CONSTANT_COLOR = 32769;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime.graphics.opengl.GL.CONSTANT_ALPHA = 32771;
lime.graphics.opengl.GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime.graphics.opengl.GL.BLEND_COLOR = 32773;
lime.graphics.opengl.GL.ARRAY_BUFFER = 34962;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER = 34963;
lime.graphics.opengl.GL.ARRAY_BUFFER_BINDING = 34964;
lime.graphics.opengl.GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime.graphics.opengl.GL.STREAM_DRAW = 35040;
lime.graphics.opengl.GL.STATIC_DRAW = 35044;
lime.graphics.opengl.GL.DYNAMIC_DRAW = 35048;
lime.graphics.opengl.GL.BUFFER_SIZE = 34660;
lime.graphics.opengl.GL.BUFFER_USAGE = 34661;
lime.graphics.opengl.GL.CURRENT_VERTEX_ATTRIB = 34342;
lime.graphics.opengl.GL.FRONT = 1028;
lime.graphics.opengl.GL.BACK = 1029;
lime.graphics.opengl.GL.FRONT_AND_BACK = 1032;
lime.graphics.opengl.GL.CULL_FACE = 2884;
lime.graphics.opengl.GL.BLEND = 3042;
lime.graphics.opengl.GL.DITHER = 3024;
lime.graphics.opengl.GL.STENCIL_TEST = 2960;
lime.graphics.opengl.GL.DEPTH_TEST = 2929;
lime.graphics.opengl.GL.SCISSOR_TEST = 3089;
lime.graphics.opengl.GL.POLYGON_OFFSET_FILL = 32823;
lime.graphics.opengl.GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime.graphics.opengl.GL.SAMPLE_COVERAGE = 32928;
lime.graphics.opengl.GL.NO_ERROR = 0;
lime.graphics.opengl.GL.INVALID_ENUM = 1280;
lime.graphics.opengl.GL.INVALID_VALUE = 1281;
lime.graphics.opengl.GL.INVALID_OPERATION = 1282;
lime.graphics.opengl.GL.OUT_OF_MEMORY = 1285;
lime.graphics.opengl.GL.CW = 2304;
lime.graphics.opengl.GL.CCW = 2305;
lime.graphics.opengl.GL.LINE_WIDTH = 2849;
lime.graphics.opengl.GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime.graphics.opengl.GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime.graphics.opengl.GL.CULL_FACE_MODE = 2885;
lime.graphics.opengl.GL.FRONT_FACE = 2886;
lime.graphics.opengl.GL.DEPTH_RANGE = 2928;
lime.graphics.opengl.GL.DEPTH_WRITEMASK = 2930;
lime.graphics.opengl.GL.DEPTH_CLEAR_VALUE = 2931;
lime.graphics.opengl.GL.DEPTH_FUNC = 2932;
lime.graphics.opengl.GL.STENCIL_CLEAR_VALUE = 2961;
lime.graphics.opengl.GL.STENCIL_FUNC = 2962;
lime.graphics.opengl.GL.STENCIL_FAIL = 2964;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime.graphics.opengl.GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime.graphics.opengl.GL.STENCIL_REF = 2967;
lime.graphics.opengl.GL.STENCIL_VALUE_MASK = 2963;
lime.graphics.opengl.GL.STENCIL_WRITEMASK = 2968;
lime.graphics.opengl.GL.STENCIL_BACK_FUNC = 34816;
lime.graphics.opengl.GL.STENCIL_BACK_FAIL = 34817;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime.graphics.opengl.GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime.graphics.opengl.GL.STENCIL_BACK_REF = 36003;
lime.graphics.opengl.GL.STENCIL_BACK_VALUE_MASK = 36004;
lime.graphics.opengl.GL.STENCIL_BACK_WRITEMASK = 36005;
lime.graphics.opengl.GL.VIEWPORT = 2978;
lime.graphics.opengl.GL.SCISSOR_BOX = 3088;
lime.graphics.opengl.GL.COLOR_CLEAR_VALUE = 3106;
lime.graphics.opengl.GL.COLOR_WRITEMASK = 3107;
lime.graphics.opengl.GL.UNPACK_ALIGNMENT = 3317;
lime.graphics.opengl.GL.PACK_ALIGNMENT = 3333;
lime.graphics.opengl.GL.MAX_TEXTURE_SIZE = 3379;
lime.graphics.opengl.GL.MAX_VIEWPORT_DIMS = 3386;
lime.graphics.opengl.GL.SUBPIXEL_BITS = 3408;
lime.graphics.opengl.GL.RED_BITS = 3410;
lime.graphics.opengl.GL.GREEN_BITS = 3411;
lime.graphics.opengl.GL.BLUE_BITS = 3412;
lime.graphics.opengl.GL.ALPHA_BITS = 3413;
lime.graphics.opengl.GL.DEPTH_BITS = 3414;
lime.graphics.opengl.GL.STENCIL_BITS = 3415;
lime.graphics.opengl.GL.POLYGON_OFFSET_UNITS = 10752;
lime.graphics.opengl.GL.POLYGON_OFFSET_FACTOR = 32824;
lime.graphics.opengl.GL.TEXTURE_BINDING_2D = 32873;
lime.graphics.opengl.GL.SAMPLE_BUFFERS = 32936;
lime.graphics.opengl.GL.SAMPLES = 32937;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_VALUE = 32938;
lime.graphics.opengl.GL.SAMPLE_COVERAGE_INVERT = 32939;
lime.graphics.opengl.GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime.graphics.opengl.GL.DONT_CARE = 4352;
lime.graphics.opengl.GL.FASTEST = 4353;
lime.graphics.opengl.GL.NICEST = 4354;
lime.graphics.opengl.GL.GENERATE_MIPMAP_HINT = 33170;
lime.graphics.opengl.GL.BYTE = 5120;
lime.graphics.opengl.GL.UNSIGNED_BYTE = 5121;
lime.graphics.opengl.GL.SHORT = 5122;
lime.graphics.opengl.GL.UNSIGNED_SHORT = 5123;
lime.graphics.opengl.GL.INT = 5124;
lime.graphics.opengl.GL.UNSIGNED_INT = 5125;
lime.graphics.opengl.GL.FLOAT = 5126;
lime.graphics.opengl.GL.DEPTH_COMPONENT = 6402;
lime.graphics.opengl.GL.ALPHA = 6406;
lime.graphics.opengl.GL.RGB = 6407;
lime.graphics.opengl.GL.RGBA = 6408;
lime.graphics.opengl.GL.LUMINANCE = 6409;
lime.graphics.opengl.GL.LUMINANCE_ALPHA = 6410;
lime.graphics.opengl.GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime.graphics.opengl.GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime.graphics.opengl.GL.FRAGMENT_SHADER = 35632;
lime.graphics.opengl.GL.VERTEX_SHADER = 35633;
lime.graphics.opengl.GL.MAX_VERTEX_ATTRIBS = 34921;
lime.graphics.opengl.GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime.graphics.opengl.GL.MAX_VARYING_VECTORS = 36348;
lime.graphics.opengl.GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime.graphics.opengl.GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime.graphics.opengl.GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime.graphics.opengl.GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime.graphics.opengl.GL.SHADER_TYPE = 35663;
lime.graphics.opengl.GL.DELETE_STATUS = 35712;
lime.graphics.opengl.GL.LINK_STATUS = 35714;
lime.graphics.opengl.GL.VALIDATE_STATUS = 35715;
lime.graphics.opengl.GL.ATTACHED_SHADERS = 35717;
lime.graphics.opengl.GL.ACTIVE_UNIFORMS = 35718;
lime.graphics.opengl.GL.ACTIVE_ATTRIBUTES = 35721;
lime.graphics.opengl.GL.SHADING_LANGUAGE_VERSION = 35724;
lime.graphics.opengl.GL.CURRENT_PROGRAM = 35725;
lime.graphics.opengl.GL.NEVER = 512;
lime.graphics.opengl.GL.LESS = 513;
lime.graphics.opengl.GL.EQUAL = 514;
lime.graphics.opengl.GL.LEQUAL = 515;
lime.graphics.opengl.GL.GREATER = 516;
lime.graphics.opengl.GL.NOTEQUAL = 517;
lime.graphics.opengl.GL.GEQUAL = 518;
lime.graphics.opengl.GL.ALWAYS = 519;
lime.graphics.opengl.GL.KEEP = 7680;
lime.graphics.opengl.GL.REPLACE = 7681;
lime.graphics.opengl.GL.INCR = 7682;
lime.graphics.opengl.GL.DECR = 7683;
lime.graphics.opengl.GL.INVERT = 5386;
lime.graphics.opengl.GL.INCR_WRAP = 34055;
lime.graphics.opengl.GL.DECR_WRAP = 34056;
lime.graphics.opengl.GL.VENDOR = 7936;
lime.graphics.opengl.GL.RENDERER = 7937;
lime.graphics.opengl.GL.VERSION = 7938;
lime.graphics.opengl.GL.NEAREST = 9728;
lime.graphics.opengl.GL.LINEAR = 9729;
lime.graphics.opengl.GL.NEAREST_MIPMAP_NEAREST = 9984;
lime.graphics.opengl.GL.LINEAR_MIPMAP_NEAREST = 9985;
lime.graphics.opengl.GL.NEAREST_MIPMAP_LINEAR = 9986;
lime.graphics.opengl.GL.LINEAR_MIPMAP_LINEAR = 9987;
lime.graphics.opengl.GL.TEXTURE_MAG_FILTER = 10240;
lime.graphics.opengl.GL.TEXTURE_MIN_FILTER = 10241;
lime.graphics.opengl.GL.TEXTURE_WRAP_S = 10242;
lime.graphics.opengl.GL.TEXTURE_WRAP_T = 10243;
lime.graphics.opengl.GL.TEXTURE_2D = 3553;
lime.graphics.opengl.GL.TEXTURE = 5890;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP = 34067;
lime.graphics.opengl.GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime.graphics.opengl.GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime.graphics.opengl.GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime.graphics.opengl.GL.TEXTURE0 = 33984;
lime.graphics.opengl.GL.TEXTURE1 = 33985;
lime.graphics.opengl.GL.TEXTURE2 = 33986;
lime.graphics.opengl.GL.TEXTURE3 = 33987;
lime.graphics.opengl.GL.TEXTURE4 = 33988;
lime.graphics.opengl.GL.TEXTURE5 = 33989;
lime.graphics.opengl.GL.TEXTURE6 = 33990;
lime.graphics.opengl.GL.TEXTURE7 = 33991;
lime.graphics.opengl.GL.TEXTURE8 = 33992;
lime.graphics.opengl.GL.TEXTURE9 = 33993;
lime.graphics.opengl.GL.TEXTURE10 = 33994;
lime.graphics.opengl.GL.TEXTURE11 = 33995;
lime.graphics.opengl.GL.TEXTURE12 = 33996;
lime.graphics.opengl.GL.TEXTURE13 = 33997;
lime.graphics.opengl.GL.TEXTURE14 = 33998;
lime.graphics.opengl.GL.TEXTURE15 = 33999;
lime.graphics.opengl.GL.TEXTURE16 = 34000;
lime.graphics.opengl.GL.TEXTURE17 = 34001;
lime.graphics.opengl.GL.TEXTURE18 = 34002;
lime.graphics.opengl.GL.TEXTURE19 = 34003;
lime.graphics.opengl.GL.TEXTURE20 = 34004;
lime.graphics.opengl.GL.TEXTURE21 = 34005;
lime.graphics.opengl.GL.TEXTURE22 = 34006;
lime.graphics.opengl.GL.TEXTURE23 = 34007;
lime.graphics.opengl.GL.TEXTURE24 = 34008;
lime.graphics.opengl.GL.TEXTURE25 = 34009;
lime.graphics.opengl.GL.TEXTURE26 = 34010;
lime.graphics.opengl.GL.TEXTURE27 = 34011;
lime.graphics.opengl.GL.TEXTURE28 = 34012;
lime.graphics.opengl.GL.TEXTURE29 = 34013;
lime.graphics.opengl.GL.TEXTURE30 = 34014;
lime.graphics.opengl.GL.TEXTURE31 = 34015;
lime.graphics.opengl.GL.ACTIVE_TEXTURE = 34016;
lime.graphics.opengl.GL.REPEAT = 10497;
lime.graphics.opengl.GL.CLAMP_TO_EDGE = 33071;
lime.graphics.opengl.GL.MIRRORED_REPEAT = 33648;
lime.graphics.opengl.GL.FLOAT_VEC2 = 35664;
lime.graphics.opengl.GL.FLOAT_VEC3 = 35665;
lime.graphics.opengl.GL.FLOAT_VEC4 = 35666;
lime.graphics.opengl.GL.INT_VEC2 = 35667;
lime.graphics.opengl.GL.INT_VEC3 = 35668;
lime.graphics.opengl.GL.INT_VEC4 = 35669;
lime.graphics.opengl.GL.BOOL = 35670;
lime.graphics.opengl.GL.BOOL_VEC2 = 35671;
lime.graphics.opengl.GL.BOOL_VEC3 = 35672;
lime.graphics.opengl.GL.BOOL_VEC4 = 35673;
lime.graphics.opengl.GL.FLOAT_MAT2 = 35674;
lime.graphics.opengl.GL.FLOAT_MAT3 = 35675;
lime.graphics.opengl.GL.FLOAT_MAT4 = 35676;
lime.graphics.opengl.GL.SAMPLER_2D = 35678;
lime.graphics.opengl.GL.SAMPLER_CUBE = 35680;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime.graphics.opengl.GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime.graphics.opengl.GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime.graphics.opengl.GL.POINT_SPRITE = 34913;
lime.graphics.opengl.GL.COMPILE_STATUS = 35713;
lime.graphics.opengl.GL.LOW_FLOAT = 36336;
lime.graphics.opengl.GL.MEDIUM_FLOAT = 36337;
lime.graphics.opengl.GL.HIGH_FLOAT = 36338;
lime.graphics.opengl.GL.LOW_INT = 36339;
lime.graphics.opengl.GL.MEDIUM_INT = 36340;
lime.graphics.opengl.GL.HIGH_INT = 36341;
lime.graphics.opengl.GL.FRAMEBUFFER = 36160;
lime.graphics.opengl.GL.RENDERBUFFER = 36161;
lime.graphics.opengl.GL.RGBA4 = 32854;
lime.graphics.opengl.GL.RGB5_A1 = 32855;
lime.graphics.opengl.GL.RGB565 = 36194;
lime.graphics.opengl.GL.DEPTH_COMPONENT16 = 33189;
lime.graphics.opengl.GL.STENCIL_INDEX = 6401;
lime.graphics.opengl.GL.STENCIL_INDEX8 = 36168;
lime.graphics.opengl.GL.DEPTH_STENCIL = 34041;
lime.graphics.opengl.GL.RENDERBUFFER_WIDTH = 36162;
lime.graphics.opengl.GL.RENDERBUFFER_HEIGHT = 36163;
lime.graphics.opengl.GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime.graphics.opengl.GL.RENDERBUFFER_RED_SIZE = 36176;
lime.graphics.opengl.GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime.graphics.opengl.GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime.graphics.opengl.GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime.graphics.opengl.GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime.graphics.opengl.GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime.graphics.opengl.GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime.graphics.opengl.GL.COLOR_ATTACHMENT0 = 36064;
lime.graphics.opengl.GL.DEPTH_ATTACHMENT = 36096;
lime.graphics.opengl.GL.STENCIL_ATTACHMENT = 36128;
lime.graphics.opengl.GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime.graphics.opengl.GL.NONE = 0;
lime.graphics.opengl.GL.FRAMEBUFFER_COMPLETE = 36053;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime.graphics.opengl.GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime.graphics.opengl.GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime.graphics.opengl.GL.FRAMEBUFFER_BINDING = 36006;
lime.graphics.opengl.GL.RENDERBUFFER_BINDING = 36007;
lime.graphics.opengl.GL.MAX_RENDERBUFFER_SIZE = 34024;
lime.graphics.opengl.GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime.graphics.opengl.GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime.graphics.opengl.GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime.graphics.opengl.GL.CONTEXT_LOST_WEBGL = 37442;
lime.graphics.opengl.GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime.graphics.opengl.GL.BROWSER_DEFAULT_WEBGL = 37444;
lime.math._ColorMatrix.ColorMatrix_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime.math.Matrix3.__identity = new lime.math.Matrix3();
lime.math._Matrix4.Matrix4_Impl_.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime.net._URLRequestMethod.URLRequestMethod_Impl_.DELETE = "DELETE";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.GET = "GET";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.HEAD = "HEAD";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.OPTIONS = "OPTIONS";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.POST = "POST";
lime.net._URLRequestMethod.URLRequestMethod_Impl_.PUT = "PUT";
lime.net.curl._CURL.CURL_Impl_.GLOBAL_SSL = 1;
lime.net.curl._CURL.CURL_Impl_.GLOBAL_WIN32 = 2;
lime.net.curl._CURL.CURL_Impl_.GLOBAL_ALL = 3;
lime.net.curl._CURL.CURL_Impl_.GLOBAL_NOTHING = 0;
lime.net.curl._CURL.CURL_Impl_.GLOBAL_DEFAULT = 3;
lime.net.curl._CURL.CURL_Impl_.GLOBAL_ACK_EINTR = 4;
lime.net.curl._CURLCode.CURLCode_Impl_.OK = 0;
lime.net.curl._CURLCode.CURLCode_Impl_.UNSUPPORTED_PROTOCOL = 1;
lime.net.curl._CURLCode.CURLCode_Impl_.FAILED_INIT = 2;
lime.net.curl._CURLCode.CURLCode_Impl_.URL_MALFORMAT = 3;
lime.net.curl._CURLCode.CURLCode_Impl_.NOT_BUILT_IN = 4;
lime.net.curl._CURLCode.CURLCode_Impl_.COULDNT_RESOLVE_PROXY = 5;
lime.net.curl._CURLCode.CURLCode_Impl_.COULDNT_RESOLVE_HOST = 6;
lime.net.curl._CURLCode.CURLCode_Impl_.COULDNT_CONNECT = 7;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_WEIRD_SERVER_REPLY = 8;
lime.net.curl._CURLCode.CURLCode_Impl_.REMOTE_ACCESS_DENIED = 9;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_ACCEPT_FAILED = 10;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_WEIRD_PASS_REPLY = 11;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_ACCEPT_TIMEOUT = 12;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_WEIRD_PASV_REPLY = 13;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_WEIRD_227_FORMAT = 14;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_CANT_GET_HOST = 15;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_COULDNT_SET_TYPE = 17;
lime.net.curl._CURLCode.CURLCode_Impl_.PARTIAL_FILE = 18;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_COULDNT_RETR_FILE = 19;
lime.net.curl._CURLCode.CURLCode_Impl_.QUOTE_ERROR = 21;
lime.net.curl._CURLCode.CURLCode_Impl_.HTTP_RETURNED_ERROR = 22;
lime.net.curl._CURLCode.CURLCode_Impl_.WRITE_ERROR = 23;
lime.net.curl._CURLCode.CURLCode_Impl_.UPLOAD_FAILED = 25;
lime.net.curl._CURLCode.CURLCode_Impl_.READ_ERROR = 26;
lime.net.curl._CURLCode.CURLCode_Impl_.OUT_OF_MEMORY = 27;
lime.net.curl._CURLCode.CURLCode_Impl_.OPERATION_TIMEDOUT = 28;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_PORT_FAILED = 30;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_COULDNT_USE_REST = 31;
lime.net.curl._CURLCode.CURLCode_Impl_.RANGE_ERROR = 33;
lime.net.curl._CURLCode.CURLCode_Impl_.HTTP_POST_ERROR = 34;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_CONNECT_ERROR = 35;
lime.net.curl._CURLCode.CURLCode_Impl_.BAD_DOWNLOAD_RESUME = 36;
lime.net.curl._CURLCode.CURLCode_Impl_.FILE_COULDNT_READ_FILE = 37;
lime.net.curl._CURLCode.CURLCode_Impl_.LDAP_CANNOT_BIND = 38;
lime.net.curl._CURLCode.CURLCode_Impl_.LDAP_SEARCH_FAILED = 39;
lime.net.curl._CURLCode.CURLCode_Impl_.FUNCTION_NOT_FOUND = 41;
lime.net.curl._CURLCode.CURLCode_Impl_.ABORTED_BY_CALLBACK = 42;
lime.net.curl._CURLCode.CURLCode_Impl_.BAD_FUNCTION_ARGUMENT = 43;
lime.net.curl._CURLCode.CURLCode_Impl_.INTERFACE_FAILED = 45;
lime.net.curl._CURLCode.CURLCode_Impl_.TOO_MANY_REDIRECTS = 47;
lime.net.curl._CURLCode.CURLCode_Impl_.UNKNOWN_OPTION = 48;
lime.net.curl._CURLCode.CURLCode_Impl_.TELNET_OPTION_SYNTAX = 49;
lime.net.curl._CURLCode.CURLCode_Impl_.PEER_FAILED_VERIFICATION = 51;
lime.net.curl._CURLCode.CURLCode_Impl_.GOT_NOTHING = 52;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_ENGINE_NOTFOUND = 53;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_ENGINE_SETFAILED = 54;
lime.net.curl._CURLCode.CURLCode_Impl_.SEND_ERROR = 55;
lime.net.curl._CURLCode.CURLCode_Impl_.RECV_ERROR = 56;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_CERTPROBLEM = 58;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_CIPHER = 59;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_CACERT = 60;
lime.net.curl._CURLCode.CURLCode_Impl_.BAD_CONTENT_ENCODING = 61;
lime.net.curl._CURLCode.CURLCode_Impl_.LDAP_INVALID_URL = 62;
lime.net.curl._CURLCode.CURLCode_Impl_.FILESIZE_EXCEEDED = 63;
lime.net.curl._CURLCode.CURLCode_Impl_.USE_SSL_FAILED = 64;
lime.net.curl._CURLCode.CURLCode_Impl_.SEND_FAIL_REWIND = 65;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_ENGINE_INITFAILED = 66;
lime.net.curl._CURLCode.CURLCode_Impl_.LOGIN_DENIED = 67;
lime.net.curl._CURLCode.CURLCode_Impl_.TFTP_NOTFOUND = 68;
lime.net.curl._CURLCode.CURLCode_Impl_.TFTP_PERM = 69;
lime.net.curl._CURLCode.CURLCode_Impl_.REMOTE_DISK_FULL = 70;
lime.net.curl._CURLCode.CURLCode_Impl_.TFTP_ILLEGAL = 71;
lime.net.curl._CURLCode.CURLCode_Impl_.TFTP_UNKNOWNID = 72;
lime.net.curl._CURLCode.CURLCode_Impl_.REMOTE_FILE_EXISTS = 73;
lime.net.curl._CURLCode.CURLCode_Impl_.TFTP_NOSUCHUSER = 74;
lime.net.curl._CURLCode.CURLCode_Impl_.CONV_FAILED = 75;
lime.net.curl._CURLCode.CURLCode_Impl_.CONV_REQD = 76;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_CACERT_BADFILE = 77;
lime.net.curl._CURLCode.CURLCode_Impl_.REMOTE_FILE_NOT_FOUND = 78;
lime.net.curl._CURLCode.CURLCode_Impl_.SSH = 79;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_SHUTDOWN_FAILED = 80;
lime.net.curl._CURLCode.CURLCode_Impl_.AGAIN = 81;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_CRL_BADFILE = 82;
lime.net.curl._CURLCode.CURLCode_Impl_.SSL_ISSUER_ERROR = 83;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_PRET_FAILED = 84;
lime.net.curl._CURLCode.CURLCode_Impl_.RTSP_CSEQ_ERROR = 85;
lime.net.curl._CURLCode.CURLCode_Impl_.RTSP_SESSION_ERROR = 86;
lime.net.curl._CURLCode.CURLCode_Impl_.FTP_BAD_FILE_LIST = 87;
lime.net.curl._CURLCode.CURLCode_Impl_.CHUNK_FAILED = 88;
lime.net.curl._CURLCode.CURLCode_Impl_.NO_CONNECTION_AVAILABLE = 89;
lime.net.curl._CURLInfo.CURLInfo_Impl_.NONE = 0;
lime.net.curl._CURLInfo.CURLInfo_Impl_.EFFECTIVE_URL = 1048577;
lime.net.curl._CURLInfo.CURLInfo_Impl_.RESPONSE_CODE = 2097154;
lime.net.curl._CURLInfo.CURLInfo_Impl_.TOTAL_TIME = 3145731;
lime.net.curl._CURLInfo.CURLInfo_Impl_.NAMELOOKUP_TIME = 3145732;
lime.net.curl._CURLInfo.CURLInfo_Impl_.CONNECT_TIME = 3145733;
lime.net.curl._CURLInfo.CURLInfo_Impl_.PRETRANSFER_TIME = 3145734;
lime.net.curl._CURLInfo.CURLInfo_Impl_.SIZE_UPLOAD = 3145735;
lime.net.curl._CURLInfo.CURLInfo_Impl_.SIZE_DOWNLOAD = 3145736;
lime.net.curl._CURLInfo.CURLInfo_Impl_.SPEED_DOWNLOAD = 3145737;
lime.net.curl._CURLInfo.CURLInfo_Impl_.SPEED_UPLOAD = 3145738;
lime.net.curl._CURLInfo.CURLInfo_Impl_.HEADER_SIZE = 2097163;
lime.net.curl._CURLInfo.CURLInfo_Impl_.REQUEST_SIZE = 2097164;
lime.net.curl._CURLInfo.CURLInfo_Impl_.SSL_VERIFYRESULT = 2097165;
lime.net.curl._CURLInfo.CURLInfo_Impl_.FILETIME = 2097166;
lime.net.curl._CURLInfo.CURLInfo_Impl_.CONTENT_LENGTH_DOWNLOAD = 3145743;
lime.net.curl._CURLInfo.CURLInfo_Impl_.CONTENT_LENGTH_UPLOAD = 3145744;
lime.net.curl._CURLInfo.CURLInfo_Impl_.STARTTRANSFER_TIME = 3145745;
lime.net.curl._CURLInfo.CURLInfo_Impl_.CONTENT_TYPE = 1048594;
lime.net.curl._CURLInfo.CURLInfo_Impl_.REDIRECT_TIME = 3145747;
lime.net.curl._CURLInfo.CURLInfo_Impl_.REDIRECT_COUNT = 2097172;
lime.net.curl._CURLInfo.CURLInfo_Impl_.PRIVATE = 1048597;
lime.net.curl._CURLInfo.CURLInfo_Impl_.HTTP_CONNECTCODE = 2097174;
lime.net.curl._CURLInfo.CURLInfo_Impl_.HTTPAUTH_AVAIL = 2097175;
lime.net.curl._CURLInfo.CURLInfo_Impl_.PROXYAUTH_AVAIL = 2097176;
lime.net.curl._CURLInfo.CURLInfo_Impl_.OS_ERRNO = 2097177;
lime.net.curl._CURLInfo.CURLInfo_Impl_.NUM_CONNECTS = 2097178;
lime.net.curl._CURLInfo.CURLInfo_Impl_.SSL_ENGINES = 4194331;
lime.net.curl._CURLInfo.CURLInfo_Impl_.COOKIELIST = 4194332;
lime.net.curl._CURLInfo.CURLInfo_Impl_.LASTSOCKET = 2097181;
lime.net.curl._CURLInfo.CURLInfo_Impl_.FTP_ENTRY_PATH = 1048606;
lime.net.curl._CURLInfo.CURLInfo_Impl_.REDIRECT_URL = 1048607;
lime.net.curl._CURLInfo.CURLInfo_Impl_.PRIMARY_IP = 1048608;
lime.net.curl._CURLInfo.CURLInfo_Impl_.APPCONNECT_TIME = 3145761;
lime.net.curl._CURLInfo.CURLInfo_Impl_.CERTINFO = 4194338;
lime.net.curl._CURLInfo.CURLInfo_Impl_.CONDITION_UNMET = 2097187;
lime.net.curl._CURLInfo.CURLInfo_Impl_.RTSP_SESSION_ID = 1048612;
lime.net.curl._CURLInfo.CURLInfo_Impl_.RTSP_CLIENT_CSEQ = 2097189;
lime.net.curl._CURLInfo.CURLInfo_Impl_.RTSP_SERVER_CSEQ = 2097190;
lime.net.curl._CURLInfo.CURLInfo_Impl_.RTSP_CSEQ_RECV = 2097191;
lime.net.curl._CURLInfo.CURLInfo_Impl_.PRIMARY_PORT = 2097192;
lime.net.curl._CURLInfo.CURLInfo_Impl_.LOCAL_IP = 1048617;
lime.net.curl._CURLInfo.CURLInfo_Impl_.LOCAL_PORT = 2097194;
lime.net.curl._CURLInfo.CURLInfo_Impl_.TLS_SESSION = 4194347;
lime.net.curl._CURLOption.CURLOption_Impl_.URL = 10002;
lime.net.curl._CURLOption.CURLOption_Impl_.PORT = 3;
lime.net.curl._CURLOption.CURLOption_Impl_.PROXY = 10004;
lime.net.curl._CURLOption.CURLOption_Impl_.USERPWD = 10005;
lime.net.curl._CURLOption.CURLOption_Impl_.PROXYUSERPWD = 10006;
lime.net.curl._CURLOption.CURLOption_Impl_.RANGE = 10007;
lime.net.curl._CURLOption.CURLOption_Impl_.ERRORBUFFER = 10010;
lime.net.curl._CURLOption.CURLOption_Impl_.WRITEFUNCTION = 20011;
lime.net.curl._CURLOption.CURLOption_Impl_.READFUNCTION = 20012;
lime.net.curl._CURLOption.CURLOption_Impl_.TIMEOUT = 13;
lime.net.curl._CURLOption.CURLOption_Impl_.INFILESIZE = 14;
lime.net.curl._CURLOption.CURLOption_Impl_.POSTFIELDS = 10015;
lime.net.curl._CURLOption.CURLOption_Impl_.REFERER = 10016;
lime.net.curl._CURLOption.CURLOption_Impl_.FTPPORT = 10017;
lime.net.curl._CURLOption.CURLOption_Impl_.USERAGENT = 10018;
lime.net.curl._CURLOption.CURLOption_Impl_.LOW_SPEED_LIMIT = 19;
lime.net.curl._CURLOption.CURLOption_Impl_.LOW_SPEED_TIME = 20;
lime.net.curl._CURLOption.CURLOption_Impl_.RESUME_FROM = 21;
lime.net.curl._CURLOption.CURLOption_Impl_.COOKIE = 22;
lime.net.curl._CURLOption.CURLOption_Impl_.HTTPHEADER = 10023;
lime.net.curl._CURLOption.CURLOption_Impl_.RTSPHEADER = 10023;
lime.net.curl._CURLOption.CURLOption_Impl_.HTTPPOST = 10024;
lime.net.curl._CURLOption.CURLOption_Impl_.SSLCERT = 10025;
lime.net.curl._CURLOption.CURLOption_Impl_.KEYPASSWD = 10026;
lime.net.curl._CURLOption.CURLOption_Impl_.CRLF = 27;
lime.net.curl._CURLOption.CURLOption_Impl_.QUOTE = 10028;
lime.net.curl._CURLOption.CURLOption_Impl_.WRITEHEADER = 10029;
lime.net.curl._CURLOption.CURLOption_Impl_.HEADERDATA = 10029;
lime.net.curl._CURLOption.CURLOption_Impl_.COOKIEFILE = 10031;
lime.net.curl._CURLOption.CURLOption_Impl_.SSLVERSION = 32;
lime.net.curl._CURLOption.CURLOption_Impl_.TIMECONDITION = 33;
lime.net.curl._CURLOption.CURLOption_Impl_.TIMEVALUE = 34;
lime.net.curl._CURLOption.CURLOption_Impl_.CUSTOMREQUEST = 10036;
lime.net.curl._CURLOption.CURLOption_Impl_.STDERR = 10037;
lime.net.curl._CURLOption.CURLOption_Impl_.POSTQUOTE = 10039;
lime.net.curl._CURLOption.CURLOption_Impl_.WRITEINFO = 10040;
lime.net.curl._CURLOption.CURLOption_Impl_.VERBOSE = 41;
lime.net.curl._CURLOption.CURLOption_Impl_.HEADER = 42;
lime.net.curl._CURLOption.CURLOption_Impl_.NOPROGRESS = 43;
lime.net.curl._CURLOption.CURLOption_Impl_.NOBODY = 44;
lime.net.curl._CURLOption.CURLOption_Impl_.FAILONERROR = 45;
lime.net.curl._CURLOption.CURLOption_Impl_.UPLOAD = 46;
lime.net.curl._CURLOption.CURLOption_Impl_.POST = 47;
lime.net.curl._CURLOption.CURLOption_Impl_.DIRLISTONLY = 48;
lime.net.curl._CURLOption.CURLOption_Impl_.APPEND = 50;
lime.net.curl._CURLOption.CURLOption_Impl_.NETRC = 51;
lime.net.curl._CURLOption.CURLOption_Impl_.FOLLOWLOCATION = 52;
lime.net.curl._CURLOption.CURLOption_Impl_.TRANSFERTEXT = 53;
lime.net.curl._CURLOption.CURLOption_Impl_.PUT = 54;
lime.net.curl._CURLOption.CURLOption_Impl_.PROGRESSFUNCTION = 20056;
lime.net.curl._CURLOption.CURLOption_Impl_.PROGRESSDATA = 10057;
lime.net.curl._CURLOption.CURLOption_Impl_.XFERINFODATA = 10057;
lime.net.curl._CURLOption.CURLOption_Impl_.AUTOREFERER = 58;
lime.net.curl._CURLOption.CURLOption_Impl_.PROXYPORT = 59;
lime.net.curl._CURLOption.CURLOption_Impl_.POSTFIELDSIZE = 60;
lime.net.curl._CURLOption.CURLOption_Impl_.HTTPPROXYTUNNEL = 61;
lime.net.curl._CURLOption.CURLOption_Impl_.INTERFACE = 10062;
lime.net.curl._CURLOption.CURLOption_Impl_.KRBLEVEL = 10063;
lime.net.curl._CURLOption.CURLOption_Impl_.SSL_VERIFYPEER = 64;
lime.net.curl._CURLOption.CURLOption_Impl_.CAINFO = 10065;
lime.net.curl._CURLOption.CURLOption_Impl_.MAXREDIRS = 68;
lime.net.curl._CURLOption.CURLOption_Impl_.FILETIME = 69;
lime.net.curl._CURLOption.CURLOption_Impl_.TELNETOPTIONS = 10070;
lime.net.curl._CURLOption.CURLOption_Impl_.MAXCONNECTS = 71;
lime.net.curl._CURLOption.CURLOption_Impl_.CLOSEPOLICY = 72;
lime.net.curl._CURLOption.CURLOption_Impl_.FRESH_CONNECT = 74;
lime.net.curl._CURLOption.CURLOption_Impl_.FORBID_REUSE = 75;
lime.net.curl._CURLOption.CURLOption_Impl_.RANDOM_FILE = 10076;
lime.net.curl._CURLOption.CURLOption_Impl_.EGDSOCKET = 10077;
lime.net.curl._CURLOption.CURLOption_Impl_.CONNECTTIMEOUT = 78;
lime.net.curl._CURLOption.CURLOption_Impl_.HEADERFUNCTION = 20079;
lime.net.curl._CURLOption.CURLOption_Impl_.HTTPGET = 80;
lime.net.curl._CURLOption.CURLOption_Impl_.SSL_VERIFYHOST = 81;
lime.net.curl._CURLOption.CURLOption_Impl_.COOKIEJAR = 10082;
lime.net.curl._CURLOption.CURLOption_Impl_.SSL_CIPHER_LIST = 10083;
lime.net.curl._CURLOption.CURLOption_Impl_.HTTP_VERSION = 84;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_USE_EPSV = 85;
lime.net.curl._CURLOption.CURLOption_Impl_.SSLCERTTYPE = 10086;
lime.net.curl._CURLOption.CURLOption_Impl_.SSLKEY = 10087;
lime.net.curl._CURLOption.CURLOption_Impl_.SSLKEYTYPE = 10088;
lime.net.curl._CURLOption.CURLOption_Impl_.SSLENGINE = 10089;
lime.net.curl._CURLOption.CURLOption_Impl_.SSLENGINE_DEFAULT = 90;
lime.net.curl._CURLOption.CURLOption_Impl_.DNS_USE_GLOBAL_CACHE = 91;
lime.net.curl._CURLOption.CURLOption_Impl_.DNS_CACHE_TIMEOUT = 92;
lime.net.curl._CURLOption.CURLOption_Impl_.PREQUOTE = 10093;
lime.net.curl._CURLOption.CURLOption_Impl_.DEBUGFUNCTION = 20094;
lime.net.curl._CURLOption.CURLOption_Impl_.DEBUGDATA = 10095;
lime.net.curl._CURLOption.CURLOption_Impl_.COOKIESESSION = 96;
lime.net.curl._CURLOption.CURLOption_Impl_.CAPATH = 10097;
lime.net.curl._CURLOption.CURLOption_Impl_.BUFFERSIZE = 98;
lime.net.curl._CURLOption.CURLOption_Impl_.NOSIGNAL = 99;
lime.net.curl._CURLOption.CURLOption_Impl_.SHARE = 10100;
lime.net.curl._CURLOption.CURLOption_Impl_.PROXYTYPE = 101;
lime.net.curl._CURLOption.CURLOption_Impl_.ACCEPT_ENCODING = 10102;
lime.net.curl._CURLOption.CURLOption_Impl_.PRIVATE = 10103;
lime.net.curl._CURLOption.CURLOption_Impl_.HTTP200ALIASES = 10104;
lime.net.curl._CURLOption.CURLOption_Impl_.UNRESTRICTED_AUTH = 105;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_USE_EPRT = 106;
lime.net.curl._CURLOption.CURLOption_Impl_.HTTPAUTH = 107;
lime.net.curl._CURLOption.CURLOption_Impl_.SSL_CTX_FUNCTION = 20108;
lime.net.curl._CURLOption.CURLOption_Impl_.SSL_CTX_DATA = 10109;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_CREATE_MISSING_DIRS = 110;
lime.net.curl._CURLOption.CURLOption_Impl_.PROXYAUTH = 111;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_RESPONSE_TIMEOUT = 112;
lime.net.curl._CURLOption.CURLOption_Impl_.SERVER_RESPONSE_TIMEOUT = 112;
lime.net.curl._CURLOption.CURLOption_Impl_.IPRESOLVE = 113;
lime.net.curl._CURLOption.CURLOption_Impl_.MAXFILESIZE = 114;
lime.net.curl._CURLOption.CURLOption_Impl_.INFILESIZE_LARGE = 30115;
lime.net.curl._CURLOption.CURLOption_Impl_.RESUME_FROM_LARGE = 30116;
lime.net.curl._CURLOption.CURLOption_Impl_.MAXFILESIZE_LARGE = 30117;
lime.net.curl._CURLOption.CURLOption_Impl_.NETRC_FILE = 10118;
lime.net.curl._CURLOption.CURLOption_Impl_.USE_SSL = 119;
lime.net.curl._CURLOption.CURLOption_Impl_.POSTFIELDSIZE_LARGE = 30120;
lime.net.curl._CURLOption.CURLOption_Impl_.TCP_NODELAY = 121;
lime.net.curl._CURLOption.CURLOption_Impl_.FTPSSLAUTH = 129;
lime.net.curl._CURLOption.CURLOption_Impl_.IOCTLFUNCTION = 20130;
lime.net.curl._CURLOption.CURLOption_Impl_.IOCTLDATA = 10131;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_ACCOUNT = 10134;
lime.net.curl._CURLOption.CURLOption_Impl_.COOKIELIST = 10135;
lime.net.curl._CURLOption.CURLOption_Impl_.IGNORE_CONTENT_LENGTH = 10136;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_SKIP_PASV_IP = 137;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_FILEMETHOD = 138;
lime.net.curl._CURLOption.CURLOption_Impl_.LOCALPORT = 139;
lime.net.curl._CURLOption.CURLOption_Impl_.LOCALPORTRANGE = 140;
lime.net.curl._CURLOption.CURLOption_Impl_.CONNECT_ONLY = 141;
lime.net.curl._CURLOption.CURLOption_Impl_.CONV_FROM_NETWORK_FUNCTION = 20142;
lime.net.curl._CURLOption.CURLOption_Impl_.CONV_TO_NETWORK_FUNCTION = 20143;
lime.net.curl._CURLOption.CURLOption_Impl_.CONV_FROM_UTF8_FUNCTION = 20144;
lime.net.curl._CURLOption.CURLOption_Impl_.MAX_SEND_SPEED_LARGE = 30145;
lime.net.curl._CURLOption.CURLOption_Impl_.MAX_RECV_SPEED_LARGE = 30146;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_ALTERNATIVE_TO_USER = 10147;
lime.net.curl._CURLOption.CURLOption_Impl_.SOCKOPTFUNCTION = 20148;
lime.net.curl._CURLOption.CURLOption_Impl_.SOCKOPTDATA = 10149;
lime.net.curl._CURLOption.CURLOption_Impl_.SSL_SESSIONID_CACHE = 150;
lime.net.curl._CURLOption.CURLOption_Impl_.SSH_AUTH_TYPES = 151;
lime.net.curl._CURLOption.CURLOption_Impl_.SSH_PUBLIC_KEYFILE = 10152;
lime.net.curl._CURLOption.CURLOption_Impl_.SSH_PRIVATE_KEYFILE = 10153;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_SSL_CCC = 154;
lime.net.curl._CURLOption.CURLOption_Impl_.TIMEOUT_MS = 155;
lime.net.curl._CURLOption.CURLOption_Impl_.CONNECTTIMEOUT_MS = 156;
lime.net.curl._CURLOption.CURLOption_Impl_.HTTP_TRANSFER_DECODING = 157;
lime.net.curl._CURLOption.CURLOption_Impl_.HTTP_CONTENT_DECODING = 158;
lime.net.curl._CURLOption.CURLOption_Impl_.NEW_FILE_PERMS = 159;
lime.net.curl._CURLOption.CURLOption_Impl_.NEW_DIRECTORY_PERMS = 160;
lime.net.curl._CURLOption.CURLOption_Impl_.POSTREDIR = 161;
lime.net.curl._CURLOption.CURLOption_Impl_.SSH_HOST_PUBLIC_KEY_MD5 = 10162;
lime.net.curl._CURLOption.CURLOption_Impl_.OPENSOCKETFUNCTION = 20163;
lime.net.curl._CURLOption.CURLOption_Impl_.OPENSOCKETDATA = 10164;
lime.net.curl._CURLOption.CURLOption_Impl_.COPYPOSTFIELDS = 10165;
lime.net.curl._CURLOption.CURLOption_Impl_.PROXY_TRANSFER_MODE = 166;
lime.net.curl._CURLOption.CURLOption_Impl_.SEEKFUNCTION = 20167;
lime.net.curl._CURLOption.CURLOption_Impl_.SEEKDATA = 10168;
lime.net.curl._CURLOption.CURLOption_Impl_.CRLFILE = 10169;
lime.net.curl._CURLOption.CURLOption_Impl_.ISSUERCERT = 10170;
lime.net.curl._CURLOption.CURLOption_Impl_.ADDRESS_SCOPE = 171;
lime.net.curl._CURLOption.CURLOption_Impl_.CERTINFO = 172;
lime.net.curl._CURLOption.CURLOption_Impl_.USERNAME = 10173;
lime.net.curl._CURLOption.CURLOption_Impl_.PASSWORD = 10174;
lime.net.curl._CURLOption.CURLOption_Impl_.PROXYUSERNAME = 10175;
lime.net.curl._CURLOption.CURLOption_Impl_.PROXYPASSWORD = 10176;
lime.net.curl._CURLOption.CURLOption_Impl_.NOPROXY = 10177;
lime.net.curl._CURLOption.CURLOption_Impl_.TFTP_BLKSIZE = 178;
lime.net.curl._CURLOption.CURLOption_Impl_.SOCKS5_GSSAPI_SERVICE = 10179;
lime.net.curl._CURLOption.CURLOption_Impl_.SOCKS5_GSSAPI_NEC = 180;
lime.net.curl._CURLOption.CURLOption_Impl_.PROTOCOLS = 181;
lime.net.curl._CURLOption.CURLOption_Impl_.REDIR_PROTOCOLS = 182;
lime.net.curl._CURLOption.CURLOption_Impl_.SSH_KNOWNHOSTS = 10183;
lime.net.curl._CURLOption.CURLOption_Impl_.SSH_KEYFUNCTION = 20184;
lime.net.curl._CURLOption.CURLOption_Impl_.SSH_KEYDATA = 10185;
lime.net.curl._CURLOption.CURLOption_Impl_.MAIL_FROM = 10186;
lime.net.curl._CURLOption.CURLOption_Impl_.MAIL_RCPT = 10187;
lime.net.curl._CURLOption.CURLOption_Impl_.FTP_USE_PRET = 188;
lime.net.curl._CURLOption.CURLOption_Impl_.RTSP_REQUEST = 189;
lime.net.curl._CURLOption.CURLOption_Impl_.RTSP_SESSION_ID = 10190;
lime.net.curl._CURLOption.CURLOption_Impl_.RTSP_STREAM_URI = 10191;
lime.net.curl._CURLOption.CURLOption_Impl_.RTSP_TRANSPORT = 10192;
lime.net.curl._CURLOption.CURLOption_Impl_.RTSP_CLIENT_CSEQ = 193;
lime.net.curl._CURLOption.CURLOption_Impl_.RTSP_SERVER_CSEQ = 194;
lime.net.curl._CURLOption.CURLOption_Impl_.INTERLEAVEDATA = 10195;
lime.net.curl._CURLOption.CURLOption_Impl_.INTERLEAVEFUNCTION = 20196;
lime.net.curl._CURLOption.CURLOption_Impl_.WILDCARDMATCH = 197;
lime.net.curl._CURLOption.CURLOption_Impl_.CHUNK_BGN_FUNCTION = 20198;
lime.net.curl._CURLOption.CURLOption_Impl_.CHUNK_END_FUNCTION = 20199;
lime.net.curl._CURLOption.CURLOption_Impl_.FNMATCH_FUNCTION = 20200;
lime.net.curl._CURLOption.CURLOption_Impl_.CHUNK_DATA = 10201;
lime.net.curl._CURLOption.CURLOption_Impl_.FNMATCH_DATA = 10202;
lime.net.curl._CURLOption.CURLOption_Impl_.RESOLVE = 10203;
lime.net.curl._CURLOption.CURLOption_Impl_.TLSAUTH_USERNAME = 10204;
lime.net.curl._CURLOption.CURLOption_Impl_.TLSAUTH_PASSWORD = 10205;
lime.net.curl._CURLOption.CURLOption_Impl_.TLSAUTH_TYPE = 10206;
lime.net.curl._CURLOption.CURLOption_Impl_.TRANSFER_ENCODING = 207;
lime.net.curl._CURLOption.CURLOption_Impl_.CLOSESOCKETFUNCTION = 20208;
lime.net.curl._CURLOption.CURLOption_Impl_.CLOSESOCKETDATA = 10209;
lime.net.curl._CURLOption.CURLOption_Impl_.GSSAPI_DELEGATION = 210;
lime.net.curl._CURLOption.CURLOption_Impl_.DNS_SERVERS = 10211;
lime.net.curl._CURLOption.CURLOption_Impl_.ACCEPTTIMEOUT_MS = 212;
lime.net.curl._CURLOption.CURLOption_Impl_.TCP_KEEPALIVE = 213;
lime.net.curl._CURLOption.CURLOption_Impl_.TCP_KEEPIDLE = 214;
lime.net.curl._CURLOption.CURLOption_Impl_.TCP_KEEPINTVL = 215;
lime.net.curl._CURLOption.CURLOption_Impl_.SSL_OPTIONS = 216;
lime.net.curl._CURLOption.CURLOption_Impl_.MAIL_AUTH = 10217;
lime.net.curl._CURLOption.CURLOption_Impl_.SASL_IR = 218;
lime.net.curl._CURLOption.CURLOption_Impl_.XFERINFOFUNCTION = 20219;
lime.net.curl._CURLOption.CURLOption_Impl_.XOAUTH2_BEARER = 10220;
lime.net.curl._CURLOption.CURLOption_Impl_.DNS_INTERFACE = 10221;
lime.net.curl._CURLOption.CURLOption_Impl_.DNS_LOCAL_IP4 = 10222;
lime.net.curl._CURLOption.CURLOption_Impl_.DNS_LOCAL_IP6 = 10223;
lime.net.curl._CURLOption.CURLOption_Impl_.LOGIN_OPTIONS = 10224;
lime.net.curl._CURLVersion.CURLVersion_Impl_.FIRST = 0;
lime.net.curl._CURLVersion.CURLVersion_Impl_.SECOND = 1;
lime.net.curl._CURLVersion.CURLVersion_Impl_.THIRD = 2;
lime.net.curl._CURLVersion.CURLVersion_Impl_.FOURTH = 3;
lime.system.System.__moduleNames = null;
lime.ui._KeyCode.KeyCode_Impl_.UNKNOWN = 0;
lime.ui._KeyCode.KeyCode_Impl_.BACKSPACE = 8;
lime.ui._KeyCode.KeyCode_Impl_.TAB = 9;
lime.ui._KeyCode.KeyCode_Impl_.RETURN = 13;
lime.ui._KeyCode.KeyCode_Impl_.ESCAPE = 27;
lime.ui._KeyCode.KeyCode_Impl_.SPACE = 32;
lime.ui._KeyCode.KeyCode_Impl_.EXCLAMATION = 33;
lime.ui._KeyCode.KeyCode_Impl_.QUOTE = 34;
lime.ui._KeyCode.KeyCode_Impl_.HASH = 35;
lime.ui._KeyCode.KeyCode_Impl_.DOLLAR = 36;
lime.ui._KeyCode.KeyCode_Impl_.PERCENT = 37;
lime.ui._KeyCode.KeyCode_Impl_.AMPERSAND = 38;
lime.ui._KeyCode.KeyCode_Impl_.SINGLE_QUOTE = 39;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_PARENTHESIS = 40;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_PARENTHESIS = 41;
lime.ui._KeyCode.KeyCode_Impl_.ASTERISK = 42;
lime.ui._KeyCode.KeyCode_Impl_.PLUS = 43;
lime.ui._KeyCode.KeyCode_Impl_.COMMA = 44;
lime.ui._KeyCode.KeyCode_Impl_.MINUS = 45;
lime.ui._KeyCode.KeyCode_Impl_.PERIOD = 46;
lime.ui._KeyCode.KeyCode_Impl_.SLASH = 47;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_0 = 48;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_1 = 49;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_2 = 50;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_3 = 51;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_4 = 52;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_5 = 53;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_6 = 54;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_7 = 55;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_8 = 56;
lime.ui._KeyCode.KeyCode_Impl_.NUMBER_9 = 57;
lime.ui._KeyCode.KeyCode_Impl_.COLON = 58;
lime.ui._KeyCode.KeyCode_Impl_.SEMICOLON = 59;
lime.ui._KeyCode.KeyCode_Impl_.LESS_THAN = 60;
lime.ui._KeyCode.KeyCode_Impl_.EQUALS = 61;
lime.ui._KeyCode.KeyCode_Impl_.GREATER_THAN = 62;
lime.ui._KeyCode.KeyCode_Impl_.QUESTION = 63;
lime.ui._KeyCode.KeyCode_Impl_.AT = 64;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_BRACKET = 91;
lime.ui._KeyCode.KeyCode_Impl_.BACKSLASH = 92;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_BRACKET = 93;
lime.ui._KeyCode.KeyCode_Impl_.CARET = 94;
lime.ui._KeyCode.KeyCode_Impl_.UNDERSCORE = 95;
lime.ui._KeyCode.KeyCode_Impl_.GRAVE = 96;
lime.ui._KeyCode.KeyCode_Impl_.A = 97;
lime.ui._KeyCode.KeyCode_Impl_.B = 98;
lime.ui._KeyCode.KeyCode_Impl_.C = 99;
lime.ui._KeyCode.KeyCode_Impl_.D = 100;
lime.ui._KeyCode.KeyCode_Impl_.E = 101;
lime.ui._KeyCode.KeyCode_Impl_.F = 102;
lime.ui._KeyCode.KeyCode_Impl_.G = 103;
lime.ui._KeyCode.KeyCode_Impl_.H = 104;
lime.ui._KeyCode.KeyCode_Impl_.I = 105;
lime.ui._KeyCode.KeyCode_Impl_.J = 106;
lime.ui._KeyCode.KeyCode_Impl_.K = 107;
lime.ui._KeyCode.KeyCode_Impl_.L = 108;
lime.ui._KeyCode.KeyCode_Impl_.M = 109;
lime.ui._KeyCode.KeyCode_Impl_.N = 110;
lime.ui._KeyCode.KeyCode_Impl_.O = 111;
lime.ui._KeyCode.KeyCode_Impl_.P = 112;
lime.ui._KeyCode.KeyCode_Impl_.Q = 113;
lime.ui._KeyCode.KeyCode_Impl_.R = 114;
lime.ui._KeyCode.KeyCode_Impl_.S = 115;
lime.ui._KeyCode.KeyCode_Impl_.T = 116;
lime.ui._KeyCode.KeyCode_Impl_.U = 117;
lime.ui._KeyCode.KeyCode_Impl_.V = 118;
lime.ui._KeyCode.KeyCode_Impl_.W = 119;
lime.ui._KeyCode.KeyCode_Impl_.X = 120;
lime.ui._KeyCode.KeyCode_Impl_.Y = 121;
lime.ui._KeyCode.KeyCode_Impl_.Z = 122;
lime.ui._KeyCode.KeyCode_Impl_.DELETE = 127;
lime.ui._KeyCode.KeyCode_Impl_.CAPS_LOCK = 1073741881;
lime.ui._KeyCode.KeyCode_Impl_.F1 = 1073741882;
lime.ui._KeyCode.KeyCode_Impl_.F2 = 1073741883;
lime.ui._KeyCode.KeyCode_Impl_.F3 = 1073741884;
lime.ui._KeyCode.KeyCode_Impl_.F4 = 1073741885;
lime.ui._KeyCode.KeyCode_Impl_.F5 = 1073741886;
lime.ui._KeyCode.KeyCode_Impl_.F6 = 1073741887;
lime.ui._KeyCode.KeyCode_Impl_.F7 = 1073741888;
lime.ui._KeyCode.KeyCode_Impl_.F8 = 1073741889;
lime.ui._KeyCode.KeyCode_Impl_.F9 = 1073741890;
lime.ui._KeyCode.KeyCode_Impl_.F10 = 1073741891;
lime.ui._KeyCode.KeyCode_Impl_.F11 = 1073741892;
lime.ui._KeyCode.KeyCode_Impl_.F12 = 1073741893;
lime.ui._KeyCode.KeyCode_Impl_.PRINT_SCREEN = 1073741894;
lime.ui._KeyCode.KeyCode_Impl_.SCROLL_LOCK = 1073741895;
lime.ui._KeyCode.KeyCode_Impl_.PAUSE = 1073741896;
lime.ui._KeyCode.KeyCode_Impl_.INSERT = 1073741897;
lime.ui._KeyCode.KeyCode_Impl_.HOME = 1073741898;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_UP = 1073741899;
lime.ui._KeyCode.KeyCode_Impl_.END = 1073741901;
lime.ui._KeyCode.KeyCode_Impl_.PAGE_DOWN = 1073741902;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT = 1073741903;
lime.ui._KeyCode.KeyCode_Impl_.LEFT = 1073741904;
lime.ui._KeyCode.KeyCode_Impl_.DOWN = 1073741905;
lime.ui._KeyCode.KeyCode_Impl_.UP = 1073741906;
lime.ui._KeyCode.KeyCode_Impl_.NUM_LOCK = 1073741907;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DIVIDE = 1073741908;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MULTIPLY = 1073741909;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MINUS = 1073741910;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS = 1073741911;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_ENTER = 1073741912;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_1 = 1073741913;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_2 = 1073741914;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_3 = 1073741915;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_4 = 1073741916;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_5 = 1073741917;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_6 = 1073741918;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_7 = 1073741919;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_8 = 1073741920;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_9 = 1073741921;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_0 = 1073741922;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERIOD = 1073741923;
lime.ui._KeyCode.KeyCode_Impl_.APPLICATION = 1073741925;
lime.ui._KeyCode.KeyCode_Impl_.POWER = 1073741926;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EQUALS = 1073741927;
lime.ui._KeyCode.KeyCode_Impl_.F13 = 1073741928;
lime.ui._KeyCode.KeyCode_Impl_.F14 = 1073741929;
lime.ui._KeyCode.KeyCode_Impl_.F15 = 1073741930;
lime.ui._KeyCode.KeyCode_Impl_.F16 = 1073741931;
lime.ui._KeyCode.KeyCode_Impl_.F17 = 1073741932;
lime.ui._KeyCode.KeyCode_Impl_.F18 = 1073741933;
lime.ui._KeyCode.KeyCode_Impl_.F19 = 1073741934;
lime.ui._KeyCode.KeyCode_Impl_.F20 = 1073741935;
lime.ui._KeyCode.KeyCode_Impl_.F21 = 1073741936;
lime.ui._KeyCode.KeyCode_Impl_.F22 = 1073741937;
lime.ui._KeyCode.KeyCode_Impl_.F23 = 1073741938;
lime.ui._KeyCode.KeyCode_Impl_.F24 = 1073741939;
lime.ui._KeyCode.KeyCode_Impl_.EXECUTE = 1073741940;
lime.ui._KeyCode.KeyCode_Impl_.HELP = 1073741941;
lime.ui._KeyCode.KeyCode_Impl_.MENU = 1073741942;
lime.ui._KeyCode.KeyCode_Impl_.SELECT = 1073741943;
lime.ui._KeyCode.KeyCode_Impl_.STOP = 1073741944;
lime.ui._KeyCode.KeyCode_Impl_.AGAIN = 1073741945;
lime.ui._KeyCode.KeyCode_Impl_.UNDO = 1073741946;
lime.ui._KeyCode.KeyCode_Impl_.CUT = 1073741947;
lime.ui._KeyCode.KeyCode_Impl_.COPY = 1073741948;
lime.ui._KeyCode.KeyCode_Impl_.PASTE = 1073741949;
lime.ui._KeyCode.KeyCode_Impl_.FIND = 1073741950;
lime.ui._KeyCode.KeyCode_Impl_.MUTE = 1073741951;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_UP = 1073741952;
lime.ui._KeyCode.KeyCode_Impl_.VOLUME_DOWN = 1073741953;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COMMA = 1073741957;
lime.ui._KeyCode.KeyCode_Impl_.ALT_ERASE = 1073741977;
lime.ui._KeyCode.KeyCode_Impl_.SYSTEM_REQUEST = 1073741978;
lime.ui._KeyCode.KeyCode_Impl_.CANCEL = 1073741979;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR = 1073741980;
lime.ui._KeyCode.KeyCode_Impl_.PRIOR = 1073741981;
lime.ui._KeyCode.KeyCode_Impl_.RETURN2 = 1073741982;
lime.ui._KeyCode.KeyCode_Impl_.SEPARATOR = 1073741983;
lime.ui._KeyCode.KeyCode_Impl_.OUT = 1073741984;
lime.ui._KeyCode.KeyCode_Impl_.OPER = 1073741985;
lime.ui._KeyCode.KeyCode_Impl_.CLEAR_AGAIN = 1073741986;
lime.ui._KeyCode.KeyCode_Impl_.CRSEL = 1073741987;
lime.ui._KeyCode.KeyCode_Impl_.EXSEL = 1073741988;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_00 = 1073742000;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_000 = 1073742001;
lime.ui._KeyCode.KeyCode_Impl_.THOUSAND_SEPARATOR = 1073742002;
lime.ui._KeyCode.KeyCode_Impl_.DECIMAL_SEPARATOR = 1073742003;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_UNIT = 1073742004;
lime.ui._KeyCode.KeyCode_Impl_.CURRENCY_SUBUNIT = 1073742005;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LEFT_BRACE = 1073742008;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_RIGHT_BRACE = 1073742009;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_TAB = 1073742010;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BACKSPACE = 1073742011;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_A = 1073742012;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_B = 1073742013;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_C = 1073742014;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_D = 1073742015;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_E = 1073742016;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_F = 1073742017;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_XOR = 1073742018;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_POWER = 1073742019;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PERCENT = 1073742020;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_LESS_THAN = 1073742021;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_GREATER_THAN = 1073742022;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AMPERSAND = 1073742023;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_VERTICAL_BAR = 1073742025;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_COLON = 1073742027;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HASH = 1073742028;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_SPACE = 1073742029;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_AT = 1073742030;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_EXCLAMATION = 1073742031;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_STORE = 1073742032;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_RECALL = 1073742033;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_CLEAR = 1073742034;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_ADD = 1073742035;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_SUBTRACT = 1073742036;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_MULTIPLY = 1073742037;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_MEM_DIVIDE = 1073742038;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_PLUS_MINUS = 1073742039;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR = 1073742040;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_CLEAR_ENTRY = 1073742041;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_BINARY = 1073742042;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_OCTAL = 1073742043;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_DECIMAL = 1073742044;
lime.ui._KeyCode.KeyCode_Impl_.NUMPAD_HEXADECIMAL = 1073742045;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_CTRL = 1073742048;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_SHIFT = 1073742049;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_ALT = 1073742050;
lime.ui._KeyCode.KeyCode_Impl_.LEFT_META = 1073742051;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_CTRL = 1073742052;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_SHIFT = 1073742053;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_ALT = 1073742054;
lime.ui._KeyCode.KeyCode_Impl_.RIGHT_META = 1073742055;
lime.ui._KeyCode.KeyCode_Impl_.MODE = 1073742081;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_NEXT = 1073742082;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PREVIOUS = 1073742083;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_STOP = 1073742084;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_PLAY = 1073742085;
lime.ui._KeyCode.KeyCode_Impl_.AUDIO_MUTE = 1073742086;
lime.ui._KeyCode.KeyCode_Impl_.MEDIA_SELECT = 1073742087;
lime.ui._KeyCode.KeyCode_Impl_.WWW = 1073742088;
lime.ui._KeyCode.KeyCode_Impl_.MAIL = 1073742089;
lime.ui._KeyCode.KeyCode_Impl_.CALCULATOR = 1073742090;
lime.ui._KeyCode.KeyCode_Impl_.COMPUTER = 1073742091;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_SEARCH = 1073742092;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_HOME = 1073742093;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BACK = 1073742094;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_FORWARD = 1073742095;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_STOP = 1073742096;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_REFRESH = 1073742097;
lime.ui._KeyCode.KeyCode_Impl_.APP_CONTROL_BOOKMARKS = 1073742098;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_DOWN = 1073742099;
lime.ui._KeyCode.KeyCode_Impl_.BRIGHTNESS_UP = 1073742100;
lime.ui._KeyCode.KeyCode_Impl_.DISPLAY_SWITCH = 1073742101;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_TOGGLE = 1073742102;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_DOWN = 1073742103;
lime.ui._KeyCode.KeyCode_Impl_.BACKLIGHT_UP = 1073742104;
lime.ui._KeyCode.KeyCode_Impl_.EJECT = 1073742105;
lime.ui._KeyCode.KeyCode_Impl_.SLEEP = 1073742106;
lime.ui.KeyEventManager.onKeyDown = new lime.app.Event();
lime.ui.KeyEventManager.onKeyUp = new lime.app.Event();
lime.ui.MouseEventManager.onMouseDown = new lime.app.Event();
lime.ui.MouseEventManager.onMouseMove = new lime.app.Event();
lime.ui.MouseEventManager.onMouseUp = new lime.app.Event();
lime.ui.MouseEventManager.onMouseWheel = new lime.app.Event();
lime.ui.TouchEventManager.onTouchEnd = new lime.app.Event();
lime.ui.TouchEventManager.onTouchMove = new lime.app.Event();
lime.ui.TouchEventManager.onTouchStart = new lime.app.Event();
lime.ui.Window.onWindowActivate = new lime.app.Event();
lime.ui.Window.onWindowClose = new lime.app.Event();
lime.ui.Window.onWindowDeactivate = new lime.app.Event();
lime.ui.Window.onWindowFocusIn = new lime.app.Event();
lime.ui.Window.onWindowFocusOut = new lime.app.Event();
lime.ui.Window.onWindowMove = new lime.app.Event();
lime.ui.Window.onWindowResize = new lime.app.Event();
lime.utils.ByteArray.lime_byte_array_overwrite_file = lime.system.System.load("lime","lime_byte_array_overwrite_file",2);
lime.utils.ByteArray.lime_byte_array_read_file = lime.system.System.load("lime","lime_byte_array_read_file",1);
lime.utils.ByteArray.lime_lzma_decode = lime.system.System.load("lime","lime_lzma_decode",1);
lime.utils.ByteArray.lime_lzma_encode = lime.system.System.load("lime","lime_lzma_encode",1);
motion.actuators.SimpleActuator.actuators = new Array();
motion.actuators.SimpleActuator.actuatorsLength = 0;
motion.actuators.SimpleActuator.addedEvent = false;
motion.Actuate.defaultActuator = motion.actuators.SimpleActuator;
motion.Actuate.defaultEase = motion.easing.Expo.get_easeOut();
motion.Actuate.targetLibraries = new haxe.ds.ObjectMap();
openfl.Assets.cache = new openfl.AssetCache();
openfl.Assets.dispatcher = new openfl.events.EventDispatcher();
openfl._Assets.AssetType_Impl_.BINARY = "BINARY";
openfl._Assets.AssetType_Impl_.FONT = "FONT";
openfl._Assets.AssetType_Impl_.IMAGE = "IMAGE";
openfl._Assets.AssetType_Impl_.MOVIE_CLIP = "MOVIE_CLIP";
openfl._Assets.AssetType_Impl_.MUSIC = "MUSIC";
openfl._Assets.AssetType_Impl_.SOUND = "SOUND";
openfl._Assets.AssetType_Impl_.TEMPLATE = "TEMPLATE";
openfl._Assets.AssetType_Impl_.TEXT = "TEXT";
openfl.system.ApplicationDomain.currentDomain = new openfl.system.ApplicationDomain(null);
openfl.geom.Matrix.__identity = new openfl.geom.Matrix();
openfl.Lib.current = new openfl.display.MovieClip();
openfl.Lib.__sentWarnings = new haxe.ds.StringMap();
openfl.Lib.__startTime = haxe.Timer.stamp();
openfl._internal.renderer.canvas.CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl._internal.renderer.canvas.CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl._internal.renderer.opengl.GLRenderer.blendModesWebGL = null;
openfl._internal.renderer.opengl.GLRenderer.glContextId = 0;
openfl._internal.renderer.opengl.GLRenderer.glContexts = [];
openfl._internal.renderer.opengl.shaders.AbstractShader.__UID = 0;
openfl._internal.renderer.opengl.shaders.DefaultShader.defaultVertexSrc = ["attribute vec2 aVertexPosition;","attribute vec2 aTextureCoord;","attribute vec2 aColor;","uniform vec2 projectionVector;","uniform vec2 offsetVector;","varying vec2 vTextureCoord;","varying vec4 vColor;","const vec2 center = vec2(-1.0, 1.0);","void main(void) {","   gl_Position = vec4( ((aVertexPosition + offsetVector) / projectionVector) + center , 0.0, 1.0);","   vTextureCoord = aTextureCoord;","   vec3 color = mod(vec3(aColor.y/65536.0, aColor.y/256.0, aColor.y), 256.0) / 256.0;","   vColor = vec4(color * aColor.x, aColor.x);","}"];
openfl._internal.renderer.opengl.utils.PathBuiler.__fillIndex = 0;
openfl._internal.renderer.opengl.utils.GraphicsRenderer.graphicsDataPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.bucketPool = [];
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectPosition = new openfl.geom.Point();
openfl._internal.renderer.opengl.utils.GraphicsRenderer.objectBounds = new openfl.geom.Rectangle();
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.DEFAULT = 0;
openfl._internal.renderer.opengl.utils._GraphicsRenderer.RenderMode_Impl_.STENCIL = 1;
openfl.display.Graphics.TILE_SCALE = 1;
openfl.display.Graphics.TILE_ROTATION = 2;
openfl.display.Graphics.TILE_RGB = 4;
openfl.display.Graphics.TILE_ALPHA = 8;
openfl.display.Graphics.TILE_TRANS_2x2 = 16;
openfl.display.Graphics.TILE_RECT = 32;
openfl.display.Graphics.TILE_ORIGIN = 64;
openfl.display.Graphics.TILE_BLEND_NORMAL = 0;
openfl.display.Graphics.TILE_BLEND_ADD = 65536;
openfl.display.GraphicsPathCommand.LINE_TO = 2;
openfl.display.GraphicsPathCommand.MOVE_TO = 1;
openfl.display.GraphicsPathCommand.CURVE_TO = 3;
openfl.display.GraphicsPathCommand.WIDE_LINE_TO = 5;
openfl.display.GraphicsPathCommand.WIDE_MOVE_TO = 4;
openfl.display.GraphicsPathCommand.NO_OP = 0;
openfl.display.GraphicsPathCommand.CUBIC_CURVE_TO = 6;
openfl.display.OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl.display.OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl.display.Tilesheet.TILE_SCALE = 1;
openfl.display.Tilesheet.TILE_ROTATION = 2;
openfl.display.Tilesheet.TILE_RGB = 4;
openfl.display.Tilesheet.TILE_ALPHA = 8;
openfl.display.Tilesheet.TILE_TRANS_2x2 = 16;
openfl.display.Tilesheet.TILE_RECT = 32;
openfl.display.Tilesheet.TILE_ORIGIN = 64;
openfl.display.Tilesheet.TILE_BLEND_NORMAL = 0;
openfl.display.Tilesheet.TILE_BLEND_ADD = 65536;
openfl.display.Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl.display.Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl.display.Tilesheet.__defaultPoint = new openfl.geom.Point(0,0);
openfl.display3D.Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl.display3D.Context3D.MAX_SAMPLERS = 8;
openfl.display3D.Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl.display3D.Context3D.anisotropySupportTested = false;
openfl.display3D.Context3D.supportsAnisotropy = false;
openfl.display3D.Context3D.maxSupportedAnisotropy = 256;
openfl.display3D.Context3DClearMask.ALL = 17664;
openfl.display3D.Context3DClearMask.COLOR = 16384;
openfl.display3D.Context3DClearMask.DEPTH = 256;
openfl.display3D.Context3DClearMask.STENCIL = 1024;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.BACK = 1028;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT = 1029;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.FRONT_AND_BACK = 1032;
openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_.NONE = 0;
openfl.errors.Error.DEFAULT_TO_STRING = "Error";
openfl.events.TextEvent.LINK = "link";
openfl.events.TextEvent.TEXT_INPUT = "textInput";
openfl.events.ErrorEvent.ERROR = "error";
openfl.events.FocusEvent.FOCUS_IN = "focusIn";
openfl.events.FocusEvent.FOCUS_OUT = "focusOut";
openfl.events.FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl.events.FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl.events.HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl.events.IOErrorEvent.IO_ERROR = "ioError";
openfl.events.KeyboardEvent.KEY_DOWN = "keyDown";
openfl.events.KeyboardEvent.KEY_UP = "keyUp";
openfl.events.MouseEvent.CLICK = "click";
openfl.events.MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl.events.MouseEvent.MIDDLE_CLICK = "middleClick";
openfl.events.MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl.events.MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl.events.MouseEvent.MOUSE_DOWN = "mouseDown";
openfl.events.MouseEvent.MOUSE_MOVE = "mouseMove";
openfl.events.MouseEvent.MOUSE_OUT = "mouseOut";
openfl.events.MouseEvent.MOUSE_OVER = "mouseOver";
openfl.events.MouseEvent.MOUSE_UP = "mouseUp";
openfl.events.MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl.events.MouseEvent.RIGHT_CLICK = "rightClick";
openfl.events.MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl.events.MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl.events.MouseEvent.ROLL_OUT = "rollOut";
openfl.events.MouseEvent.ROLL_OVER = "rollOver";
openfl.events.MouseEvent.__buttonDown = [false,false,false];
openfl.events.ProgressEvent.PROGRESS = "progress";
openfl.events.ProgressEvent.SOCKET_DATA = "socketData";
openfl.events.SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl.events.TimerEvent.TIMER = "timer";
openfl.events.TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl.events.TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl.events.TouchEvent.TOUCH_END = "touchEnd";
openfl.events.TouchEvent.TOUCH_MOVE = "touchMove";
openfl.events.TouchEvent.TOUCH_OUT = "touchOut";
openfl.events.TouchEvent.TOUCH_OVER = "touchOver";
openfl.events.TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl.events.TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl.events.TouchEvent.TOUCH_TAP = "touchTap";
openfl.filters.BitmapFilterQuality.HIGH = 3;
openfl.filters.BitmapFilterQuality.MEDIUM = 2;
openfl.filters.BitmapFilterQuality.LOW = 1;
openfl.media.Sound.__registeredSounds = new haxe.ds.StringMap();
openfl.net.URLRequestMethod.DELETE = "DELETE";
openfl.net.URLRequestMethod.GET = "GET";
openfl.net.URLRequestMethod.HEAD = "HEAD";
openfl.net.URLRequestMethod.OPTIONS = "OPTIONS";
openfl.net.URLRequestMethod.POST = "POST";
openfl.net.URLRequestMethod.PUT = "PUT";
openfl.system.Capabilities.avHardwareDisable = true;
openfl.system.Capabilities.cpuArchitecture = "";
openfl.system.Capabilities.hasAccessibility = false;
openfl.system.Capabilities.hasAudio = true;
openfl.system.Capabilities.hasAudioEncoder = false;
openfl.system.Capabilities.hasEmbeddedVideo = false;
openfl.system.Capabilities.hasIME = false;
openfl.system.Capabilities.hasMP3 = false;
openfl.system.Capabilities.hasPrinting = false;
openfl.system.Capabilities.hasScreenBroadcast = false;
openfl.system.Capabilities.hasScreenPlayback = false;
openfl.system.Capabilities.hasStreamingAudio = false;
openfl.system.Capabilities.hasStreamingVideo = false;
openfl.system.Capabilities.hasTLS = true;
openfl.system.Capabilities.hasVideoEncoder = false;
openfl.system.Capabilities.isDebugger = true;
openfl.system.Capabilities.isEmbeddedInAcrobat = false;
openfl.system.Capabilities.localFileReadDisable = true;
openfl.system.Capabilities.manufacturer = "OpenFL Contributors";
openfl.system.Capabilities.maxLevelIDC = 0;
openfl.system.Capabilities.playerType = "OpenFL";
openfl.system.Capabilities.screenColor = "color";
openfl.system.Capabilities.serverString = "";
openfl.system.Capabilities.supports32BitProcesses = false;
openfl.system.Capabilities.supports64BitProcesses = false;
openfl.system.Capabilities.touchscreenType = openfl.system.TouchscreenType.FINGER;
openfl.system.Capabilities.version = "";
openfl.system.SecurityDomain.currentDomain = new openfl.system.SecurityDomain();
openfl.ui._KeyLocation.KeyLocation_Impl_.STANDARD = 0;
openfl.ui._KeyLocation.KeyLocation_Impl_.LEFT = 1;
openfl.ui._KeyLocation.KeyLocation_Impl_.RIGHT = 2;
openfl.ui._KeyLocation.KeyLocation_Impl_.NUM_PAD = 3;
openfl.ui.Keyboard.NUMBER_0 = 48;
openfl.ui.Keyboard.NUMBER_1 = 49;
openfl.ui.Keyboard.NUMBER_2 = 50;
openfl.ui.Keyboard.NUMBER_3 = 51;
openfl.ui.Keyboard.NUMBER_4 = 52;
openfl.ui.Keyboard.NUMBER_5 = 53;
openfl.ui.Keyboard.NUMBER_6 = 54;
openfl.ui.Keyboard.NUMBER_7 = 55;
openfl.ui.Keyboard.NUMBER_8 = 56;
openfl.ui.Keyboard.NUMBER_9 = 57;
openfl.ui.Keyboard.A = 65;
openfl.ui.Keyboard.B = 66;
openfl.ui.Keyboard.C = 67;
openfl.ui.Keyboard.D = 68;
openfl.ui.Keyboard.E = 69;
openfl.ui.Keyboard.F = 70;
openfl.ui.Keyboard.G = 71;
openfl.ui.Keyboard.H = 72;
openfl.ui.Keyboard.I = 73;
openfl.ui.Keyboard.J = 74;
openfl.ui.Keyboard.K = 75;
openfl.ui.Keyboard.L = 76;
openfl.ui.Keyboard.M = 77;
openfl.ui.Keyboard.N = 78;
openfl.ui.Keyboard.O = 79;
openfl.ui.Keyboard.P = 80;
openfl.ui.Keyboard.Q = 81;
openfl.ui.Keyboard.R = 82;
openfl.ui.Keyboard.S = 83;
openfl.ui.Keyboard.T = 84;
openfl.ui.Keyboard.U = 85;
openfl.ui.Keyboard.V = 86;
openfl.ui.Keyboard.W = 87;
openfl.ui.Keyboard.X = 88;
openfl.ui.Keyboard.Y = 89;
openfl.ui.Keyboard.Z = 90;
openfl.ui.Keyboard.NUMPAD_0 = 96;
openfl.ui.Keyboard.NUMPAD_1 = 97;
openfl.ui.Keyboard.NUMPAD_2 = 98;
openfl.ui.Keyboard.NUMPAD_3 = 99;
openfl.ui.Keyboard.NUMPAD_4 = 100;
openfl.ui.Keyboard.NUMPAD_5 = 101;
openfl.ui.Keyboard.NUMPAD_6 = 102;
openfl.ui.Keyboard.NUMPAD_7 = 103;
openfl.ui.Keyboard.NUMPAD_8 = 104;
openfl.ui.Keyboard.NUMPAD_9 = 105;
openfl.ui.Keyboard.NUMPAD_MULTIPLY = 106;
openfl.ui.Keyboard.NUMPAD_ADD = 107;
openfl.ui.Keyboard.NUMPAD_ENTER = 108;
openfl.ui.Keyboard.NUMPAD_SUBTRACT = 109;
openfl.ui.Keyboard.NUMPAD_DECIMAL = 110;
openfl.ui.Keyboard.NUMPAD_DIVIDE = 111;
openfl.ui.Keyboard.F1 = 112;
openfl.ui.Keyboard.F2 = 113;
openfl.ui.Keyboard.F3 = 114;
openfl.ui.Keyboard.F4 = 115;
openfl.ui.Keyboard.F5 = 116;
openfl.ui.Keyboard.F6 = 117;
openfl.ui.Keyboard.F7 = 118;
openfl.ui.Keyboard.F8 = 119;
openfl.ui.Keyboard.F9 = 120;
openfl.ui.Keyboard.F10 = 121;
openfl.ui.Keyboard.F11 = 122;
openfl.ui.Keyboard.F12 = 123;
openfl.ui.Keyboard.F13 = 124;
openfl.ui.Keyboard.F14 = 125;
openfl.ui.Keyboard.F15 = 126;
openfl.ui.Keyboard.BACKSPACE = 8;
openfl.ui.Keyboard.TAB = 9;
openfl.ui.Keyboard.ALTERNATE = 18;
openfl.ui.Keyboard.ENTER = 13;
openfl.ui.Keyboard.COMMAND = 15;
openfl.ui.Keyboard.SHIFT = 16;
openfl.ui.Keyboard.CONTROL = 17;
openfl.ui.Keyboard.CAPS_LOCK = 20;
openfl.ui.Keyboard.NUMPAD = 21;
openfl.ui.Keyboard.ESCAPE = 27;
openfl.ui.Keyboard.SPACE = 32;
openfl.ui.Keyboard.PAGE_UP = 33;
openfl.ui.Keyboard.PAGE_DOWN = 34;
openfl.ui.Keyboard.END = 35;
openfl.ui.Keyboard.HOME = 36;
openfl.ui.Keyboard.LEFT = 37;
openfl.ui.Keyboard.RIGHT = 39;
openfl.ui.Keyboard.UP = 38;
openfl.ui.Keyboard.DOWN = 40;
openfl.ui.Keyboard.INSERT = 45;
openfl.ui.Keyboard.DELETE = 46;
openfl.ui.Keyboard.NUMLOCK = 144;
openfl.ui.Keyboard.BREAK = 19;
openfl.ui.Keyboard.SEMICOLON = 186;
openfl.ui.Keyboard.EQUAL = 187;
openfl.ui.Keyboard.COMMA = 188;
openfl.ui.Keyboard.MINUS = 189;
openfl.ui.Keyboard.PERIOD = 190;
openfl.ui.Keyboard.SLASH = 191;
openfl.ui.Keyboard.BACKQUOTE = 192;
openfl.ui.Keyboard.LEFTBRACKET = 219;
openfl.ui.Keyboard.BACKSLASH = 220;
openfl.ui.Keyboard.RIGHTBRACKET = 221;
openfl.ui.Keyboard.QUOTE = 222;
openfl.ui.Keyboard.DOM_VK_CANCEL = 3;
openfl.ui.Keyboard.DOM_VK_HELP = 6;
openfl.ui.Keyboard.DOM_VK_BACK_SPACE = 8;
openfl.ui.Keyboard.DOM_VK_TAB = 9;
openfl.ui.Keyboard.DOM_VK_CLEAR = 12;
openfl.ui.Keyboard.DOM_VK_RETURN = 13;
openfl.ui.Keyboard.DOM_VK_ENTER = 14;
openfl.ui.Keyboard.DOM_VK_SHIFT = 16;
openfl.ui.Keyboard.DOM_VK_CONTROL = 17;
openfl.ui.Keyboard.DOM_VK_ALT = 18;
openfl.ui.Keyboard.DOM_VK_PAUSE = 19;
openfl.ui.Keyboard.DOM_VK_CAPS_LOCK = 20;
openfl.ui.Keyboard.DOM_VK_ESCAPE = 27;
openfl.ui.Keyboard.DOM_VK_SPACE = 32;
openfl.ui.Keyboard.DOM_VK_PAGE_UP = 33;
openfl.ui.Keyboard.DOM_VK_PAGE_DOWN = 34;
openfl.ui.Keyboard.DOM_VK_END = 35;
openfl.ui.Keyboard.DOM_VK_HOME = 36;
openfl.ui.Keyboard.DOM_VK_LEFT = 37;
openfl.ui.Keyboard.DOM_VK_UP = 38;
openfl.ui.Keyboard.DOM_VK_RIGHT = 39;
openfl.ui.Keyboard.DOM_VK_DOWN = 40;
openfl.ui.Keyboard.DOM_VK_PRINTSCREEN = 44;
openfl.ui.Keyboard.DOM_VK_INSERT = 45;
openfl.ui.Keyboard.DOM_VK_DELETE = 46;
openfl.ui.Keyboard.DOM_VK_0 = 48;
openfl.ui.Keyboard.DOM_VK_1 = 49;
openfl.ui.Keyboard.DOM_VK_2 = 50;
openfl.ui.Keyboard.DOM_VK_3 = 51;
openfl.ui.Keyboard.DOM_VK_4 = 52;
openfl.ui.Keyboard.DOM_VK_5 = 53;
openfl.ui.Keyboard.DOM_VK_6 = 54;
openfl.ui.Keyboard.DOM_VK_7 = 55;
openfl.ui.Keyboard.DOM_VK_8 = 56;
openfl.ui.Keyboard.DOM_VK_9 = 57;
openfl.ui.Keyboard.DOM_VK_SEMICOLON = 59;
openfl.ui.Keyboard.DOM_VK_EQUALS = 61;
openfl.ui.Keyboard.DOM_VK_A = 65;
openfl.ui.Keyboard.DOM_VK_B = 66;
openfl.ui.Keyboard.DOM_VK_C = 67;
openfl.ui.Keyboard.DOM_VK_D = 68;
openfl.ui.Keyboard.DOM_VK_E = 69;
openfl.ui.Keyboard.DOM_VK_F = 70;
openfl.ui.Keyboard.DOM_VK_G = 71;
openfl.ui.Keyboard.DOM_VK_H = 72;
openfl.ui.Keyboard.DOM_VK_I = 73;
openfl.ui.Keyboard.DOM_VK_J = 74;
openfl.ui.Keyboard.DOM_VK_K = 75;
openfl.ui.Keyboard.DOM_VK_L = 76;
openfl.ui.Keyboard.DOM_VK_M = 77;
openfl.ui.Keyboard.DOM_VK_N = 78;
openfl.ui.Keyboard.DOM_VK_O = 79;
openfl.ui.Keyboard.DOM_VK_P = 80;
openfl.ui.Keyboard.DOM_VK_Q = 81;
openfl.ui.Keyboard.DOM_VK_R = 82;
openfl.ui.Keyboard.DOM_VK_S = 83;
openfl.ui.Keyboard.DOM_VK_T = 84;
openfl.ui.Keyboard.DOM_VK_U = 85;
openfl.ui.Keyboard.DOM_VK_V = 86;
openfl.ui.Keyboard.DOM_VK_W = 87;
openfl.ui.Keyboard.DOM_VK_X = 88;
openfl.ui.Keyboard.DOM_VK_Y = 89;
openfl.ui.Keyboard.DOM_VK_Z = 90;
openfl.ui.Keyboard.DOM_VK_CONTEXT_MENU = 93;
openfl.ui.Keyboard.DOM_VK_NUMPAD0 = 96;
openfl.ui.Keyboard.DOM_VK_NUMPAD1 = 97;
openfl.ui.Keyboard.DOM_VK_NUMPAD2 = 98;
openfl.ui.Keyboard.DOM_VK_NUMPAD3 = 99;
openfl.ui.Keyboard.DOM_VK_NUMPAD4 = 100;
openfl.ui.Keyboard.DOM_VK_NUMPAD5 = 101;
openfl.ui.Keyboard.DOM_VK_NUMPAD6 = 102;
openfl.ui.Keyboard.DOM_VK_NUMPAD7 = 103;
openfl.ui.Keyboard.DOM_VK_NUMPAD8 = 104;
openfl.ui.Keyboard.DOM_VK_NUMPAD9 = 105;
openfl.ui.Keyboard.DOM_VK_MULTIPLY = 106;
openfl.ui.Keyboard.DOM_VK_ADD = 107;
openfl.ui.Keyboard.DOM_VK_SEPARATOR = 108;
openfl.ui.Keyboard.DOM_VK_SUBTRACT = 109;
openfl.ui.Keyboard.DOM_VK_DECIMAL = 110;
openfl.ui.Keyboard.DOM_VK_DIVIDE = 111;
openfl.ui.Keyboard.DOM_VK_F1 = 112;
openfl.ui.Keyboard.DOM_VK_F2 = 113;
openfl.ui.Keyboard.DOM_VK_F3 = 114;
openfl.ui.Keyboard.DOM_VK_F4 = 115;
openfl.ui.Keyboard.DOM_VK_F5 = 116;
openfl.ui.Keyboard.DOM_VK_F6 = 117;
openfl.ui.Keyboard.DOM_VK_F7 = 118;
openfl.ui.Keyboard.DOM_VK_F8 = 119;
openfl.ui.Keyboard.DOM_VK_F9 = 120;
openfl.ui.Keyboard.DOM_VK_F10 = 121;
openfl.ui.Keyboard.DOM_VK_F11 = 122;
openfl.ui.Keyboard.DOM_VK_F12 = 123;
openfl.ui.Keyboard.DOM_VK_F13 = 124;
openfl.ui.Keyboard.DOM_VK_F14 = 125;
openfl.ui.Keyboard.DOM_VK_F15 = 126;
openfl.ui.Keyboard.DOM_VK_F16 = 127;
openfl.ui.Keyboard.DOM_VK_F17 = 128;
openfl.ui.Keyboard.DOM_VK_F18 = 129;
openfl.ui.Keyboard.DOM_VK_F19 = 130;
openfl.ui.Keyboard.DOM_VK_F20 = 131;
openfl.ui.Keyboard.DOM_VK_F21 = 132;
openfl.ui.Keyboard.DOM_VK_F22 = 133;
openfl.ui.Keyboard.DOM_VK_F23 = 134;
openfl.ui.Keyboard.DOM_VK_F24 = 135;
openfl.ui.Keyboard.DOM_VK_NUM_LOCK = 144;
openfl.ui.Keyboard.DOM_VK_SCROLL_LOCK = 145;
openfl.ui.Keyboard.DOM_VK_COMMA = 188;
openfl.ui.Keyboard.DOM_VK_PERIOD = 190;
openfl.ui.Keyboard.DOM_VK_SLASH = 191;
openfl.ui.Keyboard.DOM_VK_BACK_QUOTE = 192;
openfl.ui.Keyboard.DOM_VK_OPEN_BRACKET = 219;
openfl.ui.Keyboard.DOM_VK_BACK_SLASH = 220;
openfl.ui.Keyboard.DOM_VK_CLOSE_BRACKET = 221;
openfl.ui.Keyboard.DOM_VK_QUOTE = 222;
openfl.ui.Keyboard.DOM_VK_META = 224;
openfl.ui.Keyboard.DOM_VK_KANA = 21;
openfl.ui.Keyboard.DOM_VK_HANGUL = 21;
openfl.ui.Keyboard.DOM_VK_JUNJA = 23;
openfl.ui.Keyboard.DOM_VK_FINAL = 24;
openfl.ui.Keyboard.DOM_VK_HANJA = 25;
openfl.ui.Keyboard.DOM_VK_KANJI = 25;
openfl.ui.Keyboard.DOM_VK_CONVERT = 28;
openfl.ui.Keyboard.DOM_VK_NONCONVERT = 29;
openfl.ui.Keyboard.DOM_VK_ACEPT = 30;
openfl.ui.Keyboard.DOM_VK_MODECHANGE = 31;
openfl.ui.Keyboard.DOM_VK_SELECT = 41;
openfl.ui.Keyboard.DOM_VK_PRINT = 42;
openfl.ui.Keyboard.DOM_VK_EXECUTE = 43;
openfl.ui.Keyboard.DOM_VK_SLEEP = 95;
ApplicationMain.main();
})(typeof window != "undefined" ? window : exports);

//# sourceMappingURL=Firebase.js.map